window.EmberENV = (function(EmberENV, extra) {
  for (var key in extra) {
    EmberENV[key] = extra[key];
  }

  return EmberENV;
})(window.EmberENV || {}, {"EXTEND_PROTOTYPES":false,"FEATURES":{},"_APPLICATION_TEMPLATE_WRAPPER":false,"_DEFAULT_ASYNC_OBSERVERS":true,"_JQUERY_INTEGRATION":false,"_TEMPLATE_ONLY_GLIMMER_COMPONENTS":true});

// used to determine if the application should be booted immediately when `app-name.js` is evaluated
// when `runningTests` the `app-name.js` file will **not** import the applications `app/app.js` and
// call `Application.create(...)` on it. Additionally, applications can opt-out of this behavior by
// setting `autoRun` to `false` in their `ember-cli-build.js`
//
// The default `test-support.js` file will set this to `true` when it runs (so that Application.create()
// is not ran when running tests).
var runningTests = false;



;var loader, define, requireModule, require, requirejs;

(function (global) {
  'use strict';

  function dict() {
    var obj = Object.create(null);
    obj['__'] = undefined;
    delete obj['__'];
    return obj;
  }

  // Save off the original values of these globals, so we can restore them if someone asks us to
  var oldGlobals = {
    loader: loader,
    define: define,
    requireModule: requireModule,
    require: require,
    requirejs: requirejs
  };

  requirejs = require = requireModule = function (id) {
    var pending = [];
    var mod = findModule(id, '(require)', pending);

    for (var i = pending.length - 1; i >= 0; i--) {
      pending[i].exports();
    }

    return mod.module.exports;
  };

  loader = {
    noConflict: function (aliases) {
      var oldName, newName;

      for (oldName in aliases) {
        if (aliases.hasOwnProperty(oldName)) {
          if (oldGlobals.hasOwnProperty(oldName)) {
            newName = aliases[oldName];

            global[newName] = global[oldName];
            global[oldName] = oldGlobals[oldName];
          }
        }
      }
    },
    // Option to enable or disable the generation of default exports
    makeDefaultExport: true
  };

  var registry = dict();
  var seen = dict();

  var uuid = 0;

  function unsupportedModule(length) {
    throw new Error('an unsupported module was defined, expected `define(id, deps, module)` instead got: `' + length + '` arguments to define`');
  }

  var defaultDeps = ['require', 'exports', 'module'];

  function Module(id, deps, callback, alias) {
    this.uuid = uuid++;
    this.id = id;
    this.deps = !deps.length && callback.length ? defaultDeps : deps;
    this.module = { exports: {} };
    this.callback = callback;
    this.hasExportsAsDep = false;
    this.isAlias = alias;
    this.reified = new Array(deps.length);

    /*
       Each module normally passes through these states, in order:
         new       : initial state
         pending   : this module is scheduled to be executed
         reifying  : this module's dependencies are being executed
         reified   : this module's dependencies finished executing successfully
         errored   : this module's dependencies failed to execute
         finalized : this module executed successfully
     */
    this.state = 'new';
  }

  Module.prototype.makeDefaultExport = function () {
    var exports = this.module.exports;
    if (exports !== null && (typeof exports === 'object' || typeof exports === 'function') && exports['default'] === undefined && Object.isExtensible(exports)) {
      exports['default'] = exports;
    }
  };

  Module.prototype.exports = function () {
    // if finalized, there is no work to do. If reifying, there is a
    // circular dependency so we must return our (partial) exports.
    if (this.state === 'finalized' || this.state === 'reifying') {
      return this.module.exports;
    }


    if (loader.wrapModules) {
      this.callback = loader.wrapModules(this.id, this.callback);
    }

    this.reify();

    var result = this.callback.apply(this, this.reified);
    this.reified.length = 0;
    this.state = 'finalized';

    if (!(this.hasExportsAsDep && result === undefined)) {
      this.module.exports = result;
    }
    if (loader.makeDefaultExport) {
      this.makeDefaultExport();
    }
    return this.module.exports;
  };

  Module.prototype.unsee = function () {
    this.state = 'new';
    this.module = { exports: {} };
  };

  Module.prototype.reify = function () {
    if (this.state === 'reified') {
      return;
    }
    this.state = 'reifying';
    try {
      this.reified = this._reify();
      this.state = 'reified';
    } finally {
      if (this.state === 'reifying') {
        this.state = 'errored';
      }
    }
  };

  Module.prototype._reify = function () {
    var reified = this.reified.slice();
    for (var i = 0; i < reified.length; i++) {
      var mod = reified[i];
      reified[i] = mod.exports ? mod.exports : mod.module.exports();
    }
    return reified;
  };

  Module.prototype.findDeps = function (pending) {
    if (this.state !== 'new') {
      return;
    }

    this.state = 'pending';

    var deps = this.deps;

    for (var i = 0; i < deps.length; i++) {
      var dep = deps[i];
      var entry = this.reified[i] = { exports: undefined, module: undefined };
      if (dep === 'exports') {
        this.hasExportsAsDep = true;
        entry.exports = this.module.exports;
      } else if (dep === 'require') {
        entry.exports = this.makeRequire();
      } else if (dep === 'module') {
        entry.exports = this.module;
      } else {
        entry.module = findModule(resolve(dep, this.id), this.id, pending);
      }
    }
  };

  Module.prototype.makeRequire = function () {
    var id = this.id;
    var r = function (dep) {
      return require(resolve(dep, id));
    };
    r['default'] = r;
    r.moduleId = id;
    r.has = function (dep) {
      return has(resolve(dep, id));
    };
    return r;
  };

  define = function (id, deps, callback) {
    var module = registry[id];

    // If a module for this id has already been defined and is in any state
    // other than `new` (meaning it has been or is currently being required),
    // then we return early to avoid redefinition.
    if (module && module.state !== 'new') {
      return;
    }

    if (arguments.length < 2) {
      unsupportedModule(arguments.length);
    }

    if (!Array.isArray(deps)) {
      callback = deps;
      deps = [];
    }

    if (callback instanceof Alias) {
      registry[id] = new Module(callback.id, deps, callback, true);
    } else {
      registry[id] = new Module(id, deps, callback, false);
    }
  };

  define.exports = function (name, defaultExport) {
    var module = registry[name];

    // If a module for this name has already been defined and is in any state
    // other than `new` (meaning it has been or is currently being required),
    // then we return early to avoid redefinition.
    if (module && module.state !== 'new') {
      return;
    }

    module = new Module(name, [], noop, null);
    module.module.exports = defaultExport;
    module.state = 'finalized';
    registry[name] = module;

    return module;
  };

  function noop() {}
  // we don't support all of AMD
  // define.amd = {};

  function Alias(id) {
    this.id = id;
  }

  define.alias = function (id, target) {
    if (arguments.length === 2) {
      return define(target, new Alias(id));
    }

    return new Alias(id);
  };

  function missingModule(id, referrer) {
    throw new Error('Could not find module `' + id + '` imported from `' + referrer + '`');
  }

  function findModule(id, referrer, pending) {
    var mod = registry[id] || registry[id + '/index'];

    while (mod && mod.isAlias) {
      mod = registry[mod.id] || registry[mod.id + '/index'];
    }

    if (!mod) {
      missingModule(id, referrer);
    }

    if (pending && mod.state !== 'pending' && mod.state !== 'finalized') {
      mod.findDeps(pending);
      pending.push(mod);
    }
    return mod;
  }

  function resolve(child, id) {
    if (child.charAt(0) !== '.') {
      return child;
    }


    var parts = child.split('/');
    var nameParts = id.split('/');
    var parentBase = nameParts.slice(0, -1);

    for (var i = 0, l = parts.length; i < l; i++) {
      var part = parts[i];

      if (part === '..') {
        if (parentBase.length === 0) {
          throw new Error('Cannot access parent module of root');
        }
        parentBase.pop();
      } else if (part === '.') {
        continue;
      } else {
        parentBase.push(part);
      }
    }

    return parentBase.join('/');
  }

  function has(id) {
    return !!(registry[id] || registry[id + '/index']);
  }

  requirejs.entries = requirejs._eak_seen = registry;
  requirejs.has = has;
  requirejs.unsee = function (id) {
    findModule(id, '(unsee)', false).unsee();
  };

  requirejs.clear = function () {
    requirejs.entries = requirejs._eak_seen = registry = dict();
    seen = dict();
  };

  // This code primes the JS engine for good performance by warming the
  // JIT compiler for these functions.
  define('foo', function () {});
  define('foo/bar', [], function () {});
  define('foo/asdf', ['module', 'exports', 'require'], function (module, exports, require) {
    if (require.has('foo/bar')) {
      require('foo/bar');
    }
  });
  define('foo/baz', [], define.alias('foo'));
  define('foo/quz', define.alias('foo'));
  define.alias('foo', 'foo/qux');
  define('foo/bar', ['foo', './quz', './baz', './asdf', './bar', '../foo'], function () {});
  define('foo/main', ['foo/bar'], function () {});
  define.exports('foo/exports', {});

  require('foo/exports');
  require('foo/main');
  require.unsee('foo/bar');

  requirejs.clear();

  if (typeof exports === 'object' && typeof module === 'object' && module.exports) {
    module.exports = { require: require, define: define };
  }
})(this);
;(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(_dereq_,module,exports){
_dereq_(276);
_dereq_(212);
_dereq_(214);
_dereq_(213);
_dereq_(216);
_dereq_(218);
_dereq_(223);
_dereq_(217);
_dereq_(215);
_dereq_(225);
_dereq_(224);
_dereq_(220);
_dereq_(221);
_dereq_(219);
_dereq_(211);
_dereq_(222);
_dereq_(226);
_dereq_(227);
_dereq_(178);
_dereq_(180);
_dereq_(179);
_dereq_(229);
_dereq_(228);
_dereq_(199);
_dereq_(209);
_dereq_(210);
_dereq_(200);
_dereq_(201);
_dereq_(202);
_dereq_(203);
_dereq_(204);
_dereq_(205);
_dereq_(206);
_dereq_(207);
_dereq_(208);
_dereq_(182);
_dereq_(183);
_dereq_(184);
_dereq_(185);
_dereq_(186);
_dereq_(187);
_dereq_(188);
_dereq_(189);
_dereq_(190);
_dereq_(191);
_dereq_(192);
_dereq_(193);
_dereq_(194);
_dereq_(195);
_dereq_(196);
_dereq_(197);
_dereq_(198);
_dereq_(263);
_dereq_(268);
_dereq_(275);
_dereq_(266);
_dereq_(258);
_dereq_(259);
_dereq_(264);
_dereq_(269);
_dereq_(271);
_dereq_(254);
_dereq_(255);
_dereq_(256);
_dereq_(257);
_dereq_(260);
_dereq_(261);
_dereq_(262);
_dereq_(265);
_dereq_(267);
_dereq_(270);
_dereq_(272);
_dereq_(273);
_dereq_(274);
_dereq_(173);
_dereq_(175);
_dereq_(174);
_dereq_(177);
_dereq_(176);
_dereq_(161);
_dereq_(159);
_dereq_(166);
_dereq_(163);
_dereq_(169);
_dereq_(171);
_dereq_(158);
_dereq_(165);
_dereq_(155);
_dereq_(170);
_dereq_(153);
_dereq_(168);
_dereq_(167);
_dereq_(160);
_dereq_(164);
_dereq_(152);
_dereq_(154);
_dereq_(157);
_dereq_(156);
_dereq_(172);
_dereq_(162);
_dereq_(245);
_dereq_(246);
_dereq_(252);
_dereq_(247);
_dereq_(248);
_dereq_(249);
_dereq_(250);
_dereq_(251);
_dereq_(230);
_dereq_(181);
_dereq_(253);
_dereq_(288);
_dereq_(289);
_dereq_(277);
_dereq_(278);
_dereq_(283);
_dereq_(286);
_dereq_(287);
_dereq_(281);
_dereq_(284);
_dereq_(282);
_dereq_(285);
_dereq_(279);
_dereq_(280);
_dereq_(231);
_dereq_(232);
_dereq_(233);
_dereq_(234);
_dereq_(235);
_dereq_(238);
_dereq_(236);
_dereq_(237);
_dereq_(239);
_dereq_(240);
_dereq_(241);
_dereq_(242);
_dereq_(244);
_dereq_(243);
module.exports = _dereq_(50);

},{"152":152,"153":153,"154":154,"155":155,"156":156,"157":157,"158":158,"159":159,"160":160,"161":161,"162":162,"163":163,"164":164,"165":165,"166":166,"167":167,"168":168,"169":169,"170":170,"171":171,"172":172,"173":173,"174":174,"175":175,"176":176,"177":177,"178":178,"179":179,"180":180,"181":181,"182":182,"183":183,"184":184,"185":185,"186":186,"187":187,"188":188,"189":189,"190":190,"191":191,"192":192,"193":193,"194":194,"195":195,"196":196,"197":197,"198":198,"199":199,"200":200,"201":201,"202":202,"203":203,"204":204,"205":205,"206":206,"207":207,"208":208,"209":209,"210":210,"211":211,"212":212,"213":213,"214":214,"215":215,"216":216,"217":217,"218":218,"219":219,"220":220,"221":221,"222":222,"223":223,"224":224,"225":225,"226":226,"227":227,"228":228,"229":229,"230":230,"231":231,"232":232,"233":233,"234":234,"235":235,"236":236,"237":237,"238":238,"239":239,"240":240,"241":241,"242":242,"243":243,"244":244,"245":245,"246":246,"247":247,"248":248,"249":249,"250":250,"251":251,"252":252,"253":253,"254":254,"255":255,"256":256,"257":257,"258":258,"259":259,"260":260,"261":261,"262":262,"263":263,"264":264,"265":265,"266":266,"267":267,"268":268,"269":269,"270":270,"271":271,"272":272,"273":273,"274":274,"275":275,"276":276,"277":277,"278":278,"279":279,"280":280,"281":281,"282":282,"283":283,"284":284,"285":285,"286":286,"287":287,"288":288,"289":289,"50":50}],2:[function(_dereq_,module,exports){
_dereq_(290);
module.exports = _dereq_(50).Array.flatMap;

},{"290":290,"50":50}],3:[function(_dereq_,module,exports){
_dereq_(291);
module.exports = _dereq_(50).Array.includes;

},{"291":291,"50":50}],4:[function(_dereq_,module,exports){
_dereq_(292);
module.exports = _dereq_(50).Object.entries;

},{"292":292,"50":50}],5:[function(_dereq_,module,exports){
_dereq_(293);
module.exports = _dereq_(50).Object.getOwnPropertyDescriptors;

},{"293":293,"50":50}],6:[function(_dereq_,module,exports){
_dereq_(294);
module.exports = _dereq_(50).Object.values;

},{"294":294,"50":50}],7:[function(_dereq_,module,exports){
'use strict';
_dereq_(230);
_dereq_(295);
module.exports = _dereq_(50).Promise['finally'];

},{"230":230,"295":295,"50":50}],8:[function(_dereq_,module,exports){
_dereq_(296);
module.exports = _dereq_(50).String.padEnd;

},{"296":296,"50":50}],9:[function(_dereq_,module,exports){
_dereq_(297);
module.exports = _dereq_(50).String.padStart;

},{"297":297,"50":50}],10:[function(_dereq_,module,exports){
_dereq_(299);
module.exports = _dereq_(50).String.trimRight;

},{"299":299,"50":50}],11:[function(_dereq_,module,exports){
_dereq_(298);
module.exports = _dereq_(50).String.trimLeft;

},{"298":298,"50":50}],12:[function(_dereq_,module,exports){
_dereq_(300);
module.exports = _dereq_(149).f('asyncIterator');

},{"149":149,"300":300}],13:[function(_dereq_,module,exports){
_dereq_(30);
module.exports = _dereq_(16).global;

},{"16":16,"30":30}],14:[function(_dereq_,module,exports){
module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

},{}],15:[function(_dereq_,module,exports){
var isObject = _dereq_(26);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

},{"26":26}],16:[function(_dereq_,module,exports){
var core = module.exports = { version: '2.6.11' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],17:[function(_dereq_,module,exports){
// optional / simple context binding
var aFunction = _dereq_(14);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"14":14}],18:[function(_dereq_,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !_dereq_(21)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

},{"21":21}],19:[function(_dereq_,module,exports){
var isObject = _dereq_(26);
var document = _dereq_(22).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

},{"22":22,"26":26}],20:[function(_dereq_,module,exports){
var global = _dereq_(22);
var core = _dereq_(16);
var ctx = _dereq_(17);
var hide = _dereq_(24);
var has = _dereq_(23);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && has(exports, key)) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"16":16,"17":17,"22":22,"23":23,"24":24}],21:[function(_dereq_,module,exports){
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

},{}],22:[function(_dereq_,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],23:[function(_dereq_,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],24:[function(_dereq_,module,exports){
var dP = _dereq_(27);
var createDesc = _dereq_(28);
module.exports = _dereq_(18) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"18":18,"27":27,"28":28}],25:[function(_dereq_,module,exports){
module.exports = !_dereq_(18) && !_dereq_(21)(function () {
  return Object.defineProperty(_dereq_(19)('div'), 'a', { get: function () { return 7; } }).a != 7;
});

},{"18":18,"19":19,"21":21}],26:[function(_dereq_,module,exports){
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],27:[function(_dereq_,module,exports){
var anObject = _dereq_(15);
var IE8_DOM_DEFINE = _dereq_(25);
var toPrimitive = _dereq_(29);
var dP = Object.defineProperty;

exports.f = _dereq_(18) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"15":15,"18":18,"25":25,"29":29}],28:[function(_dereq_,module,exports){
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],29:[function(_dereq_,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = _dereq_(26);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"26":26}],30:[function(_dereq_,module,exports){
// https://github.com/tc39/proposal-global
var $export = _dereq_(20);

$export($export.G, { global: _dereq_(22) });

},{"20":20,"22":22}],31:[function(_dereq_,module,exports){
arguments[4][14][0].apply(exports,arguments)
},{"14":14}],32:[function(_dereq_,module,exports){
var cof = _dereq_(46);
module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};

},{"46":46}],33:[function(_dereq_,module,exports){
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = _dereq_(150)('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) _dereq_(70)(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

},{"150":150,"70":70}],34:[function(_dereq_,module,exports){
'use strict';
var at = _dereq_(127)(true);

 // `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? at(S, index).length : 1);
};

},{"127":127}],35:[function(_dereq_,module,exports){
module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

},{}],36:[function(_dereq_,module,exports){
arguments[4][15][0].apply(exports,arguments)
},{"15":15,"79":79}],37:[function(_dereq_,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';
var toObject = _dereq_(140);
var toAbsoluteIndex = _dereq_(135);
var toLength = _dereq_(139);

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};

},{"135":135,"139":139,"140":140}],38:[function(_dereq_,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';
var toObject = _dereq_(140);
var toAbsoluteIndex = _dereq_(135);
var toLength = _dereq_(139);
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};

},{"135":135,"139":139,"140":140}],39:[function(_dereq_,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = _dereq_(138);
var toLength = _dereq_(139);
var toAbsoluteIndex = _dereq_(135);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

},{"135":135,"138":138,"139":139}],40:[function(_dereq_,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = _dereq_(52);
var IObject = _dereq_(75);
var toObject = _dereq_(140);
var toLength = _dereq_(139);
var asc = _dereq_(43);
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

},{"139":139,"140":140,"43":43,"52":52,"75":75}],41:[function(_dereq_,module,exports){
var aFunction = _dereq_(31);
var toObject = _dereq_(140);
var IObject = _dereq_(75);
var toLength = _dereq_(139);

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};

},{"139":139,"140":140,"31":31,"75":75}],42:[function(_dereq_,module,exports){
var isObject = _dereq_(79);
var isArray = _dereq_(77);
var SPECIES = _dereq_(150)('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};

},{"150":150,"77":77,"79":79}],43:[function(_dereq_,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = _dereq_(42);

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};

},{"42":42}],44:[function(_dereq_,module,exports){
'use strict';
var aFunction = _dereq_(31);
var isObject = _dereq_(79);
var invoke = _dereq_(74);
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};

},{"31":31,"74":74,"79":79}],45:[function(_dereq_,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = _dereq_(46);
var TAG = _dereq_(150)('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"150":150,"46":46}],46:[function(_dereq_,module,exports){
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],47:[function(_dereq_,module,exports){
'use strict';
var dP = _dereq_(97).f;
var create = _dereq_(96);
var redefineAll = _dereq_(115);
var ctx = _dereq_(52);
var anInstance = _dereq_(35);
var forOf = _dereq_(66);
var $iterDefine = _dereq_(83);
var step = _dereq_(85);
var setSpecies = _dereq_(121);
var DESCRIPTORS = _dereq_(56);
var fastKey = _dereq_(92).fastKey;
var validate = _dereq_(147);
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

},{"115":115,"121":121,"147":147,"35":35,"52":52,"56":56,"66":66,"83":83,"85":85,"92":92,"96":96,"97":97}],48:[function(_dereq_,module,exports){
'use strict';
var redefineAll = _dereq_(115);
var getWeak = _dereq_(92).getWeak;
var anObject = _dereq_(36);
var isObject = _dereq_(79);
var anInstance = _dereq_(35);
var forOf = _dereq_(66);
var createArrayMethod = _dereq_(40);
var $has = _dereq_(69);
var validate = _dereq_(147);
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

},{"115":115,"147":147,"35":35,"36":36,"40":40,"66":66,"69":69,"79":79,"92":92}],49:[function(_dereq_,module,exports){
'use strict';
var global = _dereq_(68);
var $export = _dereq_(60);
var redefine = _dereq_(116);
var redefineAll = _dereq_(115);
var meta = _dereq_(92);
var forOf = _dereq_(66);
var anInstance = _dereq_(35);
var isObject = _dereq_(79);
var fails = _dereq_(62);
var $iterDetect = _dereq_(84);
var setToStringTag = _dereq_(122);
var inheritIfRequired = _dereq_(73);

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};

},{"115":115,"116":116,"122":122,"35":35,"60":60,"62":62,"66":66,"68":68,"73":73,"79":79,"84":84,"92":92}],50:[function(_dereq_,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"16":16}],51:[function(_dereq_,module,exports){
'use strict';
var $defineProperty = _dereq_(97);
var createDesc = _dereq_(114);

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

},{"114":114,"97":97}],52:[function(_dereq_,module,exports){
arguments[4][17][0].apply(exports,arguments)
},{"17":17,"31":31}],53:[function(_dereq_,module,exports){
'use strict';
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var fails = _dereq_(62);
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function (num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
module.exports = (fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;

},{"62":62}],54:[function(_dereq_,module,exports){
'use strict';
var anObject = _dereq_(36);
var toPrimitive = _dereq_(141);
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};

},{"141":141,"36":36}],55:[function(_dereq_,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

},{}],56:[function(_dereq_,module,exports){
arguments[4][18][0].apply(exports,arguments)
},{"18":18,"62":62}],57:[function(_dereq_,module,exports){
arguments[4][19][0].apply(exports,arguments)
},{"19":19,"68":68,"79":79}],58:[function(_dereq_,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

},{}],59:[function(_dereq_,module,exports){
// all enumerable object keys, includes symbols
var getKeys = _dereq_(105);
var gOPS = _dereq_(102);
var pIE = _dereq_(106);
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};

},{"102":102,"105":105,"106":106}],60:[function(_dereq_,module,exports){
var global = _dereq_(68);
var core = _dereq_(50);
var hide = _dereq_(70);
var redefine = _dereq_(116);
var ctx = _dereq_(52);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"116":116,"50":50,"52":52,"68":68,"70":70}],61:[function(_dereq_,module,exports){
var MATCH = _dereq_(150)('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};

},{"150":150}],62:[function(_dereq_,module,exports){
arguments[4][21][0].apply(exports,arguments)
},{"21":21}],63:[function(_dereq_,module,exports){
'use strict';
_dereq_(246);
var redefine = _dereq_(116);
var hide = _dereq_(70);
var fails = _dereq_(62);
var defined = _dereq_(55);
var wks = _dereq_(150);
var regexpExec = _dereq_(118);

var SPECIES = wks('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {
  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
})();

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;
    re.exec = function () { execCalled = true; return null; };
    if (KEY === 'split') {
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
    }
    re[SYMBOL]('');
    return !execCalled;
  }) : undefined;

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var fns = exec(
      defined,
      SYMBOL,
      ''[KEY],
      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
        if (regexp.exec === regexpExec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
          }
          return { done: true, value: nativeMethod.call(str, regexp, arg2) };
        }
        return { done: false };
      }
    );
    var strfn = fns[0];
    var rxfn = fns[1];

    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};

},{"116":116,"118":118,"150":150,"246":246,"55":55,"62":62,"70":70}],64:[function(_dereq_,module,exports){
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = _dereq_(36);
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

},{"36":36}],65:[function(_dereq_,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var isArray = _dereq_(77);
var isObject = _dereq_(79);
var toLength = _dereq_(139);
var ctx = _dereq_(52);
var IS_CONCAT_SPREADABLE = _dereq_(150)('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

module.exports = flattenIntoArray;

},{"139":139,"150":150,"52":52,"77":77,"79":79}],66:[function(_dereq_,module,exports){
var ctx = _dereq_(52);
var call = _dereq_(81);
var isArrayIter = _dereq_(76);
var anObject = _dereq_(36);
var toLength = _dereq_(139);
var getIterFn = _dereq_(151);
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;

},{"139":139,"151":151,"36":36,"52":52,"76":76,"81":81}],67:[function(_dereq_,module,exports){
module.exports = _dereq_(124)('native-function-to-string', Function.toString);

},{"124":124}],68:[function(_dereq_,module,exports){
arguments[4][22][0].apply(exports,arguments)
},{"22":22}],69:[function(_dereq_,module,exports){
arguments[4][23][0].apply(exports,arguments)
},{"23":23}],70:[function(_dereq_,module,exports){
arguments[4][24][0].apply(exports,arguments)
},{"114":114,"24":24,"56":56,"97":97}],71:[function(_dereq_,module,exports){
var document = _dereq_(68).document;
module.exports = document && document.documentElement;

},{"68":68}],72:[function(_dereq_,module,exports){
arguments[4][25][0].apply(exports,arguments)
},{"25":25,"56":56,"57":57,"62":62}],73:[function(_dereq_,module,exports){
var isObject = _dereq_(79);
var setPrototypeOf = _dereq_(120).set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};

},{"120":120,"79":79}],74:[function(_dereq_,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};

},{}],75:[function(_dereq_,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = _dereq_(46);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"46":46}],76:[function(_dereq_,module,exports){
// check on default Array iterator
var Iterators = _dereq_(86);
var ITERATOR = _dereq_(150)('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

},{"150":150,"86":86}],77:[function(_dereq_,module,exports){
// 7.2.2 IsArray(argument)
var cof = _dereq_(46);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

},{"46":46}],78:[function(_dereq_,module,exports){
// 20.1.2.3 Number.isInteger(number)
var isObject = _dereq_(79);
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

},{"79":79}],79:[function(_dereq_,module,exports){
arguments[4][26][0].apply(exports,arguments)
},{"26":26}],80:[function(_dereq_,module,exports){
// 7.2.8 IsRegExp(argument)
var isObject = _dereq_(79);
var cof = _dereq_(46);
var MATCH = _dereq_(150)('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};

},{"150":150,"46":46,"79":79}],81:[function(_dereq_,module,exports){
// call something on iterator step with safe closing on error
var anObject = _dereq_(36);
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

},{"36":36}],82:[function(_dereq_,module,exports){
'use strict';
var create = _dereq_(96);
var descriptor = _dereq_(114);
var setToStringTag = _dereq_(122);
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
_dereq_(70)(IteratorPrototype, _dereq_(150)('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

},{"114":114,"122":122,"150":150,"70":70,"96":96}],83:[function(_dereq_,module,exports){
'use strict';
var LIBRARY = _dereq_(87);
var $export = _dereq_(60);
var redefine = _dereq_(116);
var hide = _dereq_(70);
var Iterators = _dereq_(86);
var $iterCreate = _dereq_(82);
var setToStringTag = _dereq_(122);
var getPrototypeOf = _dereq_(103);
var ITERATOR = _dereq_(150)('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

},{"103":103,"116":116,"122":122,"150":150,"60":60,"70":70,"82":82,"86":86,"87":87}],84:[function(_dereq_,module,exports){
var ITERATOR = _dereq_(150)('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};

},{"150":150}],85:[function(_dereq_,module,exports){
module.exports = function (done, value) {
  return { value: value, done: !!done };
};

},{}],86:[function(_dereq_,module,exports){
module.exports = {};

},{}],87:[function(_dereq_,module,exports){
module.exports = false;

},{}],88:[function(_dereq_,module,exports){
// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

},{}],89:[function(_dereq_,module,exports){
// 20.2.2.16 Math.fround(x)
var sign = _dereq_(91);
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};

},{"91":91}],90:[function(_dereq_,module,exports){
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};

},{}],91:[function(_dereq_,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

},{}],92:[function(_dereq_,module,exports){
var META = _dereq_(145)('meta');
var isObject = _dereq_(79);
var has = _dereq_(69);
var setDesc = _dereq_(97).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !_dereq_(62)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

},{"145":145,"62":62,"69":69,"79":79,"97":97}],93:[function(_dereq_,module,exports){
var global = _dereq_(68);
var macrotask = _dereq_(134).set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = _dereq_(46)(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};

},{"134":134,"46":46,"68":68}],94:[function(_dereq_,module,exports){
'use strict';
// 25.4.1.5 NewPromiseCapability(C)
var aFunction = _dereq_(31);

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"31":31}],95:[function(_dereq_,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var DESCRIPTORS = _dereq_(56);
var getKeys = _dereq_(105);
var gOPS = _dereq_(102);
var pIE = _dereq_(106);
var toObject = _dereq_(140);
var IObject = _dereq_(75);
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || _dereq_(62)(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;

},{"102":102,"105":105,"106":106,"140":140,"56":56,"62":62,"75":75}],96:[function(_dereq_,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = _dereq_(36);
var dPs = _dereq_(98);
var enumBugKeys = _dereq_(58);
var IE_PROTO = _dereq_(123)('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = _dereq_(57)('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  _dereq_(71).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"123":123,"36":36,"57":57,"58":58,"71":71,"98":98}],97:[function(_dereq_,module,exports){
arguments[4][27][0].apply(exports,arguments)
},{"141":141,"27":27,"36":36,"56":56,"72":72}],98:[function(_dereq_,module,exports){
var dP = _dereq_(97);
var anObject = _dereq_(36);
var getKeys = _dereq_(105);

module.exports = _dereq_(56) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

},{"105":105,"36":36,"56":56,"97":97}],99:[function(_dereq_,module,exports){
var pIE = _dereq_(106);
var createDesc = _dereq_(114);
var toIObject = _dereq_(138);
var toPrimitive = _dereq_(141);
var has = _dereq_(69);
var IE8_DOM_DEFINE = _dereq_(72);
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = _dereq_(56) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

},{"106":106,"114":114,"138":138,"141":141,"56":56,"69":69,"72":72}],100:[function(_dereq_,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = _dereq_(138);
var gOPN = _dereq_(101).f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"101":101,"138":138}],101:[function(_dereq_,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = _dereq_(104);
var hiddenKeys = _dereq_(58).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

},{"104":104,"58":58}],102:[function(_dereq_,module,exports){
exports.f = Object.getOwnPropertySymbols;

},{}],103:[function(_dereq_,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = _dereq_(69);
var toObject = _dereq_(140);
var IE_PROTO = _dereq_(123)('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

},{"123":123,"140":140,"69":69}],104:[function(_dereq_,module,exports){
var has = _dereq_(69);
var toIObject = _dereq_(138);
var arrayIndexOf = _dereq_(39)(false);
var IE_PROTO = _dereq_(123)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"123":123,"138":138,"39":39,"69":69}],105:[function(_dereq_,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = _dereq_(104);
var enumBugKeys = _dereq_(58);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

},{"104":104,"58":58}],106:[function(_dereq_,module,exports){
exports.f = {}.propertyIsEnumerable;

},{}],107:[function(_dereq_,module,exports){
// most Object methods by ES6 should accept primitives
var $export = _dereq_(60);
var core = _dereq_(50);
var fails = _dereq_(62);
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};

},{"50":50,"60":60,"62":62}],108:[function(_dereq_,module,exports){
var DESCRIPTORS = _dereq_(56);
var getKeys = _dereq_(105);
var toIObject = _dereq_(138);
var isEnum = _dereq_(106).f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) {
      key = keys[i++];
      if (!DESCRIPTORS || isEnum.call(O, key)) {
        result.push(isEntries ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};

},{"105":105,"106":106,"138":138,"56":56}],109:[function(_dereq_,module,exports){
// all object keys, includes non-enumerable and symbols
var gOPN = _dereq_(101);
var gOPS = _dereq_(102);
var anObject = _dereq_(36);
var Reflect = _dereq_(68).Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};

},{"101":101,"102":102,"36":36,"68":68}],110:[function(_dereq_,module,exports){
var $parseFloat = _dereq_(68).parseFloat;
var $trim = _dereq_(132).trim;

module.exports = 1 / $parseFloat(_dereq_(133) + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;

},{"132":132,"133":133,"68":68}],111:[function(_dereq_,module,exports){
var $parseInt = _dereq_(68).parseInt;
var $trim = _dereq_(132).trim;
var ws = _dereq_(133);
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;

},{"132":132,"133":133,"68":68}],112:[function(_dereq_,module,exports){
module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

},{}],113:[function(_dereq_,module,exports){
var anObject = _dereq_(36);
var isObject = _dereq_(79);
var newPromiseCapability = _dereq_(94);

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"36":36,"79":79,"94":94}],114:[function(_dereq_,module,exports){
arguments[4][28][0].apply(exports,arguments)
},{"28":28}],115:[function(_dereq_,module,exports){
var redefine = _dereq_(116);
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};

},{"116":116}],116:[function(_dereq_,module,exports){
var global = _dereq_(68);
var hide = _dereq_(70);
var has = _dereq_(69);
var SRC = _dereq_(145)('src');
var $toString = _dereq_(67);
var TO_STRING = 'toString';
var TPL = ('' + $toString).split(TO_STRING);

_dereq_(50).inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

},{"145":145,"50":50,"67":67,"68":68,"69":69,"70":70}],117:[function(_dereq_,module,exports){
'use strict';

var classof = _dereq_(45);
var builtinExec = RegExp.prototype.exec;

 // `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw new TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }
  if (classof(R) !== 'RegExp') {
    throw new TypeError('RegExp#exec called on incompatible receiver');
  }
  return builtinExec.call(R, S);
};

},{"45":45}],118:[function(_dereq_,module,exports){
'use strict';

var regexpFlags = _dereq_(64);

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var LAST_INDEX = 'lastIndex';

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/,
      re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
})();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

    match = nativeExec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      // eslint-disable-next-line no-loop-func
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;

},{"64":64}],119:[function(_dereq_,module,exports){
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

},{}],120:[function(_dereq_,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = _dereq_(79);
var anObject = _dereq_(36);
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = _dereq_(52)(Function.call, _dereq_(99).f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

},{"36":36,"52":52,"79":79,"99":99}],121:[function(_dereq_,module,exports){
'use strict';
var global = _dereq_(68);
var dP = _dereq_(97);
var DESCRIPTORS = _dereq_(56);
var SPECIES = _dereq_(150)('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};

},{"150":150,"56":56,"68":68,"97":97}],122:[function(_dereq_,module,exports){
var def = _dereq_(97).f;
var has = _dereq_(69);
var TAG = _dereq_(150)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

},{"150":150,"69":69,"97":97}],123:[function(_dereq_,module,exports){
var shared = _dereq_(124)('keys');
var uid = _dereq_(145);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"124":124,"145":145}],124:[function(_dereq_,module,exports){
var core = _dereq_(50);
var global = _dereq_(68);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: _dereq_(87) ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});

},{"50":50,"68":68,"87":87}],125:[function(_dereq_,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = _dereq_(36);
var aFunction = _dereq_(31);
var SPECIES = _dereq_(150)('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

},{"150":150,"31":31,"36":36}],126:[function(_dereq_,module,exports){
'use strict';
var fails = _dereq_(62);

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};

},{"62":62}],127:[function(_dereq_,module,exports){
var toInteger = _dereq_(137);
var defined = _dereq_(55);
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

},{"137":137,"55":55}],128:[function(_dereq_,module,exports){
// helper for String#{startsWith, endsWith, includes}
var isRegExp = _dereq_(80);
var defined = _dereq_(55);

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};

},{"55":55,"80":80}],129:[function(_dereq_,module,exports){
var $export = _dereq_(60);
var fails = _dereq_(62);
var defined = _dereq_(55);
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};

},{"55":55,"60":60,"62":62}],130:[function(_dereq_,module,exports){
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = _dereq_(139);
var repeat = _dereq_(131);
var defined = _dereq_(55);

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

},{"131":131,"139":139,"55":55}],131:[function(_dereq_,module,exports){
'use strict';
var toInteger = _dereq_(137);
var defined = _dereq_(55);

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};

},{"137":137,"55":55}],132:[function(_dereq_,module,exports){
var $export = _dereq_(60);
var defined = _dereq_(55);
var fails = _dereq_(62);
var spaces = _dereq_(133);
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;

},{"133":133,"55":55,"60":60,"62":62}],133:[function(_dereq_,module,exports){
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

},{}],134:[function(_dereq_,module,exports){
var ctx = _dereq_(52);
var invoke = _dereq_(74);
var html = _dereq_(71);
var cel = _dereq_(57);
var global = _dereq_(68);
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (_dereq_(46)(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};

},{"46":46,"52":52,"57":57,"68":68,"71":71,"74":74}],135:[function(_dereq_,module,exports){
var toInteger = _dereq_(137);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"137":137}],136:[function(_dereq_,module,exports){
// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = _dereq_(137);
var toLength = _dereq_(139);
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};

},{"137":137,"139":139}],137:[function(_dereq_,module,exports){
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],138:[function(_dereq_,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = _dereq_(75);
var defined = _dereq_(55);
module.exports = function (it) {
  return IObject(defined(it));
};

},{"55":55,"75":75}],139:[function(_dereq_,module,exports){
// 7.1.15 ToLength
var toInteger = _dereq_(137);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"137":137}],140:[function(_dereq_,module,exports){
// 7.1.13 ToObject(argument)
var defined = _dereq_(55);
module.exports = function (it) {
  return Object(defined(it));
};

},{"55":55}],141:[function(_dereq_,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"29":29,"79":79}],142:[function(_dereq_,module,exports){
'use strict';
if (_dereq_(56)) {
  var LIBRARY = _dereq_(87);
  var global = _dereq_(68);
  var fails = _dereq_(62);
  var $export = _dereq_(60);
  var $typed = _dereq_(144);
  var $buffer = _dereq_(143);
  var ctx = _dereq_(52);
  var anInstance = _dereq_(35);
  var propertyDesc = _dereq_(114);
  var hide = _dereq_(70);
  var redefineAll = _dereq_(115);
  var toInteger = _dereq_(137);
  var toLength = _dereq_(139);
  var toIndex = _dereq_(136);
  var toAbsoluteIndex = _dereq_(135);
  var toPrimitive = _dereq_(141);
  var has = _dereq_(69);
  var classof = _dereq_(45);
  var isObject = _dereq_(79);
  var toObject = _dereq_(140);
  var isArrayIter = _dereq_(76);
  var create = _dereq_(96);
  var getPrototypeOf = _dereq_(103);
  var gOPN = _dereq_(101).f;
  var getIterFn = _dereq_(151);
  var uid = _dereq_(145);
  var wks = _dereq_(150);
  var createArrayMethod = _dereq_(40);
  var createArrayIncludes = _dereq_(39);
  var speciesConstructor = _dereq_(125);
  var ArrayIterators = _dereq_(162);
  var Iterators = _dereq_(86);
  var $iterDetect = _dereq_(84);
  var setSpecies = _dereq_(121);
  var arrayFill = _dereq_(38);
  var arrayCopyWithin = _dereq_(37);
  var $DP = _dereq_(97);
  var $GOPD = _dereq_(99);
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };

},{"101":101,"103":103,"114":114,"115":115,"121":121,"125":125,"135":135,"136":136,"137":137,"139":139,"140":140,"141":141,"143":143,"144":144,"145":145,"150":150,"151":151,"162":162,"35":35,"37":37,"38":38,"39":39,"40":40,"45":45,"52":52,"56":56,"60":60,"62":62,"68":68,"69":69,"70":70,"76":76,"79":79,"84":84,"86":86,"87":87,"96":96,"97":97,"99":99}],143:[function(_dereq_,module,exports){
'use strict';
var global = _dereq_(68);
var DESCRIPTORS = _dereq_(56);
var LIBRARY = _dereq_(87);
var $typed = _dereq_(144);
var hide = _dereq_(70);
var redefineAll = _dereq_(115);
var fails = _dereq_(62);
var anInstance = _dereq_(35);
var toInteger = _dereq_(137);
var toLength = _dereq_(139);
var toIndex = _dereq_(136);
var gOPN = _dereq_(101).f;
var dP = _dereq_(97).f;
var arrayFill = _dereq_(38);
var setToStringTag = _dereq_(122);
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;

},{"101":101,"115":115,"122":122,"136":136,"137":137,"139":139,"144":144,"35":35,"38":38,"56":56,"62":62,"68":68,"70":70,"87":87,"97":97}],144:[function(_dereq_,module,exports){
var global = _dereq_(68);
var hide = _dereq_(70);
var uid = _dereq_(145);
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};

},{"145":145,"68":68,"70":70}],145:[function(_dereq_,module,exports){
var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],146:[function(_dereq_,module,exports){
var global = _dereq_(68);
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';

},{"68":68}],147:[function(_dereq_,module,exports){
var isObject = _dereq_(79);
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

},{"79":79}],148:[function(_dereq_,module,exports){
var global = _dereq_(68);
var core = _dereq_(50);
var LIBRARY = _dereq_(87);
var wksExt = _dereq_(149);
var defineProperty = _dereq_(97).f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};

},{"149":149,"50":50,"68":68,"87":87,"97":97}],149:[function(_dereq_,module,exports){
exports.f = _dereq_(150);

},{"150":150}],150:[function(_dereq_,module,exports){
var store = _dereq_(124)('wks');
var uid = _dereq_(145);
var Symbol = _dereq_(68).Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

},{"124":124,"145":145,"68":68}],151:[function(_dereq_,module,exports){
var classof = _dereq_(45);
var ITERATOR = _dereq_(150)('iterator');
var Iterators = _dereq_(86);
module.exports = _dereq_(50).getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"150":150,"45":45,"50":50,"86":86}],152:[function(_dereq_,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = _dereq_(60);

$export($export.P, 'Array', { copyWithin: _dereq_(37) });

_dereq_(33)('copyWithin');

},{"33":33,"37":37,"60":60}],153:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(60);
var $every = _dereq_(40)(4);

$export($export.P + $export.F * !_dereq_(126)([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});

},{"126":126,"40":40,"60":60}],154:[function(_dereq_,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = _dereq_(60);

$export($export.P, 'Array', { fill: _dereq_(38) });

_dereq_(33)('fill');

},{"33":33,"38":38,"60":60}],155:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(60);
var $filter = _dereq_(40)(2);

$export($export.P + $export.F * !_dereq_(126)([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});

},{"126":126,"40":40,"60":60}],156:[function(_dereq_,module,exports){
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = _dereq_(60);
var $find = _dereq_(40)(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
_dereq_(33)(KEY);

},{"33":33,"40":40,"60":60}],157:[function(_dereq_,module,exports){
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = _dereq_(60);
var $find = _dereq_(40)(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
_dereq_(33)(KEY);

},{"33":33,"40":40,"60":60}],158:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(60);
var $forEach = _dereq_(40)(0);
var STRICT = _dereq_(126)([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});

},{"126":126,"40":40,"60":60}],159:[function(_dereq_,module,exports){
'use strict';
var ctx = _dereq_(52);
var $export = _dereq_(60);
var toObject = _dereq_(140);
var call = _dereq_(81);
var isArrayIter = _dereq_(76);
var toLength = _dereq_(139);
var createProperty = _dereq_(51);
var getIterFn = _dereq_(151);

$export($export.S + $export.F * !_dereq_(84)(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"139":139,"140":140,"151":151,"51":51,"52":52,"60":60,"76":76,"81":81,"84":84}],160:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(60);
var $indexOf = _dereq_(39)(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !_dereq_(126)($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});

},{"126":126,"39":39,"60":60}],161:[function(_dereq_,module,exports){
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = _dereq_(60);

$export($export.S, 'Array', { isArray: _dereq_(77) });

},{"60":60,"77":77}],162:[function(_dereq_,module,exports){
'use strict';
var addToUnscopables = _dereq_(33);
var step = _dereq_(85);
var Iterators = _dereq_(86);
var toIObject = _dereq_(138);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = _dereq_(83)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"138":138,"33":33,"83":83,"85":85,"86":86}],163:[function(_dereq_,module,exports){
'use strict';
// 22.1.3.13 Array.prototype.join(separator)
var $export = _dereq_(60);
var toIObject = _dereq_(138);
var arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (_dereq_(75) != Object || !_dereq_(126)(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});

},{"126":126,"138":138,"60":60,"75":75}],164:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(60);
var toIObject = _dereq_(138);
var toInteger = _dereq_(137);
var toLength = _dereq_(139);
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !_dereq_(126)($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});

},{"126":126,"137":137,"138":138,"139":139,"60":60}],165:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(60);
var $map = _dereq_(40)(1);

$export($export.P + $export.F * !_dereq_(126)([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});

},{"126":126,"40":40,"60":60}],166:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(60);
var createProperty = _dereq_(51);

// WebKit Array.of isn't generic
$export($export.S + $export.F * _dereq_(62)(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});

},{"51":51,"60":60,"62":62}],167:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(60);
var $reduce = _dereq_(41);

$export($export.P + $export.F * !_dereq_(126)([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});

},{"126":126,"41":41,"60":60}],168:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(60);
var $reduce = _dereq_(41);

$export($export.P + $export.F * !_dereq_(126)([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});

},{"126":126,"41":41,"60":60}],169:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(60);
var html = _dereq_(71);
var cof = _dereq_(46);
var toAbsoluteIndex = _dereq_(135);
var toLength = _dereq_(139);
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * _dereq_(62)(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});

},{"135":135,"139":139,"46":46,"60":60,"62":62,"71":71}],170:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(60);
var $some = _dereq_(40)(3);

$export($export.P + $export.F * !_dereq_(126)([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});

},{"126":126,"40":40,"60":60}],171:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(60);
var aFunction = _dereq_(31);
var toObject = _dereq_(140);
var fails = _dereq_(62);
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !_dereq_(126)($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});

},{"126":126,"140":140,"31":31,"60":60,"62":62}],172:[function(_dereq_,module,exports){
_dereq_(121)('Array');

},{"121":121}],173:[function(_dereq_,module,exports){
// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = _dereq_(60);

$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });

},{"60":60}],174:[function(_dereq_,module,exports){
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = _dereq_(60);
var toISOString = _dereq_(53);

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});

},{"53":53,"60":60}],175:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(60);
var toObject = _dereq_(140);
var toPrimitive = _dereq_(141);

$export($export.P + $export.F * _dereq_(62)(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

},{"140":140,"141":141,"60":60,"62":62}],176:[function(_dereq_,module,exports){
var TO_PRIMITIVE = _dereq_(150)('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) _dereq_(70)(proto, TO_PRIMITIVE, _dereq_(54));

},{"150":150,"54":54,"70":70}],177:[function(_dereq_,module,exports){
var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  _dereq_(116)(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}

},{"116":116}],178:[function(_dereq_,module,exports){
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = _dereq_(60);

$export($export.P, 'Function', { bind: _dereq_(44) });

},{"44":44,"60":60}],179:[function(_dereq_,module,exports){
'use strict';
var isObject = _dereq_(79);
var getPrototypeOf = _dereq_(103);
var HAS_INSTANCE = _dereq_(150)('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) _dereq_(97).f(FunctionProto, HAS_INSTANCE, { value: function (O) {
  if (typeof this != 'function' || !isObject(O)) return false;
  if (!isObject(this.prototype)) return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
  return false;
} });

},{"103":103,"150":150,"79":79,"97":97}],180:[function(_dereq_,module,exports){
var dP = _dereq_(97).f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || _dereq_(56) && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});

},{"56":56,"97":97}],181:[function(_dereq_,module,exports){
'use strict';
var strong = _dereq_(47);
var validate = _dereq_(147);
var MAP = 'Map';

// 23.1 Map Objects
module.exports = _dereq_(49)(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);

},{"147":147,"47":47,"49":49}],182:[function(_dereq_,module,exports){
// 20.2.2.3 Math.acosh(x)
var $export = _dereq_(60);
var log1p = _dereq_(90);
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

},{"60":60,"90":90}],183:[function(_dereq_,module,exports){
// 20.2.2.5 Math.asinh(x)
var $export = _dereq_(60);
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });

},{"60":60}],184:[function(_dereq_,module,exports){
// 20.2.2.7 Math.atanh(x)
var $export = _dereq_(60);
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});

},{"60":60}],185:[function(_dereq_,module,exports){
// 20.2.2.9 Math.cbrt(x)
var $export = _dereq_(60);
var sign = _dereq_(91);

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});

},{"60":60,"91":91}],186:[function(_dereq_,module,exports){
// 20.2.2.11 Math.clz32(x)
var $export = _dereq_(60);

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});

},{"60":60}],187:[function(_dereq_,module,exports){
// 20.2.2.12 Math.cosh(x)
var $export = _dereq_(60);
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});

},{"60":60}],188:[function(_dereq_,module,exports){
// 20.2.2.14 Math.expm1(x)
var $export = _dereq_(60);
var $expm1 = _dereq_(88);

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });

},{"60":60,"88":88}],189:[function(_dereq_,module,exports){
// 20.2.2.16 Math.fround(x)
var $export = _dereq_(60);

$export($export.S, 'Math', { fround: _dereq_(89) });

},{"60":60,"89":89}],190:[function(_dereq_,module,exports){
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = _dereq_(60);
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});

},{"60":60}],191:[function(_dereq_,module,exports){
// 20.2.2.18 Math.imul(x, y)
var $export = _dereq_(60);
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * _dereq_(62)(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

},{"60":60,"62":62}],192:[function(_dereq_,module,exports){
// 20.2.2.21 Math.log10(x)
var $export = _dereq_(60);

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});

},{"60":60}],193:[function(_dereq_,module,exports){
// 20.2.2.20 Math.log1p(x)
var $export = _dereq_(60);

$export($export.S, 'Math', { log1p: _dereq_(90) });

},{"60":60,"90":90}],194:[function(_dereq_,module,exports){
// 20.2.2.22 Math.log2(x)
var $export = _dereq_(60);

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});

},{"60":60}],195:[function(_dereq_,module,exports){
// 20.2.2.28 Math.sign(x)
var $export = _dereq_(60);

$export($export.S, 'Math', { sign: _dereq_(91) });

},{"60":60,"91":91}],196:[function(_dereq_,module,exports){
// 20.2.2.30 Math.sinh(x)
var $export = _dereq_(60);
var expm1 = _dereq_(88);
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * _dereq_(62)(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});

},{"60":60,"62":62,"88":88}],197:[function(_dereq_,module,exports){
// 20.2.2.33 Math.tanh(x)
var $export = _dereq_(60);
var expm1 = _dereq_(88);
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});

},{"60":60,"88":88}],198:[function(_dereq_,module,exports){
// 20.2.2.34 Math.trunc(x)
var $export = _dereq_(60);

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});

},{"60":60}],199:[function(_dereq_,module,exports){
'use strict';
var global = _dereq_(68);
var has = _dereq_(69);
var cof = _dereq_(46);
var inheritIfRequired = _dereq_(73);
var toPrimitive = _dereq_(141);
var fails = _dereq_(62);
var gOPN = _dereq_(101).f;
var gOPD = _dereq_(99).f;
var dP = _dereq_(97).f;
var $trim = _dereq_(132).trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(_dereq_(96)(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = _dereq_(56) ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  _dereq_(116)(global, NUMBER, $Number);
}

},{"101":101,"116":116,"132":132,"141":141,"46":46,"56":56,"62":62,"68":68,"69":69,"73":73,"96":96,"97":97,"99":99}],200:[function(_dereq_,module,exports){
// 20.1.2.1 Number.EPSILON
var $export = _dereq_(60);

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });

},{"60":60}],201:[function(_dereq_,module,exports){
// 20.1.2.2 Number.isFinite(number)
var $export = _dereq_(60);
var _isFinite = _dereq_(68).isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});

},{"60":60,"68":68}],202:[function(_dereq_,module,exports){
// 20.1.2.3 Number.isInteger(number)
var $export = _dereq_(60);

$export($export.S, 'Number', { isInteger: _dereq_(78) });

},{"60":60,"78":78}],203:[function(_dereq_,module,exports){
// 20.1.2.4 Number.isNaN(number)
var $export = _dereq_(60);

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});

},{"60":60}],204:[function(_dereq_,module,exports){
// 20.1.2.5 Number.isSafeInteger(number)
var $export = _dereq_(60);
var isInteger = _dereq_(78);
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});

},{"60":60,"78":78}],205:[function(_dereq_,module,exports){
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = _dereq_(60);

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });

},{"60":60}],206:[function(_dereq_,module,exports){
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = _dereq_(60);

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });

},{"60":60}],207:[function(_dereq_,module,exports){
var $export = _dereq_(60);
var $parseFloat = _dereq_(110);
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });

},{"110":110,"60":60}],208:[function(_dereq_,module,exports){
var $export = _dereq_(60);
var $parseInt = _dereq_(111);
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });

},{"111":111,"60":60}],209:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(60);
var toInteger = _dereq_(137);
var aNumberValue = _dereq_(32);
var repeat = _dereq_(131);
var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function (n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function (n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function () {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !_dereq_(62)(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});

},{"131":131,"137":137,"32":32,"60":60,"62":62}],210:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(60);
var $fails = _dereq_(62);
var aNumberValue = _dereq_(32);
var $toPrecision = 1.0.toPrecision;

$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});

},{"32":32,"60":60,"62":62}],211:[function(_dereq_,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = _dereq_(60);

$export($export.S + $export.F, 'Object', { assign: _dereq_(95) });

},{"60":60,"95":95}],212:[function(_dereq_,module,exports){
var $export = _dereq_(60);
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: _dereq_(96) });

},{"60":60,"96":96}],213:[function(_dereq_,module,exports){
var $export = _dereq_(60);
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !_dereq_(56), 'Object', { defineProperties: _dereq_(98) });

},{"56":56,"60":60,"98":98}],214:[function(_dereq_,module,exports){
var $export = _dereq_(60);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !_dereq_(56), 'Object', { defineProperty: _dereq_(97).f });

},{"56":56,"60":60,"97":97}],215:[function(_dereq_,module,exports){
// 19.1.2.5 Object.freeze(O)
var isObject = _dereq_(79);
var meta = _dereq_(92).onFreeze;

_dereq_(107)('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});

},{"107":107,"79":79,"92":92}],216:[function(_dereq_,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = _dereq_(138);
var $getOwnPropertyDescriptor = _dereq_(99).f;

_dereq_(107)('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

},{"107":107,"138":138,"99":99}],217:[function(_dereq_,module,exports){
// 19.1.2.7 Object.getOwnPropertyNames(O)
_dereq_(107)('getOwnPropertyNames', function () {
  return _dereq_(100).f;
});

},{"100":100,"107":107}],218:[function(_dereq_,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = _dereq_(140);
var $getPrototypeOf = _dereq_(103);

_dereq_(107)('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});

},{"103":103,"107":107,"140":140}],219:[function(_dereq_,module,exports){
// 19.1.2.11 Object.isExtensible(O)
var isObject = _dereq_(79);

_dereq_(107)('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});

},{"107":107,"79":79}],220:[function(_dereq_,module,exports){
// 19.1.2.12 Object.isFrozen(O)
var isObject = _dereq_(79);

_dereq_(107)('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});

},{"107":107,"79":79}],221:[function(_dereq_,module,exports){
// 19.1.2.13 Object.isSealed(O)
var isObject = _dereq_(79);

_dereq_(107)('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});

},{"107":107,"79":79}],222:[function(_dereq_,module,exports){
// 19.1.3.10 Object.is(value1, value2)
var $export = _dereq_(60);
$export($export.S, 'Object', { is: _dereq_(119) });

},{"119":119,"60":60}],223:[function(_dereq_,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = _dereq_(140);
var $keys = _dereq_(105);

_dereq_(107)('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});

},{"105":105,"107":107,"140":140}],224:[function(_dereq_,module,exports){
// 19.1.2.15 Object.preventExtensions(O)
var isObject = _dereq_(79);
var meta = _dereq_(92).onFreeze;

_dereq_(107)('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});

},{"107":107,"79":79,"92":92}],225:[function(_dereq_,module,exports){
// 19.1.2.17 Object.seal(O)
var isObject = _dereq_(79);
var meta = _dereq_(92).onFreeze;

_dereq_(107)('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});

},{"107":107,"79":79,"92":92}],226:[function(_dereq_,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = _dereq_(60);
$export($export.S, 'Object', { setPrototypeOf: _dereq_(120).set });

},{"120":120,"60":60}],227:[function(_dereq_,module,exports){
'use strict';
// 19.1.3.6 Object.prototype.toString()
var classof = _dereq_(45);
var test = {};
test[_dereq_(150)('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  _dereq_(116)(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}

},{"116":116,"150":150,"45":45}],228:[function(_dereq_,module,exports){
var $export = _dereq_(60);
var $parseFloat = _dereq_(110);
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });

},{"110":110,"60":60}],229:[function(_dereq_,module,exports){
var $export = _dereq_(60);
var $parseInt = _dereq_(111);
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });

},{"111":111,"60":60}],230:[function(_dereq_,module,exports){
'use strict';
var LIBRARY = _dereq_(87);
var global = _dereq_(68);
var ctx = _dereq_(52);
var classof = _dereq_(45);
var $export = _dereq_(60);
var isObject = _dereq_(79);
var aFunction = _dereq_(31);
var anInstance = _dereq_(35);
var forOf = _dereq_(66);
var speciesConstructor = _dereq_(125);
var task = _dereq_(134).set;
var microtask = _dereq_(93)();
var newPromiseCapabilityModule = _dereq_(94);
var perform = _dereq_(112);
var userAgent = _dereq_(146);
var promiseResolve = _dereq_(113);
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[_dereq_(150)('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = _dereq_(115)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
_dereq_(122)($Promise, PROMISE);
_dereq_(121)(PROMISE);
Wrapper = _dereq_(50)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && _dereq_(84)(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

},{"112":112,"113":113,"115":115,"121":121,"122":122,"125":125,"134":134,"146":146,"150":150,"31":31,"35":35,"45":45,"50":50,"52":52,"60":60,"66":66,"68":68,"79":79,"84":84,"87":87,"93":93,"94":94}],231:[function(_dereq_,module,exports){
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = _dereq_(60);
var aFunction = _dereq_(31);
var anObject = _dereq_(36);
var rApply = (_dereq_(68).Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !_dereq_(62)(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});

},{"31":31,"36":36,"60":60,"62":62,"68":68}],232:[function(_dereq_,module,exports){
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = _dereq_(60);
var create = _dereq_(96);
var aFunction = _dereq_(31);
var anObject = _dereq_(36);
var isObject = _dereq_(79);
var fails = _dereq_(62);
var bind = _dereq_(44);
var rConstruct = (_dereq_(68).Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () { /* empty */ });
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

},{"31":31,"36":36,"44":44,"60":60,"62":62,"68":68,"79":79,"96":96}],233:[function(_dereq_,module,exports){
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = _dereq_(97);
var $export = _dereq_(60);
var anObject = _dereq_(36);
var toPrimitive = _dereq_(141);

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * _dereq_(62)(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"141":141,"36":36,"60":60,"62":62,"97":97}],234:[function(_dereq_,module,exports){
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = _dereq_(60);
var gOPD = _dereq_(99).f;
var anObject = _dereq_(36);

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});

},{"36":36,"60":60,"99":99}],235:[function(_dereq_,module,exports){
'use strict';
// 26.1.5 Reflect.enumerate(target)
var $export = _dereq_(60);
var anObject = _dereq_(36);
var Enumerate = function (iterated) {
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = [];      // keys
  var key;
  for (key in iterated) keys.push(key);
};
_dereq_(82)(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});

},{"36":36,"60":60,"82":82}],236:[function(_dereq_,module,exports){
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = _dereq_(99);
var $export = _dereq_(60);
var anObject = _dereq_(36);

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});

},{"36":36,"60":60,"99":99}],237:[function(_dereq_,module,exports){
// 26.1.8 Reflect.getPrototypeOf(target)
var $export = _dereq_(60);
var getProto = _dereq_(103);
var anObject = _dereq_(36);

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});

},{"103":103,"36":36,"60":60}],238:[function(_dereq_,module,exports){
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = _dereq_(99);
var getPrototypeOf = _dereq_(103);
var has = _dereq_(69);
var $export = _dereq_(60);
var isObject = _dereq_(79);
var anObject = _dereq_(36);

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });

},{"103":103,"36":36,"60":60,"69":69,"79":79,"99":99}],239:[function(_dereq_,module,exports){
// 26.1.9 Reflect.has(target, propertyKey)
var $export = _dereq_(60);

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});

},{"60":60}],240:[function(_dereq_,module,exports){
// 26.1.10 Reflect.isExtensible(target)
var $export = _dereq_(60);
var anObject = _dereq_(36);
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});

},{"36":36,"60":60}],241:[function(_dereq_,module,exports){
// 26.1.11 Reflect.ownKeys(target)
var $export = _dereq_(60);

$export($export.S, 'Reflect', { ownKeys: _dereq_(109) });

},{"109":109,"60":60}],242:[function(_dereq_,module,exports){
// 26.1.12 Reflect.preventExtensions(target)
var $export = _dereq_(60);
var anObject = _dereq_(36);
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"36":36,"60":60}],243:[function(_dereq_,module,exports){
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = _dereq_(60);
var setProto = _dereq_(120);

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"120":120,"60":60}],244:[function(_dereq_,module,exports){
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = _dereq_(97);
var gOPD = _dereq_(99);
var getPrototypeOf = _dereq_(103);
var has = _dereq_(69);
var $export = _dereq_(60);
var createDesc = _dereq_(114);
var anObject = _dereq_(36);
var isObject = _dereq_(79);

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
    } else dP.f(receiver, propertyKey, createDesc(0, V));
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });

},{"103":103,"114":114,"36":36,"60":60,"69":69,"79":79,"97":97,"99":99}],245:[function(_dereq_,module,exports){
var global = _dereq_(68);
var inheritIfRequired = _dereq_(73);
var dP = _dereq_(97).f;
var gOPN = _dereq_(101).f;
var isRegExp = _dereq_(80);
var $flags = _dereq_(64);
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (_dereq_(56) && (!CORRECT_NEW || _dereq_(62)(function () {
  re2[_dereq_(150)('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  _dereq_(116)(global, 'RegExp', $RegExp);
}

_dereq_(121)('RegExp');

},{"101":101,"116":116,"121":121,"150":150,"56":56,"62":62,"64":64,"68":68,"73":73,"80":80,"97":97}],246:[function(_dereq_,module,exports){
'use strict';
var regexpExec = _dereq_(118);
_dereq_(60)({
  target: 'RegExp',
  proto: true,
  forced: regexpExec !== /./.exec
}, {
  exec: regexpExec
});

},{"118":118,"60":60}],247:[function(_dereq_,module,exports){
// 21.2.5.3 get RegExp.prototype.flags()
if (_dereq_(56) && /./g.flags != 'g') _dereq_(97).f(RegExp.prototype, 'flags', {
  configurable: true,
  get: _dereq_(64)
});

},{"56":56,"64":64,"97":97}],248:[function(_dereq_,module,exports){
'use strict';

var anObject = _dereq_(36);
var toLength = _dereq_(139);
var advanceStringIndex = _dereq_(34);
var regExpExec = _dereq_(117);

// @@match logic
_dereq_(63)('match', 1, function (defined, MATCH, $match, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative($match, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      if (!rx.global) return regExpExec(rx, S);
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});

},{"117":117,"139":139,"34":34,"36":36,"63":63}],249:[function(_dereq_,module,exports){
'use strict';

var anObject = _dereq_(36);
var toObject = _dereq_(140);
var toLength = _dereq_(139);
var toInteger = _dereq_(137);
var advanceStringIndex = _dereq_(34);
var regExpExec = _dereq_(117);
var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
_dereq_(63)('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
  return [
    // `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = defined(this);
      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined
        ? fn.call(searchValue, O, replaceValue)
        : $replace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      var res = maybeCallNative($replace, regexp, this, replaceValue);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);
      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;
        results.push(result);
        if (!global) break;
        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }
      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];
        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];

    // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return $replace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$': return '$';
        case '&': return matched;
        case '`': return str.slice(0, position);
        case "'": return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default: // \d\d?
          var n = +ch;
          if (n === 0) return match;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});

},{"117":117,"137":137,"139":139,"140":140,"34":34,"36":36,"63":63}],250:[function(_dereq_,module,exports){
'use strict';

var anObject = _dereq_(36);
var sameValue = _dereq_(119);
var regExpExec = _dereq_(117);

// @@search logic
_dereq_(63)('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
  return [
    // `String.prototype.search` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.search
    function search(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[SEARCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    },
    // `RegExp.prototype[@@search]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
    function (regexp) {
      var res = maybeCallNative($search, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
      var result = regExpExec(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }
  ];
});

},{"117":117,"119":119,"36":36,"63":63}],251:[function(_dereq_,module,exports){
'use strict';

var isRegExp = _dereq_(80);
var anObject = _dereq_(36);
var speciesConstructor = _dereq_(125);
var advanceStringIndex = _dereq_(34);
var toLength = _dereq_(139);
var callRegExpExec = _dereq_(117);
var regexpExec = _dereq_(118);
var fails = _dereq_(62);
var $min = Math.min;
var $push = [].push;
var $SPLIT = 'split';
var LENGTH = 'length';
var LAST_INDEX = 'lastIndex';
var MAX_UINT32 = 0xffffffff;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });

// @@split logic
_dereq_(63)('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return $split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy[LAST_INDEX];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
    };
  } else {
    internalSplit = $split;
  }

  return [
    // `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = defined(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (SUPPORTS_Y ? 'y' : 'g');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
        if (
          z === null ||
          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
});

},{"117":117,"118":118,"125":125,"139":139,"34":34,"36":36,"62":62,"63":63,"80":80}],252:[function(_dereq_,module,exports){
'use strict';
_dereq_(247);
var anObject = _dereq_(36);
var $flags = _dereq_(64);
var DESCRIPTORS = _dereq_(56);
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  _dereq_(116)(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (_dereq_(62)(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}

},{"116":116,"247":247,"36":36,"56":56,"62":62,"64":64}],253:[function(_dereq_,module,exports){
'use strict';
var strong = _dereq_(47);
var validate = _dereq_(147);
var SET = 'Set';

// 23.2 Set Objects
module.exports = _dereq_(49)(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);

},{"147":147,"47":47,"49":49}],254:[function(_dereq_,module,exports){
'use strict';
// B.2.3.2 String.prototype.anchor(name)
_dereq_(129)('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});

},{"129":129}],255:[function(_dereq_,module,exports){
'use strict';
// B.2.3.3 String.prototype.big()
_dereq_(129)('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});

},{"129":129}],256:[function(_dereq_,module,exports){
'use strict';
// B.2.3.4 String.prototype.blink()
_dereq_(129)('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});

},{"129":129}],257:[function(_dereq_,module,exports){
'use strict';
// B.2.3.5 String.prototype.bold()
_dereq_(129)('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});

},{"129":129}],258:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(60);
var $at = _dereq_(127)(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});

},{"127":127,"60":60}],259:[function(_dereq_,module,exports){
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';
var $export = _dereq_(60);
var toLength = _dereq_(139);
var context = _dereq_(128);
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * _dereq_(61)(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});

},{"128":128,"139":139,"60":60,"61":61}],260:[function(_dereq_,module,exports){
'use strict';
// B.2.3.6 String.prototype.fixed()
_dereq_(129)('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});

},{"129":129}],261:[function(_dereq_,module,exports){
'use strict';
// B.2.3.7 String.prototype.fontcolor(color)
_dereq_(129)('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});

},{"129":129}],262:[function(_dereq_,module,exports){
'use strict';
// B.2.3.8 String.prototype.fontsize(size)
_dereq_(129)('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});

},{"129":129}],263:[function(_dereq_,module,exports){
var $export = _dereq_(60);
var toAbsoluteIndex = _dereq_(135);
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});

},{"135":135,"60":60}],264:[function(_dereq_,module,exports){
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export = _dereq_(60);
var context = _dereq_(128);
var INCLUDES = 'includes';

$export($export.P + $export.F * _dereq_(61)(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"128":128,"60":60,"61":61}],265:[function(_dereq_,module,exports){
'use strict';
// B.2.3.9 String.prototype.italics()
_dereq_(129)('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});

},{"129":129}],266:[function(_dereq_,module,exports){
'use strict';
var $at = _dereq_(127)(true);

// 21.1.3.27 String.prototype[@@iterator]()
_dereq_(83)(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

},{"127":127,"83":83}],267:[function(_dereq_,module,exports){
'use strict';
// B.2.3.10 String.prototype.link(url)
_dereq_(129)('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});

},{"129":129}],268:[function(_dereq_,module,exports){
var $export = _dereq_(60);
var toIObject = _dereq_(138);
var toLength = _dereq_(139);

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});

},{"138":138,"139":139,"60":60}],269:[function(_dereq_,module,exports){
var $export = _dereq_(60);

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: _dereq_(131)
});

},{"131":131,"60":60}],270:[function(_dereq_,module,exports){
'use strict';
// B.2.3.11 String.prototype.small()
_dereq_(129)('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});

},{"129":129}],271:[function(_dereq_,module,exports){
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';
var $export = _dereq_(60);
var toLength = _dereq_(139);
var context = _dereq_(128);
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * _dereq_(61)(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});

},{"128":128,"139":139,"60":60,"61":61}],272:[function(_dereq_,module,exports){
'use strict';
// B.2.3.12 String.prototype.strike()
_dereq_(129)('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});

},{"129":129}],273:[function(_dereq_,module,exports){
'use strict';
// B.2.3.13 String.prototype.sub()
_dereq_(129)('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});

},{"129":129}],274:[function(_dereq_,module,exports){
'use strict';
// B.2.3.14 String.prototype.sup()
_dereq_(129)('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});

},{"129":129}],275:[function(_dereq_,module,exports){
'use strict';
// 21.1.3.25 String.prototype.trim()
_dereq_(132)('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});

},{"132":132}],276:[function(_dereq_,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global = _dereq_(68);
var has = _dereq_(69);
var DESCRIPTORS = _dereq_(56);
var $export = _dereq_(60);
var redefine = _dereq_(116);
var META = _dereq_(92).KEY;
var $fails = _dereq_(62);
var shared = _dereq_(124);
var setToStringTag = _dereq_(122);
var uid = _dereq_(145);
var wks = _dereq_(150);
var wksExt = _dereq_(149);
var wksDefine = _dereq_(148);
var enumKeys = _dereq_(59);
var isArray = _dereq_(77);
var anObject = _dereq_(36);
var isObject = _dereq_(79);
var toObject = _dereq_(140);
var toIObject = _dereq_(138);
var toPrimitive = _dereq_(141);
var createDesc = _dereq_(114);
var _create = _dereq_(96);
var gOPNExt = _dereq_(100);
var $GOPD = _dereq_(99);
var $GOPS = _dereq_(102);
var $DP = _dereq_(97);
var $keys = _dereq_(105);
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  _dereq_(101).f = gOPNExt.f = $getOwnPropertyNames;
  _dereq_(106).f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !_dereq_(87)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });

$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return $GOPS.f(toObject(it));
  }
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || _dereq_(70)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

},{"100":100,"101":101,"102":102,"105":105,"106":106,"114":114,"116":116,"122":122,"124":124,"138":138,"140":140,"141":141,"145":145,"148":148,"149":149,"150":150,"36":36,"56":56,"59":59,"60":60,"62":62,"68":68,"69":69,"70":70,"77":77,"79":79,"87":87,"92":92,"96":96,"97":97,"99":99}],277:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(60);
var $typed = _dereq_(144);
var buffer = _dereq_(143);
var anObject = _dereq_(36);
var toAbsoluteIndex = _dereq_(135);
var toLength = _dereq_(139);
var isObject = _dereq_(79);
var ArrayBuffer = _dereq_(68).ArrayBuffer;
var speciesConstructor = _dereq_(125);
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * _dereq_(62)(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var fin = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < fin) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

_dereq_(121)(ARRAY_BUFFER);

},{"121":121,"125":125,"135":135,"139":139,"143":143,"144":144,"36":36,"60":60,"62":62,"68":68,"79":79}],278:[function(_dereq_,module,exports){
var $export = _dereq_(60);
$export($export.G + $export.W + $export.F * !_dereq_(144).ABV, {
  DataView: _dereq_(143).DataView
});

},{"143":143,"144":144,"60":60}],279:[function(_dereq_,module,exports){
_dereq_(142)('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"142":142}],280:[function(_dereq_,module,exports){
_dereq_(142)('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"142":142}],281:[function(_dereq_,module,exports){
_dereq_(142)('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"142":142}],282:[function(_dereq_,module,exports){
_dereq_(142)('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"142":142}],283:[function(_dereq_,module,exports){
_dereq_(142)('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"142":142}],284:[function(_dereq_,module,exports){
_dereq_(142)('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"142":142}],285:[function(_dereq_,module,exports){
_dereq_(142)('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"142":142}],286:[function(_dereq_,module,exports){
_dereq_(142)('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"142":142}],287:[function(_dereq_,module,exports){
_dereq_(142)('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

},{"142":142}],288:[function(_dereq_,module,exports){
'use strict';
var global = _dereq_(68);
var each = _dereq_(40)(0);
var redefine = _dereq_(116);
var meta = _dereq_(92);
var assign = _dereq_(95);
var weak = _dereq_(48);
var isObject = _dereq_(79);
var validate = _dereq_(147);
var NATIVE_WEAK_MAP = _dereq_(147);
var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = _dereq_(49)(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}

},{"116":116,"147":147,"40":40,"48":48,"49":49,"68":68,"79":79,"92":92,"95":95}],289:[function(_dereq_,module,exports){
'use strict';
var weak = _dereq_(48);
var validate = _dereq_(147);
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
_dereq_(49)(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);

},{"147":147,"48":48,"49":49}],290:[function(_dereq_,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
var $export = _dereq_(60);
var flattenIntoArray = _dereq_(65);
var toObject = _dereq_(140);
var toLength = _dereq_(139);
var aFunction = _dereq_(31);
var arraySpeciesCreate = _dereq_(43);

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

_dereq_(33)('flatMap');

},{"139":139,"140":140,"31":31,"33":33,"43":43,"60":60,"65":65}],291:[function(_dereq_,module,exports){
'use strict';
// https://github.com/tc39/Array.prototype.includes
var $export = _dereq_(60);
var $includes = _dereq_(39)(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

_dereq_(33)('includes');

},{"33":33,"39":39,"60":60}],292:[function(_dereq_,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = _dereq_(60);
var $entries = _dereq_(108)(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});

},{"108":108,"60":60}],293:[function(_dereq_,module,exports){
// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = _dereq_(60);
var ownKeys = _dereq_(109);
var toIObject = _dereq_(138);
var gOPD = _dereq_(99);
var createProperty = _dereq_(51);

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});

},{"109":109,"138":138,"51":51,"60":60,"99":99}],294:[function(_dereq_,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = _dereq_(60);
var $values = _dereq_(108)(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});

},{"108":108,"60":60}],295:[function(_dereq_,module,exports){
// https://github.com/tc39/proposal-promise-finally
'use strict';
var $export = _dereq_(60);
var core = _dereq_(50);
var global = _dereq_(68);
var speciesConstructor = _dereq_(125);
var promiseResolve = _dereq_(113);

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });

},{"113":113,"125":125,"50":50,"60":60,"68":68}],296:[function(_dereq_,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = _dereq_(60);
var $pad = _dereq_(130);
var userAgent = _dereq_(146);

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});

},{"130":130,"146":146,"60":60}],297:[function(_dereq_,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = _dereq_(60);
var $pad = _dereq_(130);
var userAgent = _dereq_(146);

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});

},{"130":130,"146":146,"60":60}],298:[function(_dereq_,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
_dereq_(132)('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');

},{"132":132}],299:[function(_dereq_,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
_dereq_(132)('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');

},{"132":132}],300:[function(_dereq_,module,exports){
_dereq_(148)('asyncIterator');

},{"148":148}],301:[function(_dereq_,module,exports){
var $iterators = _dereq_(162);
var getKeys = _dereq_(105);
var redefine = _dereq_(116);
var global = _dereq_(68);
var hide = _dereq_(70);
var Iterators = _dereq_(86);
var wks = _dereq_(150);
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}

},{"105":105,"116":116,"150":150,"162":162,"68":68,"70":70,"86":86}],302:[function(_dereq_,module,exports){
var $export = _dereq_(60);
var $task = _dereq_(134);
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});

},{"134":134,"60":60}],303:[function(_dereq_,module,exports){
// ie9- setTimeout & setInterval additional parameters fix
var global = _dereq_(68);
var $export = _dereq_(60);
var userAgent = _dereq_(146);
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});

},{"146":146,"60":60,"68":68}],304:[function(_dereq_,module,exports){
_dereq_(303);
_dereq_(302);
_dereq_(301);
module.exports = _dereq_(50);

},{"301":301,"302":302,"303":303,"50":50}],305:[function(_dereq_,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {}
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}

},{}],306:[function(_dereq_,module,exports){
"use strict";

_dereq_(307);

var _global = _interopRequireDefault(_dereq_(13));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

if (_global["default"]._babelPolyfill && typeof console !== "undefined" && console.warn) {
  console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended " + "and may have consequences if different versions of the polyfills are applied sequentially. " + "If you do need to load the polyfill more than once, use @babel/polyfill/noConflict " + "instead to bypass the warning.");
}

_global["default"]._babelPolyfill = true;
},{"13":13,"307":307}],307:[function(_dereq_,module,exports){
"use strict";

_dereq_(1);

_dereq_(3);

_dereq_(2);

_dereq_(9);

_dereq_(8);

_dereq_(11);

_dereq_(10);

_dereq_(12);

_dereq_(5);

_dereq_(6);

_dereq_(4);

_dereq_(7);

_dereq_(304);

_dereq_(305);
},{"1":1,"10":10,"11":11,"12":12,"2":2,"3":3,"304":304,"305":305,"4":4,"5":5,"6":6,"7":7,"8":8,"9":9}]},{},[306]);

;(function() {
/*!
 * @overview  Ember - JavaScript Application Framework
 * @copyright Copyright 2011 Tilde Inc. and contributors
 *            Portions Copyright 2006-2011 Strobe Inc.
 *            Portions Copyright 2008-2011 Apple Inc. All rights reserved.
 * @license   Licensed under MIT license
 *            See https://raw.github.com/emberjs/ember.js/master/LICENSE
 * @version   4.12.3
 */
/* eslint-disable no-var */
/* globals global globalThis self */
/* eslint-disable-next-line no-unused-vars */
var define, require;
(function () {
  var globalObj = typeof globalThis !== 'undefined' ? globalThis : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : null;
  if (globalObj === null) {
    throw new Error('unable to locate global object');
  }
  if (typeof globalObj.define === 'function' && typeof globalObj.require === 'function') {
    define = globalObj.define;
    require = globalObj.require;
    return;
  }
  var registry = Object.create(null);
  var seen = Object.create(null);
  function missingModule(name, referrerName) {
    if (referrerName) {
      throw new Error('Could not find module ' + name + ' required by: ' + referrerName);
    } else {
      throw new Error('Could not find module ' + name);
    }
  }
  function internalRequire(_name, referrerName) {
    var name = _name;
    var mod = registry[name];
    if (!mod) {
      name = name + '/index';
      mod = registry[name];
    }
    var exports = seen[name];
    if (exports !== undefined) {
      return exports;
    }
    exports = seen[name] = {};
    if (!mod) {
      missingModule(_name, referrerName);
    }
    var deps = mod.deps;
    var callback = mod.callback;
    var reified = new Array(deps.length);
    for (var i = 0; i < deps.length; i++) {
      if (deps[i] === 'exports') {
        reified[i] = exports;
      } else if (deps[i] === 'require') {
        reified[i] = require;
      } else {
        reified[i] = require(deps[i], name);
      }
    }
    callback.apply(this, reified);
    return exports;
  }
  require = function (name) {
    return internalRequire(name, null);
  };
  define = function (name, deps, callback) {
    registry[name] = {
      deps: deps,
      callback: callback
    };
  };

  // setup `require` module
  require['default'] = require;
  require.has = function registryHas(moduleName) {
    return Boolean(registry[moduleName]) || Boolean(registry[moduleName + '/index']);
  };
  require._eak_seen = require.entries = registry;
})();
define("@ember/-internals/bootstrap/index", ["require"], function (_require) {
  "use strict";

  (function bootstrap() {
    // Bootstrap Node module
    if (typeof module === 'object' && typeof module.require === 'function') {
      module.exports = (0, _require.default)("ember").default;
    }
  })();
});
define("@ember/-internals/browser-environment/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.window = _exports.userAgent = _exports.location = _exports.isFirefox = _exports.isChrome = _exports.history = _exports.hasDOM = void 0;
  // check if window exists and actually is the global
  var hasDom = _exports.hasDOM = typeof self === 'object' && self !== null && self.Object === Object && typeof Window !== 'undefined' && self.constructor === Window && typeof document === 'object' && document !== null && self.document === document && typeof location === 'object' && location !== null && self.location === location && typeof history === 'object' && history !== null && self.history === history && typeof navigator === 'object' && navigator !== null && self.navigator === navigator && typeof navigator.userAgent === 'string';
  var window = _exports.window = hasDom ? self : null;
  var location$1 = _exports.location = hasDom ? self.location : null;
  var history$1 = _exports.history = hasDom ? self.history : null;
  var userAgent = _exports.userAgent = hasDom ? self.navigator.userAgent : 'Lynx (textmode)';
  var isChrome = _exports.isChrome = hasDom ? typeof chrome === 'object' && !(typeof opera === 'object') : false;
  var isFirefox = _exports.isFirefox = hasDom ? /Firefox|FxiOS/.test(userAgent) : false;
});
define("@ember/-internals/container/index", ["exports", "@ember/-internals/owner", "@ember/-internals/utils", "@ember/debug"], function (_exports, _owner, _utils, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Registry = _exports.INIT_FACTORY = _exports.Container = void 0;
  _exports.getFactoryFor = getFactoryFor;
  _exports.privatize = privatize;
  _exports.setFactoryFor = setFactoryFor;
  var leakTracking;
  var containers;
  if (true /* DEBUG */) {
    // requires v8
    // chrome --js-flags="--allow-natives-syntax --expose-gc"
    // node --allow-natives-syntax --expose-gc
    try {
      if (typeof gc === 'function') {
        leakTracking = (() => {
          // avoid syntax errors when --allow-natives-syntax not present
          var GetWeakSetValues = new Function('weakSet', 'return %GetWeakSetValues(weakSet, 0)');
          containers = new WeakSet();
          return {
            hasContainers() {
              // @ts-expect-error We just checked if it is definied
              gc();
              return GetWeakSetValues(containers).length > 0;
            },
            reset() {
              var values = GetWeakSetValues(containers);
              for (var i = 0; i < values.length; i++) {
                containers.delete(values[i]);
              }
            }
          };
        })();
      }
    } catch (e) {
      // ignore
    }
  }
  /**
   A container used to instantiate and cache objects.
  
   Every `Container` must be associated with a `Registry`, which is referenced
   to determine the factory and options that should be used to instantiate
   objects.
  
   The public API for `Container` is still in flux and should not be considered
   stable.
  
   @private
   @class Container
   */
  class Container {
    constructor(registry, options = {}) {
      this.registry = registry;
      this.owner = options.owner || null;
      this.cache = (0, _utils.dictionary)(options.cache || null);
      this.factoryManagerCache = (0, _utils.dictionary)(options.factoryManagerCache || null);
      this.isDestroyed = false;
      this.isDestroying = false;
      if (true /* DEBUG */) {
        this.validationCache = (0, _utils.dictionary)(options.validationCache || null);
        if (containers !== undefined) {
          containers.add(this);
        }
      }
    }
    /**
     @private
     @property registry
     @type Registry
     @since 1.11.0
     */
    /**
     @private
     @property cache
     @type InheritingDict
     */
    /**
     @private
     @property validationCache
     @type InheritingDict
     */
    /**
     Given a fullName return a corresponding instance.
      The default behavior is for lookup to return a singleton instance.
     The singleton is scoped to the container, allowing multiple containers
     to all have their own locally scoped singletons.
      ```javascript
     let registry = new Registry();
     let container = registry.container();
      registry.register('api:twitter', Twitter);
      let twitter = container.lookup('api:twitter');
      twitter instanceof Twitter; // => true
      // by default the container will return singletons
     let twitter2 = container.lookup('api:twitter');
     twitter2 instanceof Twitter; // => true
      twitter === twitter2; //=> true
     ```
      If singletons are not wanted, an optional flag can be provided at lookup.
      ```javascript
     let registry = new Registry();
     let container = registry.container();
      registry.register('api:twitter', Twitter);
      let twitter = container.lookup('api:twitter', { singleton: false });
     let twitter2 = container.lookup('api:twitter', { singleton: false });
      twitter === twitter2; //=> false
     ```
      @private
     @method lookup
     @param {String} fullName
     @param {RegisterOptions} [options]
     @return {any}
     */
    lookup(fullName, options) {
      if (this.isDestroyed) {
        throw new Error(`Cannot call \`.lookup('${fullName}')\` after the owner has been destroyed`);
      }
      (true && !(this.registry.isValidFullName(fullName)) && (0, _debug.assert)('fullName must be a proper full name', this.registry.isValidFullName(fullName)));
      return lookup(this, this.registry.normalize(fullName), options);
    }
    /**
     A depth first traversal, destroying the container, its descendant containers and all
     their managed objects.
      @private
     @method destroy
     */
    destroy() {
      this.isDestroying = true;
      destroyDestroyables(this);
    }
    finalizeDestroy() {
      resetCache(this);
      this.isDestroyed = true;
    }
    /**
     Clear either the entire cache or just the cache for a particular key.
        @private
     @method reset
     @param {String} fullName optional key to reset; if missing, resets everything
    */
    reset(fullName) {
      if (this.isDestroyed) return;
      if (fullName === undefined) {
        destroyDestroyables(this);
        resetCache(this);
      } else {
        resetMember(this, this.registry.normalize(fullName));
      }
    }
    /**
     Returns an object that can be used to provide an owner to a
     manually created instance.
      @private
     @method ownerInjection
     @returns { Object }
    */
    ownerInjection() {
      var injection = {};
      (0, _owner.setOwner)(injection, this.owner);
      return injection;
    }
    /**
     Given a fullName, return the corresponding factory. The consumer of the factory
     is responsible for the destruction of any factory instances, as there is no
     way for the container to ensure instances are destroyed when it itself is
     destroyed.
      @public
     @method factoryFor
     @param {String} fullName
     @return {any}
     */
    factoryFor(fullName) {
      if (this.isDestroyed) {
        throw new Error(`Cannot call \`.factoryFor('${fullName}')\` after the owner has been destroyed`);
      }
      var normalizedName = this.registry.normalize(fullName);
      (true && !(this.registry.isValidFullName(normalizedName)) && (0, _debug.assert)('fullName must be a proper full name', this.registry.isValidFullName(normalizedName)));
      return factoryFor(this, normalizedName, fullName);
    }
  }
  _exports.Container = Container;
  if (true /* DEBUG */) {
    Container._leakTracking = leakTracking;
  }
  /*
   * Wrap a factory manager in a proxy which will not permit properties to be
   * set on the manager.
   */
  function wrapManagerInDeprecationProxy(manager) {
    var validator = {
      set(_obj, prop) {
        throw new Error(`You attempted to set "${String(prop)}" on a factory manager created by container#factoryFor. A factory manager is a read-only construct.`);
      }
    };
    // Note:
    // We have to proxy access to the manager here so that private property
    // access doesn't cause the above errors to occur.
    var m = manager;
    var proxiedManager = {
      class: m.class,
      create(props) {
        return m.create(props);
      }
    };
    return new Proxy(proxiedManager, validator);
  }
  function isSingleton(container, fullName) {
    return container.registry.getOption(fullName, 'singleton') !== false;
  }
  function isInstantiatable(container, fullName) {
    return container.registry.getOption(fullName, 'instantiate') !== false;
  }
  function lookup(container, fullName, options = {}) {
    var normalizedName = fullName;
    if (options.singleton === true || options.singleton === undefined && isSingleton(container, fullName)) {
      var cached = container.cache[normalizedName];
      if (cached !== undefined) {
        return cached;
      }
    }
    return instantiateFactory(container, normalizedName, fullName, options);
  }
  function factoryFor(container, normalizedName, fullName) {
    var cached = container.factoryManagerCache[normalizedName];
    if (cached !== undefined) {
      return cached;
    }
    var factory = container.registry.resolve(normalizedName);
    if (factory === undefined) {
      return;
    }
    if (true /* DEBUG */ && factory && typeof factory._onLookup === 'function') {
      factory._onLookup(fullName);
    }
    var manager = new InternalFactoryManager(container, factory, fullName, normalizedName);
    if (true /* DEBUG */) {
      manager = wrapManagerInDeprecationProxy(manager);
    }
    container.factoryManagerCache[normalizedName] = manager;
    return manager;
  }
  function isSingletonClass(container, fullName, {
    instantiate,
    singleton
  }) {
    return singleton !== false && !instantiate && isSingleton(container, fullName) && !isInstantiatable(container, fullName);
  }
  function isSingletonInstance(container, fullName, {
    instantiate,
    singleton
  }) {
    return singleton !== false && instantiate !== false && (singleton === true || isSingleton(container, fullName)) && isInstantiatable(container, fullName);
  }
  function isFactoryClass(container, fullname, {
    instantiate,
    singleton
  }) {
    return instantiate === false && (singleton === false || !isSingleton(container, fullname)) && !isInstantiatable(container, fullname);
  }
  function isFactoryInstance(container, fullName, {
    instantiate,
    singleton
  }) {
    return instantiate !== false && (singleton === false || !isSingleton(container, fullName)) && isInstantiatable(container, fullName);
  }
  function instantiateFactory(container, normalizedName, fullName, options) {
    var factoryManager = factoryFor(container, normalizedName, fullName);
    if (factoryManager === undefined) {
      return;
    }
    // SomeClass { singleton: true, instantiate: true } | { singleton: true } | { instantiate: true } | {}
    // By default majority of objects fall into this case
    if (isSingletonInstance(container, fullName, options)) {
      var instance = container.cache[normalizedName] = factoryManager.create();
      // if this lookup happened _during_ destruction (emits a deprecation, but
      // is still possible) ensure that it gets destroyed
      if (container.isDestroying) {
        if (typeof instance.destroy === 'function') {
          instance.destroy();
        }
      }
      return instance;
    }
    // SomeClass { singleton: false, instantiate: true }
    if (isFactoryInstance(container, fullName, options)) {
      return factoryManager.create();
    }
    // SomeClass { singleton: true, instantiate: false } | { instantiate: false } | { singleton: false, instantiation: false }
    if (isSingletonClass(container, fullName, options) || isFactoryClass(container, fullName, options)) {
      return factoryManager.class;
    }
    throw new Error('Could not create factory');
  }
  function destroyDestroyables(container) {
    var cache = container.cache;
    var keys = Object.keys(cache);
    for (var key of keys) {
      var value = cache[key];
      (true && !(value) && (0, _debug.assert)('has cached value', value));
      if (value.destroy) {
        value.destroy();
      }
    }
  }
  function resetCache(container) {
    container.cache = (0, _utils.dictionary)(null);
    container.factoryManagerCache = (0, _utils.dictionary)(null);
  }
  function resetMember(container, fullName) {
    var member = container.cache[fullName];
    delete container.factoryManagerCache[fullName];
    if (member) {
      delete container.cache[fullName];
      if (member.destroy) {
        member.destroy();
      }
    }
  }
  var INIT_FACTORY = _exports.INIT_FACTORY = Symbol('INIT_FACTORY');
  function getFactoryFor(obj) {
    // SAFETY: since we know `obj` is an `object`, we also know we can safely ask
    // whether a key is set on it.
    return obj[INIT_FACTORY];
  }
  function setFactoryFor(obj, factory) {
    // SAFETY: since we know `obj` is an `object`, we also know we can safely set
    // a key it safely at this location. (The only way this could be blocked is if
    // someone has gone out of their way to use `Object.defineProperty()` with our
    // internal-only symbol and made it `writable: false`.)
    obj[INIT_FACTORY] = factory;
  }
  class InternalFactoryManager {
    constructor(container, factory, fullName, normalizedName) {
      this.container = container;
      this.owner = container.owner;
      this.class = factory;
      this.fullName = fullName;
      this.normalizedName = normalizedName;
      this.madeToString = undefined;
      this.injections = undefined;
    }
    toString() {
      if (this.madeToString === undefined) {
        this.madeToString = this.container.registry.makeToString(this.class, this.fullName);
      }
      return this.madeToString;
    }
    create(options) {
      var {
        container
      } = this;
      if (container.isDestroyed) {
        throw new Error(`Cannot create new instances after the owner has been destroyed (you attempted to create ${this.fullName})`);
      }
      var props = options ? Object.assign({}, options) : {};
      (0, _owner.setOwner)(props, container.owner);
      setFactoryFor(props, this);
      if (true /* DEBUG */) {
        var lazyInjections;
        var validationCache = this.container.validationCache;
        // Ensure that all lazy injections are valid at instantiation time
        if (!validationCache[this.fullName] && this.class && typeof this.class._lazyInjections === 'function') {
          lazyInjections = this.class._lazyInjections();
          lazyInjections = this.container.registry.normalizeInjectionsHash(lazyInjections);
          this.container.registry.validateInjections(lazyInjections);
        }
        validationCache[this.fullName] = true;
        (true && !(typeof this.class.create === 'function') && (0, _debug.assert)(`Failed to create an instance of '${this.normalizedName}'. Most likely an improperly defined class or an invalid module export.`, typeof this.class.create === 'function'));
      }
      return this.class.create(props);
    }
  }
  var VALID_FULL_NAME_REGEXP = /^[^:]+:[^:]+$/;
  /**
   A registry used to store factory and option information keyed
   by type.
  
   A `Registry` stores the factory and option information needed by a
   `Container` to instantiate and cache objects.
  
   The API for `Registry` is still in flux and should not be considered stable.
  
   @private
   @class Registry
   @since 1.11.0
  */
  class Registry {
    constructor(options = {}) {
      this.fallback = options.fallback || null;
      this.resolver = options.resolver || null;
      this.registrations = (0, _utils.dictionary)(options.registrations || null);
      this._normalizeCache = (0, _utils.dictionary)(null);
      this._resolveCache = (0, _utils.dictionary)(null);
      this._failSet = new Set();
      this._options = (0, _utils.dictionary)(null);
      this._typeOptions = (0, _utils.dictionary)(null);
    }
    /**
     A backup registry for resolving registrations when no matches can be found.
        @private
     @property fallback
     @type Registry
     */
    /**
     An object that has a `resolve` method that resolves a name.
        @private
     @property resolver
     @type Resolver
     */
    /**
     @private
     @property registrations
     @type InheritingDict
     */
    /**
     @private
        @property _normalizeCache
     @type InheritingDict
     */
    /**
     @private
        @property _resolveCache
     @type InheritingDict
     */
    /**
     @private
        @property _options
     @type InheritingDict
     */
    /**
     @private
        @property _typeOptions
     @type InheritingDict
     */
    /**
     Creates a container based on this registry.
        @private
     @method container
     @param {Object} options
     @return {Container} created container
     */
    container(options) {
      return new Container(this, options);
    }
    register(fullName, factory, options = {}) {
      (true && !(this.isValidFullName(fullName)) && (0, _debug.assert)('fullName must be a proper full name', this.isValidFullName(fullName)));
      (true && !(factory !== undefined) && (0, _debug.assert)(`Attempting to register an unknown factory: '${fullName}'`, factory !== undefined));
      var normalizedName = this.normalize(fullName);
      (true && !(!this._resolveCache[normalizedName]) && (0, _debug.assert)(`Cannot re-register: '${fullName}', as it has already been resolved.`, !this._resolveCache[normalizedName]));
      this._failSet.delete(normalizedName);
      this.registrations[normalizedName] = factory;
      this._options[normalizedName] = options;
    }
    /**
     Unregister a fullName
        ```javascript
     let registry = new Registry();
     registry.register('model:user', User);
        registry.resolve('model:user').create() instanceof User //=> true
        registry.unregister('model:user')
     registry.resolve('model:user') === undefined //=> true
     ```
        @private
     @method unregister
     @param {String} fullName
     */
    unregister(fullName) {
      (true && !(this.isValidFullName(fullName)) && (0, _debug.assert)('fullName must be a proper full name', this.isValidFullName(fullName)));
      var normalizedName = this.normalize(fullName);
      delete this.registrations[normalizedName];
      delete this._resolveCache[normalizedName];
      delete this._options[normalizedName];
      this._failSet.delete(normalizedName);
    }
    /**
     Given a fullName return the corresponding factory.
        By default `resolve` will retrieve the factory from
     the registry.
        ```javascript
     let registry = new Registry();
     registry.register('api:twitter', Twitter);
        registry.resolve('api:twitter') // => Twitter
     ```
        Optionally the registry can be provided with a custom resolver.
     If provided, `resolve` will first provide the custom resolver
     the opportunity to resolve the fullName, otherwise it will fallback
     to the registry.
        ```javascript
     let registry = new Registry();
     registry.resolver = function(fullName) {
        // lookup via the module system of choice
      };
        // the twitter factory is added to the module system
     registry.resolve('api:twitter') // => Twitter
     ```
        @private
     @method resolve
     @param {String} fullName
     @return {Function} fullName's factory
     */
    resolve(fullName) {
      var factory = resolve(this, this.normalize(fullName));
      if (factory === undefined && this.fallback !== null) {
        factory = this.fallback.resolve(fullName);
      }
      return factory;
    }
    /**
     A hook that can be used to describe how the resolver will
     attempt to find the factory.
        For example, the default Ember `.describe` returns the full
     class name (including namespace) where Ember's resolver expects
     to find the `fullName`.
        @private
     @method describe
     @param {String} fullName
     @return {string} described fullName
     */
    describe(fullName) {
      if (this.resolver !== null && this.resolver.lookupDescription) {
        return this.resolver.lookupDescription(fullName);
      } else if (this.fallback !== null) {
        return this.fallback.describe(fullName);
      } else {
        return fullName;
      }
    }
    /**
     A hook to enable custom fullName normalization behavior
        @private
     @method normalizeFullName
     @param {String} fullName
     @return {string} normalized fullName
     */
    normalizeFullName(fullName) {
      if (this.resolver !== null && this.resolver.normalize) {
        return this.resolver.normalize(fullName);
      } else if (this.fallback !== null) {
        return this.fallback.normalizeFullName(fullName);
      } else {
        return fullName;
      }
    }
    /**
     Normalize a fullName based on the application's conventions
        @private
     @method normalize
     @param {String} fullName
     @return {string} normalized fullName
     */
    normalize(fullName) {
      return this._normalizeCache[fullName] || (this._normalizeCache[fullName] = this.normalizeFullName(fullName));
    }
    /**
     @method makeToString
        @private
     @param {any} factory
     @param {string} fullName
     @return {function} toString function
     */
    makeToString(factory, fullName) {
      var _a;
      if (this.resolver !== null && this.resolver.makeToString) {
        return this.resolver.makeToString(factory, fullName);
      } else if (this.fallback !== null) {
        return this.fallback.makeToString(factory, fullName);
      } else {
        return typeof factory === 'string' ? factory : (_a = factory.name) !== null && _a !== void 0 ? _a : '(unknown class)';
      }
    }
    /**
     Given a fullName check if the container is aware of its factory
     or singleton instance.
        @private
     @method has
     @param {String} fullName
     @param {Object} [options]
     @param {String} [options.source] the fullname of the request source (used for local lookups)
     @return {Boolean}
     */
    has(fullName) {
      if (!this.isValidFullName(fullName)) {
        return false;
      }
      return has(this, this.normalize(fullName));
    }
    /**
     Allow registering options for all factories of a type.
        ```javascript
     let registry = new Registry();
     let container = registry.container();
        // if all of type `connection` must not be singletons
     registry.optionsForType('connection', { singleton: false });
        registry.register('connection:twitter', TwitterConnection);
     registry.register('connection:facebook', FacebookConnection);
        let twitter = container.lookup('connection:twitter');
     let twitter2 = container.lookup('connection:twitter');
        twitter === twitter2; // => false
        let facebook = container.lookup('connection:facebook');
     let facebook2 = container.lookup('connection:facebook');
        facebook === facebook2; // => false
     ```
        @private
     @method optionsForType
     @param {String} type
     @param {Object} options
     */
    optionsForType(type, options) {
      this._typeOptions[type] = options;
    }
    getOptionsForType(type) {
      var optionsForType = this._typeOptions[type];
      if (optionsForType === undefined && this.fallback !== null) {
        optionsForType = this.fallback.getOptionsForType(type);
      }
      return optionsForType;
    }
    /**
     @private
     @method options
     @param {String} fullName
     @param {Object} options
     */
    options(fullName, options) {
      var normalizedName = this.normalize(fullName);
      this._options[normalizedName] = options;
    }
    getOptions(fullName) {
      var normalizedName = this.normalize(fullName);
      var options = this._options[normalizedName];
      if (options === undefined && this.fallback !== null) {
        options = this.fallback.getOptions(fullName);
      }
      return options;
    }
    getOption(fullName, optionName) {
      var options = this._options[fullName];
      if (options !== undefined && options[optionName] !== undefined) {
        return options[optionName];
      }
      var type = fullName.split(':')[0];
      (true && !(type) && (0, _debug.assert)('has type', type)); // split always will have at least one value
      options = this._typeOptions[type];
      if (options && options[optionName] !== undefined) {
        return options[optionName];
      } else if (this.fallback !== null) {
        return this.fallback.getOption(fullName, optionName);
      }
      return undefined;
    }
    /**
     This is deprecated in favor of explicit injection of dependencies.
        Reference: https://deprecations.emberjs.com/v3.x#toc_implicit-injections
     ```
        @private
     @method injection
     @param {String} fullName
     @param {String} property
     @deprecated
     */
    injection(fullName, property) {
      (true && !(false) && (0, _debug.deprecate)(`As of Ember 4.0.0, owner.inject no longer injects values into resolved instances, and calling the method has been deprecated. Since this method no longer does anything, it is fully safe to remove this injection. As an alternative to this API, you can refactor to explicitly inject \`${property}\` on \`${fullName}\`, or look it up directly using the \`getOwner\` API.`, false, {
        id: 'remove-owner-inject',
        until: '5.0.0',
        url: 'https://deprecations.emberjs.com/v4.x#toc_implicit-injections',
        for: 'ember-source',
        since: {
          available: '4.0.0',
          enabled: '4.0.0'
        }
      }));
    }
    /**
     @private
     @method knownForType
     @param {String} type the type to iterate over
    */
    knownForType(type) {
      var localKnown = (0, _utils.dictionary)(null);
      var registeredNames = Object.keys(this.registrations);
      for (var fullName of registeredNames) {
        var itemType = fullName.split(':')[0];
        if (itemType === type) {
          localKnown[fullName] = true;
        }
      }
      var fallbackKnown, resolverKnown;
      if (this.fallback !== null) {
        fallbackKnown = this.fallback.knownForType(type);
      }
      if (this.resolver !== null && this.resolver.knownForType) {
        resolverKnown = this.resolver.knownForType(type);
      }
      return Object.assign({}, fallbackKnown, localKnown, resolverKnown);
    }
    isValidFullName(fullName) {
      return VALID_FULL_NAME_REGEXP.test(fullName);
    }
  }
  _exports.Registry = Registry;
  if (true /* DEBUG */) {
    var proto = Registry.prototype;
    proto.normalizeInjectionsHash = function (hash) {
      var injections = [];
      for (var key in hash) {
        if (Object.prototype.hasOwnProperty.call(hash, key)) {
          var value = hash[key];
          (true && !(value) && (0, _debug.assert)('has value', value));
          var {
            specifier
          } = value;
          (true && !(this.isValidFullName(specifier)) && (0, _debug.assert)(`Expected a proper full name, given '${specifier}'`, this.isValidFullName(specifier)));
          injections.push({
            property: key,
            specifier
          });
        }
      }
      return injections;
    };
    proto.validateInjections = function (injections) {
      if (!injections) {
        return;
      }
      for (var injection of injections) {
        var {
          specifier
        } = injection;
        (true && !(this.has(specifier)) && (0, _debug.assert)(`Attempting to inject an unknown injection: '${specifier}'`, this.has(specifier)));
      }
    };
  }
  function resolve(registry, _normalizedName) {
    var normalizedName = _normalizedName;
    var cached = registry._resolveCache[normalizedName];
    if (cached !== undefined) {
      return cached;
    }
    if (registry._failSet.has(normalizedName)) {
      return;
    }
    var resolved;
    if (registry.resolver) {
      resolved = registry.resolver.resolve(normalizedName);
    }
    if (resolved === undefined) {
      resolved = registry.registrations[normalizedName];
    }
    if (resolved === undefined) {
      registry._failSet.add(normalizedName);
    } else {
      registry._resolveCache[normalizedName] = resolved;
    }
    return resolved;
  }
  function has(registry, fullName) {
    return registry.resolve(fullName) !== undefined;
  }
  var privateNames = (0, _utils.dictionary)(null);
  var privateSuffix = `${Math.random()}${Date.now()}`.replace('.', '');
  function privatize([fullName]) {
    (true && !(arguments.length === 1 && fullName) && (0, _debug.assert)('has a single string argument', arguments.length === 1 && fullName));
    var name = privateNames[fullName];
    if (name) {
      return name;
    }
    var [type, rawName] = fullName.split(':');
    return privateNames[fullName] = (0, _utils.intern)(`${type}:${rawName}-${privateSuffix}`);
  }

  /*
  Public API for the container is still in flux.
  The public API, specified on the application namespace should be considered the stable API.
  // @module container
    @private
  */
});
define("@ember/-internals/environment/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.context = _exports.ENV = void 0;
  _exports.getENV = getENV;
  _exports.getLookup = getLookup;
  _exports.global = void 0;
  _exports.setLookup = setLookup;
  // from lodash to catch fake globals
  function checkGlobal(value) {
    return value && value.Object === Object ? value : undefined;
  }
  // element ids can ruin global miss checks
  function checkElementIdShadowing(value) {
    return value && value.nodeType === undefined ? value : undefined;
  }
  // export real global
  var global$1 = _exports.global = checkGlobal(checkElementIdShadowing(typeof global === 'object' && global)) || checkGlobal(typeof self === 'object' && self) || checkGlobal(typeof window === 'object' && window) || typeof mainContext !== 'undefined' && mainContext ||
  // set before strict mode in Ember loader/wrapper
  new Function('return this')(); // eval outside of strict mode

  // legacy imports/exports/lookup stuff (should we keep this??)
  var context = _exports.context = function (global, Ember) {
    return Ember === undefined ? {
      imports: global,
      exports: global,
      lookup: global
    } : {
      // import jQuery
      imports: Ember.imports || global,
      // export Ember
      exports: Ember.exports || global,
      // search for Namespaces
      lookup: Ember.lookup || global
    };
  }(global$1, global$1.Ember);
  function getLookup() {
    return context.lookup;
  }
  function setLookup(value) {
    context.lookup = value;
  }

  /**
    The hash of environment variables used to control various configuration
    settings. To specify your own or override default settings, add the
    desired properties to a global hash named `EmberENV` (or `ENV` for
    backwards compatibility with earlier versions of Ember). The `EmberENV`
    hash must be created before loading Ember.
  
    @class EmberENV
    @type Object
    @public
  */
  var ENV = _exports.ENV = {
    ENABLE_OPTIONAL_FEATURES: false,
    /**
      Determines whether Ember should add to `Array`
      native object prototypes, a few extra methods in order to provide a more
      friendly API.
         We generally recommend leaving this option set to true however, if you need
      to turn it off, you can add the configuration property
      `EXTEND_PROTOTYPES` to `EmberENV` and set it to `false`.
         Note, when disabled (the default configuration for Ember Addons), you will
      instead have to access all methods and functions from the Ember
      namespace.
         @property EXTEND_PROTOTYPES
      @type Boolean
      @default true
      @for EmberENV
      @public
    */
    EXTEND_PROTOTYPES: {
      Array: true
    },
    /**
      The `LOG_STACKTRACE_ON_DEPRECATION` property, when true, tells Ember to log
      a full stack trace during deprecation warnings.
         @property LOG_STACKTRACE_ON_DEPRECATION
      @type Boolean
      @default true
      @for EmberENV
      @public
    */
    LOG_STACKTRACE_ON_DEPRECATION: true,
    /**
      The `LOG_VERSION` property, when true, tells Ember to log versions of all
      dependent libraries in use.
         @property LOG_VERSION
      @type Boolean
      @default true
      @for EmberENV
      @public
    */
    LOG_VERSION: true,
    RAISE_ON_DEPRECATION: false,
    STRUCTURED_PROFILE: false,
    /**
      Whether to insert a `<div class="ember-view" />` wrapper around the
      application template. See RFC #280.
         This is not intended to be set directly, as the implementation may change in
      the future. Use `@ember/optional-features` instead.
         @property _APPLICATION_TEMPLATE_WRAPPER
      @for EmberENV
      @type Boolean
      @default true
      @private
    */
    _APPLICATION_TEMPLATE_WRAPPER: true,
    /**
      Whether to use Glimmer Component semantics (as opposed to the classic "Curly"
      components semantics) for template-only components. See RFC #278.
         This is not intended to be set directly, as the implementation may change in
      the future. Use `@ember/optional-features` instead.
         @property _TEMPLATE_ONLY_GLIMMER_COMPONENTS
      @for EmberENV
      @type Boolean
      @default false
      @private
    */
    _TEMPLATE_ONLY_GLIMMER_COMPONENTS: false,
    /**
      Whether to perform extra bookkeeping needed to make the `captureRenderTree`
      API work.
         This has to be set before the ember JavaScript code is evaluated. This is
      usually done by setting `window.EmberENV = { _DEBUG_RENDER_TREE: true };`
      before the "vendor" `<script>` tag in `index.html`.
         Setting the flag after Ember is already loaded will not work correctly. It
      may appear to work somewhat, but fundamentally broken.
         This is not intended to be set directly. Ember Inspector will enable the
      flag on behalf of the user as needed.
         This flag is always on in development mode.
         The flag is off by default in production mode, due to the cost associated
      with the the bookkeeping work.
         The expected flow is that Ember Inspector will ask the user to refresh the
      page after enabling the feature. It could also offer a feature where the
      user add some domains to the "always on" list. In either case, Ember
      Inspector will inject the code on the page to set the flag if needed.
         @property _DEBUG_RENDER_TREE
      @for EmberENV
      @type Boolean
      @default false
      @private
    */
    _DEBUG_RENDER_TREE: true /* DEBUG */,
    /**
      Whether the app defaults to using async observers.
         This is not intended to be set directly, as the implementation may change in
      the future. Use `@ember/optional-features` instead.
         @property _DEFAULT_ASYNC_OBSERVERS
      @for EmberENV
      @type Boolean
      @default false
      @private
    */
    _DEFAULT_ASYNC_OBSERVERS: false,
    /**
      Controls the maximum number of scheduled rerenders without "settling". In general,
      applications should not need to modify this environment variable, but please
      open an issue so that we can determine if a better default value is needed.
         @property _RERENDER_LOOP_LIMIT
      @for EmberENV
      @type number
      @default 1000
      @private
     */
    _RERENDER_LOOP_LIMIT: 1000,
    EMBER_LOAD_HOOKS: {},
    FEATURES: {}
  };
  (EmberENV => {
    if (typeof EmberENV !== 'object' || EmberENV === null) return;
    for (var flag in EmberENV) {
      if (!Object.prototype.hasOwnProperty.call(EmberENV, flag) || flag === 'EXTEND_PROTOTYPES' || flag === 'EMBER_LOAD_HOOKS') continue;
      var defaultValue = ENV[flag];
      if (defaultValue === true) {
        ENV[flag] = EmberENV[flag] !== false;
      } else if (defaultValue === false) {
        ENV[flag] = EmberENV[flag] === true;
      }
    }
    var {
      EXTEND_PROTOTYPES
    } = EmberENV;
    if (EXTEND_PROTOTYPES !== undefined) {
      if (typeof EXTEND_PROTOTYPES === 'object' && EXTEND_PROTOTYPES !== null) {
        ENV.EXTEND_PROTOTYPES.Array = EXTEND_PROTOTYPES.Array !== false;
      } else {
        ENV.EXTEND_PROTOTYPES.Array = EXTEND_PROTOTYPES !== false;
      }
    }
    // TODO this does not seem to be used by anything,
    //      can we remove it? do we need to deprecate it?
    var {
      EMBER_LOAD_HOOKS
    } = EmberENV;
    if (typeof EMBER_LOAD_HOOKS === 'object' && EMBER_LOAD_HOOKS !== null) {
      for (var hookName in EMBER_LOAD_HOOKS) {
        if (!Object.prototype.hasOwnProperty.call(EMBER_LOAD_HOOKS, hookName)) continue;
        var hooks = EMBER_LOAD_HOOKS[hookName];
        if (Array.isArray(hooks)) {
          ENV.EMBER_LOAD_HOOKS[hookName] = hooks.filter(hook => typeof hook === 'function');
        }
      }
    }
    var {
      FEATURES
    } = EmberENV;
    if (typeof FEATURES === 'object' && FEATURES !== null) {
      for (var feature in FEATURES) {
        if (!Object.prototype.hasOwnProperty.call(FEATURES, feature)) continue;
        ENV.FEATURES[feature] = FEATURES[feature] === true;
      }
    }
    if (true /* DEBUG */) {
      ENV._DEBUG_RENDER_TREE = true;
    }
  })(global$1.EmberENV);
  function getENV() {
    return ENV;
  }
});
define("@ember/-internals/error-handling/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getDispatchOverride = getDispatchOverride;
  _exports.getOnerror = getOnerror;
  _exports.onErrorTarget = void 0;
  _exports.setDispatchOverride = setDispatchOverride;
  _exports.setOnerror = setOnerror;
  var onerror;
  var onErrorTarget = _exports.onErrorTarget = {
    get onerror() {
      return onerror;
    }
  };
  // Ember.onerror getter
  function getOnerror() {
    return onerror;
  }
  // Ember.onerror setter
  function setOnerror(handler) {
    onerror = handler;
  }
  var dispatchOverride = null;
  // allows testing adapter to override dispatch
  function getDispatchOverride() {
    return dispatchOverride;
  }
  function setDispatchOverride(handler) {
    dispatchOverride = handler;
  }
});
define("@ember/-internals/glimmer/index", ["exports", "@glimmer/opcode-compiler", "@ember/-internals/owner", "@ember/-internals/utils", "@ember/debug", "@glimmer/manager", "@glimmer/reference", "@glimmer/validator", "@ember/-internals/metal", "@ember/object", "@ember/-internals/browser-environment", "@ember/-internals/views", "@ember/engine", "@ember/engine/instance", "@ember/instrumentation", "@ember/service", "@ember/-internals/string", "@glimmer/destroyable", "@ember/runloop", "@glimmer/util", "@glimmer/runtime", "@ember/-internals/runtime", "@ember/object/-internals", "@ember/-internals/environment", "@ember/-internals/container", "@glimmer/node", "@ember/array/-internals", "@ember/-internals/glimmer", "@ember/array", "@glimmer/global-context", "@ember/routing/-internals", "@glimmer/program", "rsvp"], function (_exports, _opcodeCompiler, _owner2, _utils, _debug, _manager2, _reference, _validator, _metal, _object, _browserEnvironment, _views, _engine, _instance, _instrumentation, _service, _string, _destroyable, _runloop, _util, _runtime, _runtime2, _internals, _environment2, _container, _node, _internals2, _glimmer, _array, _globalContext, _internals3, _program, _rsvp) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Component = void 0;
  Object.defineProperty(_exports, "DOMChanges", {
    enumerable: true,
    get: function () {
      return _runtime.DOMChanges;
    }
  });
  Object.defineProperty(_exports, "DOMTreeConstruction", {
    enumerable: true,
    get: function () {
      return _runtime.DOMTreeConstruction;
    }
  });
  _exports.LinkTo = _exports.Input = _exports.Helper = void 0;
  Object.defineProperty(_exports, "NodeDOMTreeConstruction", {
    enumerable: true,
    get: function () {
      return _node.NodeDOMTreeConstruction;
    }
  });
  _exports.Textarea = _exports.SafeString = _exports.RootTemplate = _exports.Renderer = _exports.OutletView = void 0;
  _exports._resetRenderers = _resetRenderers;
  _exports.componentCapabilities = void 0;
  _exports.escapeExpression = escapeExpression;
  _exports.getTemplate = getTemplate;
  _exports.getTemplates = getTemplates;
  _exports.hasTemplate = hasTemplate;
  _exports.helper = helper;
  _exports.htmlSafe = htmlSafe;
  _exports.isHTMLSafe = isHTMLSafe$1;
  Object.defineProperty(_exports, "isSerializationFirstNode", {
    enumerable: true,
    get: function () {
      return _runtime.isSerializationFirstNode;
    }
  });
  _exports.modifierCapabilities = void 0;
  _exports.renderSettled = renderSettled;
  _exports.setComponentManager = setComponentManager$1;
  _exports.setTemplate = setTemplate;
  _exports.setTemplates = setTemplates;
  _exports.setupApplicationRegistry = setupApplicationRegistry;
  _exports.setupEngineRegistry = setupEngineRegistry;
  Object.defineProperty(_exports, "template", {
    enumerable: true,
    get: function () {
      return _opcodeCompiler.templateFactory;
    }
  });
  Object.defineProperty(_exports, "templateCacheCounters", {
    enumerable: true,
    get: function () {
      return _opcodeCompiler.templateCacheCounters;
    }
  });
  var RootTemplate = _exports.RootTemplate = (0, _opcodeCompiler.templateFactory)({
    "id": "9BtKrod8",
    "block": "[[[46,[30,0],null,null,null]],[],false,[\"component\"]]",
    "moduleName": "packages/@ember/-internals/glimmer/lib/templates/root.hbs",
    "isStrictMode": false
  });
  var InputTemplate = (0, _opcodeCompiler.templateFactory)({
    "id": "OGSIkgXP",
    "block": "[[[11,\"input\"],[16,1,[30,0,[\"id\"]]],[16,0,[30,0,[\"class\"]]],[17,1],[16,4,[30,0,[\"type\"]]],[16,\"checked\",[30,0,[\"checked\"]]],[16,2,[30,0,[\"value\"]]],[4,[38,0],[\"change\",[30,0,[\"change\"]]],null],[4,[38,0],[\"input\",[30,0,[\"input\"]]],null],[4,[38,0],[\"keyup\",[30,0,[\"keyUp\"]]],null],[4,[38,0],[\"paste\",[30,0,[\"valueDidChange\"]]],null],[4,[38,0],[\"cut\",[30,0,[\"valueDidChange\"]]],null],[12],[13]],[\"&attrs\"],false,[\"on\"]]",
    "moduleName": "packages/@ember/-internals/glimmer/lib/templates/input.hbs",
    "isStrictMode": false
  });
  function NOOP() {}
  class InternalComponent {
    // Override this
    static toString() {
      return 'internal component';
    }
    constructor(owner, args, caller) {
      this.owner = owner;
      this.args = args;
      this.caller = caller;
      (0, _owner2.setOwner)(this, owner);
    }
    /**
     * The default HTML id attribute. We don't really _need_ one, this is just
     * added for compatibility as it's hard to tell if people rely on it being
     * present, and it doens't really hurt.
     *
     * However, don't rely on this internally, like passing it to `getElementId`.
     * This can be (and often is) overriden by passing an `id` attribute on the
     * invocation, which shadows this default id via `...attributes`.
     */
    get id() {
      return (0, _utils.guidFor)(this);
    }
    /**
     * The default HTML class attribute. Similar to the above, we don't _need_
     * them, they are just added for compatibility as it's similarly hard to tell
     * if people rely on it in their CSS etc, and it doens't really hurt.
     */
    get class() {
      return 'ember-view';
    }
    validateArguments() {
      for (var name of Object.keys(this.args.named)) {
        if (!this.isSupportedArgument(name)) {
          this.onUnsupportedArgument(name);
        }
      }
    }
    named(name) {
      var ref = this.args.named[name];
      return ref ? (0, _reference.valueForRef)(ref) : undefined;
    }
    positional(index) {
      var ref = this.args.positional[index];
      return ref ? (0, _reference.valueForRef)(ref) : undefined;
    }
    listenerFor(name) {
      var listener = this.named(name);
      if (listener) {
        (true && !(typeof listener === 'function') && (0, _debug.assert)(`The \`@${name}\` argument to the <${this.constructor}> component must be a function`, typeof listener === 'function'));
        return listener;
      } else {
        return NOOP;
      }
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    isSupportedArgument(_name) {
      return false;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onUnsupportedArgument(_name) {}
    toString() {
      return `<${this.constructor}:${(0, _utils.guidFor)(this)}>`;
    }
  }
  var OPAQUE_CONSTRUCTOR_MAP = new WeakMap();
  function opaquify(constructor, template) {
    var _opaque = {
      // Factory interface
      create() {
        throw (0, _debug.assert)('Use constructor instead of create');
      },
      toString() {
        return constructor.toString();
      }
    };
    var opaque = _opaque;
    OPAQUE_CONSTRUCTOR_MAP.set(opaque, constructor);
    (0, _manager2.setInternalComponentManager)(INTERNAL_COMPONENT_MANAGER, opaque);
    (0, _manager2.setComponentTemplate)(template, opaque);
    return opaque;
  }
  function deopaquify(opaque) {
    var constructor = OPAQUE_CONSTRUCTOR_MAP.get(opaque);
    (true && !(constructor) && (0, _debug.assert)(`[BUG] Invalid internal component constructor: ${opaque}`, constructor));
    return constructor;
  }
  var CAPABILITIES = {
    dynamicLayout: false,
    dynamicTag: false,
    prepareArgs: false,
    createArgs: true,
    attributeHook: false,
    elementHook: false,
    createCaller: true,
    dynamicScope: false,
    updateHook: false,
    createInstance: true,
    wrapped: false,
    willDestroy: false,
    hasSubOwner: false
  };
  class InternalManager {
    getCapabilities() {
      return CAPABILITIES;
    }
    create(owner, definition, args, _env, _dynamicScope, caller) {
      (true && !((0, _reference.isConstRef)(caller)) && (0, _debug.assert)('caller must be const', (0, _reference.isConstRef)(caller)));
      var ComponentClass = deopaquify(definition);
      var instance = new ComponentClass(owner, args.capture(), (0, _reference.valueForRef)(caller));
      (0, _validator.untrack)(instance['validateArguments'].bind(instance));
      return instance;
    }
    didCreate() {}
    didUpdate() {}
    didRenderLayout() {}
    didUpdateLayout() {}
    getDebugName(definition) {
      return definition.toString();
    }
    getSelf(instance) {
      return (0, _reference.createConstRef)(instance, 'this');
    }
    getDestroyable(instance) {
      return instance;
    }
  }
  var INTERNAL_COMPONENT_MANAGER = new InternalManager();
  var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var UNINITIALIZED = Object.freeze({});
  function elementForEvent(event) {
    (true && !(event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement) && (0, _debug.assert)('[BUG] event target must be an <input> or <textarea> element', event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement));
    return event.target;
  }
  function valueForEvent(event) {
    return elementForEvent(event).value;
  }
  function devirtualize(callback) {
    return event => callback(valueForEvent(event), event);
  }
  function valueFrom(reference) {
    if (reference === undefined) {
      return new LocalValue(undefined);
    } else if ((0, _reference.isConstRef)(reference)) {
      return new LocalValue((0, _reference.valueForRef)(reference));
    } else if ((0, _reference.isUpdatableRef)(reference)) {
      return new UpstreamValue(reference);
    } else {
      return new ForkedValue(reference);
    }
  }
  class LocalValue {
    constructor(value) {
      this.value = value;
    }
    get() {
      return this.value;
    }
    set(value) {
      this.value = value;
    }
  }
  __decorate([_metal.tracked], LocalValue.prototype, "value", void 0);
  class UpstreamValue {
    constructor(reference) {
      this.reference = reference;
    }
    get() {
      return (0, _reference.valueForRef)(this.reference);
    }
    set(value) {
      (0, _reference.updateRef)(this.reference, value);
    }
  }
  class ForkedValue {
    constructor(reference) {
      this.lastUpstreamValue = UNINITIALIZED;
      this.upstream = new UpstreamValue(reference);
    }
    get() {
      var upstreamValue = this.upstream.get();
      if (upstreamValue !== this.lastUpstreamValue) {
        this.lastUpstreamValue = upstreamValue;
        this.local = new LocalValue(upstreamValue);
      }
      (true && !(this.local) && (0, _debug.assert)('[BUG] this.local must have been initialized at this point', this.local));
      return this.local.get();
    }
    set(value) {
      (true && !(this.local) && (0, _debug.assert)('[BUG] this.local must have been initialized at this point', this.local));
      this.local.set(value);
    }
  }
  class AbstractInput extends InternalComponent {
    constructor() {
      super(...arguments);
      this._value = valueFrom(this.args.named['value']);
    }
    validateArguments() {
      (true && !(this.args.positional.length === 0) && (0, _debug.assert)(`The ${this.constructor} component does not take any positional arguments`, this.args.positional.length === 0));
      super.validateArguments();
    }
    get value() {
      return this._value.get();
    }
    set value(value) {
      this._value.set(value);
    }
    valueDidChange(event) {
      this.value = valueForEvent(event);
    }
    /**
     * The `change` and `input` actions need to be overridden in the `Input`
     * subclass. Unfortunately, some ember-source builds currently uses babel
     * loose mode to transpile its classes. Having the `@action` decorator on the
     * super class creates a getter on the prototype, and when the subclass
     * overrides the method, the loose mode transpilation would emit something
     * like `Subclass.prototype['change'] = function change() { ... }`, which
     * fails because `prototype['change']` is getter-only/readonly. The correct
     * solution is to use `Object.defineProperty(prototype, 'change', ...)` but
     * that requires disabling loose mode. For now, the workaround is to add the
     * decorator only on the subclass. This is more of a configuration issue on
     * our own builds and doesn't really affect apps.
     */
    /* @action */
    change(event) {
      this.valueDidChange(event);
    }
    /* @action */
    input(event) {
      this.valueDidChange(event);
    }
    keyUp(event) {
      switch (event.key) {
        case 'Enter':
          this.listenerFor('enter')(event);
          this.listenerFor('insert-newline')(event);
          break;
        case 'Escape':
          this.listenerFor('escape-press')(event);
          break;
      }
    }
    listenerFor(name) {
      var listener = super.listenerFor(name);
      if (this.isVirtualEventListener(name, listener)) {
        return devirtualize(listener);
      } else {
        return listener;
      }
    }
    isVirtualEventListener(name, _listener) {
      var virtualEvents = ['enter', 'insert-newline', 'escape-press'];
      return virtualEvents.indexOf(name) !== -1;
    }
  }
  __decorate([_object.action], AbstractInput.prototype, "valueDidChange", null);
  __decorate([_object.action], AbstractInput.prototype, "keyUp", null);
  var __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var isValidInputType;
  if (_browserEnvironment.hasDOM) {
    var INPUT_TYPES = Object.create(null);
    var INPUT_ELEMENT = document.createElement('input');
    INPUT_TYPES[''] = false;
    INPUT_TYPES['text'] = true;
    INPUT_TYPES['checkbox'] = true;
    isValidInputType = type => {
      var isValid = INPUT_TYPES[type];
      if (isValid === undefined) {
        try {
          INPUT_ELEMENT.type = type;
          isValid = INPUT_ELEMENT.type === type;
        } catch (e) {
          isValid = false;
        } finally {
          INPUT_ELEMENT.type = 'text';
        }
        INPUT_TYPES[type] = isValid;
      }
      return isValid;
    };
  } else {
    isValidInputType = type => type !== '';
  }
  /**
    See [Ember.Templates.components.Input](/ember/release/classes/Ember.Templates.components/methods/Input?anchor=Input).
  
    @method input
    @for Ember.Templates.helpers
    @param {Hash} options
    @public
    */
  /**
    An opaque interface which can be imported and used in strict-mode
    templates to call <Input>.
  
    See [Ember.Templates.components.Input](/ember/release/classes/Ember.Templates.components/methods/Input?anchor=Input).
  
    @for @ember/component
    @method Input
    @see {Ember.Templates.components.Input}
    @public
  **/
  /**
    The `Input` component lets you create an HTML `<input>` element.
  
    ```handlebars
    <Input @value="987" />
    ```
  
    creates an `<input>` element with `type="text"` and value set to 987.
  
    ### Text field
  
    If no `type` argument is specified, a default of type 'text' is used.
  
    ```handlebars
    Search:
    <Input @value={{this.searchWord}} />
    ```
  
    In this example, the initial value in the `<input>` will be set to the value of
    `this.searchWord`. If the user changes the text, the value of `this.searchWord` will also be
    updated.
  
    ### Actions
  
    The `Input` component takes a number of arguments with callbacks that are invoked in response to
    user events.
  
    * `enter`
    * `insert-newline`
    * `escape-press`
    * `focus-in`
    * `focus-out`
    * `key-down`
    * `key-press`
    * `key-up`
  
    These callbacks are passed to `Input` like this:
  
    ```handlebars
    <Input @value={{this.searchWord}} @enter={{this.query}} />
    ```
  
    Starting with Ember Octane, we recommend using the `{{on}}` modifier to call actions
    on specific events, such as the input event.
  
    ```handlebars
    <label for="input-name">Name:</label>
    <Input
      @id="input-name"
      @value={{this.name}}
      {{on "input" this.validateName}}
    />
    ```
  
    The event name (e.g. `focusout`, `input`, `keydown`) always follows the casing
    that the HTML standard uses.
  
    ### `<input>` HTML Attributes to Avoid
  
    In most cases, if you want to pass an attribute to the underlying HTML `<input>` element, you
    can pass the attribute directly, just like any other Ember component.
  
    ```handlebars
    <Input @type="text" size="10" />
    ```
  
    In this example, the `size` attribute will be applied to the underlying `<input>` element in the
    outputted HTML.
  
    However, there are a few attributes where you **must** use the `@` version.
  
    * `@type`: This argument is used to control which Ember component is used under the hood
    * `@value`: The `@value` argument installs a two-way binding onto the element. If you wanted a
      one-way binding, use `<input>` with the `value` property and the `input` event instead.
    * `@checked` (for checkboxes): like `@value`, the `@checked` argument installs a two-way binding
      onto the element. If you wanted a one-way binding, use `<input type="checkbox">` with
      `checked` and the `input` event instead.
  
    ### Checkbox
  
    To create an `<input type="checkbox">`:
  
    ```handlebars
    Emberize Everything:
    <Input @type="checkbox" @checked={{this.isEmberized}} name="isEmberized" />
    ```
  
    This will bind the checked state of this checkbox to the value of `isEmberized` -- if either one
    changes, it will be reflected in the other.
  
    @method Input
    @for Ember.Templates.components
    @param {Hash} options
    @public
  */
  class Input extends AbstractInput {
    constructor() {
      super(...arguments);
      this._checked = valueFrom(this.args.named['checked']);
    }
    static toString() {
      return 'Input';
    }
    /**
     * The HTML class attribute.
     */
    get class() {
      if (this.isCheckbox) {
        return 'ember-checkbox ember-view';
      } else {
        return 'ember-text-field ember-view';
      }
    }
    /**
     * The HTML type attribute.
     */
    get type() {
      var type = this.named('type');
      if (type === null || type === undefined) {
        return 'text';
      }
      (true && !(typeof type === 'string') && (0, _debug.assert)('The `@type` argument to the <Input> component must be a string', typeof type === 'string'));
      return isValidInputType(type) ? type : 'text';
    }
    get isCheckbox() {
      return this.named('type') === 'checkbox';
    }
    get checked() {
      if (this.isCheckbox) {
        (true && (0, _debug.warn)('`<Input @type="checkbox" />` reflects its checked state via the `@checked` argument. ' + 'You wrote `<Input @type="checkbox" @value={{...}} />` which is likely not what you intended. ' + 'Did you mean `<Input @type="checkbox" @checked={{...}} />`?', (0, _validator.untrack)(() => this.args.named['checked'] !== undefined || this.args.named['value'] === undefined || typeof (0, _reference.valueForRef)(this.args.named['value']) === 'string'), {
          id: 'ember.built-in-components.input-checkbox-value'
        }));
        return this._checked.get();
      } else {
        return undefined;
      }
    }
    set checked(checked) {
      (true && (0, _debug.warn)('`<Input @type="checkbox" />` reflects its checked state via the `@checked` argument. ' + 'You wrote `<Input @type="checkbox" @value={{...}} />` which is likely not what you intended. ' + 'Did you mean `<Input @type="checkbox" @checked={{...}} />`?', (0, _validator.untrack)(() => this.args.named['checked'] !== undefined || this.args.named['value'] === undefined || typeof (0, _reference.valueForRef)(this.args.named['value']) === 'string'), {
        id: 'ember.built-in-components.input-checkbox-value'
      }));
      this._checked.set(checked);
    }
    change(event) {
      if (this.isCheckbox) {
        this.checkedDidChange(event);
      } else {
        super.change(event);
      }
    }
    input(event) {
      if (!this.isCheckbox) {
        super.input(event);
      }
    }
    checkedDidChange(event) {
      var element = event.target;
      (true && !(element instanceof HTMLInputElement) && (0, _debug.assert)('[BUG] element must be an <input>', element instanceof HTMLInputElement));
      this.checked = element.checked;
    }
    isSupportedArgument(name) {
      var supportedArguments = ['type', 'value', 'checked', 'enter', 'insert-newline', 'escape-press'];
      return supportedArguments.indexOf(name) !== -1 || super.isSupportedArgument(name);
    }
  }
  __decorate$1([_object.action], Input.prototype, "change", null);
  __decorate$1([_object.action], Input.prototype, "input", null);
  __decorate$1([_object.action], Input.prototype, "checkedDidChange", null);
  var Input$1 = _exports.Input = opaquify(Input, InputTemplate);
  var LinkToTemplate = (0, _opcodeCompiler.templateFactory)({
    "id": "CVwkBtGh",
    "block": "[[[11,3],[16,1,[30,0,[\"id\"]]],[16,0,[30,0,[\"class\"]]],[16,\"role\",[30,0,[\"role\"]]],[16,\"title\",[30,0,[\"title\"]]],[16,\"rel\",[30,0,[\"rel\"]]],[16,\"tabindex\",[30,0,[\"tabindex\"]]],[16,\"target\",[30,0,[\"target\"]]],[17,1],[16,6,[30,0,[\"href\"]]],[4,[38,0],[\"click\",[30,0,[\"click\"]]],null],[12],[18,2,null],[13]],[\"&attrs\",\"&default\"],false,[\"on\",\"yield\"]]",
    "moduleName": "packages/@ember/-internals/glimmer/lib/templates/link-to.hbs",
    "isStrictMode": false
  });
  var __decorate$2 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var EMPTY_ARRAY$1 = [];
  var EMPTY_QUERY_PARAMS = {};
  (0, _debug.debugFreeze)(EMPTY_ARRAY$1);
  (0, _debug.debugFreeze)(EMPTY_QUERY_PARAMS);
  function isMissing(value) {
    return value === null || value === undefined;
  }
  function isPresent(value) {
    return !isMissing(value);
  }
  function isQueryParams(value) {
    return typeof value === 'object' && value !== null && value['isQueryParams'] === true;
  }
  /**
    The `LinkTo` component renders a link to the supplied `routeName` passing an optionally
    supplied model to the route as its `model` context of the route. The block for `LinkTo`
    becomes the contents of the rendered element:
  
    ```handlebars
    <LinkTo @route='photoGallery'>
      Great Hamster Photos
    </LinkTo>
    ```
  
    This will result in:
  
    ```html
    <a href="/hamster-photos">
      Great Hamster Photos
    </a>
    ```
  
    ### Disabling the `LinkTo` component
  
    The `LinkTo` component can be disabled by using the `disabled` argument. A disabled link
    doesn't result in a transition when activated, and adds the `disabled` class to the `<a>`
    element.
  
    (The class name to apply to the element can be overridden by using the `disabledClass`
    argument)
  
    ```handlebars
    <LinkTo @route='photoGallery' @disabled={{true}}>
      Great Hamster Photos
    </LinkTo>
    ```
  
    ### Handling `href`
  
    `<LinkTo>` will use your application's Router to fill the element's `href` property with a URL
    that matches the path to the supplied `routeName`.
  
    ### Handling current route
  
    The `LinkTo` component will apply a CSS class name of 'active' when the application's current
    route matches the supplied routeName. For example, if the application's current route is
    'photoGallery.recent', then the following invocation of `LinkTo`:
  
    ```handlebars
    <LinkTo @route='photoGallery.recent'>
      Great Hamster Photos
    </LinkTo>
    ```
  
    will result in
  
    ```html
    <a href="/hamster-photos/this-week" class="active">
      Great Hamster Photos
    </a>
    ```
  
    The CSS class used for active classes can be customized by passing an `activeClass` argument:
  
    ```handlebars
    <LinkTo @route='photoGallery.recent' @activeClass="current-url">
      Great Hamster Photos
    </LinkTo>
    ```
  
    ```html
    <a href="/hamster-photos/this-week" class="current-url">
      Great Hamster Photos
    </a>
    ```
  
    ### Keeping a link active for other routes
  
    If you need a link to be 'active' even when it doesn't match the current route, you can use the
    `current-when` argument.
  
    ```handlebars
    <LinkTo @route='photoGallery' @current-when='photos'>
      Photo Gallery
    </LinkTo>
    ```
  
    This may be helpful for keeping links active for:
  
    * non-nested routes that are logically related
    * some secondary menu approaches
    * 'top navigation' with 'sub navigation' scenarios
  
    A link will be active if `current-when` is `true` or the current
    route is the route this link would transition to.
  
    To match multiple routes 'space-separate' the routes:
  
    ```handlebars
    <LinkTo @route='gallery' @current-when='photos drawings paintings'>
      Art Gallery
    </LinkTo>
    ```
  
    ### Supplying a model
  
    An optional `model` argument can be used for routes whose
    paths contain dynamic segments. This argument will become
    the model context of the linked route:
  
    ```javascript
    Router.map(function() {
      this.route("photoGallery", {path: "hamster-photos/:photo_id"});
    });
    ```
  
    ```handlebars
    <LinkTo @route='photoGallery' @model={{this.aPhoto}}>
      {{aPhoto.title}}
    </LinkTo>
    ```
  
    ```html
    <a href="/hamster-photos/42">
      Tomster
    </a>
    ```
  
    ### Supplying multiple models
  
    For deep-linking to route paths that contain multiple
    dynamic segments, the `models` argument can be used.
  
    As the router transitions through the route path, each
    supplied model argument will become the context for the
    route with the dynamic segments:
  
    ```javascript
    Router.map(function() {
      this.route("photoGallery", { path: "hamster-photos/:photo_id" }, function() {
        this.route("comment", {path: "comments/:comment_id"});
      });
    });
    ```
  
    This argument will become the model context of the linked route:
  
    ```handlebars
    <LinkTo @route='photoGallery.comment' @models={{array this.aPhoto this.comment}}>
      {{comment.body}}
    </LinkTo>
    ```
  
    ```html
    <a href="/hamster-photos/42/comments/718">
      A+++ would snuggle again.
    </a>
    ```
  
    ### Supplying an explicit dynamic segment value
  
    If you don't have a model object available to pass to `LinkTo`,
    an optional string or integer argument can be passed for routes whose
    paths contain dynamic segments. This argument will become the value
    of the dynamic segment:
  
    ```javascript
    Router.map(function() {
      this.route("photoGallery", { path: "hamster-photos/:photo_id" });
    });
    ```
  
    ```handlebars
    <LinkTo @route='photoGallery' @model={{aPhotoId}}>
      {{this.aPhoto.title}}
    </LinkTo>
    ```
  
    ```html
    <a href="/hamster-photos/42">
      Tomster
    </a>
    ```
  
    When transitioning into the linked route, the `model` hook will
    be triggered with parameters including this passed identifier.
  
    ### Supplying query parameters
  
    If you need to add optional key-value pairs that appear to the right of the ? in a URL,
    you can use the `query` argument.
  
    ```handlebars
    <LinkTo @route='photoGallery' @query={{hash page=1 per_page=20}}>
      Great Hamster Photos
    </LinkTo>
    ```
  
    This will result in:
  
    ```html
    <a href="/hamster-photos?page=1&per_page=20">
      Great Hamster Photos
    </a>
    ```
  
    @for Ember.Templates.components
    @method LinkTo
    @public
  */
  /**
    @module @ember/routing
  */
  /**
    See [Ember.Templates.components.LinkTo](/ember/release/classes/Ember.Templates.components/methods/input?anchor=LinkTo).
  
    @for Ember.Templates.helpers
    @method link-to
    @see {Ember.Templates.components.LinkTo}
    @public
  **/
  /**
    An opaque interface which can be imported and used in strict-mode
    templates to call <LinkTo>.
  
    See [Ember.Templates.components.LinkTo](/ember/release/classes/Ember.Templates.components/methods/input?anchor=LinkTo).
  
    @for @ember/routing
    @method LinkTo
    @see {Ember.Templates.components.LinkTo}
    @public
  **/
  class LinkTo extends InternalComponent {
    constructor() {
      super(...arguments);
      // GH #17963
      this.currentRouteCache = (0, _validator.createCache)(() => {
        (0, _validator.consumeTag)((0, _validator.tagFor)(this.routing, 'currentState'));
        return (0, _validator.untrack)(() => this.routing.currentRouteName);
      });
    }
    static toString() {
      return 'LinkTo';
    }
    validateArguments() {
      (true && !(!this.isEngine || this.engineMountPoint !== undefined) && (0, _debug.assert)('You attempted to use the <LinkTo> component within a routeless engine, this is not supported. ' + 'If you are using the ember-engines addon, use the <LinkToExternal> component instead. ' + 'See https://ember-engines.com/docs/links for more info.', !this.isEngine || this.engineMountPoint !== undefined));
      (true && !('route' in this.args.named || 'model' in this.args.named || 'models' in this.args.named || 'query' in this.args.named) && (0, _debug.assert)('You must provide at least one of the `@route`, `@model`, `@models` or `@query` arguments to `<LinkTo>`.', 'route' in this.args.named || 'model' in this.args.named || 'models' in this.args.named || 'query' in this.args.named));
      (true && !(!('model' in this.args.named && 'models' in this.args.named)) && (0, _debug.assert)('You cannot provide both the `@model` and `@models` arguments to the <LinkTo> component.', !('model' in this.args.named && 'models' in this.args.named)));
      super.validateArguments();
    }
    get class() {
      var classes = 'ember-view';
      if (this.isActive) {
        classes += this.classFor('active');
        if (this.willBeActive === false) {
          classes += ' ember-transitioning-out';
        }
      } else if (this.willBeActive) {
        classes += ' ember-transitioning-in';
      }
      if (this.isLoading) {
        classes += this.classFor('loading');
      }
      if (this.isDisabled) {
        classes += this.classFor('disabled');
      }
      return classes;
    }
    get href() {
      if (this.isLoading) {
        return '#';
      }
      var {
        routing,
        route,
        models,
        query
      } = this;
      (true && !(isPresent(route)) && (0, _debug.assert)('[BUG] route can only be missing if isLoading is true', isPresent(route))); // consume the current router state so we invalidate when QP changes
      // TODO: can we narrow this down to QP changes only?
      (0, _validator.consumeTag)((0, _validator.tagFor)(routing, 'currentState'));
      if (true /* DEBUG */) {
        try {
          return routing.generateURL(route, models, query);
        } catch (e) {
          var details = e instanceof Error ? e.message : (0, _debug.inspect)(e);
          var message = `While generating link to route "${route}": ${details}`;
          if (e instanceof Error) {
            e.message = message;
            throw e;
          } else {
            throw message;
          }
        }
      } else {
        return routing.generateURL(route, models, query);
      }
    }
    click(event) {
      if (!(0, _views.isSimpleClick)(event)) {
        return;
      }
      var element = event.currentTarget;
      (true && !(element instanceof HTMLAnchorElement) && (0, _debug.assert)('[BUG] must be an <a> element', element instanceof HTMLAnchorElement));
      var isSelf = element.target === '' || element.target === '_self';
      if (isSelf) {
        this.preventDefault(event);
      } else {
        return;
      }
      if (this.isDisabled) {
        return;
      }
      if (this.isLoading) {
        (true && (0, _debug.warn)('This link is in an inactive loading state because at least one of its models ' + 'currently has a null/undefined value, or the provided route name is invalid.', false, {
          id: 'ember-glimmer.link-to.inactive-loading-state'
        }));
        return;
      }
      var {
        routing,
        route,
        models,
        query,
        replace
      } = this;
      var payload = {
        routeName: route,
        queryParams: query,
        transition: undefined
      };
      (0, _instrumentation.flaggedInstrument)('interaction.link-to', payload, () => {
        (true && !(isPresent(route)) && (0, _debug.assert)('[BUG] route can only be missing if isLoading is true', isPresent(route)));
        payload.transition = routing.transitionTo(route, models, query, replace);
      });
    }
    get route() {
      if ('route' in this.args.named) {
        var route = this.named('route');
        (true && !(isMissing(route) || typeof route === 'string') && (0, _debug.assert)('The `@route` argument to the <LinkTo> component must be a string', isMissing(route) || typeof route === 'string'));
        return route && this.namespaceRoute(route);
      } else {
        return this.currentRoute;
      }
    }
    get currentRoute() {
      return (0, _validator.getValue)(this.currentRouteCache);
    }
    // TODO: not sure why generateURL takes {}[] instead of unknown[]
    get models() {
      if ('models' in this.args.named) {
        var models = this.named('models');
        (true && !(Array.isArray(models)) && (0, _debug.assert)('The `@models` argument to the <LinkTo> component must be an array.', Array.isArray(models)));
        return models;
      } else if ('model' in this.args.named) {
        return [this.named('model')];
      } else {
        return EMPTY_ARRAY$1;
      }
    }
    get query() {
      if ('query' in this.args.named) {
        var query = this.named('query');
        (true && !(query !== null && typeof query === 'object') && (0, _debug.assert)('The `@query` argument to the <LinkTo> component must be an object.', query !== null && typeof query === 'object'));
        return Object.assign({}, query);
      } else {
        return EMPTY_QUERY_PARAMS;
      }
    }
    get replace() {
      return this.named('replace') === true;
    }
    get isActive() {
      return this.isActiveForState(this.routing.currentState);
    }
    get willBeActive() {
      var current = this.routing.currentState;
      var target = this.routing.targetState;
      if (current === target) {
        return null;
      } else {
        return this.isActiveForState(target);
      }
    }
    get isLoading() {
      return isMissing(this.route) || this.models.some(model => isMissing(model));
    }
    get isDisabled() {
      return Boolean(this.named('disabled'));
    }
    get isEngine() {
      var owner = this.owner;
      return owner instanceof _instance.default && (0, _engine.getEngineParent)(owner) !== undefined;
    }
    get engineMountPoint() {
      var owner = this.owner;
      return owner instanceof _instance.default ? owner.mountPoint : undefined;
    }
    classFor(state) {
      var className = this.named(`${state}Class`);
      (true && !(isMissing(className) || typeof className === 'string' || typeof className === 'boolean') && (0, _debug.assert)(`The \`@${state}Class\` argument to the <LinkTo> component must be a string or boolean`, isMissing(className) || typeof className === 'string' || typeof className === 'boolean'));
      if (className === true || isMissing(className)) {
        return ` ${state}`;
      } else if (className) {
        return ` ${className}`;
      } else {
        return '';
      }
    }
    namespaceRoute(route) {
      var {
        engineMountPoint
      } = this;
      if (engineMountPoint === undefined) {
        return route;
      } else if (route === 'application') {
        return engineMountPoint;
      } else {
        return `${engineMountPoint}.${route}`;
      }
    }
    isActiveForState(state) {
      if (!isPresent(state)) {
        return false;
      }
      if (this.isLoading) {
        return false;
      }
      var currentWhen = this.named('current-when');
      if (typeof currentWhen === 'boolean') {
        return currentWhen;
      } else if (typeof currentWhen === 'string') {
        var {
          models,
          routing
        } = this;
        return currentWhen.split(' ').some(route => routing.isActiveForRoute(models, undefined, this.namespaceRoute(route), state));
      } else {
        var {
          route,
          models: _models,
          query,
          routing: _routing
        } = this;
        (true && !(isPresent(route)) && (0, _debug.assert)('[BUG] route can only be missing if isLoading is true', isPresent(route)));
        return _routing.isActiveForRoute(_models, query, route, state);
      }
    }
    preventDefault(event) {
      event.preventDefault();
    }
    isSupportedArgument(name) {
      var supportedArguments = ['route', 'model', 'models', 'query', 'replace', 'disabled', 'current-when', 'activeClass', 'loadingClass', 'disabledClass'];
      return supportedArguments.indexOf(name) !== -1 || super.isSupportedArgument(name);
    }
  }
  __decorate$2([(0, _service.service)('-routing')], LinkTo.prototype, "routing", void 0);
  __decorate$2([_object.action], LinkTo.prototype, "click", null);
  var {
    prototype
  } = LinkTo;
  var descriptorFor = (target, property) => {
    if (target) {
      return Object.getOwnPropertyDescriptor(target, property) || descriptorFor(Object.getPrototypeOf(target), property);
    } else {
      return null;
    }
  };
  // @href
  {
    var superOnUnsupportedArgument = prototype['onUnsupportedArgument'];
    Object.defineProperty(prototype, 'onUnsupportedArgument', {
      configurable: true,
      enumerable: false,
      value: function onUnsupportedArgument(name) {
        if (name === 'href') {
          (true && !(false) && (0, _debug.assert)(`Passing the \`@href\` argument to <LinkTo> is not supported.`));
        } else {
          superOnUnsupportedArgument.call(this, name);
        }
      }
    });
  }
  // QP
  {
    var superModelsDescriptor = descriptorFor(prototype, 'models');
    (true && !(superModelsDescriptor && typeof superModelsDescriptor.get === 'function') && (0, _debug.assert)(`[BUG] expecting models to be a getter on <LinkTo>`, superModelsDescriptor && typeof superModelsDescriptor.get === 'function'));
    var superModelsGetter = superModelsDescriptor.get;
    Object.defineProperty(prototype, 'models', {
      configurable: true,
      enumerable: false,
      get: function models() {
        var models = superModelsGetter.call(this);
        if (models.length > 0 && !('query' in this.args.named)) {
          if (isQueryParams(models[models.length - 1])) {
            models = models.slice(0, -1);
          }
        }
        return models;
      }
    });
    var superQueryDescriptor = descriptorFor(prototype, 'query');
    (true && !(superQueryDescriptor && typeof superQueryDescriptor.get === 'function') && (0, _debug.assert)(`[BUG] expecting query to be a getter on <LinkTo>`, superQueryDescriptor && typeof superQueryDescriptor.get === 'function'));
    var superQueryGetter = superQueryDescriptor.get;
    Object.defineProperty(prototype, 'query', {
      configurable: true,
      enumerable: false,
      get: function query() {
        var _a;
        if ('query' in this.args.named) {
          var qp = superQueryGetter.call(this);
          if (isQueryParams(qp)) {
            return (_a = qp.values) !== null && _a !== void 0 ? _a : EMPTY_QUERY_PARAMS;
          } else {
            return qp;
          }
        } else {
          var models = superModelsGetter.call(this);
          if (models.length > 0) {
            var _qp = models[models.length - 1];
            if (isQueryParams(_qp) && _qp.values !== null) {
              return _qp.values;
            }
          }
          return EMPTY_QUERY_PARAMS;
        }
      }
    });
  }
  // Positional Arguments
  {
    var _superOnUnsupportedArgument = prototype['onUnsupportedArgument'];
    Object.defineProperty(prototype, 'onUnsupportedArgument', {
      configurable: true,
      enumerable: false,
      value: function onUnsupportedArgument(name) {
        if (name !== 'params') {
          _superOnUnsupportedArgument.call(this, name);
        }
      }
    });
  }
  var LinkTo$1 = _exports.LinkTo = opaquify(LinkTo, LinkToTemplate);
  var TextareaTemplate = (0, _opcodeCompiler.templateFactory)({
    "id": "OpzctQXz",
    "block": "[[[11,\"textarea\"],[16,1,[30,0,[\"id\"]]],[16,0,[30,0,[\"class\"]]],[17,1],[16,2,[30,0,[\"value\"]]],[4,[38,0],[\"change\",[30,0,[\"change\"]]],null],[4,[38,0],[\"input\",[30,0,[\"input\"]]],null],[4,[38,0],[\"keyup\",[30,0,[\"keyUp\"]]],null],[4,[38,0],[\"paste\",[30,0,[\"valueDidChange\"]]],null],[4,[38,0],[\"cut\",[30,0,[\"valueDidChange\"]]],null],[12],[13]],[\"&attrs\"],false,[\"on\"]]",
    "moduleName": "packages/@ember/-internals/glimmer/lib/templates/textarea.hbs",
    "isStrictMode": false
  });
  var __decorate$3 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  /**
    The `Textarea` component inserts a new instance of `<textarea>` tag into the template.
  
    The `@value` argument provides the content of the `<textarea>`.
  
    This template:
  
    ```handlebars
    <Textarea @value="A bunch of text" />
    ```
  
    Would result in the following HTML:
  
    ```html
    <textarea class="ember-text-area">
      A bunch of text
    </textarea>
    ```
  
    The `@value` argument is two-way bound. If the user types text into the textarea, the `@value`
    argument is updated. If the `@value` argument is updated, the text in the textarea is updated.
  
    In the following example, the `writtenWords` property on the component will be updated as the user
    types 'Lots of text' into the text area of their browser's window.
  
    ```app/components/word-editor.js
    import Component from '@glimmer/component';
    import { tracked } from '@glimmer/tracking';
  
    export default class WordEditorComponent extends Component {
      @tracked writtenWords = "Lots of text that IS bound";
    }
    ```
  
    ```handlebars
    <Textarea @value={{writtenWords}} />
    ```
  
    Would result in the following HTML:
  
    ```html
    <textarea class="ember-text-area">
      Lots of text that IS bound
    </textarea>
    ```
  
    If you wanted a one way binding, you could use the `<textarea>` element directly, and use the
    `value` DOM property and the `input` event.
  
    ### Actions
  
    The `Textarea` component takes a number of arguments with callbacks that are invoked in
    response to user events.
  
    * `enter`
    * `insert-newline`
    * `escape-press`
    * `focus-in`
    * `focus-out`
    * `key-press`
  
    These callbacks are passed to `Textarea` like this:
  
    ```handlebars
    <Textarea @value={{this.searchWord}} @enter={{this.query}} />
    ```
  
    ## Classic Invocation Syntax
  
    The `Textarea` component can also be invoked using curly braces, just like any other Ember
    component.
  
    For example, this is an invocation using angle-bracket notation:
  
    ```handlebars
    <Textarea @value={{this.searchWord}} @enter={{this.query}} />
    ```
  
    You could accomplish the same thing using classic invocation:
  
    ```handlebars
    {{textarea value=this.searchWord enter=this.query}}
    ```
  
    The main difference is that angle-bracket invocation supports any HTML attribute using HTML
    attribute syntax, because attributes and arguments have different syntax when using angle-bracket
    invocation. Curly brace invocation, on the other hand, only has a single syntax for arguments,
    and components must manually map attributes onto component arguments.
  
    When using classic invocation with `{{textarea}}`, only the following attributes are mapped onto
    arguments:
  
    * rows
    * cols
    * name
    * selectionEnd
    * selectionStart
    * autocomplete
    * wrap
    * lang
    * dir
    * value
  
    ## Classic `layout` and `layoutName` properties
  
    Because HTML `textarea` elements do not contain inner HTML the `layout` and
    `layoutName` properties will not be applied.
  
    @method Textarea
    @for Ember.Templates.components
    @public
  */
  /**
    See Ember.Templates.components.Textarea.
  
    @method textarea
    @for Ember.Templates.helpers
    @see {Ember.Templates.components.Textarea}
    @public
  */
  /**
    An opaque interface which can be imported and used in strict-mode
    templates to call <Textarea>.
  
    See [Ember.Templates.components.Textarea](/ember/release/classes/Ember.Templates.components/methods/Textarea?anchor=Input).
  
    @for @ember/component
    @method Textarea
    @see {Ember.Templates.components.Textarea}
    @public
  **/
  class Textarea extends AbstractInput {
    static toString() {
      return 'Textarea';
    }
    get class() {
      return 'ember-text-area ember-view';
    }
    // See abstract-input.ts for why these are needed
    change(event) {
      super.change(event);
    }
    input(event) {
      super.input(event);
    }
    isSupportedArgument(name) {
      var supportedArguments = ['type', 'value', 'enter', 'insert-newline', 'escape-press'];
      return supportedArguments.indexOf(name) !== -1 || super.isSupportedArgument(name);
    }
  }
  __decorate$3([_object.action], Textarea.prototype, "change", null);
  __decorate$3([_object.action], Textarea.prototype, "input", null);
  var Textarea$1 = _exports.Textarea = opaquify(Textarea, TextareaTemplate);
  function isTemplateFactory(template) {
    return typeof template === 'function';
  }
  function referenceForParts(rootRef, parts) {
    var isAttrs = parts[0] === 'attrs';
    // TODO deprecate this
    if (isAttrs) {
      parts.shift();
      if (parts.length === 1) {
        return (0, _reference.childRefFor)(rootRef, parts[0]);
      }
    }
    return (0, _reference.childRefFromParts)(rootRef, parts);
  }
  function parseAttributeBinding(microsyntax) {
    var colonIndex = microsyntax.indexOf(':');
    if (colonIndex === -1) {
      (true && !(microsyntax !== 'class') && (0, _debug.assert)('You cannot use class as an attributeBinding, use classNameBindings instead.', microsyntax !== 'class'));
      return [microsyntax, microsyntax, true];
    } else {
      var prop = microsyntax.substring(0, colonIndex);
      var attribute = microsyntax.substring(colonIndex + 1);
      (true && !(attribute !== 'class') && (0, _debug.assert)('You cannot use class as an attributeBinding, use classNameBindings instead.', attribute !== 'class'));
      return [prop, attribute, false];
    }
  }
  function installAttributeBinding(component, rootRef, parsed, operations) {
    var [prop, attribute, isSimple] = parsed;
    if (attribute === 'id') {
      var elementId = (0, _metal.get)(component, prop);
      if (elementId === undefined || elementId === null) {
        elementId = component.elementId;
      }
      var elementIdRef = (0, _reference.createPrimitiveRef)(elementId);
      operations.setAttribute('id', elementIdRef, true, null);
      return;
    }
    var isPath = prop.indexOf('.') > -1;
    var reference = isPath ? referenceForParts(rootRef, prop.split('.')) : (0, _reference.childRefFor)(rootRef, prop);
    (true && !(!(isSimple && isPath)) && (0, _debug.assert)(`Illegal attributeBinding: '${prop}' is not a valid attribute name.`, !(isSimple && isPath)));
    operations.setAttribute(attribute, reference, false, null);
  }
  function createClassNameBindingRef(rootRef, microsyntax, operations) {
    var parts = microsyntax.split(':');
    var [prop, truthy, falsy] = parts;
    // NOTE: This could be an empty string
    (true && !(prop !== undefined) && (0, _debug.assert)('has prop', prop !== undefined)); // Will always have at least one part
    var isStatic = prop === '';
    if (isStatic) {
      operations.setAttribute('class', (0, _reference.createPrimitiveRef)(truthy), true, null);
    } else {
      var isPath = prop.indexOf('.') > -1;
      var _parts = isPath ? prop.split('.') : [];
      var value = isPath ? referenceForParts(rootRef, _parts) : (0, _reference.childRefFor)(rootRef, prop);
      var ref;
      if (truthy === undefined) {
        ref = createSimpleClassNameBindingRef(value, isPath ? _parts[_parts.length - 1] : prop);
      } else {
        ref = createColonClassNameBindingRef(value, truthy, falsy);
      }
      operations.setAttribute('class', ref, false, null);
    }
  }
  function createSimpleClassNameBindingRef(inner, path) {
    var dasherizedPath;
    return (0, _reference.createComputeRef)(() => {
      var value = (0, _reference.valueForRef)(inner);
      if (value === true) {
        (true && !(path !== undefined) && (0, _debug.assert)('You must pass a path when binding a to a class name using classNameBindings', path !== undefined));
        return dasherizedPath || (dasherizedPath = (0, _string.dasherize)(path));
      } else if (value || value === 0) {
        return String(value);
      } else {
        return null;
      }
    });
  }
  function createColonClassNameBindingRef(inner, truthy, falsy) {
    return (0, _reference.createComputeRef)(() => {
      return (0, _reference.valueForRef)(inner) ? truthy : falsy;
    });
  }
  function NOOP$1() {}
  /**
    @module ember
  */
  /**
    Represents the internal state of the component.
  
    @class ComponentStateBucket
    @private
  */
  class ComponentStateBucket {
    constructor(component, args, argsTag, finalizer, hasWrappedElement, isInteractive) {
      this.component = component;
      this.args = args;
      this.argsTag = argsTag;
      this.finalizer = finalizer;
      this.hasWrappedElement = hasWrappedElement;
      this.isInteractive = isInteractive;
      this.classRef = null;
      this.classRef = null;
      this.argsRevision = args === null ? 0 : (0, _validator.valueForTag)(argsTag);
      this.rootRef = (0, _reference.createConstRef)(component, 'this');
      (0, _destroyable.registerDestructor)(this, () => this.willDestroy(), true);
      (0, _destroyable.registerDestructor)(this, () => this.component.destroy());
    }
    willDestroy() {
      var {
        component,
        isInteractive
      } = this;
      if (isInteractive) {
        (0, _validator.beginUntrackFrame)();
        component.trigger('willDestroyElement');
        component.trigger('willClearRender');
        (0, _validator.endUntrackFrame)();
        var element = (0, _views.getViewElement)(component);
        if (element) {
          (0, _views.clearElementView)(element);
          (0, _views.clearViewElement)(component);
        }
      }
      component.renderer.unregister(component);
    }
    finalize() {
      var {
        finalizer
      } = this;
      finalizer();
      this.finalizer = NOOP$1;
    }
  }
  function internalHelper(helper) {
    return (0, _manager2.setInternalHelperManager)(helper, {});
  }

  /**
  @module ember
  */
  var ACTIONS = new _util._WeakSet();
  /**
    The `{{action}}` helper provides a way to pass triggers for behavior (usually
    just a function) between components, and into components from controllers.
  
    ### Passing functions with the action helper
  
    There are three contexts an action helper can be used in. The first two
    contexts to discuss are attribute context, and Handlebars value context.
  
    ```handlebars
    {{! An example of attribute context }}
    <div onclick={{action "save"}}></div>
    {{! Examples of Handlebars value context }}
    {{input on-input=(action "save")}}
    {{yield (action "refreshData") andAnotherParam}}
    ```
  
    In these contexts,
    the helper is called a "closure action" helper. Its behavior is simple:
    If passed a function name, read that function off the `actions` property
    of the current context. Once that function is read, or immediately if a function was
    passed, create a closure over that function and any arguments.
    The resulting value of an action helper used this way is simply a function.
  
    For example, in the attribute context:
  
    ```handlebars
    {{! An example of attribute context }}
    <div onclick={{action "save"}}></div>
    ```
  
    The resulting template render logic would be:
  
    ```js
    var div = document.createElement('div');
    var actionFunction = (function(context){
      return function() {
        return context.actions.save.apply(context, arguments);
      };
    })(context);
    div.onclick = actionFunction;
    ```
  
    Thus when the div is clicked, the action on that context is called.
    Because the `actionFunction` is just a function, closure actions can be
    passed between components and still execute in the correct context.
  
    Here is an example action handler on a component:
  
    ```app/components/my-component.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';
  
    export default class extends Component {
      @action
      save() {
        this.model.save();
      }
    }
    ```
  
    Actions are always looked up on the `actions` property of the current context.
    This avoids collisions in the naming of common actions, such as `destroy`.
    Two options can be passed to the `action` helper when it is used in this way.
  
    * `target=someProperty` will look to `someProperty` instead of the current
      context for the `actions` hash. This can be useful when targeting a
      service for actions.
    * `value="target.value"` will read the path `target.value` off the first
      argument to the action when it is called and rewrite the first argument
      to be that value. This is useful when attaching actions to event listeners.
  
    ### Invoking an action
  
    Closure actions curry both their scope and any arguments. When invoked, any
    additional arguments are added to the already curried list.
    Actions are presented in JavaScript as callbacks, and are
    invoked like any other JavaScript function.
  
    For example
  
    ```app/components/update-name.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';
  
    export default class extends Component {
      @action
      setName(model, name) {
        model.set('name', name);
      }
    }
    ```
  
    ```app/components/update-name.hbs
    {{input on-input=(action (action 'setName' @model) value="target.value")}}
    ```
  
    The first argument (`@model`) was curried over, and the run-time argument (`event`)
    becomes a second argument. Action calls can be nested this way because each simply
    returns a function. Any function can be passed to the `{{action}}` helper, including
    other actions.
  
    Actions invoked with `sendAction` have the same currying behavior as demonstrated
    with `on-input` above. For example:
  
    ```app/components/my-input.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';
  
    export default class extends Component {
      @action
      setName(model, name) {
        model.set('name', name);
      }
    }
    ```
  
    ```handlebars
    <MyInput @submit={{action 'setName' @model}} />
    ```
  
    or
  
    ```handlebars
    {{my-input submit=(action 'setName' @model)}}
    ```
  
    ```app/components/my-component.js
    import Component from '@ember/component';
  
    export default Component.extend({
      click() {
        // Note that model is not passed, it was curried in the template
        this.submit('bob');
      }
    });
    ```
  
    ### Attaching actions to DOM elements
  
    The third context of the `{{action}}` helper can be called "element space".
    For example:
  
    ```handlebars
    {{! An example of element space }}
    <div {{action "save"}}></div>
    ```
  
    Used this way, the `{{action}}` helper provides a useful shortcut for
    registering an HTML element in a template for a single DOM event and
    forwarding that interaction to the template's context (controller or component).
    If the context of a template is a controller, actions used this way will
    bubble to routes when the controller does not implement the specified action.
    Once an action hits a route, it will bubble through the route hierarchy.
  
    ### Event Propagation
  
    `{{action}}` helpers called in element space can control event bubbling. Note
    that the closure style actions cannot.
  
    Events triggered through the action helper will automatically have
    `.preventDefault()` called on them. You do not need to do so in your event
    handlers. If you need to allow event propagation (to handle file inputs for
    example) you can supply the `preventDefault=false` option to the `{{action}}` helper:
  
    ```handlebars
    <div {{action "sayHello" preventDefault=false}}>
      <input type="file" />
      <input type="checkbox" />
    </div>
    ```
  
    To disable bubbling, pass `bubbles=false` to the helper:
  
    ```handlebars
    <button {{action 'edit' post bubbles=false}}>Edit</button>
    ```
  
    To disable bubbling with closure style actions you must create your own
    wrapper helper that makes use of `event.stopPropagation()`:
  
    ```handlebars
    <div onclick={{disable-bubbling (action "sayHello")}}>Hello</div>
    ```
  
    ```app/helpers/disable-bubbling.js
    import { helper } from '@ember/component/helper';
  
    export function disableBubbling([action]) {
      return function(event) {
        event.stopPropagation();
        return action(event);
      };
    }
    export default helper(disableBubbling);
    ```
  
    If you need the default handler to trigger you should either register your
    own event handler, or use event methods on your view class. See
    ["Responding to Browser Events"](/ember/release/classes/Component)
    in the documentation for `Component` for more information.
  
    ### Specifying DOM event type
  
    `{{action}}` helpers called in element space can specify an event type.
    By default the `{{action}}` helper registers for DOM `click` events. You can
    supply an `on` option to the helper to specify a different DOM event name:
  
    ```handlebars
    <div {{action "anActionName" on="doubleClick"}}>
      click me
    </div>
    ```
  
    See ["Event Names"](/ember/release/classes/Component) for a list of
    acceptable DOM event names.
  
    ### Specifying whitelisted modifier keys
  
    `{{action}}` helpers called in element space can specify modifier keys.
    By default the `{{action}}` helper will ignore click events with pressed modifier
    keys. You can supply an `allowedKeys` option to specify which keys should not be ignored.
  
    ```handlebars
    <div {{action "anActionName" allowedKeys="alt"}}>
      click me
    </div>
    ```
  
    This way the action will fire when clicking with the alt key pressed down.
    Alternatively, supply "any" to the `allowedKeys` option to accept any combination of modifier keys.
  
    ```handlebars
    <div {{action "anActionName" allowedKeys="any"}}>
      click me with any key pressed
    </div>
    ```
  
    ### Specifying a Target
  
    A `target` option can be provided to the helper to change
    which object will receive the method call. This option must be a path
    to an object, accessible in the current context:
  
    ```app/templates/application.hbs
    <div {{action "anActionName" target=someService}}>
      click me
    </div>
    ```
  
    ```app/controllers/application.js
    import Controller from '@ember/controller';
    import { service } from '@ember/service';
  
    export default class extends Controller {
      @service someService;
    }
    ```
  
    @method action
    @for Ember.Templates.helpers
    @public
  */
  var action$1 = internalHelper(args => {
    var {
      named,
      positional
    } = args;
    // The first two argument slots are reserved.
    // pos[0] is the context (or `this`)
    // pos[1] is the action name or function
    // Anything else is an action argument.
    var [context, action$$1, ...restArgs] = positional;
    (true && !(context && action$$1) && (0, _debug.assert)('hash position arguments', context && action$$1));
    var debugKey = action$$1.debugLabel;
    var target = 'target' in named ? named['target'] : context;
    var processArgs = makeArgsProcessor('value' in named && named['value'] || false, restArgs);
    var fn$$1;
    if ((0, _reference.isInvokableRef)(action$$1)) {
      fn$$1 = makeClosureAction(action$$1, action$$1, invokeRef, processArgs, debugKey);
    } else {
      fn$$1 = makeDynamicClosureAction((0, _reference.valueForRef)(context), target, action$$1, processArgs, debugKey);
    }
    ACTIONS.add(fn$$1);
    return (0, _reference.createUnboundRef)(fn$$1, '(result of an `action` helper)');
  });
  function NOOP$2(args) {
    return args;
  }
  function makeArgsProcessor(valuePathRef, actionArgsRef) {
    var mergeArgs;
    if (actionArgsRef.length > 0) {
      mergeArgs = args => {
        return actionArgsRef.map(_reference.valueForRef).concat(args);
      };
    }
    var readValue;
    if (valuePathRef) {
      readValue = args => {
        var valuePath = (0, _reference.valueForRef)(valuePathRef);
        if (valuePath && args.length > 0) {
          args[0] = (0, _metal.get)(args[0], valuePath);
        }
        return args;
      };
    }
    if (mergeArgs && readValue) {
      return args => {
        return readValue(mergeArgs(args));
      };
    } else {
      return mergeArgs || readValue || NOOP$2;
    }
  }
  function makeDynamicClosureAction(context, targetRef, actionRef, processArgs, debugKey) {
    // We don't allow undefined/null values, so this creates a throw-away action to trigger the assertions
    if (true /* DEBUG */) {
      makeClosureAction(context, (0, _reference.valueForRef)(targetRef), (0, _reference.valueForRef)(actionRef), processArgs, debugKey);
    }
    return (...args) => {
      return makeClosureAction(context, (0, _reference.valueForRef)(targetRef), (0, _reference.valueForRef)(actionRef), processArgs, debugKey)(...args);
    };
  }
  function makeClosureAction(context, target, action$$1, processArgs, debugKey) {
    var self;
    var fn$$1;
    (true && !(action$$1 !== undefined && action$$1 !== null) && (0, _debug.assert)(`Action passed is null or undefined in (action) from ${target}.`, action$$1 !== undefined && action$$1 !== null));
    if (typeof action$$1 === 'string') {
      self = target;
      fn$$1 = target.actions && target.actions[action$$1];
      (true && !(Boolean(fn$$1)) && (0, _debug.assert)(`An action named '${action$$1}' was not found in ${target}`, Boolean(fn$$1)));
    } else if (typeof action$$1 === 'function') {
      self = context;
      fn$$1 = action$$1;
    } else {
      (true && !(false) && (0, _debug.assert)(`An action could not be made for \`${debugKey || action$$1}\` in ${target}. Please confirm that you are using either a quoted action name (i.e. \`(action '${debugKey || 'myAction'}')\`) or a function available in ${target}.`, false));
    }
    return (...args) => {
      var payload = {
        target: self,
        args,
        label: '@glimmer/closure-action'
      };
      return (0, _instrumentation.flaggedInstrument)('interaction.ember-action', payload, () => {
        return (0, _runloop.join)(self, fn$$1, ...processArgs(args));
      });
    };
  }
  // The code above:
  // 1. Finds an action function, usually on the `actions` hash
  // 2. Calls it with the target as the correct `this` context
  // Previously, `UPDATE_REFERENCED_VALUE` was a method on the reference itself,
  // so this made a bit more sense. Now, it isn't, and so we need to create a
  // function that can have `this` bound to it when called. This allows us to use
  // the same codepath to call `updateRef` on the reference.
  function invokeRef(value) {
    (0, _reference.updateRef)(this, value);
  }

  // ComponentArgs takes EvaluatedNamedArgs and converts them into the
  // inputs needed by CurlyComponents (attrs and props, with mutable
  // cells, etc).
  function processComponentArgs(namedArgs) {
    var attrs = Object.create(null);
    var props = Object.create(null);
    props[ARGS] = namedArgs;
    for (var name in namedArgs) {
      var ref = namedArgs[name];
      (true && !(ref) && (0, _debug.assert)('expected ref', ref));
      var value = (0, _reference.valueForRef)(ref);
      var isAction = typeof value === 'function' && ACTIONS.has(value);
      if ((0, _reference.isUpdatableRef)(ref) && !isAction) {
        attrs[name] = new MutableCell(ref, value);
      } else {
        attrs[name] = value;
      }
      props[name] = value;
    }
    props.attrs = attrs;
    return props;
  }
  var REF = Symbol('REF');
  class MutableCell {
    constructor(ref, value) {
      this[_views.MUTABLE_CELL] = true;
      this[REF] = ref;
      this.value = value;
    }
    update(val) {
      (0, _reference.updateRef)(this[REF], val);
    }
  }
  var __rest = undefined && undefined.__rest || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  var ARGS = (0, _utils.enumerableSymbol)('ARGS');
  var HAS_BLOCK = (0, _utils.enumerableSymbol)('HAS_BLOCK');
  var DIRTY_TAG = Symbol('DIRTY_TAG');
  var IS_DISPATCHING_ATTRS = Symbol('IS_DISPATCHING_ATTRS');
  var BOUNDS = Symbol('BOUNDS');
  var EMBER_VIEW_REF = (0, _reference.createPrimitiveRef)('ember-view');
  function aliasIdToElementId(args, props) {
    if (args.named.has('id')) {
      (true && !(!args.named.has('elementId')) && (0, _debug.assert)(`You cannot invoke a component with both 'id' and 'elementId' at the same time.`, !args.named.has('elementId')));
      props.elementId = props.id;
    }
  }
  // We must traverse the attributeBindings in reverse keeping track of
  // what has already been applied. This is essentially refining the concatenated
  // properties applying right to left.
  function applyAttributeBindings(attributeBindings, component, rootRef, operations) {
    var seen = [];
    var i = attributeBindings.length - 1;
    while (i !== -1) {
      var binding = attributeBindings[i];
      (true && !(binding) && (0, _debug.assert)('has binding', binding));
      var parsed = parseAttributeBinding(binding);
      var attribute = parsed[1];
      if (seen.indexOf(attribute) === -1) {
        seen.push(attribute);
        installAttributeBinding(component, rootRef, parsed, operations);
      }
      i--;
    }
    if (seen.indexOf('id') === -1) {
      var id = component.elementId ? component.elementId : (0, _utils.guidFor)(component);
      operations.setAttribute('id', (0, _reference.createPrimitiveRef)(id), false, null);
    }
  }
  var EMPTY_POSITIONAL_ARGS = [];
  (0, _debug.debugFreeze)(EMPTY_POSITIONAL_ARGS);
  class CurlyComponentManager {
    templateFor(component) {
      var {
        layout,
        layoutName
      } = component;
      var owner = (0, _owner2.getOwner)(component);
      (true && !(owner) && (0, _debug.assert)('Component is unexpectedly missing an owner', owner));
      var factory;
      if (layout === undefined) {
        if (layoutName !== undefined) {
          var _factory = owner.lookup(`template:${layoutName}`);
          (true && !(_factory !== undefined) && (0, _debug.assert)(`Layout \`${layoutName}\` not found!`, _factory !== undefined));
          factory = _factory;
        } else {
          return null;
        }
      } else if (isTemplateFactory(layout)) {
        factory = layout;
      } else {
        // no layout was found, use the default layout
        return null;
      }
      return (0, _util.unwrapTemplate)(factory(owner)).asWrappedLayout();
    }
    getDynamicLayout(bucket) {
      return this.templateFor(bucket.component);
    }
    getTagName(state) {
      var {
        component,
        hasWrappedElement
      } = state;
      if (!hasWrappedElement) {
        return null;
      }
      return component && component.tagName || 'div';
    }
    getCapabilities() {
      return CURLY_CAPABILITIES;
    }
    prepareArgs(ComponentClass, args) {
      var _a;
      if (args.named.has('__ARGS__')) {
        (true && !(args.positional.length === 0) && (0, _debug.assert)('[BUG] cannot pass both __ARGS__ and positional arguments', args.positional.length === 0));
        var _b = args.named.capture(),
          {
            __ARGS__
          } = _b,
          rest = __rest(_b, ["__ARGS__"]);
        (true && !(__ARGS__) && (0, _debug.assert)('[BUG] unexpectedly missing __ARGS__ after check', __ARGS__)); // does this need to be untracked?
        var __args__ = (0, _reference.valueForRef)(__ARGS__);
        var prepared = {
          positional: __args__.positional,
          named: Object.assign(Object.assign({}, rest), __args__.named)
        };
        return prepared;
      }
      var {
        positionalParams
      } = (_a = ComponentClass.class) !== null && _a !== void 0 ? _a : ComponentClass;
      // early exits
      if (positionalParams === undefined || positionalParams === null || args.positional.length === 0) {
        return null;
      }
      var named;
      if (typeof positionalParams === 'string') {
        (true && !(!args.named.has(positionalParams)) && (0, _debug.assert)(`You cannot specify positional parameters and the hash argument \`${positionalParams}\`.`, !args.named.has(positionalParams)));
        var captured = args.positional.capture();
        named = {
          [positionalParams]: (0, _reference.createComputeRef)(() => (0, _runtime.reifyPositional)(captured))
        };
        Object.assign(named, args.named.capture());
      } else if (Array.isArray(positionalParams) && positionalParams.length > 0) {
        var count = Math.min(positionalParams.length, args.positional.length);
        named = {};
        Object.assign(named, args.named.capture());
        for (var i = 0; i < count; i++) {
          var name = positionalParams[i];
          (true && !(name) && (0, _debug.assert)('Expected at least one positional param', name));
          (true && !(!args.named.has(name)) && (0, _debug.assert)(`You cannot specify both a positional param (at position ${i}) and the hash argument \`${name}\`.`, !args.named.has(name)));
          named[name] = args.positional.at(i);
        }
      } else {
        return null;
      }
      return {
        positional: _util.EMPTY_ARRAY,
        named
      };
    }
    /*
     * This hook is responsible for actually instantiating the component instance.
     * It also is where we perform additional bookkeeping to support legacy
     * features like exposed by view mixins like ChildViewSupport, ActionSupport,
     * etc.
     */
    create(owner, ComponentClass, args, {
      isInteractive
    }, dynamicScope, callerSelfRef, hasBlock) {
      // Get the nearest concrete component instance from the scope. "Virtual"
      // components will be skipped.
      var parentView = dynamicScope.view;
      // Capture the arguments, which tells Glimmer to give us our own, stable
      // copy of the Arguments object that is safe to hold on to between renders.
      var capturedArgs = args.named.capture();
      (0, _validator.beginTrackFrame)();
      var props = processComponentArgs(capturedArgs);
      var argsTag = (0, _validator.endTrackFrame)();
      // Alias `id` argument to `elementId` property on the component instance.
      aliasIdToElementId(args, props);
      // Set component instance's parentView property to point to nearest concrete
      // component.
      props.parentView = parentView;
      // Set whether this component was invoked with a block
      // (`{{#my-component}}{{/my-component}}`) or without one
      // (`{{my-component}}`).
      props[HAS_BLOCK] = hasBlock;
      // Save the current `this` context of the template as the component's
      // `_target`, so bubbled actions are routed to the right place.
      props._target = (0, _reference.valueForRef)(callerSelfRef);
      (0, _owner2.setOwner)(props, owner);
      // caller:
      // <FaIcon @name="bug" />
      //
      // callee:
      // <i class="fa-{{@name}}"></i>
      // Now that we've built up all of the properties to set on the component instance,
      // actually create it.
      (0, _validator.beginUntrackFrame)();
      var component = ComponentClass.create(props);
      var finalizer = (0, _instrumentation._instrumentStart)('render.component', initialRenderInstrumentDetails, component);
      // We become the new parentView for downstream components, so save our
      // component off on the dynamic scope.
      dynamicScope.view = component;
      // Unless we're the root component, we need to add ourselves to our parent
      // component's childViews array.
      if (parentView !== null && parentView !== undefined) {
        (0, _views.addChildView)(parentView, component);
      }
      component.trigger('didReceiveAttrs');
      var hasWrappedElement = component.tagName !== '';
      // We usually do this in the `didCreateElement`, but that hook doesn't fire for tagless components
      if (!hasWrappedElement) {
        if (isInteractive) {
          component.trigger('willRender');
        }
        component._transitionTo('hasElement');
        if (isInteractive) {
          component.trigger('willInsertElement');
        }
      }
      // Track additional lifecycle metadata about this component in a state bucket.
      // Essentially we're saving off all the state we'll need in the future.
      var bucket = new ComponentStateBucket(component, capturedArgs, argsTag, finalizer, hasWrappedElement, isInteractive);
      if (args.named.has('class')) {
        bucket.classRef = args.named.get('class');
      }
      if (true /* DEBUG */) {
        processComponentInitializationAssertions(component, props);
      }
      if (isInteractive && hasWrappedElement) {
        component.trigger('willRender');
      }
      (0, _validator.endUntrackFrame)();
      // consume every argument so we always run again
      (0, _validator.consumeTag)(bucket.argsTag);
      (0, _validator.consumeTag)(component[DIRTY_TAG]);
      return bucket;
    }
    getDebugName(definition) {
      var _a;
      return definition.fullName || definition.normalizedName || ((_a = definition.class) === null || _a === void 0 ? void 0 : _a.name) || definition.name;
    }
    getSelf({
      rootRef
    }) {
      return rootRef;
    }
    didCreateElement({
      component,
      classRef,
      isInteractive,
      rootRef
    }, element, operations) {
      (0, _views.setViewElement)(component, element);
      (0, _views.setElementView)(element, component);
      var {
        attributeBindings,
        classNames,
        classNameBindings
      } = component;
      if (attributeBindings && attributeBindings.length) {
        applyAttributeBindings(attributeBindings, component, rootRef, operations);
      } else {
        var id = component.elementId ? component.elementId : (0, _utils.guidFor)(component);
        operations.setAttribute('id', (0, _reference.createPrimitiveRef)(id), false, null);
      }
      if (classRef) {
        var ref = createSimpleClassNameBindingRef(classRef);
        operations.setAttribute('class', ref, false, null);
      }
      if (classNames && classNames.length) {
        classNames.forEach(name => {
          operations.setAttribute('class', (0, _reference.createPrimitiveRef)(name), false, null);
        });
      }
      if (classNameBindings && classNameBindings.length) {
        classNameBindings.forEach(binding => {
          createClassNameBindingRef(rootRef, binding, operations);
        });
      }
      operations.setAttribute('class', EMBER_VIEW_REF, false, null);
      if ('ariaRole' in component) {
        operations.setAttribute('role', (0, _reference.childRefFor)(rootRef, 'ariaRole'), false, null);
      }
      component._transitionTo('hasElement');
      if (isInteractive) {
        (0, _validator.beginUntrackFrame)();
        component.trigger('willInsertElement');
        (0, _validator.endUntrackFrame)();
      }
    }
    didRenderLayout(bucket, bounds) {
      bucket.component[BOUNDS] = bounds;
      bucket.finalize();
    }
    didCreate({
      component,
      isInteractive
    }) {
      if (isInteractive) {
        component._transitionTo('inDOM');
        component.trigger('didInsertElement');
        component.trigger('didRender');
      }
    }
    update(bucket) {
      var {
        component,
        args,
        argsTag,
        argsRevision,
        isInteractive
      } = bucket;
      bucket.finalizer = (0, _instrumentation._instrumentStart)('render.component', rerenderInstrumentDetails, component);
      (0, _validator.beginUntrackFrame)();
      if (args !== null && !(0, _validator.validateTag)(argsTag, argsRevision)) {
        (0, _validator.beginTrackFrame)();
        var props = processComponentArgs(args);
        argsTag = bucket.argsTag = (0, _validator.endTrackFrame)();
        bucket.argsRevision = (0, _validator.valueForTag)(argsTag);
        component[IS_DISPATCHING_ATTRS] = true;
        component.setProperties(props);
        component[IS_DISPATCHING_ATTRS] = false;
        component.trigger('didUpdateAttrs');
        component.trigger('didReceiveAttrs');
      }
      if (isInteractive) {
        component.trigger('willUpdate');
        component.trigger('willRender');
      }
      (0, _validator.endUntrackFrame)();
      (0, _validator.consumeTag)(argsTag);
      (0, _validator.consumeTag)(component[DIRTY_TAG]);
    }
    didUpdateLayout(bucket) {
      bucket.finalize();
    }
    didUpdate({
      component,
      isInteractive
    }) {
      if (isInteractive) {
        component.trigger('didUpdate');
        component.trigger('didRender');
      }
    }
    getDestroyable(bucket) {
      return bucket;
    }
  }
  function processComponentInitializationAssertions(component, props) {
    (true && !((() => {
      var {
        classNameBindings
      } = component;
      for (var i = 0; i < classNameBindings.length; i++) {
        var binding = classNameBindings[i];
        if (typeof binding !== 'string' || binding.length === 0) {
          return false;
        }
      }
      return true;
    })()) && (0, _debug.assert)(`classNameBindings must be non-empty strings: ${component}`, (() => {
      var {
        classNameBindings
      } = component;
      for (var i = 0; i < classNameBindings.length; i++) {
        var binding = classNameBindings[i];
        if (typeof binding !== 'string' || binding.length === 0) {
          return false;
        }
      }
      return true;
    })()));
    (true && !((() => {
      var {
        classNameBindings
      } = component;
      for (var binding of classNameBindings) {
        if (binding.split(' ').length > 1) {
          return false;
        }
      }
      return true;
    })()) && (0, _debug.assert)(`classNameBindings must not have spaces in them: ${component}`, (() => {
      var {
        classNameBindings
      } = component;
      for (var binding of classNameBindings) {
        if (binding.split(' ').length > 1) {
          return false;
        }
      }
      return true;
    })()));
    (true && !(component.tagName !== '' || !component.classNameBindings || component.classNameBindings.length === 0) && (0, _debug.assert)(`You cannot use \`classNameBindings\` on a tag-less component: ${component}`, component.tagName !== '' || !component.classNameBindings || component.classNameBindings.length === 0));
    (true && !(component.tagName !== '' || props.id === component.elementId || !component.elementId && component.elementId !== '') && (0, _debug.assert)(`You cannot use \`elementId\` on a tag-less component: ${component}`, component.tagName !== '' || props.id === component.elementId || !component.elementId && component.elementId !== ''));
    (true && !(component.tagName !== '' || !component.attributeBindings || component.attributeBindings.length === 0) && (0, _debug.assert)(`You cannot use \`attributeBindings\` on a tag-less component: ${component}`, component.tagName !== '' || !component.attributeBindings || component.attributeBindings.length === 0));
  }
  function initialRenderInstrumentDetails(component) {
    return component.instrumentDetails({
      initialRender: true
    });
  }
  function rerenderInstrumentDetails(component) {
    return component.instrumentDetails({
      initialRender: false
    });
  }
  var CURLY_CAPABILITIES = {
    dynamicLayout: true,
    dynamicTag: true,
    prepareArgs: true,
    createArgs: true,
    attributeHook: true,
    elementHook: true,
    createCaller: true,
    dynamicScope: true,
    updateHook: true,
    createInstance: true,
    wrapped: true,
    willDestroy: true,
    hasSubOwner: false
  };
  var CURLY_COMPONENT_MANAGER = new CurlyComponentManager();
  function isCurlyManager(manager) {
    return manager === CURLY_COMPONENT_MANAGER;
  }

  // Keep track of which component classes have already been processed for lazy event setup.
  var lazyEventsProcessed = new WeakMap();
  class Component extends _views.CoreView.extend(_views.ChildViewsSupport, _views.ViewStateSupport, _views.ClassNamesSupport, _runtime2.TargetActionSupport, _views.ActionSupport, _views.ViewMixin, {
    // These need to be overridable via extend/create but should still
    // have a default. Defining them here is the best way to achieve that.
    didReceiveAttrs() {},
    didRender() {},
    didUpdate() {},
    didUpdateAttrs() {},
    willRender() {},
    willUpdate() {}
  }) {
    constructor() {
      super(...arguments);
      this.isComponent = true;
    }
    init(properties) {
      super.init(properties);
      // Handle methods from ViewMixin.
      // The native class inheritance will not work for mixins. To work around this,
      // we copy the existing rerender method provided by the mixin and swap in the
      // new rerender method from our class.
      this._superRerender = this.rerender;
      this.rerender = this._rerender;
      this[IS_DISPATCHING_ATTRS] = false;
      this[DIRTY_TAG] = (0, _validator.createTag)();
      this[BOUNDS] = null;
      var eventDispatcher = this._dispatcher;
      if (eventDispatcher) {
        var lazyEventsProcessedForComponentClass = lazyEventsProcessed.get(eventDispatcher);
        if (!lazyEventsProcessedForComponentClass) {
          lazyEventsProcessedForComponentClass = new WeakSet();
          lazyEventsProcessed.set(eventDispatcher, lazyEventsProcessedForComponentClass);
        }
        var proto = Object.getPrototypeOf(this);
        if (!lazyEventsProcessedForComponentClass.has(proto)) {
          var lazyEvents = eventDispatcher.lazyEvents;
          lazyEvents.forEach((mappedEventName, event) => {
            if (mappedEventName !== null && typeof this[mappedEventName] === 'function') {
              eventDispatcher.setupHandlerForBrowserEvent(event);
            }
          });
          lazyEventsProcessedForComponentClass.add(proto);
        }
      }
      if (true /* DEBUG */ && eventDispatcher && this.renderer._isInteractive && this.tagName === '') {
        var eventNames = [];
        var events = eventDispatcher.finalEventNameMapping;
        for (var key in events) {
          var methodName = events[key];
          if (methodName && typeof this[methodName] === 'function') {
            eventNames.push(methodName);
          }
        }
        // If in a tagless component, assert that no event handlers are defined
        (true && !(!eventNames.length) && (0, _debug.assert)(`You can not define \`${eventNames}\` function(s) to handle DOM event in the \`${this}\` tagless component since it doesn't have any DOM element.`, !eventNames.length));
      }
    }
    get _dispatcher() {
      if (this.__dispatcher === undefined) {
        var owner = (0, _owner2.getOwner)(this);
        (true && !(owner) && (0, _debug.assert)('Component is unexpectedly missing an owner', owner));
        if (owner.lookup('-environment:main').isInteractive) {
          var dispatcher = owner.lookup('event_dispatcher:main');
          (true && !(dispatcher instanceof _views.EventDispatcher) && (0, _debug.assert)('Expected dispatcher to be an EventDispatcher', dispatcher instanceof _views.EventDispatcher));
          this.__dispatcher = dispatcher;
        } else {
          // In FastBoot we have no EventDispatcher. Set to null to not try again to look it up.
          this.__dispatcher = null;
        }
      }
      return this.__dispatcher;
    }
    on(name, target, method) {
      var _a;
      (_a = this._dispatcher) === null || _a === void 0 ? void 0 : _a.setupHandlerForEmberEvent(name);
      // The `on` method here comes from the Evented mixin. Since this mixin
      // is applied to the parent of this class, however, we are still able
      // to use `super`.
      return super.on(name, target, method);
    }
    // Changed to `rerender` on init
    _rerender() {
      (0, _validator.dirtyTag)(this[DIRTY_TAG]);
      this._superRerender();
    }
    [_metal.PROPERTY_DID_CHANGE](key, value) {
      if (this[IS_DISPATCHING_ATTRS]) {
        return;
      }
      var args = this[ARGS];
      var reference = args !== undefined ? args[key] : undefined;
      if (reference !== undefined && (0, _reference.isUpdatableRef)(reference)) {
        (0, _reference.updateRef)(reference, arguments.length === 2 ? value : (0, _metal.get)(this, key));
      }
    }
    getAttr(key) {
      // TODO Intimate API should be deprecated
      return this.get(key);
    }
    /**
      Normally, Ember's component model is "write-only". The component takes a
      bunch of attributes that it got passed in, and uses them to render its
      template.
         One nice thing about this model is that if you try to set a value to the
      same thing as last time, Ember (through HTMLBars) will avoid doing any
      work on the DOM.
         This is not just a performance optimization. If an attribute has not
      changed, it is important not to clobber the element's "hidden state".
      For example, if you set an input's `value` to the same value as before,
      it will clobber selection state and cursor position. In other words,
      setting an attribute is not **always** idempotent.
         This method provides a way to read an element's attribute and also
      update the last value Ember knows about at the same time. This makes
      setting an attribute idempotent.
         In particular, what this means is that if you get an `<input>` element's
      `value` attribute and then re-render the template with the same value,
      it will avoid clobbering the cursor and selection position.
      Since most attribute sets are idempotent in the browser, you typically
      can get away with reading attributes using jQuery, but the most reliable
      way to do so is through this method.
      @method readDOMAttr
         @param {String} name the name of the attribute
      @return String
      @public
      */
    readDOMAttr(name) {
      // TODO revisit this
      var _element = (0, _views.getViewElement)(this);
      (true && !(_element !== null) && (0, _debug.assert)(`Cannot call \`readDOMAttr\` on ${this} which does not have an element`, _element !== null));
      var element = _element;
      var isSVG = element.namespaceURI === "http://www.w3.org/2000/svg" /* Namespace.SVG */;
      var {
        type,
        normalized
      } = (0, _runtime.normalizeProperty)(element, name);
      if (isSVG || type === 'attr') {
        return element.getAttribute(normalized);
      }
      return element[normalized];
    }
    static toString() {
      return '@ember/component';
    }
  }
  _exports.Component = Component;
  Component.isComponentFactory = true;
  // We continue to use reopenClass here so that positionalParams can be overridden with reopenClass in subclasses.
  Component.reopenClass({
    /**
     Enables components to take a list of parameters as arguments.
      For example, a component that takes two parameters with the names
      `name` and `age`:
         ```app/components/my-component.js
      import Component from '@ember/component';
         let MyComponent = Component.extend();
         MyComponent.reopenClass({
        positionalParams: ['name', 'age']
      });
         export default MyComponent;
      ```
         It can then be invoked like this:
         ```hbs
      {{my-component "John" 38}}
      ```
         The parameters can be referred to just like named parameters:
         ```hbs
      Name: {{name}}, Age: {{age}}.
      ```
         Using a string instead of an array allows for an arbitrary number of
      parameters:
         ```app/components/my-component.js
      import Component from '@ember/component';
         let MyComponent = Component.extend();
         MyComponent.reopenClass({
        positionalParams: 'names'
      });
         export default MyComponent;
      ```
         It can then be invoked like this:
         ```hbs
      {{my-component "John" "Michael" "Scott"}}
      ```
      The parameters can then be referred to by enumerating over the list:
         ```hbs
      {{#each names as |name|}}{{name}}{{/each}}
      ```
         @static
      @public
      @property positionalParams
      @since 1.13.0
      */
    positionalParams: []
  });
  (0, _manager2.setInternalComponentManager)(CURLY_COMPONENT_MANAGER, Component);

  /**
  @module @ember/component
  */
  var _a;
  var RECOMPUTE_TAG = Symbol('RECOMPUTE_TAG');
  var IS_CLASSIC_HELPER = Symbol('IS_CLASSIC_HELPER');
  /**
    In many cases it is not necessary to use the full `Helper` class.
    The `helper` method create pure-function helpers without instances.
    For example:
  
    ```app/helpers/format-currency.js
    import { helper } from '@ember/component/helper';
  
    export default helper(function([cents], {currency}) {
      return `${currency}${cents * 0.01}`;
    });
    ```
  
    @static
    @param {Function} helper The helper function
    @method helper
    @for @ember/component/helper
    @public
    @since 1.13.0
  */
  function helper(helperFn) {
    return new Wrapper(helperFn);
  }
  class Helper extends _internals.FrameworkObject {
    init(properties) {
      super.init(properties);
      this[RECOMPUTE_TAG] = (0, _validator.createTag)();
      (true && !(this.compute) && (0, _debug.assert)('expected compute to be defined', this.compute));
    }
    /**
      On a class-based helper, it may be useful to force a recomputation of that
      helpers value. This is akin to `rerender` on a component.
         For example, this component will rerender when the `currentUser` on a
      session service changes:
         ```app/helpers/current-user-email.js
      import Helper from '@ember/component/helper'
      import { service } from '@ember/service'
      import { observer } from '@ember/object'
         export default Helper.extend({
        session: service(),
           onNewUser: observer('session.currentUser', function() {
          this.recompute();
        }),
           compute() {
          return this.get('session.currentUser.email');
        }
      });
      ```
         @method recompute
      @public
      @since 1.13.0
    */
    recompute() {
      (0, _runloop.join)(() => (0, _validator.dirtyTag)(this[RECOMPUTE_TAG]));
    }
  }
  _exports.Helper = Helper;
  _a = IS_CLASSIC_HELPER;
  Helper.isHelperFactory = true;
  Helper[_a] = true;
  // `packages/ember/index.js` was setting `Helper.helper`. This seems like
  // a bad idea and probably not something we want. We've moved that definition
  // here, but it should definitely be reviewed and probably removed.
  /** @deprecated */
  Helper.helper = helper;
  function isClassicHelper(obj) {
    return obj[IS_CLASSIC_HELPER] === true;
  }
  class ClassicHelperManager {
    constructor(owner) {
      this.capabilities = (0, _manager2.helperCapabilities)('3.23', {
        hasValue: true,
        hasDestroyable: true
      });
      var ownerInjection = {};
      (0, _owner2.setOwner)(ownerInjection, owner);
      this.ownerInjection = ownerInjection;
    }
    createHelper(definition, args) {
      var instance = isFactoryManager(definition) ? definition.create() : definition.create(this.ownerInjection);
      (true && !(function (instance) {
        if (instance !== null && typeof instance === 'object') {
          var cast = instance;
          return typeof cast.compute === 'function' && typeof cast.destroy === 'function';
        }
        return false;
      }(instance)) && (0, _debug.assert)('expected HelperInstance', function (instance) {
        if (instance !== null && typeof instance === 'object') {
          var cast = instance;
          return typeof cast.compute === 'function' && typeof cast.destroy === 'function';
        }
        return false;
      }(instance)));
      return {
        instance,
        args
      };
    }
    getDestroyable({
      instance
    }) {
      return instance;
    }
    getValue({
      instance,
      args
    }) {
      var {
        positional,
        named
      } = args;
      var ret = instance.compute(positional, named);
      (0, _validator.consumeTag)(instance[RECOMPUTE_TAG]);
      return ret;
    }
    getDebugName(definition) {
      return (0, _utils.getDebugName)((definition.class || definition)['prototype']);
    }
  }
  function isFactoryManager(obj) {
    return obj != null && 'class' in obj;
  }
  (0, _manager2.setHelperManager)(owner => {
    return new ClassicHelperManager(owner);
  }, Helper);
  var CLASSIC_HELPER_MANAGER = (0, _manager2.getInternalHelperManager)(Helper);
  ///////////
  class Wrapper {
    constructor(compute) {
      this.compute = compute;
      this.isHelperFactory = true;
    }
    create() {
      // needs new instance or will leak containers
      return {
        compute: this.compute
      };
    }
  }
  class SimpleClassicHelperManager {
    constructor() {
      this.capabilities = (0, _manager2.helperCapabilities)('3.23', {
        hasValue: true
      });
    }
    createHelper(definition, args) {
      var {
        compute
      } = definition;
      return () => compute.call(null, args.positional, args.named);
    }
    getValue(fn$$1) {
      return fn$$1();
    }
    getDebugName(definition) {
      return (0, _utils.getDebugName)(definition.compute);
    }
  }
  var SIMPLE_CLASSIC_HELPER_MANAGER = new SimpleClassicHelperManager();
  (0, _manager2.setHelperManager)(() => SIMPLE_CLASSIC_HELPER_MANAGER, Wrapper.prototype);

  /**
  @module @ember/template
  */
  /**
    A wrapper around a string that has been marked as safe ("trusted"). **When
    rendered in HTML, Ember will not perform any escaping.**
  
    Note:
  
    1. This does not *make* the string safe; it means that some code in your
       application has *marked* it as safe using the `htmlSafe()` function.
  
    2. The only public API for getting a `SafeString` is calling `htmlSafe()`. It
       is *not* user-constructible.
  
    If a string contains user inputs or other untrusted data, you must sanitize
    the string before using the `htmlSafe` method. Otherwise your code is
    vulnerable to [Cross-Site Scripting][xss]. There are many open source
    sanitization libraries to choose from, both for front end and server-side
    sanitization.
  
    [xss]: https://owasp.org/www-community/attacks/DOM_Based_XSS
  
    ```javascript
    import { htmlSafe } from '@ember/template';
  
    let someTrustedOrSanitizedString = "<div>Hello!</div>"
  
    htmlSafe(someTrustedorSanitizedString);
    ```
  
    @for @ember/template
    @class SafeString
    @since 4.12.0
    @public
   */
  class SafeString {
    constructor(string) {
      this.__string = string;
    }
    /**
      Get the string back to use as a string.
         @public
      @method toString
      @returns {String} The string marked as trusted
     */
    toString() {
      return `${this.__string}`;
    }
    /**
      Get the wrapped string as HTML to use without escaping.
         @public
      @method toHTML
      @returns {String} the trusted string, without any escaping applied
     */
    toHTML() {
      return this.toString();
    }
  }
  _exports.SafeString = SafeString;
  var escape = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;',
    '=': '&#x3D;'
  };
  var possible = /[&<>"'`=]/;
  var badChars = /[&<>"'`=]/g;
  function escapeChar(chr) {
    return escape[chr];
  }
  function escapeExpression(string) {
    var s;
    if (typeof string !== 'string') {
      // don't escape SafeStrings, since they're already safe
      if (isHTMLSafe$1(string)) {
        return string.toHTML();
      } else if (string === null || string === undefined) {
        return '';
      } else if (!string) {
        return String(string);
      }
      // Force a string conversion as this will be done by the append regardless and
      // the regex test will do this transparently behind the scenes, causing issues if
      // an object's to string has escaped characters in it.
      s = String(string);
    } else {
      s = string;
    }
    if (!possible.test(s)) {
      return s;
    }
    // SAFETY: this is technically a lie, but it's a true lie as long as the
    // invariant it depends on is upheld: `escapeChar` will always return a string
    // as long as its input is one of the characters in `escape`, and it will only
    // be called if it matches one of the characters in the `badChar` regex, which
    // is hand-maintained to match the set escaped. (It would be nice if TS could
    // "see" into the regex to see how this works, but that'd be quite a lot of
    // extra fanciness.)
    return s.replace(badChars, escapeChar);
  }
  /**
    Use this method to indicate that a string should be rendered as HTML
    when the string is used in a template. To say this another way,
    strings marked with `htmlSafe` will not be HTML escaped.
  
    A word of warning -   The `htmlSafe` method does not make the string safe;
    it only tells the framework to treat the string as if it is safe to render
    as HTML. If a string contains user inputs or other untrusted
    data, you must sanitize the string before using the `htmlSafe` method.
    Otherwise your code is vulnerable to
    [Cross-Site Scripting](https://owasp.org/www-community/attacks/DOM_Based_XSS).
    There are many open source sanitization libraries to choose from,
    both for front end and server-side sanitization.
  
    ```javascript
    import { htmlSafe } from '@ember/template';
  
    const someTrustedOrSanitizedString = "<div>Hello!</div>"
  
    htmlSafe(someTrustedorSanitizedString)
    ```
  
    @method htmlSafe
    @for @ember/template
    @param str {String} The string to treat as trusted.
    @static
    @return {SafeString} A string that will not be HTML escaped by Handlebars.
    @public
  */
  function htmlSafe(str) {
    if (str === null || str === undefined) {
      str = '';
    } else if (typeof str !== 'string') {
      str = String(str);
    }
    return new SafeString(str);
  }
  /**
    Detects if a string was decorated using `htmlSafe`.
  
    ```javascript
    import { htmlSafe, isHTMLSafe } from '@ember/template';
  
    let plainString = 'plain string';
    let safeString = htmlSafe('<div>someValue</div>');
  
    isHTMLSafe(plainString); // false
    isHTMLSafe(safeString);  // true
    ```
  
    @method isHTMLSafe
    @for @ember/template
    @static
    @return {Boolean} `true` if the string was decorated with `htmlSafe`, `false` otherwise.
    @public
  */
  function isHTMLSafe$1(str) {
    return str !== null && typeof str === 'object' && 'toHTML' in str && typeof str.toHTML === 'function';
  }
  function instrumentationPayload(def) {
    return {
      object: `${def.name}:${def.outlet}`
    };
  }
  var CAPABILITIES$1 = {
    dynamicLayout: false,
    dynamicTag: false,
    prepareArgs: false,
    createArgs: false,
    attributeHook: false,
    elementHook: false,
    createCaller: false,
    dynamicScope: true,
    updateHook: false,
    createInstance: true,
    wrapped: false,
    willDestroy: false,
    hasSubOwner: false
  };
  class OutletComponentManager {
    create(_owner, definition, _args, env, dynamicScope) {
      var parentStateRef = dynamicScope.get('outletState');
      var currentStateRef = definition.ref;
      dynamicScope.set('outletState', currentStateRef);
      var state = {
        self: (0, _reference.createConstRef)(definition.controller, 'this'),
        finalize: (0, _instrumentation._instrumentStart)('render.outlet', instrumentationPayload, definition)
      };
      if (env.debugRenderTree !== undefined) {
        state.outlet = {
          name: definition.outlet
        };
        var parentState = (0, _reference.valueForRef)(parentStateRef);
        var parentOwner = parentState && parentState.render && parentState.render.owner;
        var currentOwner = (0, _reference.valueForRef)(currentStateRef).render.owner;
        if (parentOwner && parentOwner !== currentOwner) {
          (true && !(currentOwner instanceof _instance.default) && (0, _debug.assert)('Expected currentOwner to be an EngineInstance', currentOwner instanceof _instance.default));
          var mountPoint = currentOwner.mountPoint;
          state.engine = currentOwner;
          if (mountPoint) {
            state.engineBucket = {
              mountPoint
            };
          }
        }
      }
      return state;
    }
    getDebugName({
      name
    }) {
      return name;
    }
    getDebugCustomRenderTree(definition, state, args) {
      var nodes = [];
      if (state.outlet) {
        nodes.push({
          bucket: state.outlet,
          type: 'outlet',
          name: state.outlet.name,
          args: _runtime.EMPTY_ARGS,
          instance: undefined,
          template: undefined
        });
      }
      if (state.engineBucket) {
        nodes.push({
          bucket: state.engineBucket,
          type: 'engine',
          name: state.engineBucket.mountPoint,
          args: _runtime.EMPTY_ARGS,
          instance: state.engine,
          template: undefined
        });
      }
      nodes.push({
        bucket: state,
        type: 'route-template',
        name: definition.name,
        args: args,
        instance: definition.controller,
        template: (0, _util.unwrapTemplate)(definition.template).moduleName
      });
      return nodes;
    }
    getCapabilities() {
      return CAPABILITIES$1;
    }
    getSelf({
      self
    }) {
      return self;
    }
    didCreate() {}
    didUpdate() {}
    didRenderLayout(state) {
      state.finalize();
    }
    didUpdateLayout() {}
    getDestroyable() {
      return null;
    }
  }
  var OUTLET_MANAGER = new OutletComponentManager();
  class OutletComponentDefinition {
    constructor(state, manager = OUTLET_MANAGER) {
      this.state = state;
      this.manager = manager;
      // handle is not used by this custom definition
      this.handle = -1;
      var capabilities = manager.getCapabilities();
      this.capabilities = (0, _manager2.capabilityFlagsFrom)(capabilities);
      this.compilable = capabilities.wrapped ? (0, _util.unwrapTemplate)(state.template).asWrappedLayout() : (0, _util.unwrapTemplate)(state.template).asLayout();
      this.resolvedName = state.name;
    }
  }
  function createRootOutlet(outletView) {
    if (_environment2.ENV._APPLICATION_TEMPLATE_WRAPPER) {
      var WRAPPED_CAPABILITIES = Object.assign({}, CAPABILITIES$1, {
        dynamicTag: true,
        elementHook: true,
        wrapped: true
      });
      var WrappedOutletComponentManager = class extends OutletComponentManager {
        getTagName() {
          return 'div';
        }
        getCapabilities() {
          return WRAPPED_CAPABILITIES;
        }
        didCreateElement(component, element) {
          // to add GUID id and class
          element.setAttribute('class', 'ember-view');
          element.setAttribute('id', (0, _utils.guidFor)(component));
        }
      };
      var WRAPPED_OUTLET_MANAGER = new WrappedOutletComponentManager();
      return new OutletComponentDefinition(outletView.state, WRAPPED_OUTLET_MANAGER);
    } else {
      return new OutletComponentDefinition(outletView.state);
    }
  }
  class RootComponentManager extends CurlyComponentManager {
    constructor(component) {
      super();
      this.component = component;
    }
    create(_owner, _state, _args, {
      isInteractive
    }, dynamicScope) {
      var component = this.component;
      var finalizer = (0, _instrumentation._instrumentStart)('render.component', initialRenderInstrumentDetails, component);
      dynamicScope.view = component;
      var hasWrappedElement = component.tagName !== '';
      // We usually do this in the `didCreateElement`, but that hook doesn't fire for tagless components
      if (!hasWrappedElement) {
        if (isInteractive) {
          component.trigger('willRender');
        }
        component._transitionTo('hasElement');
        if (isInteractive) {
          component.trigger('willInsertElement');
        }
      }
      if (true /* DEBUG */) {
        processComponentInitializationAssertions(component, {});
      }
      var bucket = new ComponentStateBucket(component, null, _validator.CONSTANT_TAG, finalizer, hasWrappedElement, isInteractive);
      (0, _validator.consumeTag)(component[DIRTY_TAG]);
      return bucket;
    }
  }
  // ROOT is the top-level template it has nothing but one yield.
  // it is supposed to have a dummy element
  var ROOT_CAPABILITIES = {
    dynamicLayout: true,
    dynamicTag: true,
    prepareArgs: false,
    createArgs: false,
    attributeHook: true,
    elementHook: true,
    createCaller: true,
    dynamicScope: true,
    updateHook: true,
    createInstance: true,
    wrapped: true,
    willDestroy: false,
    hasSubOwner: false
  };
  class RootComponentDefinition {
    constructor(component) {
      // handle is not used by this custom definition
      this.handle = -1;
      this.resolvedName = '-top-level';
      this.capabilities = (0, _manager2.capabilityFlagsFrom)(ROOT_CAPABILITIES);
      this.compilable = null;
      this.manager = new RootComponentManager(component);
      var factory = (0, _container.getFactoryFor)(component);
      (true && !(factory !== undefined) && (0, _debug.assert)('missing factory for component', factory !== undefined));
      this.state = factory;
    }
  }

  /**
  @module ember
  */
  /**
    The `{{#each}}` helper loops over elements in a collection. It is an extension
    of the base Handlebars `{{#each}}` helper.
  
    The default behavior of `{{#each}}` is to yield its inner block once for every
    item in an array passing the item as the first block parameter.
  
    Assuming the `@developers` argument contains this array:
  
    ```javascript
    [{ name: 'Yehuda' },{ name: 'Tom' }, { name: 'Paul' }];
    ```
  
    ```handlebars
    <ul>
      {{#each @developers as |person|}}
        <li>Hello, {{person.name}}!</li>
      {{/each}}
    </ul>
    ```
  
    The same rules apply to arrays of primitives.
  
    ```javascript
    ['Yehuda', 'Tom', 'Paul']
    ```
  
    ```handlebars
    <ul>
      {{#each @developerNames as |name|}}
        <li>Hello, {{name}}!</li>
      {{/each}}
    </ul>
    ```
  
    During iteration, the index of each item in the array is provided as a second block
    parameter.
  
    ```handlebars
    <ul>
      {{#each @developers as |person index|}}
        <li>Hello, {{person.name}}! You're number {{index}} in line</li>
      {{/each}}
    </ul>
    ```
  
    ### Specifying Keys
  
    In order to improve rendering speed, Ember will try to reuse the DOM elements
    where possible. Specifically, if the same item is present in the array both
    before and after the change, its DOM output will be reused.
  
    The `key` option is used to tell Ember how to determine if the items in the
    array being iterated over with `{{#each}}` has changed between renders. By
    default the item's object identity is used.
  
    This is usually sufficient, so in most cases, the `key` option is simply not
    needed. However, in some rare cases, the objects' identities may change even
    though they represent the same underlying data.
  
    For example:
  
    ```javascript
    people.map(person => {
      return { ...person, type: 'developer' };
    });
    ```
  
    In this case, each time the `people` array is `map`-ed over, it will produce
    an new array with completely different objects between renders. In these cases,
    you can help Ember determine how these objects related to each other with the
    `key` option:
  
    ```handlebars
    <ul>
      {{#each @developers key="name" as |person|}}
        <li>Hello, {{person.name}}!</li>
      {{/each}}
    </ul>
    ```
  
    By doing so, Ember will use the value of the property specified (`person.name`
    in the example) to find a "match" from the previous render. That is, if Ember
    has previously seen an object from the `@developers` array with a matching
    name, its DOM elements will be re-used.
  
    There are two special values for `key`:
  
      * `@index` - The index of the item in the array.
      * `@identity` - The item in the array itself.
  
    ### {{else}} condition
  
    `{{#each}}` can have a matching `{{else}}`. The contents of this block will render
    if the collection is empty.
  
    ```handlebars
    <ul>
      {{#each @developers as |person|}}
        <li>{{person.name}} is available!</li>
      {{else}}
        <li>Sorry, nobody is available for this task.</li>
      {{/each}}
    </ul>
    ```
  
    @method each
    @for Ember.Templates.helpers
    @public
   */
  /**
    The `{{each-in}}` helper loops over properties on an object.
  
    For example, given this component definition:
  
    ```app/components/developer-details.js
    import Component from '@glimmer/component';
    import { tracked } from '@glimmer/tracking';
  
    export default class extends Component {
      @tracked developer = {
        "name": "Shelly Sails",
        "age": 42
      };
    }
    ```
  
    This template would display all properties on the `developer`
    object in a list:
  
    ```app/components/developer-details.hbs
    <ul>
      {{#each-in this.developer as |key value|}}
        <li>{{key}}: {{value}}</li>
      {{/each-in}}
    </ul>
    ```
  
    Outputting their name and age:
  
    ```html
    <ul>
      <li>name: Shelly Sails</li>
      <li>age: 42</li>
    </ul>
    ```
  
    @method each-in
    @for Ember.Templates.helpers
    @public
    @since 2.1.0
  */
  class EachInWrapper {
    constructor(inner) {
      this.inner = inner;
    }
  }
  var eachIn = internalHelper(({
    positional
  }) => {
    var inner = positional[0];
    (true && !(inner) && (0, _debug.assert)('expected at least one positional arg', inner));
    return (0, _reference.createComputeRef)(() => {
      var iterable = (0, _reference.valueForRef)(inner);
      (0, _validator.consumeTag)((0, _metal.tagForObject)(iterable));
      if ((0, _utils.isProxy)(iterable)) {
        // this is because the each-in doesn't actually get(proxy, 'key') but bypasses it
        // and the proxy's tag is lazy updated on access
        iterable = (0, _runtime2._contentFor)(iterable);
      }
      return new EachInWrapper(iterable);
    });
  });
  function toIterator(iterable) {
    if (iterable instanceof EachInWrapper) {
      return toEachInIterator(iterable.inner);
    } else {
      return toEachIterator(iterable);
    }
  }
  function toEachInIterator(iterable) {
    if (!isIndexable(iterable)) {
      return null;
    }
    if (Array.isArray(iterable) || (0, _internals2.isEmberArray)(iterable)) {
      return ObjectIterator.fromIndexable(iterable);
    } else if (isNativeIterable(iterable)) {
      return MapLikeNativeIterator.from(iterable);
    } else if (hasForEach(iterable)) {
      return ObjectIterator.fromForEachable(iterable);
    } else {
      return ObjectIterator.fromIndexable(iterable);
    }
  }
  function toEachIterator(iterable) {
    if (!(0, _utils.isObject)(iterable)) {
      return null;
    }
    if (Array.isArray(iterable)) {
      return ArrayIterator.from(iterable);
    } else if ((0, _internals2.isEmberArray)(iterable)) {
      return EmberArrayIterator.from(iterable);
    } else if (isNativeIterable(iterable)) {
      return ArrayLikeNativeIterator.from(iterable);
    } else if (hasForEach(iterable)) {
      return ArrayIterator.fromForEachable(iterable);
    } else {
      return null;
    }
  }
  class BoundedIterator {
    constructor(length) {
      this.length = length;
      this.position = 0;
    }
    isEmpty() {
      return false;
    }
    memoFor(position) {
      return position;
    }
    next() {
      var {
        length,
        position
      } = this;
      if (position >= length) {
        return null;
      }
      var value = this.valueFor(position);
      var memo = this.memoFor(position);
      this.position++;
      return {
        value,
        memo
      };
    }
  }
  class ArrayIterator extends BoundedIterator {
    static from(iterable) {
      return iterable.length > 0 ? new this(iterable) : null;
    }
    static fromForEachable(object) {
      var array$$1 = [];
      object.forEach(item => array$$1.push(item));
      return this.from(array$$1);
    }
    constructor(array$$1) {
      super(array$$1.length);
      this.array = array$$1;
    }
    valueFor(position) {
      return this.array[position];
    }
  }
  class EmberArrayIterator extends BoundedIterator {
    static from(iterable) {
      return iterable.length > 0 ? new this(iterable) : null;
    }
    constructor(array$$1) {
      super(array$$1.length);
      this.array = array$$1;
    }
    valueFor(position) {
      return (0, _metal.objectAt)(this.array, position);
    }
  }
  class ObjectIterator extends BoundedIterator {
    static fromIndexable(obj) {
      var keys = Object.keys(obj);
      if (keys.length === 0) {
        return null;
      } else {
        var values = [];
        for (var key of keys) {
          var value = void 0;
          value = obj[key];
          // Add the tag of the returned value if it is an array, since arrays
          // should always cause updates if they are consumed and then changed
          if ((0, _validator.isTracking)()) {
            (0, _validator.consumeTag)((0, _validator.tagFor)(obj, key));
            if (Array.isArray(value)) {
              (0, _validator.consumeTag)((0, _validator.tagFor)(value, '[]'));
            }
          }
          values.push(value);
        }
        return new this(keys, values);
      }
    }
    static fromForEachable(obj) {
      var keys = [];
      var values = [];
      var length = 0;
      var isMapLike = false;
      // Not using an arrow function here so we can get an accurate `arguments`
      obj.forEach(function (value, key) {
        isMapLike = isMapLike || arguments.length >= 2;
        if (isMapLike) {
          keys.push(key);
        }
        values.push(value);
        length++;
      });
      if (length === 0) {
        return null;
      } else if (isMapLike) {
        return new this(keys, values);
      } else {
        return new ArrayIterator(values);
      }
    }
    constructor(keys, values) {
      super(values.length);
      this.keys = keys;
      this.values = values;
    }
    valueFor(position) {
      return this.values[position];
    }
    memoFor(position) {
      return this.keys[position];
    }
  }
  class NativeIterator {
    static from(iterable) {
      var iterator = iterable[Symbol.iterator]();
      var result = iterator.next();
      var {
        done
      } = result;
      if (done) {
        return null;
      } else {
        return new this(iterator, result);
      }
    }
    constructor(iterable, result) {
      this.iterable = iterable;
      this.result = result;
      this.position = 0;
    }
    isEmpty() {
      return false;
    }
    next() {
      var {
        iterable,
        result,
        position
      } = this;
      if (result.done) {
        return null;
      }
      var value = this.valueFor(result, position);
      var memo = this.memoFor(result, position);
      this.position++;
      this.result = iterable.next();
      return {
        value,
        memo
      };
    }
  }
  class ArrayLikeNativeIterator extends NativeIterator {
    valueFor(result) {
      return result.value;
    }
    memoFor(_result, position) {
      return position;
    }
  }
  class MapLikeNativeIterator extends NativeIterator {
    valueFor(result) {
      return result.value[1];
    }
    memoFor(result) {
      return result.value[0];
    }
  }
  function hasForEach(value) {
    return value != null && typeof value['forEach'] === 'function';
  }
  function isNativeIterable(value) {
    return value != null && typeof value[Symbol.iterator] === 'function';
  }
  function isIndexable(value) {
    return value !== null && (typeof value === 'object' || typeof value === 'function');
  }
  function toBool(predicate) {
    if ((0, _utils.isProxy)(predicate)) {
      (0, _validator.consumeTag)((0, _metal.tagForProperty)(predicate, 'content'));
      return Boolean((0, _metal.get)(predicate, 'isTruthy'));
    } else if ((0, _array.isArray)(predicate)) {
      (0, _validator.consumeTag)((0, _metal.tagForProperty)(predicate, '[]'));
      return predicate.length !== 0;
    } else if ((0, _glimmer.isHTMLSafe)(predicate)) {
      return Boolean(predicate.toString());
    } else {
      return Boolean(predicate);
    }
  }

  ///////////
  // Setup global context
  (0, _globalContext.default)({
    FEATURES: {
      DEFAULT_HELPER_MANAGER: true
    },
    scheduleRevalidate() {
      _runloop._backburner.ensureInstance();
    },
    toBool,
    toIterator,
    getProp: _metal._getProp,
    setProp: _metal._setProp,
    getPath: _metal.get,
    setPath: _metal.set,
    scheduleDestroy(destroyable, destructor) {
      (0, _runloop.schedule)('actions', null, destructor, destroyable);
    },
    scheduleDestroyed(finalizeDestructor) {
      (0, _runloop.schedule)('destroy', null, finalizeDestructor);
    },
    warnIfStyleNotTrusted(value) {
      (true && (0, _debug.warn)((0, _views.constructStyleDeprecationMessage)(String(value)), (() => {
        if (value === null || value === undefined || isHTMLSafe$1(value)) {
          return true;
        }
        return false;
      })(), {
        id: 'ember-htmlbars.style-xss-warning'
      }));
    },
    assert(test, msg, options) {
      var _a;
      if (true /* DEBUG */) {
        var id = options === null || options === void 0 ? void 0 : options.id;
        var override = VM_ASSERTION_OVERRIDES.filter(o => o.id === id)[0];
        (true && !(test) && (0, _debug.assert)((_a = override === null || override === void 0 ? void 0 : override.message) !== null && _a !== void 0 ? _a : msg, test));
      }
    },
    deprecate(msg, test, options) {
      var _a;
      if (true /* DEBUG */) {
        var {
          id
        } = options;
        if (id === 'argument-less-helper-paren-less-invocation') {
          throw new Error(`A resolved helper cannot be passed as a named argument as the syntax is ` + `ambiguously a pass-by-reference or invocation. Use the ` + `\`{{helper 'foo-helper}}\` helper to pass by reference or explicitly ` + `invoke the helper with parens: \`{{(fooHelper)}}\`.`);
        }
        var override = VM_DEPRECATION_OVERRIDES.filter(o => o.id === id)[0];
        if (!override) throw new Error(`deprecation override for ${id} not found`);
        // allow deprecations to be disabled in the VM_DEPRECATION_OVERRIDES array below
        if (!override.disabled) {
          (true && !(Boolean(test)) && (0, _debug.deprecate)((_a = override.message) !== null && _a !== void 0 ? _a : msg, Boolean(test), override));
        }
      }
    }
  });
  if (true /* DEBUG */) {
    _validator.setTrackingTransactionEnv === null || _validator.setTrackingTransactionEnv === void 0 ? void 0 : (0, _validator.setTrackingTransactionEnv)({
      debugMessage(obj, keyName) {
        var dirtyString = keyName ? `\`${keyName}\` on \`${_utils.getDebugName === null || _utils.getDebugName === void 0 ? void 0 : (0, _utils.getDebugName)(obj)}\`` : `\`${_utils.getDebugName === null || _utils.getDebugName === void 0 ? void 0 : (0, _utils.getDebugName)(obj)}\``;
        return `You attempted to update ${dirtyString}, but it had already been used previously in the same computation.  Attempting to update a value after using it in a computation can cause logical errors, infinite revalidation bugs, and performance issues, and is not supported.`;
      }
    });
  }
  ///////////
  // VM Assertion/Deprecation overrides
  var VM_DEPRECATION_OVERRIDES = [{
    id: 'setting-on-hash',
    until: '4.4.0',
    for: 'ember-source',
    since: {
      available: '3.28.0',
      enabled: '3.28.0'
    }
  }];
  var VM_ASSERTION_OVERRIDES = [];
  ///////////
  // Define environment delegate
  class EmberEnvironmentDelegate {
    constructor(owner, isInteractive) {
      this.owner = owner;
      this.isInteractive = isInteractive;
      this.enableDebugTooling = _environment2.ENV._DEBUG_RENDER_TREE;
    }
    onTransactionCommit() {}
  }

  /**
  @module ember
  */
  var disallowDynamicResolution = internalHelper(({
    positional,
    named
  }) => {
    var nameOrValueRef = positional[0];
    (true && !(positional.length === 1 && nameOrValueRef) && (0, _debug.assert)(`[BUG] wrong number of positional arguments, expecting 1, got ${positional.length}`, positional.length === 1 && nameOrValueRef));
    var typeRef = named['type'];
    var locRef = named['loc'];
    var originalRef = named['original'];
    (true && !(typeRef) && (0, _debug.assert)(`[BUG] expecting \`type\` named argument`, typeRef));
    (true && !(locRef) && (0, _debug.assert)(`[BUG] expecting \`loc\` named argument`, locRef));
    (true && !(originalRef) && (0, _debug.assert)(`[BUG] expecting \`original\` named argument`, originalRef)); // Bug: why do these fail?
    // assert('[BUG] expecting a string literal for the `type` argument', isConstRef(typeRef));
    // assert('[BUG] expecting a string literal for the `loc` argument', isConstRef(locRef));
    // assert('[BUG] expecting a string literal for the `original` argument', isConstRef(originalRef));
    var type = (0, _reference.valueForRef)(typeRef);
    var loc = (0, _reference.valueForRef)(locRef);
    var original = (0, _reference.valueForRef)(originalRef);
    (true && !(typeof type === 'string') && (0, _debug.assert)('[BUG] expecting a string literal for the `type` argument', typeof type === 'string'));
    (true && !(typeof loc === 'string') && (0, _debug.assert)('[BUG] expecting a string literal for the `loc` argument', typeof loc === 'string'));
    (true && !(typeof original === 'string') && (0, _debug.assert)('[BUG] expecting a string literal for the `original` argument', typeof original === 'string'));
    return (0, _reference.createComputeRef)(() => {
      var nameOrValue = (0, _reference.valueForRef)(nameOrValueRef);
      (true && !(typeof nameOrValue !== 'string') && (0, _debug.assert)(`Passing a dynamic string to the \`(${type})\` keyword is disallowed. ` + `(You specified \`(${type} ${original})\` and \`${original}\` evaluated into "${nameOrValue}".) ` + `This ensures we can statically analyze the template and determine which ${type}s are used. ` + `If the ${type} name is always the same, use a string literal instead, i.e. \`(${type} "${nameOrValue}")\`. ` + `Otherwise, import the ${type}s into JavaScript and pass them directly. ` + 'See https://github.com/emberjs/rfcs/blob/master/text/0496-handlebars-strict-mode.md#4-no-dynamic-resolution for details. ' + loc, typeof nameOrValue !== 'string'));
      return nameOrValue;
    });
  });
  var helper$1;
  if (true /* DEBUG */) {
    helper$1 = args => {
      var inner = args.positional[0];
      (true && !(inner) && (0, _debug.assert)('expected at least one positional arg', inner));
      return (0, _reference.createComputeRef)(() => {
        var value = (0, _reference.valueForRef)(inner);
        (true && !(value !== null && value !== undefined) && (0, _debug.assert)('You cannot pass a null or undefined destination element to in-element', value !== null && value !== undefined));
        return value;
      });
    };
  } else {
    helper$1 = args => {
      var arg = args.positional[0];
      (true && !(arg) && (0, _debug.assert)('expected at least one positional arg', arg));
      return arg;
    };
  }
  var inElementNullCheckHelper = internalHelper(helper$1);
  var normalizeClassHelper = internalHelper(({
    positional
  }) => {
    return (0, _reference.createComputeRef)(() => {
      var classNameArg = positional[0];
      var valueArg = positional[1];
      (true && !(classNameArg && valueArg) && (0, _debug.assert)('expected at least two positional args', classNameArg && valueArg));
      var classNameParts = (0, _reference.valueForRef)(classNameArg).split('.');
      var className = classNameParts[classNameParts.length - 1];
      (true && !(className) && (0, _debug.assert)('has className', className)); // Always at least one split result
      var value = (0, _reference.valueForRef)(valueArg);
      if (value === true) {
        return (0, _string.dasherize)(className);
      } else if (!value && value !== 0) {
        return '';
      } else {
        return String(value);
      }
    });
  });
  var resolve = internalHelper(({
    positional
  }, owner) => {
    var _a;
    // why is this allowed to be undefined in the first place?
    (true && !(owner) && (0, _debug.assert)('[BUG] missing owner', owner));
    (true && !(positional.length === 1) && (0, _debug.assert)(`[BUG] wrong number of positional arguments, expecting 1, got ${positional.length}`, positional.length === 1));
    var fullNameRef = positional[0];
    (true && !(fullNameRef && (0, _reference.isConstRef)(fullNameRef)) && (0, _debug.assert)('[BUG] expecting a string literal as argument', fullNameRef && (0, _reference.isConstRef)(fullNameRef)));
    var fullName = (0, _reference.valueForRef)(fullNameRef);
    (true && !(typeof fullName === 'string') && (0, _debug.assert)('[BUG] expecting a string literal as argument', typeof fullName === 'string'));
    (true && !((s => s.split(':').length === 2)(fullName)) && (0, _debug.assert)('[BUG] expecting a valid full name', (s => s.split(':').length === 2)(fullName)));
    if (true /* DEBUG */) {
      var [type, name] = fullName.split(':');
      (true && !(owner.hasRegistration(fullName)) && (0, _debug.assert)(`Attempted to invoke \`(-resolve "${fullName}")\`, but ${name} was not a valid ${type} name.`, owner.hasRegistration(fullName)));
    }
    return (0, _reference.createConstRef)((_a = owner.factoryFor(fullName)) === null || _a === void 0 ? void 0 : _a.class, `(-resolve "${fullName}")`);
  });

  /**
  @module ember
  */
  /**
    This reference is used to get the `[]` tag of iterables, so we can trigger
    updates to `{{each}}` when it changes. It is put into place by a template
    transform at build time, similar to the (-each-in) helper
  */
  var trackArray = internalHelper(({
    positional
  }) => {
    var inner = positional[0];
    (true && !(inner) && (0, _debug.assert)('expected at least one positional arg', inner));
    return (0, _reference.createComputeRef)(() => {
      var iterable = (0, _reference.valueForRef)(inner);
      if ((0, _utils.isObject)(iterable)) {
        (0, _validator.consumeTag)((0, _metal.tagForProperty)(iterable, '[]'));
      }
      return iterable;
    });
  });

  /**
  @module ember
  */
  /**
    The `mut` helper lets you __clearly specify__ that a child `Component` can update the
    (mutable) value passed to it, which will __change the value of the parent component__.
  
    To specify that a parameter is mutable, when invoking the child `Component`:
  
    ```handlebars
    <MyChild @childClickCount={{fn (mut totalClicks)}} />
    ```
  
     or
  
    ```handlebars
    {{my-child childClickCount=(mut totalClicks)}}
    ```
  
    The child `Component` can then modify the parent's value just by modifying its own
    property:
  
    ```javascript
    // my-child.js
    export default Component.extend({
      click() {
        this.incrementProperty('childClickCount');
      }
    });
    ```
  
    Note that for curly components (`{{my-component}}`) the bindings are already mutable,
    making the `mut` unnecessary.
  
    Additionally, the `mut` helper can be combined with the `fn` helper to
    mutate a value. For example:
  
    ```handlebars
    <MyChild @childClickCount={{this.totalClicks}} @click-count-change={{fn (mut totalClicks))}} />
    ```
  
    or
  
    ```handlebars
    {{my-child childClickCount=totalClicks click-count-change=(fn (mut totalClicks))}}
    ```
  
    The child `Component` would invoke the function with the new click value:
  
    ```javascript
    // my-child.js
    export default Component.extend({
      click() {
        this.get('click-count-change')(this.get('childClickCount') + 1);
      }
    });
    ```
  
    The `mut` helper changes the `totalClicks` value to what was provided as the `fn` argument.
  
    The `mut` helper, when used with `fn`, will return a function that
    sets the value passed to `mut` to its first argument. As an example, we can create a
    button that increments a value passing the value directly to the `fn`:
  
    ```handlebars
    {{! inc helper is not provided by Ember }}
    <button onclick={{fn (mut count) (inc count)}}>
      Increment count
    </button>
    ```
  
    @method mut
    @param {Object} [attr] the "two-way" attribute that can be modified.
    @for Ember.Templates.helpers
    @public
  */
  var mut = internalHelper(({
    positional
  }) => {
    var ref = positional[0];
    (true && !(ref) && (0, _debug.assert)('expected at least one positional arg', ref)); // TODO: Improve this error message. This covers at least two distinct
    // cases:
    //
    // 1. (mut "not a path") – passing a literal, result from a helper
    //    invocation, etc
    //
    // 2. (mut receivedValue) – passing a value received from the caller
    //    that was originally derived from a literal, result from a helper
    //    invocation, etc
    //
    // This message is alright for the first case, but could be quite
    // confusing for the second case.
    (true && !((0, _reference.isUpdatableRef)(ref)) && (0, _debug.assert)('You can only pass a path to mut', (0, _reference.isUpdatableRef)(ref)));
    return (0, _reference.createInvokableRef)(ref);
  });

  /**
    The `readonly` helper let's you specify that a binding is one-way only,
    instead of two-way.
    When you pass a `readonly` binding from an outer context (e.g. parent component),
    to to an inner context (e.g. child component), you are saying that changing that
    property in the inner context does not change the value in the outer context.
  
    To specify that a binding is read-only, when invoking the child `Component`:
  
    ```app/components/my-parent.js
    export default Component.extend({
      totalClicks: 3
    });
    ```
  
    ```app/templates/components/my-parent.hbs
    {{log totalClicks}} // -> 3
    <MyChild @childClickCount={{readonly totalClicks}} />
    ```
    ```
    {{my-child childClickCount=(readonly totalClicks)}}
    ```
  
    Now, when you update `childClickCount`:
  
    ```app/components/my-child.js
    export default Component.extend({
      click() {
        this.incrementProperty('childClickCount');
      }
    });
    ```
  
    The value updates in the child component, but not the parent component:
  
    ```app/templates/components/my-child.hbs
    {{log childClickCount}} //-> 4
    ```
  
    ```app/templates/components/my-parent.hbs
    {{log totalClicks}} //-> 3
    <MyChild @childClickCount={{readonly totalClicks}} />
    ```
    or
    ```app/templates/components/my-parent.hbs
    {{log totalClicks}} //-> 3
    {{my-child childClickCount=(readonly totalClicks)}}
    ```
  
    ### Objects and Arrays
  
    When passing a property that is a complex object (e.g. object, array) instead of a primitive object (e.g. number, string),
    only the reference to the object is protected using the readonly helper.
    This means that you can change properties of the object both on the parent component, as well as the child component.
    The `readonly` binding behaves similar to the `const` keyword in JavaScript.
  
    Let's look at an example:
  
    First let's set up the parent component:
  
    ```app/components/my-parent.js
    import Component from '@ember/component';
  
    export default Component.extend({
      clicks: null,
  
      init() {
        this._super(...arguments);
        this.set('clicks', { total: 3 });
      }
    });
    ```
  
    ```app/templates/components/my-parent.hbs
    {{log clicks.total}} //-> 3
    <MyChild @childClicks={{readonly clicks}} />
    ```
    ```app/templates/components/my-parent.hbs
    {{log clicks.total}} //-> 3
    {{my-child childClicks=(readonly clicks)}}
    ```
  
    Now, if you update the `total` property of `childClicks`:
  
    ```app/components/my-child.js
    import Component from '@ember/component';
  
    export default Component.extend({
      click() {
        this.get('clicks').incrementProperty('total');
      }
    });
    ```
  
    You will see the following happen:
  
    ```app/templates/components/my-parent.hbs
    {{log clicks.total}} //-> 4
    <MyChild @childClicks={{readonly clicks}} />
    ```
    or
    ```app/templates/components/my-parent.hbs
    {{log clicks.total}} //-> 4
    {{my-child childClicks=(readonly clicks)}}
    ```
  
    ```app/templates/components/my-child.hbs
    {{log childClicks.total}} //-> 4
    ```
  
    @method readonly
    @param {Object} [attr] the read-only attribute.
    @for Ember.Templates.helpers
    @private
  */
  var readonly = internalHelper(({
    positional
  }) => {
    var firstArg = positional[0];
    (true && !(firstArg) && (0, _debug.assert)('has first arg', firstArg));
    return (0, _reference.createReadOnlyRef)(firstArg);
  });

  /**
  @module ember
  */
  /**
    The `{{unbound}}` helper disconnects the one-way binding of a property,
    essentially freezing its value at the moment of rendering. For example,
    in this example the display of the variable `name` will not change even
    if it is set with a new value:
  
    ```handlebars
    {{unbound this.name}}
    ```
  
    Like any helper, the `unbound` helper can accept a nested helper expression.
    This allows for custom helpers to be rendered unbound:
  
    ```handlebars
    {{unbound (some-custom-helper)}}
    {{unbound (capitalize this.name)}}
    {{! You can use any helper, including unbound, in a nested expression }}
    {{capitalize (unbound this.name)}}
    ```
  
    The `unbound` helper only accepts a single argument, and it return an
    unbound value.
  
    @method unbound
    @for Ember.Templates.helpers
    @public
  */
  var unbound = internalHelper(({
    positional,
    named
  }) => {
    (true && !(positional.length === 1 && Object.keys(named).length === 0) && (0, _debug.assert)('unbound helper cannot be called with multiple params or hash params', positional.length === 1 && Object.keys(named).length === 0));
    return (0, _reference.createUnboundRef)((0, _reference.valueForRef)(positional[0]), '(result of an `unbound` helper)');
  });

  /**
  @module ember
  */
  var uniqueId = internalHelper(() => {
    return (0, _reference.createConstRef)(uniqueId$1(), 'unique-id');
  });
  // From https://gist.github.com/selfish/fef2c0ba6cdfe07af76e64cecd74888b
  //
  // This code should be reasonably fast, and provide a unique value every time
  // it's called, which is what we need here. It produces a string formatted as a
  // standard UUID, which avoids accidentally turning Ember-specific
  // implementation details into an intimate API. It also ensures that the UUID
  // always starts with a letter, to avoid creating invalid IDs with a numeric
  // digit at the start.
  function uniqueId$1() {
    // @ts-expect-error this one-liner abuses weird JavaScript semantics that
    // TypeScript (legitimately) doesn't like, but they're nonetheless valid and
    // specced.
    return ([3e7] + -1e3 + -4e3 + -2e3 + -1e11).replace(/[0-3]/g, a => (a * 4 ^ Math.random() * 16 >> (a & 2)).toString(16));
  }
  var MODIFIERS = ['alt', 'shift', 'meta', 'ctrl'];
  var POINTER_EVENT_TYPE_REGEX = /^click|mouse|touch/;
  function isAllowedEvent(event, allowedKeys) {
    if (allowedKeys === null || allowedKeys === undefined) {
      if (POINTER_EVENT_TYPE_REGEX.test(event.type)) {
        return (0, _views.isSimpleClick)(event);
      } else {
        allowedKeys = '';
      }
    }
    if (allowedKeys.indexOf('any') >= 0) {
      return true;
    }
    for (var i = 0; i < MODIFIERS.length; i++) {
      if (event[MODIFIERS[i] + 'Key'] && allowedKeys.indexOf(MODIFIERS[i]) === -1) {
        return false;
      }
    }
    return true;
  }
  var ActionHelper = {
    // registeredActions is re-exported for compatibility with older plugins
    // that were using this undocumented API.
    registeredActions: _views.ActionManager.registeredActions,
    registerAction(actionState) {
      var {
        actionId
      } = actionState;
      _views.ActionManager.registeredActions[actionId] = actionState;
      return actionId;
    },
    unregisterAction(actionState) {
      var {
        actionId
      } = actionState;
      delete _views.ActionManager.registeredActions[actionId];
    }
  };
  class ActionState {
    constructor(element, owner, actionId, actionArgs, namedArgs, positionalArgs) {
      this.tag = (0, _validator.createUpdatableTag)();
      this.element = element;
      this.owner = owner;
      this.actionId = actionId;
      this.actionArgs = actionArgs;
      this.namedArgs = namedArgs;
      this.positional = positionalArgs;
      this.eventName = this.getEventName();
      (0, _destroyable.registerDestructor)(this, () => ActionHelper.unregisterAction(this));
    }
    getEventName() {
      var {
        on: on$$1
      } = this.namedArgs;
      return on$$1 !== undefined ? (0, _reference.valueForRef)(on$$1) : 'click';
    }
    getActionArgs() {
      var result = new Array(this.actionArgs.length);
      for (var i = 0; i < this.actionArgs.length; i++) {
        result[i] = (0, _reference.valueForRef)(this.actionArgs[i]);
      }
      return result;
    }
    getTarget() {
      var {
        implicitTarget,
        namedArgs
      } = this;
      var {
        target
      } = namedArgs;
      return target !== undefined ? (0, _reference.valueForRef)(target) : (0, _reference.valueForRef)(implicitTarget);
    }
    handler(event) {
      var {
        actionName,
        namedArgs
      } = this;
      var {
        bubbles,
        preventDefault,
        allowedKeys
      } = namedArgs;
      var bubblesVal = bubbles !== undefined ? (0, _reference.valueForRef)(bubbles) : undefined;
      var preventDefaultVal = preventDefault !== undefined ? (0, _reference.valueForRef)(preventDefault) : undefined;
      var allowedKeysVal = allowedKeys !== undefined ? (0, _reference.valueForRef)(allowedKeys) : undefined;
      var target = this.getTarget();
      var shouldBubble = bubblesVal !== false;
      if (!isAllowedEvent(event, allowedKeysVal)) {
        return true;
      }
      if (preventDefaultVal !== false) {
        event.preventDefault();
      }
      if (!shouldBubble) {
        event.stopPropagation();
      }
      (0, _runloop.join)(() => {
        var args = this.getActionArgs();
        var payload = {
          args,
          target,
          name: null
        };
        if ((0, _reference.isInvokableRef)(actionName)) {
          (0, _instrumentation.flaggedInstrument)('interaction.ember-action', payload, () => {
            (0, _reference.updateRef)(actionName, args[0]);
          });
          return;
        }
        if (typeof actionName === 'function') {
          (0, _instrumentation.flaggedInstrument)('interaction.ember-action', payload, () => {
            actionName.apply(target, args);
          });
          return;
        }
        payload.name = actionName;
        if (target.send) {
          (0, _instrumentation.flaggedInstrument)('interaction.ember-action', payload, () => {
            target.send.apply(target, [actionName, ...args]);
          });
        } else {
          (true && !(typeof target[actionName] === 'function') && (0, _debug.assert)(`The action '${actionName}' did not exist on ${target}`, typeof target[actionName] === 'function'));
          (0, _instrumentation.flaggedInstrument)('interaction.ember-action', payload, () => {
            target[actionName].apply(target, args);
          });
        }
      });
      return shouldBubble;
    }
  }
  class ActionModifierManager {
    create(owner, element, _state, {
      named,
      positional
    }) {
      var actionArgs = [];
      // The first two arguments are (1) `this` and (2) the action name.
      // Everything else is a param.
      for (var i = 2; i < positional.length; i++) {
        actionArgs.push(positional[i]);
      }
      var actionId = (0, _utils.uuid)();
      return new ActionState(element, owner, actionId, actionArgs, named, positional);
    }
    getDebugName() {
      return 'action';
    }
    install(actionState) {
      var {
        element,
        actionId,
        positional
      } = actionState;
      var actionName;
      var actionNameRef;
      var implicitTarget;
      if (positional.length > 1) {
        implicitTarget = positional[0];
        actionNameRef = positional[1];
        if ((0, _reference.isInvokableRef)(actionNameRef)) {
          actionName = actionNameRef;
        } else {
          actionName = (0, _reference.valueForRef)(actionNameRef);
          if (true /* DEBUG */) {
            var actionPath = actionNameRef.debugLabel;
            var actionPathParts = actionPath.split('.');
            var actionLabel = actionPathParts[actionPathParts.length - 1];
            (true && !(typeof actionName === 'string' || typeof actionName === 'function') && (0, _debug.assert)('You specified a quoteless path, `' + actionPath + '`, to the ' + '{{action}} helper which did not resolve to an action name (a ' + 'string). Perhaps you meant to use a quoted actionName? (e.g. ' + '{{action "' + actionLabel + '"}}).', typeof actionName === 'string' || typeof actionName === 'function'));
          }
        }
      }
      actionState.actionName = actionName;
      actionState.implicitTarget = implicitTarget;
      this.ensureEventSetup(actionState);
      ActionHelper.registerAction(actionState);
      element.setAttribute('data-ember-action', '');
      element.setAttribute(`data-ember-action-${actionId}`, String(actionId));
    }
    update(actionState) {
      var {
        positional
      } = actionState;
      var actionNameRef = positional[1];
      (true && !(actionNameRef) && (0, _debug.assert)('Expected at least one positional arg', actionNameRef));
      if (!(0, _reference.isInvokableRef)(actionNameRef)) {
        actionState.actionName = (0, _reference.valueForRef)(actionNameRef);
      }
      var newEventName = actionState.getEventName();
      if (newEventName !== actionState.eventName) {
        this.ensureEventSetup(actionState);
        actionState.eventName = actionState.getEventName();
      }
    }
    ensureEventSetup(actionState) {
      var dispatcher = actionState.owner.lookup('event_dispatcher:main');
      (true && !(dispatcher instanceof _views.EventDispatcher) && (0, _debug.assert)('Expected dispatcher to be an EventDispatcher', dispatcher instanceof _views.EventDispatcher));
      dispatcher === null || dispatcher === void 0 ? void 0 : dispatcher.setupHandlerForEmberEvent(actionState.eventName);
    }
    getTag(actionState) {
      return actionState.tag;
    }
    getDestroyable(actionState) {
      return actionState;
    }
  }
  var ACTION_MODIFIER_MANAGER = new ActionModifierManager();
  var actionModifier = (0, _manager2.setInternalModifierManager)(ACTION_MODIFIER_MANAGER, {});
  var CAPABILITIES$2 = {
    dynamicLayout: true,
    dynamicTag: false,
    prepareArgs: false,
    createArgs: true,
    attributeHook: false,
    elementHook: false,
    createCaller: true,
    dynamicScope: true,
    updateHook: true,
    createInstance: true,
    wrapped: false,
    willDestroy: false,
    hasSubOwner: true
  };
  class MountManager {
    getDynamicLayout(state) {
      var templateFactory$$1 = state.engine.lookup('template:application');
      return (0, _util.unwrapTemplate)(templateFactory$$1(state.engine)).asLayout();
    }
    getCapabilities() {
      return CAPABILITIES$2;
    }
    getOwner(state) {
      return state.engine;
    }
    create(owner, {
      name
    }, args, env) {
      // TODO
      // mount is a runtime helper, this shouldn't use dynamic layout
      // we should resolve the engine app template in the helper
      // it also should use the owner that looked up the mount helper.
      (true && !(owner instanceof _instance.default) && (0, _debug.assert)('Expected owner to be an EngineInstance', owner instanceof _instance.default));
      var engine = owner.buildChildEngineInstance(name);
      engine.boot();
      var applicationFactory = engine.factoryFor(`controller:application`);
      var controllerFactory = applicationFactory || (0, _internals3.generateControllerFactory)(engine, 'application');
      var controller;
      var self;
      var bucket;
      var modelRef;
      if (args.named.has('model')) {
        modelRef = args.named.get('model');
      }
      if (modelRef === undefined) {
        controller = controllerFactory.create();
        self = (0, _reference.createConstRef)(controller, 'this');
        bucket = {
          engine,
          controller,
          self,
          modelRef
        };
      } else {
        var model = (0, _reference.valueForRef)(modelRef);
        controller = controllerFactory.create({
          model
        });
        self = (0, _reference.createConstRef)(controller, 'this');
        bucket = {
          engine,
          controller,
          self,
          modelRef
        };
      }
      if (env.debugRenderTree) {
        (0, _destroyable.associateDestroyableChild)(engine, controller);
      }
      return bucket;
    }
    getDebugName({
      name
    }) {
      return name;
    }
    getDebugCustomRenderTree(definition, state, args, templateModuleName) {
      return [{
        bucket: state.engine,
        instance: state.engine,
        type: 'engine',
        name: definition.name,
        args
      }, {
        bucket: state.controller,
        instance: state.controller,
        type: 'route-template',
        name: 'application',
        args,
        template: templateModuleName
      }];
    }
    getSelf({
      self
    }) {
      return self;
    }
    getDestroyable(bucket) {
      return bucket.engine;
    }
    didCreate() {}
    didUpdate() {}
    didRenderLayout() {}
    didUpdateLayout() {}
    update(bucket) {
      var {
        controller,
        modelRef
      } = bucket;
      if (modelRef !== undefined) {
        controller.set('model', (0, _reference.valueForRef)(modelRef));
      }
    }
  }
  var MOUNT_MANAGER = new MountManager();
  class MountDefinition {
    constructor(resolvedName) {
      this.resolvedName = resolvedName;
      // handle is not used by this custom definition
      this.handle = -1;
      this.manager = MOUNT_MANAGER;
      this.compilable = null;
      this.capabilities = (0, _manager2.capabilityFlagsFrom)(CAPABILITIES$2);
      this.state = {
        name: resolvedName
      };
    }
  }

  /**
    The `{{mount}}` helper lets you embed a routeless engine in a template.
    Mounting an engine will cause an instance to be booted and its `application`
    template to be rendered.
  
    For example, the following template mounts the `ember-chat` engine:
  
    ```handlebars
    {{! application.hbs }}
    {{mount "ember-chat"}}
    ```
  
    Additionally, you can also pass in a `model` argument that will be
    set as the engines model. This can be an existing object:
  
    ```
    <div>
      {{mount 'admin' model=userSettings}}
    </div>
    ```
  
    Or an inline `hash`, and you can even pass components:
  
    ```
    <div>
      <h1>Application template!</h1>
      {{mount 'admin' model=(hash
          title='Secret Admin'
          signInButton=(component 'sign-in-button')
      )}}
    </div>
    ```
  
    @method mount
    @param {String} name Name of the engine to mount.
    @param {Object} [model] Object that will be set as
                            the model of the engine.
    @for Ember.Templates.helpers
    @public
  */
  var mountHelper = internalHelper((args, owner) => {
    (true && !(owner) && (0, _debug.assert)('{{mount}} must be used within a component that has an owner', owner));
    var nameRef = args.positional[0];
    var captured;
    (true && !(args.positional.length === 1) && (0, _debug.assert)('You can only pass a single positional argument to the {{mount}} helper, e.g. {{mount "chat-engine"}}.', args.positional.length === 1));
    if (true /* DEBUG */ && args.named) {
      var keys = Object.keys(args.named);
      var extra = keys.filter(k => k !== 'model');
      (true && !(extra.length === 0) && (0, _debug.assert)('You can only pass a `model` argument to the {{mount}} helper, ' + 'e.g. {{mount "profile-engine" model=this.profile}}. ' + `You passed ${extra.join(',')}.`, extra.length === 0));
    }
    captured = (0, _runtime.createCapturedArgs)(args.named, _runtime.EMPTY_POSITIONAL);
    var lastName, lastDef;
    return (0, _reference.createComputeRef)(() => {
      var name = (0, _reference.valueForRef)(nameRef);
      if (typeof name === 'string') {
        if (lastName === name) {
          return lastDef;
        }
        (true && !(owner.hasRegistration(`engine:${name}`)) && (0, _debug.assert)(`You used \`{{mount '${name}'}}\`, but the engine '${name}' can not be found.`, owner.hasRegistration(`engine:${name}`)));
        lastName = name;
        lastDef = (0, _runtime.curry)(0 /* CurriedType.Component */, new MountDefinition(name), owner, captured, true);
        return lastDef;
      } else {
        (true && !(name === null || name === undefined) && (0, _debug.assert)(`Invalid engine name '${name}' specified, engine name must be either a string, null or undefined.`, name === null || name === undefined));
        lastDef = null;
        lastName = null;
        return null;
      }
    });
  });

  /**
    The `{{outlet}}` helper lets you specify where a child route will render in
    your template. An important use of the `{{outlet}}` helper is in your
    application's `application.hbs` file:
  
    ```app/templates/application.hbs
    <MyHeader />
  
    <div class="my-dynamic-content">
      <!-- this content will change based on the current route, which depends on the current URL -->
      {{outlet}}
    </div>
  
    <MyFooter />
    ```
  
    See the [routing guide](https://guides.emberjs.com/release/routing/rendering-a-template/) for more
    information on how your `route` interacts with the `{{outlet}}` helper.
    Note: Your content __will not render__ if there isn't an `{{outlet}}` for it.
  
    @method outlet
    @for Ember.Templates.helpers
    @public
  */
  var outletHelper = internalHelper((_args, owner, scope) => {
    (true && !(owner) && (0, _debug.assert)('Expected owner to be present, {{outlet}} requires an owner', owner));
    (true && !(scope) && (0, _debug.assert)('Expected dynamic scope to be present. You may have attempted to use the {{outlet}} keyword dynamically. This keyword cannot be used dynamically.', scope));
    var outletRef = (0, _reference.createComputeRef)(() => {
      var state = (0, _reference.valueForRef)(scope.get('outletState'));
      var outlets = state !== undefined ? state.outlets : undefined;
      return outlets !== undefined ? outlets['main'] : undefined;
    });
    var lastState = null;
    var definition = null;
    return (0, _reference.createComputeRef)(() => {
      var _a, _b;
      var outletState = (0, _reference.valueForRef)(outletRef);
      var state = stateFor(outletRef, outletState);
      if (!validate(state, lastState)) {
        lastState = state;
        if (state !== null) {
          var named = (0, _util.dict)();
          // Create a ref for the model
          var modelRef = (0, _reference.childRefFromParts)(outletRef, ['render', 'model']);
          // Store the value of the model
          var model = (0, _reference.valueForRef)(modelRef);
          // Create a compute ref which we pass in as the `{{@model}}` reference
          // for the outlet. This ref will update and return the value of the
          // model _until_ the outlet itself changes. Once the outlet changes,
          // dynamic scope also changes, and so the original model ref would not
          // provide the correct updated value. So we stop updating and return
          // the _last_ model value for that outlet.
          named['model'] = (0, _reference.createComputeRef)(() => {
            if (lastState === state) {
              model = (0, _reference.valueForRef)(modelRef);
            }
            return model;
          });
          if (true /* DEBUG */) {
            named['model'] = (0, _reference.createDebugAliasRef)('@model', named['model']);
          }
          var args = (0, _runtime.createCapturedArgs)(named, _runtime.EMPTY_POSITIONAL);
          definition = (0, _runtime.curry)(0 /* CurriedType.Component */, new OutletComponentDefinition(state), (_b = (_a = outletState === null || outletState === void 0 ? void 0 : outletState.render) === null || _a === void 0 ? void 0 : _a.owner) !== null && _b !== void 0 ? _b : owner, args, true);
        } else {
          definition = null;
        }
      }
      return definition;
    });
  });
  function stateFor(ref, outlet) {
    if (outlet === undefined) return null;
    var render = outlet.render;
    if (render === undefined) return null;
    var template = render.template;
    if (template === undefined) return null;
    // this guard can be removed once @ember/test-helpers@1.6.0 has "aged out"
    // and is no longer considered supported
    if (isTemplateFactory(template)) {
      template = template(render.owner);
    }
    return {
      ref,
      name: render.name,
      outlet: render.outlet,
      template,
      controller: render.controller,
      model: render.model
    };
  }
  function validate(state, lastState) {
    if (state === null) {
      return lastState === null;
    }
    if (lastState === null) {
      return false;
    }
    return state.template === lastState.template && state.controller === lastState.controller;
  }
  function instrumentationPayload$1(name) {
    return {
      object: `component:${name}`
    };
  }
  function componentFor(name, owner) {
    var fullName = `component:${name}`;
    return owner.factoryFor(fullName) || null;
  }
  function layoutFor(name, owner, options) {
    var templateFullName = `template:components/${name}`;
    return owner.lookup(templateFullName, options) || null;
  }
  function lookupComponentPair(owner, name, options) {
    var component = componentFor(name, owner);
    if ((0, _owner2.isFactory)(component) && component.class) {
      var _layout = (0, _manager2.getComponentTemplate)(component.class);
      if (_layout !== undefined) {
        return {
          component,
          layout: _layout
        };
      }
    }
    var layout = layoutFor(name, owner, options);
    if (component === null && layout === null) {
      return null;
    } else {
      return {
        component,
        layout
      };
    }
  }
  var BUILTIN_KEYWORD_HELPERS = {
    action: action$1,
    mut,
    readonly,
    unbound,
    '-hash': _runtime.hash,
    '-each-in': eachIn,
    '-normalize-class': normalizeClassHelper,
    '-resolve': resolve,
    '-track-array': trackArray,
    '-mount': mountHelper,
    '-outlet': outletHelper,
    '-in-el-null': inElementNullCheckHelper
  };
  var BUILTIN_HELPERS = Object.assign(Object.assign({}, BUILTIN_KEYWORD_HELPERS), {
    array: _runtime.array,
    concat: _runtime.concat,
    fn: _runtime.fn,
    get: _runtime.get,
    hash: _runtime.hash,
    'unique-id': uniqueId
  });
  if (true /* DEBUG */) {
    BUILTIN_HELPERS['-disallow-dynamic-resolution'] = disallowDynamicResolution;
  } else {
    // Bug: this may be a quirk of our test setup?
    // In prod builds, this is a no-op helper and is unused in practice. We shouldn't need
    // to add it at all, but the current test build doesn't produce a "prod compiler", so
    // we ended up running the debug-build for the template compliler in prod tests. Once
    // that is fixed, this can be removed. For now, this allows the test to work and does
    // not really harm anything, since it's just a no-op pass-through helper and the bytes
    // has to be included anyway. In the future, perhaps we can avoid the latter by using
    // `import(...)`?
    BUILTIN_HELPERS['-disallow-dynamic-resolution'] = disallowDynamicResolution;
  }
  var BUILTIN_KEYWORD_MODIFIERS = {
    action: actionModifier
  };
  var BUILTIN_MODIFIERS = Object.assign(Object.assign({}, BUILTIN_KEYWORD_MODIFIERS), {
    on: _runtime.on
  });
  var CLASSIC_HELPER_MANAGER_ASSOCIATED = new _util._WeakSet();
  class ResolverImpl {
    constructor() {
      this.componentDefinitionCache = new Map();
    }
    lookupPartial() {
      return null;
    }
    lookupHelper(name, owner) {
      (true && !(!(BUILTIN_HELPERS[name] && owner.hasRegistration(`helper:${name}`))) && (0, _debug.assert)(`You attempted to overwrite the built-in helper "${name}" which is not allowed. Please rename the helper.`, !(BUILTIN_HELPERS[name] && owner.hasRegistration(`helper:${name}`))));
      var helper$$1 = BUILTIN_HELPERS[name];
      if (helper$$1 !== undefined) {
        return helper$$1;
      }
      var factory = owner.factoryFor(`helper:${name}`);
      if (factory === undefined) {
        return null;
      }
      var definition = factory.class;
      if (definition === undefined) {
        return null;
      }
      if (typeof definition === 'function' && isClassicHelper(definition)) {
        // For classic class based helpers, we need to pass the factoryFor result itself rather
        // than the raw value (`factoryFor(...).class`). This is because injections are already
        // bound in the factoryFor result, including type-based injections
        if (true /* DEBUG */) {
          // In DEBUG we need to only set the associated value once, otherwise
          // we'll trigger an assertion
          if (!CLASSIC_HELPER_MANAGER_ASSOCIATED.has(factory)) {
            CLASSIC_HELPER_MANAGER_ASSOCIATED.add(factory);
            (0, _manager2.setInternalHelperManager)(CLASSIC_HELPER_MANAGER, factory);
          }
        } else {
          (0, _manager2.setInternalHelperManager)(CLASSIC_HELPER_MANAGER, factory);
        }
        return factory;
      }
      return definition;
    }
    lookupBuiltInHelper(name) {
      var _a;
      return (_a = BUILTIN_KEYWORD_HELPERS[name]) !== null && _a !== void 0 ? _a : null;
    }
    lookupModifier(name, owner) {
      var builtin = BUILTIN_MODIFIERS[name];
      if (builtin !== undefined) {
        return builtin;
      }
      var modifier = owner.factoryFor(`modifier:${name}`);
      if (modifier === undefined) {
        return null;
      }
      return modifier.class || null;
    }
    lookupBuiltInModifier(name) {
      var _a;
      return (_a = BUILTIN_KEYWORD_MODIFIERS[name]) !== null && _a !== void 0 ? _a : null;
    }
    lookupComponent(name, owner) {
      var pair = lookupComponentPair(owner, name);
      if (pair === null) {
        (true && !(name !== 'text-area') && (0, _debug.assert)('Could not find component `<TextArea />` (did you mean `<Textarea />`?)', name !== 'text-area'));
        return null;
      }
      var template = null;
      var key;
      if (pair.component === null) {
        key = template = pair.layout(owner);
      } else {
        key = pair.component;
      }
      var cachedComponentDefinition = this.componentDefinitionCache.get(key);
      if (cachedComponentDefinition !== undefined) {
        return cachedComponentDefinition;
      }
      if (template === null && pair.layout !== null) {
        template = pair.layout(owner);
      }
      var finalizer = (0, _instrumentation._instrumentStart)('render.getComponentDefinition', instrumentationPayload$1, name);
      var definition = null;
      if (pair.component === null) {
        if (_environment2.ENV._TEMPLATE_ONLY_GLIMMER_COMPONENTS) {
          definition = {
            state: (0, _runtime.templateOnlyComponent)(undefined, name),
            manager: _runtime.TEMPLATE_ONLY_COMPONENT_MANAGER,
            template
          };
        } else {
          var factory = owner.factoryFor((0, _container.privatize)`component:-default`);
          var manager = (0, _manager2.getInternalComponentManager)(factory.class);
          definition = {
            state: factory,
            manager,
            template
          };
        }
      } else {
        var _factory2 = pair.component;
        (true && !(_factory2.class !== undefined) && (0, _debug.assert)(`missing component class ${name}`, _factory2.class !== undefined));
        var ComponentClass = _factory2.class;
        var _manager = (0, _manager2.getInternalComponentManager)(ComponentClass);
        definition = {
          state: isCurlyManager(_manager) ? _factory2 : ComponentClass,
          manager: _manager,
          template
        };
      }
      finalizer();
      this.componentDefinitionCache.set(key, definition);
      (true && !(!(definition === null && name === 'text-area')) && (0, _debug.assert)('Could not find component `<TextArea />` (did you mean `<Textarea />`?)', !(definition === null && name === 'text-area')));
      return definition;
    }
  }

  // We use the `InternalOwner` notion here because we actually need all of its
  var TOP_LEVEL_NAME = '-top-level';
  var TOP_LEVEL_OUTLET = 'main';
  class OutletView {
    static extend(injections) {
      return class extends OutletView {
        static create(options) {
          if (options) {
            return super.create(Object.assign({}, injections, options));
          } else {
            return super.create(injections);
          }
        }
      };
    }
    static reopenClass(injections) {
      Object.assign(this, injections);
    }
    static create(options) {
      var {
        environment: _environment,
        application: namespace,
        template: templateFactory$$1
      } = options;
      var owner = (0, _owner2.getOwner)(options);
      (true && !(owner) && (0, _debug.assert)('OutletView is unexpectedly missing an owner', owner));
      var template = templateFactory$$1(owner);
      return new OutletView(_environment, owner, template, namespace);
    }
    constructor(_environment, owner, template, namespace) {
      this._environment = _environment;
      this.owner = owner;
      this.template = template;
      this.namespace = namespace;
      var outletStateTag = (0, _validator.createTag)();
      var outletState = {
        outlets: {
          main: undefined
        },
        render: {
          owner: owner,
          into: undefined,
          outlet: TOP_LEVEL_OUTLET,
          name: TOP_LEVEL_NAME,
          controller: undefined,
          model: undefined,
          template
        }
      };
      var ref = this.ref = (0, _reference.createComputeRef)(() => {
        (0, _validator.consumeTag)(outletStateTag);
        return outletState;
      }, state => {
        (0, _validator.dirtyTag)(outletStateTag);
        outletState.outlets['main'] = state;
      });
      this.state = {
        ref,
        name: TOP_LEVEL_NAME,
        outlet: TOP_LEVEL_OUTLET,
        template,
        controller: undefined,
        model: undefined
      };
    }
    appendTo(selector) {
      var target;
      if (this._environment.hasDOM) {
        target = typeof selector === 'string' ? document.querySelector(selector) : selector;
      } else {
        target = selector;
      }
      var renderer = this.owner.lookup('renderer:-dom');
      // SAFETY: It's not clear that this cast is safe.
      // The types for appendOutletView may be incorrect or this is a potential bug.
      (0, _runloop.schedule)('render', renderer, 'appendOutletView', this, target);
    }
    rerender() {
      /**/
    }
    setOutletState(state) {
      (0, _reference.updateRef)(this.ref, state);
    }
    destroy() {
      /**/
    }
  }
  _exports.OutletView = OutletView;
  class DynamicScope {
    constructor(view, outletState) {
      this.view = view;
      this.outletState = outletState;
    }
    child() {
      return new DynamicScope(this.view, this.outletState);
    }
    get(key) {
      (true && !(key === 'outletState') && (0, _debug.assert)(`Using \`-get-dynamic-scope\` is only supported for \`outletState\` (you used \`${key}\`).`, key === 'outletState'));
      return this.outletState;
    }
    set(key, value) {
      (true && !(key === 'outletState') && (0, _debug.assert)(`Using \`-with-dynamic-scope\` is only supported for \`outletState\` (you used \`${key}\`).`, key === 'outletState'));
      this.outletState = value;
      return value;
    }
  }
  var NO_OP = () => {};
  // This wrapper logic prevents us from rerendering in case of a hard failure
  // during render. This prevents infinite revalidation type loops from occuring,
  // and ensures that errors are not swallowed by subsequent follow on failures.
  function errorLoopTransaction(fn$$1) {
    if (true /* DEBUG */) {
      return () => {
        var didError = true;
        try {
          fn$$1();
          didError = false;
        } finally {
          if (didError) {
            // Noop the function so that we won't keep calling it and causing
            // infinite looping failures;
            fn$$1 = () => {
              // eslint-disable-next-line no-console
              console.warn('Attempted to rerender, but the Ember application has had an unrecoverable error occur during render. You should reload the application after fixing the cause of the error.');
            };
          }
        }
      };
    } else {
      return fn$$1;
    }
  }
  class RootState {
    constructor(root, runtime, context, owner, template, self, parentElement, dynamicScope, builder) {
      this.root = root;
      this.runtime = runtime;
      (true && !(template !== undefined) && (0, _debug.assert)(`You cannot render \`${(0, _reference.valueForRef)(self)}\` without a template.`, template !== undefined));
      this.id = root instanceof OutletView ? (0, _utils.guidFor)(root) : (0, _views.getViewId)(root);
      this.result = undefined;
      this.destroyed = false;
      this.render = errorLoopTransaction(() => {
        var layout = (0, _util.unwrapTemplate)(template).asLayout();
        var iterator = (0, _runtime.renderMain)(runtime, context, owner, self, builder(runtime.env, {
          element: parentElement,
          nextSibling: null
        }), layout, dynamicScope);
        var result = this.result = iterator.sync();
        // override .render function after initial render
        this.render = errorLoopTransaction(() => result.rerender({
          alwaysRevalidate: false
        }));
      });
    }
    isFor(possibleRoot) {
      return this.root === possibleRoot;
    }
    destroy() {
      var {
        result,
        runtime: {
          env
        }
      } = this;
      this.destroyed = true;
      this.runtime = undefined;
      this.root = null;
      this.result = undefined;
      this.render = undefined;
      if (result !== undefined) {
        /*
         Handles these scenarios:
                * When roots are removed during standard rendering process, a transaction exists already
           `.begin()` / `.commit()` are not needed.
         * When roots are being destroyed manually (`component.append(); component.destroy() case), no
           transaction exists already.
         * When roots are being destroyed during `Renderer#destroy`, no transaction exists
                */
        (0, _runtime.inTransaction)(env, () => (0, _destroyable.destroy)(result));
      }
    }
  }
  var renderers = [];
  function _resetRenderers() {
    renderers.length = 0;
  }
  function register(renderer) {
    (true && !(renderers.indexOf(renderer) === -1) && (0, _debug.assert)('Cannot register the same renderer twice', renderers.indexOf(renderer) === -1));
    renderers.push(renderer);
  }
  function deregister(renderer) {
    var index = renderers.indexOf(renderer);
    (true && !(index !== -1) && (0, _debug.assert)('Cannot deregister unknown unregistered renderer', index !== -1));
    renderers.splice(index, 1);
  }
  function loopBegin() {
    for (var renderer of renderers) {
      renderer._scheduleRevalidate();
    }
  }
  var renderSettledDeferred = null;
  /*
    Returns a promise which will resolve when rendering has settled. Settled in
    this context is defined as when all of the tags in use are "current" (e.g.
    `renderers.every(r => r._isValid())`). When this is checked at the _end_ of
    the run loop, this essentially guarantees that all rendering is completed.
  
    @method renderSettled
    @returns {Promise<void>} a promise which fulfills when rendering has settled
  */
  function renderSettled() {
    if (renderSettledDeferred === null) {
      renderSettledDeferred = _rsvp.default.defer();
      // if there is no current runloop, the promise created above will not have
      // a chance to resolve (because its resolved in backburner's "end" event)
      if (!(0, _runloop._getCurrentRunLoop)()) {
        // ensure a runloop has been kicked off
        _runloop._backburner.schedule('actions', null, NO_OP);
      }
    }
    return renderSettledDeferred.promise;
  }
  function resolveRenderPromise() {
    if (renderSettledDeferred !== null) {
      var _resolve = renderSettledDeferred.resolve;
      renderSettledDeferred = null;
      _runloop._backburner.join(null, _resolve);
    }
  }
  var loops = 0;
  function loopEnd() {
    for (var renderer of renderers) {
      if (!renderer._isValid()) {
        if (loops > _environment2.ENV._RERENDER_LOOP_LIMIT) {
          loops = 0;
          // TODO: do something better
          renderer.destroy();
          throw new Error('infinite rendering invalidation detected');
        }
        loops++;
        return _runloop._backburner.join(null, NO_OP);
      }
    }
    loops = 0;
    resolveRenderPromise();
  }
  _runloop._backburner.on('begin', loopBegin);
  _runloop._backburner.on('end', loopEnd);
  class Renderer {
    static create(props) {
      var {
        _viewRegistry
      } = props;
      var owner = (0, _owner2.getOwner)(props);
      (true && !(owner) && (0, _debug.assert)('Renderer is unexpectedly missing an owner', owner));
      var document = owner.lookup('service:-document');
      var env = owner.lookup('-environment:main');
      var rootTemplate = owner.lookup((0, _container.privatize)`template:-root`);
      var builder = owner.lookup('service:-dom-builder');
      return new this(owner, document, env, rootTemplate, _viewRegistry, builder);
    }
    constructor(owner, document, env, rootTemplate, viewRegistry, builder = _runtime.clientBuilder) {
      this._inRenderTransaction = false;
      this._lastRevision = -1;
      this._destroyed = false;
      this._owner = owner;
      this._rootTemplate = rootTemplate(owner);
      this._viewRegistry = viewRegistry || owner.lookup('-view-registry:main');
      this._roots = [];
      this._removedRoots = [];
      this._builder = builder;
      this._isInteractive = env.isInteractive;
      // resolver is exposed for tests
      var resolver = this._runtimeResolver = new ResolverImpl();
      var sharedArtifacts = (0, _program.artifacts)();
      this._context = (0, _opcodeCompiler.programCompilationContext)(sharedArtifacts, resolver);
      var runtimeEnvironmentDelegate = new EmberEnvironmentDelegate(owner, env.isInteractive);
      this._runtime = (0, _runtime.runtimeContext)({
        appendOperations: env.hasDOM ? new _runtime.DOMTreeConstruction(document) : new _node.NodeDOMTreeConstruction(document),
        updateOperations: new _runtime.DOMChanges(document)
      }, runtimeEnvironmentDelegate, sharedArtifacts, resolver);
    }
    get debugRenderTree() {
      var {
        debugRenderTree
      } = this._runtime.env;
      (true && !(debugRenderTree) && (0, _debug.assert)('Attempted to access the DebugRenderTree, but it did not exist. Is the Ember Inspector open?', debugRenderTree));
      return debugRenderTree;
    }
    // renderer HOOKS
    appendOutletView(view, target) {
      var definition = createRootOutlet(view);
      this._appendDefinition(view, (0, _runtime.curry)(0 /* CurriedType.Component */, definition, view.owner, null, true), target);
    }
    appendTo(view, target) {
      var definition = new RootComponentDefinition(view);
      this._appendDefinition(view, (0, _runtime.curry)(0 /* CurriedType.Component */, definition, this._owner, null, true), target);
    }
    _appendDefinition(root, definition, target) {
      var self = (0, _reference.createConstRef)(definition, 'this');
      var dynamicScope = new DynamicScope(null, _reference.UNDEFINED_REFERENCE);
      var rootState = new RootState(root, this._runtime, this._context, this._owner, this._rootTemplate, self, target, dynamicScope, this._builder);
      this._renderRoot(rootState);
    }
    rerender() {
      this._scheduleRevalidate();
    }
    register(view) {
      var id = (0, _views.getViewId)(view);
      (true && !(!this._viewRegistry[id]) && (0, _debug.assert)('Attempted to register a view with an id already in use: ' + id, !this._viewRegistry[id]));
      this._viewRegistry[id] = view;
    }
    unregister(view) {
      delete this._viewRegistry[(0, _views.getViewId)(view)];
    }
    remove(view) {
      view._transitionTo('destroying');
      this.cleanupRootFor(view);
      if (this._isInteractive) {
        view.trigger('didDestroyElement');
      }
    }
    cleanupRootFor(view) {
      // no need to cleanup roots if we have already been destroyed
      if (this._destroyed) {
        return;
      }
      var roots = this._roots;
      // traverse in reverse so we can remove items
      // without mucking up the index
      var i = this._roots.length;
      while (i--) {
        var root = roots[i];
        (true && !(root) && (0, _debug.assert)('has root', root));
        if (root.isFor(view)) {
          root.destroy();
          roots.splice(i, 1);
        }
      }
    }
    destroy() {
      if (this._destroyed) {
        return;
      }
      this._destroyed = true;
      this._clearAllRoots();
    }
    getElement(view) {
      if (this._isInteractive) {
        return (0, _views.getViewElement)(view);
      } else {
        throw new Error('Accessing `this.element` is not allowed in non-interactive environments (such as FastBoot).');
      }
    }
    getBounds(view) {
      var bounds = view[BOUNDS];
      (true && !(bounds) && (0, _debug.assert)('object passed to getBounds must have the BOUNDS symbol as a property', bounds));
      var parentElement = bounds.parentElement();
      var firstNode = bounds.firstNode();
      var lastNode = bounds.lastNode();
      return {
        parentElement,
        firstNode,
        lastNode
      };
    }
    createElement(tagName) {
      return this._runtime.env.getAppendOperations().createElement(tagName);
    }
    _renderRoot(root) {
      var {
        _roots: roots
      } = this;
      roots.push(root);
      if (roots.length === 1) {
        register(this);
      }
      this._renderRootsTransaction();
    }
    _renderRoots() {
      var {
        _roots: roots,
        _runtime: runtime,
        _removedRoots: removedRoots
      } = this;
      var initialRootsLength;
      do {
        initialRootsLength = roots.length;
        (0, _runtime.inTransaction)(runtime.env, () => {
          // ensure that for the first iteration of the loop
          // each root is processed
          for (var i = 0; i < roots.length; i++) {
            var root = roots[i];
            (true && !(root) && (0, _debug.assert)('has root', root));
            if (root.destroyed) {
              // add to the list of roots to be removed
              // they will be removed from `this._roots` later
              removedRoots.push(root);
              // skip over roots that have been marked as destroyed
              continue;
            }
            // when processing non-initial reflush loops,
            // do not process more roots than needed
            if (i >= initialRootsLength) {
              continue;
            }
            root.render();
          }
          this._lastRevision = (0, _validator.valueForTag)(_validator.CURRENT_TAG);
        });
      } while (roots.length > initialRootsLength);
      // remove any roots that were destroyed during this transaction
      while (removedRoots.length) {
        var root = removedRoots.pop();
        var rootIndex = roots.indexOf(root);
        roots.splice(rootIndex, 1);
      }
      if (this._roots.length === 0) {
        deregister(this);
      }
    }
    _renderRootsTransaction() {
      if (this._inRenderTransaction) {
        // currently rendering roots, a new root was added and will
        // be processed by the existing _renderRoots invocation
        return;
      }
      // used to prevent calling _renderRoots again (see above)
      // while we are actively rendering roots
      this._inRenderTransaction = true;
      var completedWithoutError = false;
      try {
        this._renderRoots();
        completedWithoutError = true;
      } finally {
        if (!completedWithoutError) {
          this._lastRevision = (0, _validator.valueForTag)(_validator.CURRENT_TAG);
        }
        this._inRenderTransaction = false;
      }
    }
    _clearAllRoots() {
      var roots = this._roots;
      for (var root of roots) {
        root.destroy();
      }
      this._removedRoots.length = 0;
      this._roots = [];
      // if roots were present before destroying
      // deregister this renderer instance
      if (roots.length) {
        deregister(this);
      }
    }
    _scheduleRevalidate() {
      _runloop._backburner.scheduleOnce('render', this, this._revalidate);
    }
    _isValid() {
      return this._destroyed || this._roots.length === 0 || (0, _validator.validateTag)(_validator.CURRENT_TAG, this._lastRevision);
    }
    _revalidate() {
      if (this._isValid()) {
        return;
      }
      this._renderRootsTransaction();
    }
  }
  _exports.Renderer = Renderer;
  var TEMPLATES = {};
  function setTemplates(templates) {
    TEMPLATES = templates;
  }
  function getTemplates() {
    return TEMPLATES;
  }
  function getTemplate(name) {
    if (Object.prototype.hasOwnProperty.call(TEMPLATES, name)) {
      return TEMPLATES[name];
    }
  }
  function hasTemplate(name) {
    return Object.prototype.hasOwnProperty.call(TEMPLATES, name);
  }
  function setTemplate(name, template) {
    return TEMPLATES[name] = template;
  }
  var OutletTemplate = (0, _opcodeCompiler.templateFactory)({
    "id": "3jT+eJpe",
    "block": "[[[46,[28,[37,1],null,null],null,null,null]],[],false,[\"component\",\"-outlet\"]]",
    "moduleName": "packages/@ember/-internals/glimmer/lib/templates/outlet.hbs",
    "isStrictMode": false
  });
  function setupApplicationRegistry(registry) {
    // because we are using injections we can't use instantiate false
    // we need to use bind() to copy the function so factory for
    // association won't leak
    registry.register('service:-dom-builder', {
      // Additionally, we *must* constrain this to require `props` on create, else
      // we *know* it cannot have an owner.
      create(props) {
        var owner = (0, _owner2.getOwner)(props);
        (true && !(owner) && (0, _debug.assert)('DomBuilderService is unexpectedly missing an owner', owner));
        var env = owner.lookup('-environment:main');
        switch (env._renderMode) {
          case 'serialize':
            return _node.serializeBuilder.bind(null);
          case 'rehydrate':
            return _runtime.rehydrationBuilder.bind(null);
          default:
            return _runtime.clientBuilder.bind(null);
        }
      }
    });
    registry.register((0, _container.privatize)`template:-root`, RootTemplate);
    registry.register('renderer:-dom', Renderer);
  }
  function setupEngineRegistry(registry) {
    registry.optionsForType('template', {
      instantiate: false
    });
    registry.register('view:-outlet', OutletView);
    registry.register('template:-outlet', OutletTemplate);
    registry.optionsForType('helper', {
      instantiate: false
    });
    registry.register('component:input', Input$1);
    registry.register('component:link-to', LinkTo$1);
    registry.register('component:textarea', Textarea$1);
    if (!_environment2.ENV._TEMPLATE_ONLY_GLIMMER_COMPONENTS) {
      registry.register((0, _container.privatize)`component:-default`, Component);
    }
  }

  /**
     Associate a class with a component manager (an object that is responsible for
     coordinating the lifecycle events that occurs when invoking, rendering and
     re-rendering a component).
  
     @method setComponentManager
     @param {Function} factory a function to create the owner for an object
     @param {Object} obj the object to associate with the componetn manager
     @return {Object} the same object passed in
     @public
    */
  function setComponentManager$1(manager, obj) {
    return (0, _manager2.setComponentManager)(manager, obj);
  }
  var componentCapabilities$1 = _exports.componentCapabilities = _manager2.componentCapabilities;
  var modifierCapabilities$1 = _exports.modifierCapabilities = _manager2.modifierCapabilities;

  /**
    [Glimmer](https://github.com/tildeio/glimmer) is a templating engine used by Ember.js that is compatible with a subset of the [Handlebars](http://handlebarsjs.com/) syntax.
  
    ### Showing a property
  
    Templates manage the flow of an application's UI, and display state (through
    the DOM) to a user. For example, given a component with the property "name",
    that component's template can use the name in several ways:
  
    ```app/components/person-profile.js
    import Component from '@ember/component';
  
    export default Component.extend({
      name: 'Jill'
    });
    ```
  
    ```app/components/person-profile.hbs
    {{this.name}}
    <div>{{this.name}}</div>
    <span data-name={{this.name}}></span>
    ```
  
    Any time the "name" property on the component changes, the DOM will be
    updated.
  
    Properties can be chained as well:
  
    ```handlebars
    {{@aUserModel.name}}
    <div>{{@listOfUsers.firstObject.name}}</div>
    ```
  
    ### Using Ember helpers
  
    When content is passed in mustaches `{{}}`, Ember will first try to find a helper
    or component with that name. For example, the `if` helper:
  
    ```app/components/person-profile.hbs
    {{if this.name "I have a name" "I have no name"}}
    <span data-has-name={{if this.name true}}></span>
    ```
  
    The returned value is placed where the `{{}}` is called. The above style is
    called "inline". A second style of helper usage is called "block". For example:
  
    ```handlebars
    {{#if this.name}}
      I have a name
    {{else}}
      I have no name
    {{/if}}
    ```
  
    The block form of helpers allows you to control how the UI is created based
    on the values of properties.
    A third form of helper is called "nested". For example here the concat
    helper will add " Doe" to a displayed name if the person has no last name:
  
    ```handlebars
    <span data-name={{concat this.firstName (
      if this.lastName (concat " " this.lastName) "Doe"
    )}}></span>
    ```
  
    Ember's built-in helpers are described under the [Ember.Templates.helpers](/ember/release/classes/Ember.Templates.helpers)
    namespace. Documentation on creating custom helpers can be found under
    [helper](/ember/release/functions/@ember%2Fcomponent%2Fhelper/helper) (or
    under [Helper](/ember/release/classes/Helper) if a helper requires access to
    dependency injection).
  
    ### Invoking a Component
  
    Ember components represent state to the UI of an application. Further
    reading on components can be found under [Component](/ember/release/classes/Component).
  
    @module @ember/component
    @main @ember/component
    @public
   */
});
define("@ember/-internals/meta/index", ["exports", "@ember/-internals/meta/lib/meta"], function (_exports, _meta) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "Meta", {
    enumerable: true,
    get: function () {
      return _meta.Meta;
    }
  });
  Object.defineProperty(_exports, "UNDEFINED", {
    enumerable: true,
    get: function () {
      return _meta.UNDEFINED;
    }
  });
  Object.defineProperty(_exports, "counters", {
    enumerable: true,
    get: function () {
      return _meta.counters;
    }
  });
  Object.defineProperty(_exports, "meta", {
    enumerable: true,
    get: function () {
      return _meta.meta;
    }
  });
  Object.defineProperty(_exports, "peekMeta", {
    enumerable: true,
    get: function () {
      return _meta.peekMeta;
    }
  });
  Object.defineProperty(_exports, "setMeta", {
    enumerable: true,
    get: function () {
      return _meta.setMeta;
    }
  });
});
define("@ember/-internals/meta/lib/meta", ["exports", "@ember/-internals/utils", "@ember/debug", "@glimmer/destroyable"], function (_exports, _utils, _debug, _destroyable) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.meta = _exports.counters = _exports.UNDEFINED = _exports.Meta = void 0;
  _exports.peekMeta = peekMeta;
  _exports.setMeta = setMeta;
  var objectPrototype = Object.prototype;
  var counters;
  if (true /* DEBUG */) {
    _exports.counters = counters = {
      peekCalls: 0,
      peekPrototypeWalks: 0,
      setCalls: 0,
      deleteCalls: 0,
      metaCalls: 0,
      metaInstantiated: 0,
      matchingListenersCalls: 0,
      observerEventsCalls: 0,
      addToListenersCalls: 0,
      removeFromListenersCalls: 0,
      removeAllListenersCalls: 0,
      listenersInherited: 0,
      listenersFlattened: 0,
      parentListenersUsed: 0,
      flattenedListenersCalls: 0,
      reopensAfterFlatten: 0,
      readableLazyChainsCalls: 0,
      writableLazyChainsCalls: 0
    };
  }
  /**
  @module ember
  */
  var UNDEFINED = _exports.UNDEFINED = (0, _utils.symbol)('undefined');
  var currentListenerVersion = 1;
  class Meta {
    // DEBUG
    /** @internal */
    constructor(obj) {
      /** @internal */
      this._listenersVersion = 1;
      /** @internal */
      this._inheritedEnd = -1;
      /** @internal */
      this._flattenedVersion = 0;
      if (true /* DEBUG */) {
        counters.metaInstantiated++;
      }
      this._parent = undefined;
      this._descriptors = undefined;
      this._mixins = undefined;
      this._lazyChains = undefined;
      this._values = undefined;
      this._revisions = undefined;
      // initial value for all flags right now is false
      // see FLAGS const for detailed list of flags used
      this._isInit = false;
      // used only internally
      this.source = obj;
      this.proto = obj.constructor === undefined ? undefined : obj.constructor.prototype;
      this._listeners = undefined;
    }
    /** @internal */
    get parent() {
      var parent = this._parent;
      if (parent === undefined) {
        var proto = getPrototypeOf(this.source);
        this._parent = parent = proto === null || proto === objectPrototype ? null : meta(proto);
      }
      return parent;
    }
    setInitializing() {
      this._isInit = true;
    }
    /** @internal */
    unsetInitializing() {
      this._isInit = false;
    }
    /** @internal */
    isInitializing() {
      return this._isInit;
    }
    /** @internal */
    isPrototypeMeta(obj) {
      return this.proto === this.source && this.source === obj;
    }
    /** @internal */
    _getOrCreateOwnMap(key) {
      return this[key] || (this[key] = Object.create(null));
    }
    /** @internal */
    _getOrCreateOwnSet(key) {
      return this[key] || (this[key] = new Set());
    }
    /** @internal */
    _findInheritedMap(key, subkey) {
      var pointer = this;
      while (pointer !== null) {
        var map = pointer[key];
        if (map !== undefined) {
          var value = map.get(subkey);
          if (value !== undefined) {
            return value;
          }
        }
        pointer = pointer.parent;
      }
    }
    /** @internal */
    _hasInInheritedSet(key, value) {
      var pointer = this;
      while (pointer !== null) {
        var set = pointer[key];
        if (set !== undefined && set.has(value)) {
          return true;
        }
        pointer = pointer.parent;
      }
      return false;
    }
    /** @internal */
    valueFor(key) {
      var values = this._values;
      return values !== undefined ? values[key] : undefined;
    }
    /** @internal */
    setValueFor(key, value) {
      var values = this._getOrCreateOwnMap('_values');
      values[key] = value;
    }
    /** @internal */
    revisionFor(key) {
      var revisions = this._revisions;
      return revisions !== undefined ? revisions[key] : undefined;
    }
    /** @internal */
    setRevisionFor(key, revision) {
      var revisions = this._getOrCreateOwnMap('_revisions');
      revisions[key] = revision;
    }
    /** @internal */
    writableLazyChainsFor(key) {
      if (true /* DEBUG */) {
        counters.writableLazyChainsCalls++;
      }
      var lazyChains = this._getOrCreateOwnMap('_lazyChains');
      var chains = lazyChains[key];
      if (chains === undefined) {
        chains = lazyChains[key] = [];
      }
      return chains;
    }
    /** @internal */
    readableLazyChainsFor(key) {
      if (true /* DEBUG */) {
        counters.readableLazyChainsCalls++;
      }
      var lazyChains = this._lazyChains;
      if (lazyChains !== undefined) {
        return lazyChains[key];
      }
      return undefined;
    }
    /** @internal */
    addMixin(mixin) {
      (true && !(!(0, _destroyable.isDestroyed)(this.source)) && (0, _debug.assert)((0, _destroyable.isDestroyed)(this.source) ? `Cannot add mixins of \`${(0, _utils.toString)(mixin)}\` on \`${(0, _utils.toString)(this.source)}\` call addMixin after it has been destroyed.` : '', !(0, _destroyable.isDestroyed)(this.source)));
      var set = this._getOrCreateOwnSet('_mixins');
      set.add(mixin);
    }
    /** @internal */
    hasMixin(mixin) {
      return this._hasInInheritedSet('_mixins', mixin);
    }
    /** @internal */
    forEachMixins(fn) {
      var pointer = this;
      var seen;
      while (pointer !== null) {
        var set = pointer._mixins;
        if (set !== undefined) {
          seen = seen === undefined ? new Set() : seen;
          // TODO cleanup typing here
          set.forEach(mixin => {
            if (!seen.has(mixin)) {
              seen.add(mixin);
              fn(mixin);
            }
          });
        }
        pointer = pointer.parent;
      }
    }
    /** @internal */
    writeDescriptors(subkey, value) {
      (true && !(!(0, _destroyable.isDestroyed)(this.source)) && (0, _debug.assert)((0, _destroyable.isDestroyed)(this.source) ? `Cannot update descriptors for \`${subkey}\` on \`${(0, _utils.toString)(this.source)}\` after it has been destroyed.` : '', !(0, _destroyable.isDestroyed)(this.source)));
      var map = this._descriptors || (this._descriptors = new Map());
      map.set(subkey, value);
    }
    /** @internal */
    peekDescriptors(subkey) {
      var possibleDesc = this._findInheritedMap('_descriptors', subkey);
      return possibleDesc === UNDEFINED ? undefined : possibleDesc;
    }
    /** @internal */
    removeDescriptors(subkey) {
      this.writeDescriptors(subkey, UNDEFINED);
    }
    /** @internal */
    forEachDescriptors(fn) {
      var pointer = this;
      var seen;
      while (pointer !== null) {
        var map = pointer._descriptors;
        if (map !== undefined) {
          seen = seen === undefined ? new Set() : seen;
          map.forEach((value, key) => {
            if (!seen.has(key)) {
              seen.add(key);
              if (value !== UNDEFINED) {
                fn(key, value);
              }
            }
          });
        }
        pointer = pointer.parent;
      }
    }
    /** @internal */
    addToListeners(eventName, target, method, once, sync) {
      if (true /* DEBUG */) {
        counters.addToListenersCalls++;
      }
      this.pushListener(eventName, target, method, once ? 1 /* ListenerKind.ONCE */ : 0 /* ListenerKind.ADD */, sync);
    }
    /** @internal */
    removeFromListeners(eventName, target, method) {
      if (true /* DEBUG */) {
        counters.removeFromListenersCalls++;
      }
      this.pushListener(eventName, target, method, 2 /* ListenerKind.REMOVE */);
    }
    pushListener(event, target, method, kind, sync = false) {
      var listeners = this.writableListeners();
      var i = indexOfListener(listeners, event, target, method);
      // remove if found listener was inherited
      if (i !== -1 && i < this._inheritedEnd) {
        listeners.splice(i, 1);
        this._inheritedEnd--;
        i = -1;
      }
      // if not found, push. Note that we must always push if a listener is not
      // found, even in the case of a function listener remove, because we may be
      // attempting to add or remove listeners _before_ flattening has occurred.
      if (i === -1) {
        (true && !(!(this.isPrototypeMeta(this.source) && typeof method === 'function')) && (0, _debug.assert)('You cannot add function listeners to prototypes. Convert the listener to a string listener, or add it to the instance instead.', !(this.isPrototypeMeta(this.source) && typeof method === 'function')));
        (true && !(!(!this.isPrototypeMeta(this.source) && typeof method === 'function' && kind === 2 /* ListenerKind.REMOVE */)) && (0, _debug.assert)('You attempted to remove a function listener which did not exist on the instance, which means you may have attempted to remove it before it was added.', !(!this.isPrototypeMeta(this.source) && typeof method === 'function' && kind === 2)));
        listeners.push({
          event,
          target,
          method,
          kind,
          sync
        });
      } else {
        var listener = listeners[i];
        (true && !(listener) && (0, _debug.assert)('has listener', listener)); // If the listener is our own listener and we are trying to remove it, we
        // want to splice it out entirely so we don't hold onto a reference.
        if (kind === 2 /* ListenerKind.REMOVE */ && listener.kind !== 2 /* ListenerKind.REMOVE */) {
          listeners.splice(i, 1);
        } else {
          (true && !(!(listener.kind === 0 /* ListenerKind.ADD */ && kind === 0 /* ListenerKind.ADD */ && listener.sync !== sync)) && (0, _debug.assert)(`You attempted to add an observer for the same method on '${event.split(':')[0]}' twice to ${target} as both sync and async. Observers must be either sync or async, they cannot be both. This is likely a mistake, you should either remove the code that added the observer a second time, or update it to always be sync or async. The method was ${String(method)}.`, !(listener.kind === 0 && kind === 0 && listener.sync !== sync))); // update own listener
          listener.kind = kind;
          listener.sync = sync;
        }
      }
    }
    writableListeners() {
      // Check if we need to invalidate and reflatten. We need to do this if we
      // have already flattened (flattened version is the current version) and
      // we are either writing to a prototype meta OR we have never inherited, and
      // may have cached the parent's listeners.
      if (this._flattenedVersion === currentListenerVersion && (this.source === this.proto || this._inheritedEnd === -1)) {
        if (true /* DEBUG */) {
          counters.reopensAfterFlatten++;
        }
        currentListenerVersion++;
      }
      // Inherited end has not been set, then we have never created our own
      // listeners, but may have cached the parent's
      if (this._inheritedEnd === -1) {
        this._inheritedEnd = 0;
        this._listeners = [];
      }
      return this._listeners;
    }
    /**
      Flattening is based on a global revision counter. If the revision has
      bumped it means that somewhere in a class inheritance chain something has
      changed, so we need to reflatten everything. This can only happen if:
         1. A meta has been flattened (listener has been called)
      2. The meta is a prototype meta with children who have inherited its
         listeners
      3. A new listener is subsequently added to the meta (e.g. via `.reopen()`)
         This is a very rare occurrence, so while the counter is global it shouldn't
      be updated very often in practice.
    */
    flattenedListeners() {
      if (true /* DEBUG */) {
        counters.flattenedListenersCalls++;
      }
      if (this._flattenedVersion < currentListenerVersion) {
        if (true /* DEBUG */) {
          counters.listenersFlattened++;
        }
        var parent = this.parent;
        if (parent !== null) {
          // compute
          var parentListeners = parent.flattenedListeners();
          if (parentListeners !== undefined) {
            if (this._listeners === undefined) {
              // If this instance doesn't have any of its own listeners (writableListeners
              // has never been called) then we don't need to do any flattening, return
              // the parent's listeners instead.
              if (true /* DEBUG */) {
                counters.parentListenersUsed++;
              }
              this._listeners = parentListeners;
            } else {
              var listeners = this._listeners;
              if (this._inheritedEnd > 0) {
                listeners.splice(0, this._inheritedEnd);
                this._inheritedEnd = 0;
              }
              for (var listener of parentListeners) {
                var index = indexOfListener(listeners, listener.event, listener.target, listener.method);
                if (index === -1) {
                  if (true /* DEBUG */) {
                    counters.listenersInherited++;
                  }
                  listeners.unshift(listener);
                  this._inheritedEnd++;
                }
              }
            }
          }
        }
        this._flattenedVersion = currentListenerVersion;
      }
      return this._listeners;
    }
    /** @internal */
    matchingListeners(eventName) {
      var listeners = this.flattenedListeners();
      var result;
      if (true /* DEBUG */) {
        counters.matchingListenersCalls++;
      }
      if (listeners !== undefined) {
        for (var listener of listeners) {
          // REMOVE listeners are placeholders that tell us not to
          // inherit, so they never match. Only ADD and ONCE can match.
          if (listener.event === eventName && (listener.kind === 0 /* ListenerKind.ADD */ || listener.kind === 1 /* ListenerKind.ONCE */)) {
            if (result === undefined) {
              // we create this array only after we've found a listener that
              // matches to avoid allocations when no matches are found.
              result = [];
            }
            result.push(listener.target, listener.method, listener.kind === 1 /* ListenerKind.ONCE */);
          }
        }
      }
      return result;
    }
    /** @internal */
    observerEvents() {
      var listeners = this.flattenedListeners();
      var result;
      if (true /* DEBUG */) {
        counters.observerEventsCalls++;
      }
      if (listeners !== undefined) {
        for (var listener of listeners) {
          // REMOVE listeners are placeholders that tell us not to
          // inherit, so they never match. Only ADD and ONCE can match.
          if ((listener.kind === 0 /* ListenerKind.ADD */ || listener.kind === 1 /* ListenerKind.ONCE */) && listener.event.indexOf(':change') !== -1) {
            if (result === undefined) {
              // we create this array only after we've found a listener that
              // matches to avoid allocations when no matches are found.
              result = [];
            }
            result.push(listener);
          }
        }
      }
      return result;
    }
  }
  _exports.Meta = Meta;
  var getPrototypeOf = Object.getPrototypeOf;
  var metaStore = new WeakMap();
  function setMeta(obj, meta) {
    (true && !(obj !== null) && (0, _debug.assert)('Cannot call `setMeta` on null', obj !== null));
    (true && !(obj !== undefined) && (0, _debug.assert)('Cannot call `setMeta` on undefined', obj !== undefined));
    (true && !(typeof obj === 'object' || typeof obj === 'function') && (0, _debug.assert)(`Cannot call \`setMeta\` on ${typeof obj}`, typeof obj === 'object' || typeof obj === 'function'));
    if (true /* DEBUG */) {
      counters.setCalls++;
    }
    metaStore.set(obj, meta);
  }
  function peekMeta(obj) {
    (true && !(obj !== null) && (0, _debug.assert)('Cannot call `peekMeta` on null', obj !== null));
    (true && !(obj !== undefined) && (0, _debug.assert)('Cannot call `peekMeta` on undefined', obj !== undefined));
    (true && !(typeof obj === 'object' || typeof obj === 'function') && (0, _debug.assert)(`Cannot call \`peekMeta\` on ${typeof obj}`, typeof obj === 'object' || typeof obj === 'function'));
    if (true /* DEBUG */) {
      counters.peekCalls++;
    }
    var meta = metaStore.get(obj);
    if (meta !== undefined) {
      return meta;
    }
    var pointer = getPrototypeOf(obj);
    while (pointer !== null) {
      if (true /* DEBUG */) {
        counters.peekPrototypeWalks++;
      }
      meta = metaStore.get(pointer);
      if (meta !== undefined) {
        if (meta.proto !== pointer) {
          // The meta was a prototype meta which was not marked as initializing.
          // This can happen when a prototype chain was created manually via
          // Object.create() and the source object does not have a constructor.
          meta.proto = pointer;
        }
        return meta;
      }
      pointer = getPrototypeOf(pointer);
    }
    return null;
  }
  /**
    Retrieves the meta hash for an object. If `writable` is true ensures the
    hash is writable for this object as well.
  
    The meta object contains information about computed property descriptors as
    well as any watched properties and other information. You generally will
    not access this information directly but instead work with higher level
    methods that manipulate this hash indirectly.
  
    @method meta
    @for Ember
    @private
  
    @param {Object} obj The object to retrieve meta for
    @param {Boolean} [writable=true] Pass `false` if you do not intend to modify
      the meta hash, allowing the method to avoid making an unnecessary copy.
    @return {Object} the meta hash for an object
  */
  var meta = _exports.meta = function meta(obj) {
    (true && !(obj !== null) && (0, _debug.assert)('Cannot call `meta` on null', obj !== null));
    (true && !(obj !== undefined) && (0, _debug.assert)('Cannot call `meta` on undefined', obj !== undefined));
    (true && !(typeof obj === 'object' || typeof obj === 'function') && (0, _debug.assert)(`Cannot call \`meta\` on ${typeof obj}`, typeof obj === 'object' || typeof obj === 'function'));
    if (true /* DEBUG */) {
      counters.metaCalls++;
    }
    var maybeMeta = peekMeta(obj);
    // remove this code, in-favor of explicit parent
    if (maybeMeta !== null && maybeMeta.source === obj) {
      return maybeMeta;
    }
    var newMeta = new Meta(obj);
    setMeta(obj, newMeta);
    return newMeta;
  };
  if (true /* DEBUG */) {
    meta._counters = counters;
  }
  function indexOfListener(listeners, event, target, method) {
    for (var i = listeners.length - 1; i >= 0; i--) {
      var listener = listeners[i];
      (true && !(listener) && (0, _debug.assert)('has listener', listener));
      if (listener.event === event && listener.target === target && listener.method === method) {
        return i;
      }
    }
    return -1;
  }
});
define("@ember/-internals/metal/index", ["exports", "@ember/-internals/meta", "@ember/-internals/utils", "@ember/debug", "@ember/-internals/environment", "@ember/runloop", "@glimmer/destroyable", "@glimmer/validator", "@glimmer/manager", "@glimmer/util", "@ember/array/-internals", "ember/version", "@ember/-internals/owner"], function (_exports, _meta2, _utils, _debug, _environment, _runloop, _destroyable, _validator, _manager, _util, _internals, _version, _owner) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TrackedDescriptor = _exports.SYNC_OBSERVERS = _exports.PROXY_CONTENT = _exports.PROPERTY_DID_CHANGE = _exports.NAMESPACES_BY_ID = _exports.NAMESPACES = _exports.Libraries = _exports.DEBUG_INJECTION_FUNCTIONS = _exports.ComputedProperty = _exports.ComputedDescriptor = _exports.ASYNC_OBSERVERS = void 0;
  _exports._getPath = _getPath;
  _exports._getProp = _getProp;
  _exports._setProp = _setProp;
  _exports.activateObserver = activateObserver;
  _exports.addArrayObserver = addArrayObserver;
  _exports.addListener = addListener;
  _exports.addNamespace = addNamespace;
  _exports.addObserver = addObserver;
  _exports.alias = alias;
  _exports.arrayContentDidChange = arrayContentDidChange;
  _exports.arrayContentWillChange = arrayContentWillChange;
  _exports.autoComputed = autoComputed;
  _exports.beginPropertyChanges = beginPropertyChanges;
  _exports.cached = void 0;
  _exports.changeProperties = changeProperties;
  _exports.computed = computed;
  Object.defineProperty(_exports, "createCache", {
    enumerable: true,
    get: function () {
      return _validator.createCache;
    }
  });
  _exports.defineDecorator = defineDecorator;
  _exports.defineProperty = defineProperty;
  _exports.defineValue = defineValue;
  _exports.deprecateProperty = deprecateProperty;
  _exports.descriptorForDecorator = descriptorForDecorator;
  _exports.descriptorForProperty = descriptorForProperty;
  _exports.eachProxyArrayDidChange = eachProxyArrayDidChange;
  _exports.eachProxyArrayWillChange = eachProxyArrayWillChange;
  _exports.endPropertyChanges = endPropertyChanges;
  _exports.expandProperties = expandProperties;
  _exports.findNamespace = findNamespace;
  _exports.findNamespaces = findNamespaces;
  _exports.flushAsyncObservers = flushAsyncObservers;
  _exports.get = get;
  _exports.getCachedValueFor = getCachedValueFor;
  _exports.getProperties = getProperties;
  Object.defineProperty(_exports, "getValue", {
    enumerable: true,
    get: function () {
      return _validator.getValue;
    }
  });
  _exports.hasListeners = hasListeners;
  _exports.hasUnknownProperty = hasUnknownProperty;
  _exports.inject = inject;
  _exports.isClassicDecorator = isClassicDecorator;
  _exports.isComputed = isComputed;
  Object.defineProperty(_exports, "isConst", {
    enumerable: true,
    get: function () {
      return _validator.isConst;
    }
  });
  _exports.isElementDescriptor = isElementDescriptor;
  _exports.isNamespaceSearchDisabled = isSearchDisabled;
  _exports.libraries = void 0;
  _exports.makeComputedDecorator = makeComputedDecorator;
  _exports.markObjectAsDirty = markObjectAsDirty;
  _exports.nativeDescDecorator = nativeDescDecorator;
  _exports.notifyPropertyChange = notifyPropertyChange;
  _exports.objectAt = objectAt;
  _exports.on = on;
  _exports.processAllNamespaces = processAllNamespaces;
  _exports.processNamespace = processNamespace;
  _exports.removeArrayObserver = removeArrayObserver;
  _exports.removeListener = removeListener;
  _exports.removeNamespace = removeNamespace;
  _exports.removeObserver = removeObserver;
  _exports.replace = replace;
  _exports.replaceInNativeArray = replaceInNativeArray;
  _exports.revalidateObservers = revalidateObservers;
  _exports.sendEvent = sendEvent;
  _exports.set = set;
  _exports.setClassicDecorator = setClassicDecorator;
  _exports.setNamespaceSearchDisabled = setSearchDisabled;
  _exports.setProperties = setProperties;
  _exports.setUnprocessedMixins = setUnprocessedMixins;
  _exports.tagForObject = tagForObject;
  _exports.tagForProperty = tagForProperty;
  _exports.tracked = tracked;
  _exports.trySet = trySet;
  /*
    The event system uses a series of nested hashes to store listeners on an
    object. When a listener is registered, or when an event arrives, these
    hashes are consulted to determine which target and action pair to invoke.
  
    The hashes are stored in the object's meta hash, and look like this:
  
        // Object's meta hash
        {
          listeners: {       // variable name: `listenerSet`
            "foo:change": [ // variable name: `actions`
              target, method, once
            ]
          }
        }
  
  */
  /**
    Add an event listener
  
    @method addListener
    @static
    @for @ember/object/events
    @param obj
    @param {String} eventName
    @param {Object|Function} target A target object or a function
    @param {Function|String} method A function or the name of a function to be called on `target`
    @param {Boolean} once A flag whether a function should only be called once
    @public
  */
  function addListener(obj, eventName, target, method, once, sync = true) {
    (true && !(Boolean(obj) && Boolean(eventName)) && (0, _debug.assert)('You must pass at least an object and event name to addListener', Boolean(obj) && Boolean(eventName)));
    if (!method && 'function' === typeof target) {
      method = target;
      target = null;
    }
    (0, _meta2.meta)(obj).addToListeners(eventName, target, method, once === true, sync);
  }
  /**
    Remove an event listener
  
    Arguments should match those passed to `addListener`.
  
    @method removeListener
    @static
    @for @ember/object/events
    @param obj
    @param {String} eventName
    @param {Object|Function} target A target object or a function
    @param {Function|String} method A function or the name of a function to be called on `target`
    @public
  */
  function removeListener(obj, eventName, targetOrFunction, functionOrName) {
    (true && !(Boolean(obj) && Boolean(eventName) && (typeof targetOrFunction === 'function' || typeof targetOrFunction === 'object' && Boolean(functionOrName))) && (0, _debug.assert)('You must pass at least an object, event name, and method or target and method/method name to removeListener', Boolean(obj) && Boolean(eventName) && (typeof targetOrFunction === 'function' || typeof targetOrFunction === 'object' && Boolean(functionOrName))));
    var target, method;
    if (typeof targetOrFunction === 'object') {
      target = targetOrFunction;
      method = functionOrName;
    } else {
      target = null;
      method = targetOrFunction;
    }
    var m = (0, _meta2.meta)(obj);
    m.removeFromListeners(eventName, target, method);
  }
  /**
    Send an event. The execution of suspended listeners
    is skipped, and once listeners are removed. A listener without
    a target is executed on the passed object. If an array of actions
    is not passed, the actions stored on the passed object are invoked.
  
    @method sendEvent
    @static
    @for @ember/object/events
    @param obj
    @param {String} eventName
    @param {Array} params Optional parameters for each listener.
    @return {Boolean} if the event was delivered to one or more actions
    @public
  */
  function sendEvent(obj, eventName, params, actions, _meta) {
    if (actions === undefined) {
      var meta$$1 = _meta === undefined ? (0, _meta2.peekMeta)(obj) : _meta;
      actions = meta$$1 !== null ? meta$$1.matchingListeners(eventName) : undefined;
    }
    if (actions === undefined || actions.length === 0) {
      return false;
    }
    for (var i = actions.length - 3; i >= 0; i -= 3) {
      // looping in reverse for once listeners
      var target = actions[i];
      var method = actions[i + 1];
      var once = actions[i + 2];
      if (!method) {
        continue;
      }
      if (once) {
        removeListener(obj, eventName, target, method);
      }
      if (!target) {
        target = obj;
      }
      var type = typeof method;
      if (type === 'string' || type === 'symbol') {
        method = target[method];
      }
      method.apply(target, params);
    }
    return true;
  }
  /**
    @public
    @method hasListeners
    @static
    @for @ember/object/events
    @param obj
    @param {String} eventName
    @return {Boolean} if `obj` has listeners for event `eventName`
  */
  function hasListeners(obj, eventName) {
    var meta$$1 = (0, _meta2.peekMeta)(obj);
    if (meta$$1 === null) {
      return false;
    }
    var matched = meta$$1.matchingListeners(eventName);
    return matched !== undefined && matched.length > 0;
  }
  /**
    Define a property as a function that should be executed when
    a specified event or events are triggered.
  
    ``` javascript
    import EmberObject from '@ember/object';
    import { on } from '@ember/object/evented';
    import { sendEvent } from '@ember/object/events';
  
    let Job = EmberObject.extend({
      logCompleted: on('completed', function() {
        console.log('Job completed!');
      })
    });
  
    let job = Job.create();
  
    sendEvent(job, 'completed'); // Logs 'Job completed!'
   ```
  
    @method on
    @static
    @for @ember/object/evented
    @param {String} eventNames*
    @param {Function} func
    @return {Function} the listener function, passed as last argument to on(...)
    @public
  */
  function on(...args) {
    var func = args.pop();
    var events = args;
    (true && !(typeof func === 'function') && (0, _debug.assert)('on expects function as last argument', typeof func === 'function'));
    (true && !(events.length > 0 && events.every(p => typeof p === 'string' && p.length > 0)) && (0, _debug.assert)('on called without valid event names', events.length > 0 && events.every(p => typeof p === 'string' && p.length > 0)));
    (0, _utils.setListeners)(func, events);
    return func;
  }
  var AFTER_OBSERVERS = ':change';
  function changeEvent(keyName) {
    return keyName + AFTER_OBSERVERS;
  }
  var SYNC_DEFAULT = !_environment.ENV._DEFAULT_ASYNC_OBSERVERS;
  var SYNC_OBSERVERS = _exports.SYNC_OBSERVERS = new Map();
  var ASYNC_OBSERVERS = _exports.ASYNC_OBSERVERS = new Map();
  /**
  @module @ember/object
  */
  /**
    @method addObserver
    @static
    @for @ember/object/observers
    @param obj
    @param {String} path
    @param {Object|Function} target
    @param {Function|String} [method]
    @public
  */
  function addObserver(obj, path, target, method, sync = SYNC_DEFAULT) {
    var eventName = changeEvent(path);
    addListener(obj, eventName, target, method, false, sync);
    var meta$$1 = (0, _meta2.peekMeta)(obj);
    if (meta$$1 === null || !(meta$$1.isPrototypeMeta(obj) || meta$$1.isInitializing())) {
      activateObserver(obj, eventName, sync);
    }
  }
  /**
    @method removeObserver
    @static
    @for @ember/object/observers
    @param obj
    @param {String} path
    @param {Object|Function} target
    @param {Function|String} [method]
    @public
  */
  function removeObserver(obj, path, target, method, sync = SYNC_DEFAULT) {
    var eventName = changeEvent(path);
    var meta$$1 = (0, _meta2.peekMeta)(obj);
    if (meta$$1 === null || !(meta$$1.isPrototypeMeta(obj) || meta$$1.isInitializing())) {
      deactivateObserver(obj, eventName, sync);
    }
    removeListener(obj, eventName, target, method);
  }
  function getOrCreateActiveObserversFor(target, sync) {
    var observerMap = sync === true ? SYNC_OBSERVERS : ASYNC_OBSERVERS;
    if (!observerMap.has(target)) {
      observerMap.set(target, new Map());
      (0, _destroyable.registerDestructor)(target, () => destroyObservers(target), true);
    }
    return observerMap.get(target);
  }
  function activateObserver(target, eventName, sync = false) {
    var activeObservers = getOrCreateActiveObserversFor(target, sync);
    if (activeObservers.has(eventName)) {
      activeObservers.get(eventName).count++;
    } else {
      var path = eventName.substring(0, eventName.lastIndexOf(':'));
      var tag = getChainTagsForKey(target, path, (0, _validator.tagMetaFor)(target), (0, _meta2.peekMeta)(target));
      activeObservers.set(eventName, {
        count: 1,
        path,
        tag,
        lastRevision: (0, _validator.valueForTag)(tag),
        suspended: false
      });
    }
  }
  var DEACTIVATE_SUSPENDED = false;
  var SCHEDULED_DEACTIVATE = [];
  function deactivateObserver(target, eventName, sync = false) {
    if (DEACTIVATE_SUSPENDED === true) {
      SCHEDULED_DEACTIVATE.push([target, eventName, sync]);
      return;
    }
    var observerMap = sync === true ? SYNC_OBSERVERS : ASYNC_OBSERVERS;
    var activeObservers = observerMap.get(target);
    if (activeObservers !== undefined) {
      var observer = activeObservers.get(eventName);
      observer.count--;
      if (observer.count === 0) {
        activeObservers.delete(eventName);
        if (activeObservers.size === 0) {
          observerMap.delete(target);
        }
      }
    }
  }
  function suspendedObserverDeactivation() {
    DEACTIVATE_SUSPENDED = true;
  }
  function resumeObserverDeactivation() {
    DEACTIVATE_SUSPENDED = false;
    for (var [target, eventName, sync] of SCHEDULED_DEACTIVATE) {
      deactivateObserver(target, eventName, sync);
    }
    SCHEDULED_DEACTIVATE = [];
  }
  /**
   * Primarily used for cases where we are redefining a class, e.g. mixins/reopen
   * being applied later. Revalidates all the observers, resetting their tags.
   *
   * @private
   * @param target
   */
  function revalidateObservers(target) {
    if (ASYNC_OBSERVERS.has(target)) {
      ASYNC_OBSERVERS.get(target).forEach(observer => {
        observer.tag = getChainTagsForKey(target, observer.path, (0, _validator.tagMetaFor)(target), (0, _meta2.peekMeta)(target));
        observer.lastRevision = (0, _validator.valueForTag)(observer.tag);
      });
    }
    if (SYNC_OBSERVERS.has(target)) {
      SYNC_OBSERVERS.get(target).forEach(observer => {
        observer.tag = getChainTagsForKey(target, observer.path, (0, _validator.tagMetaFor)(target), (0, _meta2.peekMeta)(target));
        observer.lastRevision = (0, _validator.valueForTag)(observer.tag);
      });
    }
  }
  var lastKnownRevision = 0;
  function flushAsyncObservers(shouldSchedule = true) {
    var currentRevision = (0, _validator.valueForTag)(_validator.CURRENT_TAG);
    if (lastKnownRevision === currentRevision) {
      return;
    }
    lastKnownRevision = currentRevision;
    ASYNC_OBSERVERS.forEach((activeObservers, target) => {
      var meta$$1 = (0, _meta2.peekMeta)(target);
      activeObservers.forEach((observer, eventName) => {
        if (!(0, _validator.validateTag)(observer.tag, observer.lastRevision)) {
          var sendObserver = () => {
            try {
              sendEvent(target, eventName, [target, observer.path], undefined, meta$$1);
            } finally {
              observer.tag = getChainTagsForKey(target, observer.path, (0, _validator.tagMetaFor)(target), (0, _meta2.peekMeta)(target));
              observer.lastRevision = (0, _validator.valueForTag)(observer.tag);
            }
          };
          if (shouldSchedule) {
            (0, _runloop.schedule)('actions', sendObserver);
          } else {
            sendObserver();
          }
        }
      });
    });
  }
  function flushSyncObservers() {
    // When flushing synchronous observers, we know that something has changed (we
    // only do this during a notifyPropertyChange), so there's no reason to check
    // a global revision.
    SYNC_OBSERVERS.forEach((activeObservers, target) => {
      var meta$$1 = (0, _meta2.peekMeta)(target);
      activeObservers.forEach((observer, eventName) => {
        if (!observer.suspended && !(0, _validator.validateTag)(observer.tag, observer.lastRevision)) {
          try {
            observer.suspended = true;
            sendEvent(target, eventName, [target, observer.path], undefined, meta$$1);
          } finally {
            observer.tag = getChainTagsForKey(target, observer.path, (0, _validator.tagMetaFor)(target), (0, _meta2.peekMeta)(target));
            observer.lastRevision = (0, _validator.valueForTag)(observer.tag);
            observer.suspended = false;
          }
        }
      });
    });
  }
  function setObserverSuspended(target, property, suspended) {
    var activeObservers = SYNC_OBSERVERS.get(target);
    if (!activeObservers) {
      return;
    }
    var observer = activeObservers.get(changeEvent(property));
    if (observer) {
      observer.suspended = suspended;
    }
  }
  function destroyObservers(target) {
    if (SYNC_OBSERVERS.size > 0) SYNC_OBSERVERS.delete(target);
    if (ASYNC_OBSERVERS.size > 0) ASYNC_OBSERVERS.delete(target);
  }

  // This is exported for `@tracked`, but should otherwise be avoided. Use `tagForObject`.
  var SELF_TAG = (0, _utils.symbol)('SELF_TAG');
  function tagForProperty(obj, propertyKey, addMandatorySetter = false, meta$$1) {
    var customTagFor = (0, _manager.getCustomTagFor)(obj);
    if (customTagFor !== undefined) {
      return customTagFor(obj, propertyKey, addMandatorySetter);
    }
    var tag = (0, _validator.tagFor)(obj, propertyKey, meta$$1);
    if (true /* DEBUG */ && addMandatorySetter) {
      (0, _utils.setupMandatorySetter)(tag, obj, propertyKey);
    }
    return tag;
  }
  function tagForObject(obj) {
    if ((0, _utils.isObject)(obj)) {
      if (true /* DEBUG */) {
        (true && !(!(0, _destroyable.isDestroyed)(obj)) && (0, _debug.assert)((0, _destroyable.isDestroyed)(obj) ? `Cannot create a new tag for \`${(0, _utils.toString)(obj)}\` after it has been destroyed.` : '', !(0, _destroyable.isDestroyed)(obj)));
      }
      return (0, _validator.tagFor)(obj, SELF_TAG);
    }
    return _validator.CONSTANT_TAG;
  }
  function markObjectAsDirty(obj, propertyKey) {
    (0, _validator.dirtyTagFor)(obj, propertyKey);
    (0, _validator.dirtyTagFor)(obj, SELF_TAG);
  }

  /**
   @module ember
   @private
   */
  var PROPERTY_DID_CHANGE = _exports.PROPERTY_DID_CHANGE = Symbol('PROPERTY_DID_CHANGE');
  function hasPropertyDidChange(obj) {
    return obj != null && typeof obj === 'object' && typeof obj[PROPERTY_DID_CHANGE] === 'function';
  }
  var deferred = 0;
  /**
    This function is called just after an object property has changed.
    It will notify any observers and clear caches among other things.
  
    Normally you will not need to call this method directly but if for some
    reason you can't directly watch a property you can invoke this method
    manually.
  
    @method notifyPropertyChange
    @for @ember/object
    @param {Object} obj The object with the property that will change
    @param {String} keyName The property key (or path) that will change.
    @param {Meta} [_meta] The objects meta.
    @param {unknown} [value] The new value to set for the property
    @return {void}
    @since 3.1.0
    @public
  */
  function notifyPropertyChange(obj, keyName, _meta, value) {
    var meta$$1 = _meta === undefined ? (0, _meta2.peekMeta)(obj) : _meta;
    if (meta$$1 !== null && (meta$$1.isInitializing() || meta$$1.isPrototypeMeta(obj))) {
      return;
    }
    markObjectAsDirty(obj, keyName);
    if (deferred <= 0) {
      flushSyncObservers();
    }
    if (PROPERTY_DID_CHANGE in obj) {
      // It's redundant to do this here, but we don't want to check above so we can avoid an extra function call in prod.
      (true && !(hasPropertyDidChange(obj)) && (0, _debug.assert)('property did change hook is invalid', hasPropertyDidChange(obj))); // we need to check the arguments length here; there's a check in Component's `PROPERTY_DID_CHANGE`
      // that checks its arguments length, so we have to explicitly not call this with `value`
      // if it is not passed to `notifyPropertyChange`
      if (arguments.length === 4) {
        obj[PROPERTY_DID_CHANGE](keyName, value);
      } else {
        obj[PROPERTY_DID_CHANGE](keyName);
      }
    }
  }
  /**
    @method beginPropertyChanges
    @chainable
    @private
  */
  function beginPropertyChanges() {
    deferred++;
    suspendedObserverDeactivation();
  }
  /**
    @method endPropertyChanges
    @private
  */
  function endPropertyChanges() {
    deferred--;
    if (deferred <= 0) {
      flushSyncObservers();
      resumeObserverDeactivation();
    }
  }
  /**
    Make a series of property changes together in an
    exception-safe way.
  
    ```javascript
    Ember.changeProperties(function() {
      obj1.set('foo', mayBlowUpWhenSet);
      obj2.set('bar', baz);
    });
    ```
  
    @method changeProperties
    @param {Function} callback
    @private
  */
  function changeProperties(callback) {
    beginPropertyChanges();
    try {
      callback();
    } finally {
      endPropertyChanges();
    }
  }
  function arrayContentWillChange(array, startIdx, removeAmt, addAmt) {
    // if no args are passed assume everything changes
    if (startIdx === undefined) {
      startIdx = 0;
      removeAmt = addAmt = -1;
    } else {
      if (removeAmt === undefined) {
        removeAmt = -1;
      }
      if (addAmt === undefined) {
        addAmt = -1;
      }
    }
    sendEvent(array, '@array:before', [array, startIdx, removeAmt, addAmt]);
    return array;
  }
  function arrayContentDidChange(array, startIdx, removeAmt, addAmt, notify = true) {
    // if no args are passed assume everything changes
    if (startIdx === undefined) {
      startIdx = 0;
      removeAmt = addAmt = -1;
    } else {
      if (removeAmt === undefined) {
        removeAmt = -1;
      }
      if (addAmt === undefined) {
        addAmt = -1;
      }
    }
    var meta$$1 = (0, _meta2.peekMeta)(array);
    if (notify) {
      if (addAmt < 0 || removeAmt < 0 || addAmt - removeAmt !== 0) {
        notifyPropertyChange(array, 'length', meta$$1);
      }
      notifyPropertyChange(array, '[]', meta$$1);
    }
    sendEvent(array, '@array:change', [array, startIdx, removeAmt, addAmt]);
    if (meta$$1 !== null) {
      var length = array.length;
      var addedAmount = addAmt === -1 ? 0 : addAmt;
      var removedAmount = removeAmt === -1 ? 0 : removeAmt;
      var delta = addedAmount - removedAmount;
      var previousLength = length - delta;
      var normalStartIdx = startIdx < 0 ? previousLength + startIdx : startIdx;
      if (meta$$1.revisionFor('firstObject') !== undefined && normalStartIdx === 0) {
        notifyPropertyChange(array, 'firstObject', meta$$1);
      }
      if (meta$$1.revisionFor('lastObject') !== undefined) {
        var previousLastIndex = previousLength - 1;
        var lastAffectedIndex = normalStartIdx + removedAmount;
        if (previousLastIndex < lastAffectedIndex) {
          notifyPropertyChange(array, 'lastObject', meta$$1);
        }
      }
    }
    return array;
  }
  var EMPTY_ARRAY = Object.freeze([]);
  function objectAt(array, index) {
    if (Array.isArray(array)) {
      return array[index];
    } else {
      return array.objectAt(index);
    }
  }
  // Ideally, we'd use MutableArray.detect but for unknown reasons this causes
  // the node tests to fail strangely.
  function isMutableArray(obj) {
    return obj != null && typeof obj.replace === 'function';
  }
  function replace(array, start, deleteCount, items = EMPTY_ARRAY) {
    if (isMutableArray(array)) {
      array.replace(start, deleteCount, items);
    } else {
      (true && !(Array.isArray(array)) && (0, _debug.assert)('Can only replace content of a native array or MutableArray', Array.isArray(array)));
      replaceInNativeArray(array, start, deleteCount, items);
    }
  }
  var CHUNK_SIZE = 60000;
  // To avoid overflowing the stack, we splice up to CHUNK_SIZE items at a time.
  // See https://code.google.com/p/chromium/issues/detail?id=56588 for more details.
  function replaceInNativeArray(array, start, deleteCount, items) {
    arrayContentWillChange(array, start, deleteCount, items.length);
    if (items.length <= CHUNK_SIZE) {
      array.splice(start, deleteCount, ...items);
    } else {
      array.splice(start, deleteCount);
      for (var i = 0; i < items.length; i += CHUNK_SIZE) {
        var chunk = items.slice(i, i + CHUNK_SIZE);
        array.splice(start + i, 0, ...chunk);
      }
    }
    arrayContentDidChange(array, start, deleteCount, items.length);
  }
  function arrayObserversHelper(obj, target, opts, operation) {
    var _a;
    var {
      willChange,
      didChange
    } = opts;
    operation(obj, '@array:before', target, willChange);
    operation(obj, '@array:change', target, didChange);
    /*
     * Array proxies have a `_revalidate` method which must be called to set
     * up their internal array observation systems.
     */
    (_a = obj._revalidate) === null || _a === void 0 ? void 0 : _a.call(obj);
    return obj;
  }
  function addArrayObserver(array, target, opts) {
    return arrayObserversHelper(array, target, opts, addListener);
  }
  function removeArrayObserver(array, target, opts) {
    return arrayObserversHelper(array, target, opts, removeListener);
  }
  var CHAIN_PASS_THROUGH = new _util._WeakSet();
  function finishLazyChains(meta$$1, key, value) {
    var lazyTags = meta$$1.readableLazyChainsFor(key);
    if (lazyTags === undefined) {
      return;
    }
    if ((0, _utils.isObject)(value)) {
      for (var [tag, deps] of lazyTags) {
        (0, _validator.updateTag)(tag, getChainTagsForKey(value, deps, (0, _validator.tagMetaFor)(value), (0, _meta2.peekMeta)(value)));
      }
    }
    lazyTags.length = 0;
  }
  function getChainTagsForKeys(obj, keys, tagMeta, meta$$1) {
    var tags = [];
    for (var key of keys) {
      getChainTags(tags, obj, key, tagMeta, meta$$1);
    }
    return (0, _validator.combine)(tags);
  }
  function getChainTagsForKey(obj, key, tagMeta, meta$$1) {
    return (0, _validator.combine)(getChainTags([], obj, key, tagMeta, meta$$1));
  }
  function getChainTags(chainTags, obj, path, tagMeta, meta$$1) {
    var current = obj;
    var currentTagMeta = tagMeta;
    var currentMeta = meta$$1;
    var pathLength = path.length;
    var segmentEnd = -1;
    // prevent closures
    var segment, descriptor;
    // eslint-disable-next-line no-constant-condition
    while (true) {
      var lastSegmentEnd = segmentEnd + 1;
      segmentEnd = path.indexOf('.', lastSegmentEnd);
      if (segmentEnd === -1) {
        segmentEnd = pathLength;
      }
      segment = path.slice(lastSegmentEnd, segmentEnd);
      // If the segment is an @each, we can process it and then break
      if (segment === '@each' && segmentEnd !== pathLength) {
        lastSegmentEnd = segmentEnd + 1;
        segmentEnd = path.indexOf('.', lastSegmentEnd);
        var arrLength = current.length;
        if (typeof arrLength !== 'number' ||
        // TODO: should the second test be `isEmberArray` instead?
        !(Array.isArray(current) || 'objectAt' in current)) {
          // If the current object isn't an array, there's nothing else to do,
          // we don't watch individual properties. Break out of the loop.
          break;
        } else if (arrLength === 0) {
          // Fast path for empty arrays
          chainTags.push(tagForProperty(current, '[]'));
          break;
        }
        if (segmentEnd === -1) {
          segment = path.slice(lastSegmentEnd);
        } else {
          // Deprecated, remove once we turn the deprecation into an assertion
          segment = path.slice(lastSegmentEnd, segmentEnd);
        }
        // Push the tags for each item's property
        for (var i = 0; i < arrLength; i++) {
          var item = objectAt(current, i);
          if (item) {
            (true && !(typeof item === 'object') && (0, _debug.assert)(`When using @each to observe the array \`${current.toString()}\`, the items in the array must be objects`, typeof item === 'object'));
            chainTags.push(tagForProperty(item, segment, true));
            currentMeta = (0, _meta2.peekMeta)(item);
            descriptor = currentMeta !== null ? currentMeta.peekDescriptors(segment) : undefined;
            // If the key is an alias, we need to bootstrap it
            if (descriptor !== undefined && typeof descriptor.altKey === 'string') {
              item[segment];
            }
          }
        }
        // Push the tag for the array length itself
        chainTags.push(tagForProperty(current, '[]', true, currentTagMeta));
        break;
      }
      var propertyTag = tagForProperty(current, segment, true, currentTagMeta);
      descriptor = currentMeta !== null ? currentMeta.peekDescriptors(segment) : undefined;
      chainTags.push(propertyTag);
      // If we're at the end of the path, processing the last segment, and it's
      // not an alias, we should _not_ get the last value, since we already have
      // its tag. There's no reason to access it and do more work.
      if (segmentEnd === pathLength) {
        // If the key was an alias, we should always get the next value in order to
        // bootstrap the alias. This is because aliases, unlike other CPs, should
        // always be in sync with the aliased value.
        if (CHAIN_PASS_THROUGH.has(descriptor)) {
          current[segment];
        }
        break;
      }
      if (descriptor === undefined) {
        // If the descriptor is undefined, then its a normal property, so we should
        // lookup the value to chain off of like normal.
        if (!(segment in current) && typeof current.unknownProperty === 'function') {
          current = current.unknownProperty(segment);
        } else {
          current = current[segment];
        }
      } else if (CHAIN_PASS_THROUGH.has(descriptor)) {
        current = current[segment];
      } else {
        // If the descriptor is defined, then its a normal CP (not an alias, which
        // would have been handled earlier). We get the last revision to check if
        // the CP is still valid, and if so we use the cached value. If not, then
        // we create a lazy chain lookup, and the next time the CP is calculated,
        // it will update that lazy chain.
        var instanceMeta = currentMeta.source === current ? currentMeta : (0, _meta2.meta)(current);
        var lastRevision = instanceMeta.revisionFor(segment);
        if (lastRevision !== undefined && (0, _validator.validateTag)(propertyTag, lastRevision)) {
          current = instanceMeta.valueFor(segment);
        } else {
          // use metaFor here to ensure we have the meta for the instance
          var lazyChains = instanceMeta.writableLazyChainsFor(segment);
          var rest = path.substring(segmentEnd + 1);
          var placeholderTag = (0, _validator.createUpdatableTag)();
          lazyChains.push([placeholderTag, rest]);
          chainTags.push(placeholderTag);
          break;
        }
      }
      if (!(0, _utils.isObject)(current)) {
        // we've hit the end of the chain for now, break out
        break;
      }
      currentTagMeta = (0, _validator.tagMetaFor)(current);
      currentMeta = (0, _meta2.peekMeta)(current);
    }
    return chainTags;
  }
  function isElementDescriptor(args) {
    var [maybeTarget, maybeKey, maybeDesc] = args;
    return (
      // Ensure we have the right number of args
      args.length === 3 && (
      // Make sure the target is a class or object (prototype)
      typeof maybeTarget === 'function' || typeof maybeTarget === 'object' && maybeTarget !== null) &&
      // Make sure the key is a string
      typeof maybeKey === 'string' && (
      // Make sure the descriptor is the right shape
      typeof maybeDesc === 'object' && maybeDesc !== null || maybeDesc === undefined)
    );
  }
  function nativeDescDecorator(propertyDesc) {
    var decorator = function () {
      return propertyDesc;
    };
    setClassicDecorator(decorator);
    return decorator;
  }
  /**
    Objects of this type can implement an interface to respond to requests to
    get and set. The default implementation handles simple properties.
  
    @class Descriptor
    @private
  */
  class ComputedDescriptor {
    constructor() {
      this.enumerable = true;
      this.configurable = true;
      this._dependentKeys = undefined;
      this._meta = undefined;
    }
    setup(_obj, keyName, _propertyDesc, meta$$1) {
      meta$$1.writeDescriptors(keyName, this);
    }
    teardown(_obj, keyName, meta$$1) {
      meta$$1.removeDescriptors(keyName);
    }
  }
  _exports.ComputedDescriptor = ComputedDescriptor;
  var COMPUTED_GETTERS;
  if (true /* DEBUG */) {
    COMPUTED_GETTERS = new _util._WeakSet();
  }
  function DESCRIPTOR_GETTER_FUNCTION(name, descriptor) {
    function getter() {
      return descriptor.get(this, name);
    }
    if (true /* DEBUG */) {
      COMPUTED_GETTERS.add(getter);
    }
    return getter;
  }
  function DESCRIPTOR_SETTER_FUNCTION(name, descriptor) {
    var set = function CPSETTER_FUNCTION(value) {
      return descriptor.set(this, name, value);
    };
    COMPUTED_SETTERS.add(set);
    return set;
  }
  var COMPUTED_SETTERS = new _util._WeakSet();
  function makeComputedDecorator(desc, DecoratorClass) {
    var decorator = function COMPUTED_DECORATOR(target, key, propertyDesc, maybeMeta, isClassicDecorator) {
      (true && !(isClassicDecorator || !propertyDesc || !propertyDesc.get || !COMPUTED_GETTERS.has(propertyDesc.get)) && (0, _debug.assert)(`Only one computed property decorator can be applied to a class field or accessor, but '${key}' was decorated twice. You may have added the decorator to both a getter and setter, which is unnecessary.`, isClassicDecorator || !propertyDesc || !propertyDesc.get || !COMPUTED_GETTERS.has(propertyDesc.get)));
      var meta$$1 = arguments.length === 3 ? (0, _meta2.meta)(target) : maybeMeta;
      desc.setup(target, key, propertyDesc, meta$$1);
      var computedDesc = {
        enumerable: desc.enumerable,
        configurable: desc.configurable,
        get: DESCRIPTOR_GETTER_FUNCTION(key, desc),
        set: DESCRIPTOR_SETTER_FUNCTION(key, desc)
      };
      return computedDesc;
    };
    setClassicDecorator(decorator, desc);
    Object.setPrototypeOf(decorator, DecoratorClass.prototype);
    return decorator;
  }
  /////////////
  var DECORATOR_DESCRIPTOR_MAP = new WeakMap();
  /**
    Returns the CP descriptor associated with `obj` and `keyName`, if any.
  
    @method descriptorForProperty
    @param {Object} obj the object to check
    @param {String} keyName the key to check
    @return {Descriptor}
    @private
  */
  function descriptorForProperty(obj, keyName, _meta) {
    (true && !(obj !== null) && (0, _debug.assert)('Cannot call `descriptorForProperty` on null', obj !== null));
    (true && !(obj !== undefined) && (0, _debug.assert)('Cannot call `descriptorForProperty` on undefined', obj !== undefined));
    (true && !(typeof obj === 'object' || typeof obj === 'function') && (0, _debug.assert)(`Cannot call \`descriptorForProperty\` on ${typeof obj}`, typeof obj === 'object' || typeof obj === 'function'));
    var meta$$1 = _meta === undefined ? (0, _meta2.peekMeta)(obj) : _meta;
    if (meta$$1 !== null) {
      return meta$$1.peekDescriptors(keyName);
    }
  }
  function descriptorForDecorator(dec) {
    return DECORATOR_DESCRIPTOR_MAP.get(dec);
  }
  /**
    Check whether a value is a decorator
  
    @method isClassicDecorator
    @param {any} possibleDesc the value to check
    @return {boolean}
    @private
  */
  function isClassicDecorator(dec) {
    return typeof dec === 'function' && DECORATOR_DESCRIPTOR_MAP.has(dec);
  }
  /**
    Set a value as a decorator
  
    @method setClassicDecorator
    @param {function} decorator the value to mark as a decorator
    @private
  */
  function setClassicDecorator(dec, value = true) {
    DECORATOR_DESCRIPTOR_MAP.set(dec, value);
  }

  /**
  @module @ember/object
  */
  var END_WITH_EACH_REGEX = /\.@each$/;
  /**
    Expands `pattern`, invoking `callback` for each expansion.
  
    The only pattern supported is brace-expansion, anything else will be passed
    once to `callback` directly.
  
    Example
  
    ```js
    import { expandProperties } from '@ember/object/computed';
  
    function echo(arg){ console.log(arg); }
  
    expandProperties('foo.bar', echo);              //=> 'foo.bar'
    expandProperties('{foo,bar}', echo);            //=> 'foo', 'bar'
    expandProperties('foo.{bar,baz}', echo);        //=> 'foo.bar', 'foo.baz'
    expandProperties('{foo,bar}.baz', echo);        //=> 'foo.baz', 'bar.baz'
    expandProperties('foo.{bar,baz}.[]', echo)      //=> 'foo.bar.[]', 'foo.baz.[]'
    expandProperties('{foo,bar}.{spam,eggs}', echo) //=> 'foo.spam', 'foo.eggs', 'bar.spam', 'bar.eggs'
    expandProperties('{foo}.bar.{baz}')             //=> 'foo.bar.baz'
    ```
  
    @method expandProperties
    @static
    @for @ember/object/computed
    @public
    @param {String} pattern The property pattern to expand.
    @param {Function} callback The callback to invoke.  It is invoked once per
    expansion, and is passed the expansion.
  */
  function expandProperties(pattern, callback) {
    (true && !(typeof pattern === 'string') && (0, _debug.assert)(`A computed property key must be a string, you passed ${typeof pattern} ${pattern}`, typeof pattern === 'string'));
    (true && !(pattern.indexOf(' ') === -1) && (0, _debug.assert)('Brace expanded properties cannot contain spaces, e.g. "user.{firstName, lastName}" should be "user.{firstName,lastName}"', pattern.indexOf(' ') === -1)); // regex to look for double open, double close, or unclosed braces
    (true && !(pattern.match(/\{[^}{]*\{|\}[^}{]*\}|\{[^}]*$/g) === null) && (0, _debug.assert)(`Brace expanded properties have to be balanced and cannot be nested, pattern: ${pattern}`, pattern.match(/\{[^}{]*\{|\}[^}{]*\}|\{[^}]*$/g) === null));
    var start = pattern.indexOf('{');
    if (start < 0) {
      callback(pattern.replace(END_WITH_EACH_REGEX, '.[]'));
    } else {
      dive('', pattern, start, callback);
    }
  }
  function dive(prefix, pattern, start, callback) {
    var end = pattern.indexOf('}'),
      i = 0,
      newStart,
      arrayLength;
    var tempArr = pattern.substring(start + 1, end).split(',');
    var after = pattern.substring(end + 1);
    prefix = prefix + pattern.substring(0, start);
    arrayLength = tempArr.length;
    while (i < arrayLength) {
      newStart = after.indexOf('{');
      if (newStart < 0) {
        callback((prefix + tempArr[i++] + after).replace(END_WITH_EACH_REGEX, '.[]'));
      } else {
        dive(prefix + tempArr[i++], after, newStart, callback);
      }
    }
  }

  /**
  @module @ember/object
  */
  var DEEP_EACH_REGEX = /\.@each\.[^.]+\./;
  function noop() {}
  /**
    `@computed` is a decorator that turns a JavaScript getter and setter into a
    computed property, which is a _cached, trackable value_. By default the getter
    will only be called once and the result will be cached. You can specify
    various properties that your computed property depends on. This will force the
    cached result to be cleared if the dependencies are modified, and lazily recomputed the next time something asks for it.
  
    In the following example we decorate a getter - `fullName` -  by calling
    `computed` with the property dependencies (`firstName` and `lastName`) as
    arguments. The `fullName` getter will be called once (regardless of how many
    times it is accessed) as long as its dependencies do not change. Once
    `firstName` or `lastName` are updated any future calls to `fullName` will
    incorporate the new values, and any watchers of the value such as templates
    will be updated:
  
    ```javascript
    import { computed, set } from '@ember/object';
  
    class Person {
      constructor(firstName, lastName) {
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
  
      @computed('firstName', 'lastName')
      get fullName() {
        return `${this.firstName} ${this.lastName}`;
      }
    });
  
    let tom = new Person('Tom', 'Dale');
  
    tom.fullName; // 'Tom Dale'
    ```
  
    You can also provide a setter, which will be used when updating the computed
    property. Ember's `set` function must be used to update the property
    since it will also notify observers of the property:
  
    ```javascript
    import { computed, set } from '@ember/object';
  
    class Person {
      constructor(firstName, lastName) {
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
  
      @computed('firstName', 'lastName')
      get fullName() {
        return `${this.firstName} ${this.lastName}`;
      }
  
      set fullName(value) {
        let [firstName, lastName] = value.split(' ');
  
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
    });
  
    let person = new Person();
  
    set(person, 'fullName', 'Peter Wagenet');
    person.firstName; // 'Peter'
    person.lastName;  // 'Wagenet'
    ```
  
    You can also pass a getter function or object with `get` and `set` functions
    as the last argument to the computed decorator. This allows you to define
    computed property _macros_:
  
    ```js
    import { computed } from '@ember/object';
  
    function join(...keys) {
      return computed(...keys, function() {
        return keys.map(key => this[key]).join(' ');
      });
    }
  
    class Person {
      @join('firstName', 'lastName')
      fullName;
    }
    ```
  
    Note that when defined this way, getters and setters receive the _key_ of the
    property they are decorating as the first argument. Setters receive the value
    they are setting to as the second argument instead. Additionally, setters must
    _return_ the value that should be cached:
  
    ```javascript
    import { computed, set } from '@ember/object';
  
    function fullNameMacro(firstNameKey, lastNameKey) {
      return computed(firstNameKey, lastNameKey, {
        get() {
          return `${this[firstNameKey]} ${this[lastNameKey]}`;
        }
  
        set(key, value) {
          let [firstName, lastName] = value.split(' ');
  
          set(this, firstNameKey, firstName);
          set(this, lastNameKey, lastName);
  
          return value;
        }
      });
    }
  
    class Person {
      constructor(firstName, lastName) {
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
  
      @fullNameMacro('firstName', 'lastName') fullName;
    });
  
    let person = new Person();
  
    set(person, 'fullName', 'Peter Wagenet');
    person.firstName; // 'Peter'
    person.lastName;  // 'Wagenet'
    ```
  
    Computed properties can also be used in classic classes. To do this, we
    provide the getter and setter as the last argument like we would for a macro,
    and we assign it to a property on the class definition. This is an _anonymous_
    computed macro:
  
    ```javascript
    import EmberObject, { computed, set } from '@ember/object';
  
    let Person = EmberObject.extend({
      // these will be supplied by `create`
      firstName: null,
      lastName: null,
  
      fullName: computed('firstName', 'lastName', {
        get() {
          return `${this.firstName} ${this.lastName}`;
        }
  
        set(key, value) {
          let [firstName, lastName] = value.split(' ');
  
          set(this, 'firstName', firstName);
          set(this, 'lastName', lastName);
  
          return value;
        }
      })
    });
  
    let tom = Person.create({
      firstName: 'Tom',
      lastName: 'Dale'
    });
  
    tom.get('fullName') // 'Tom Dale'
    ```
  
    You can overwrite computed property without setters with a normal property (no
    longer computed) that won't change if dependencies change. You can also mark
    computed property as `.readOnly()` and block all attempts to set it.
  
    ```javascript
    import { computed, set } from '@ember/object';
  
    class Person {
      constructor(firstName, lastName) {
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
  
      @computed('firstName', 'lastName').readOnly()
      get fullName() {
        return `${this.firstName} ${this.lastName}`;
      }
    });
  
    let person = new Person();
    person.set('fullName', 'Peter Wagenet'); // Uncaught Error: Cannot set read-only property "fullName" on object: <(...):emberXXX>
    ```
  
    Additional resources:
    - [Decorators RFC](https://github.com/emberjs/rfcs/blob/master/text/0408-decorators.md)
    - [New CP syntax RFC](https://github.com/emberjs/rfcs/blob/master/text/0011-improved-cp-syntax.md)
    - [New computed syntax explained in "Ember 1.12 released" ](https://emberjs.com/blog/2015/05/13/ember-1-12-released.html#toc_new-computed-syntax)
  
    @class ComputedProperty
    @public
  */
  class ComputedProperty extends ComputedDescriptor {
    constructor(args) {
      super();
      this._readOnly = false;
      this._hasConfig = false;
      this._getter = undefined;
      this._setter = undefined;
      var maybeConfig = args[args.length - 1];
      if (typeof maybeConfig === 'function' || maybeConfig !== null && typeof maybeConfig === 'object') {
        this._hasConfig = true;
        var config = args.pop();
        if (typeof config === 'function') {
          (true && !(!isClassicDecorator(config)) && (0, _debug.assert)(`You attempted to pass a computed property instance to computed(). Computed property instances are decorator functions, and cannot be passed to computed() because they cannot be turned into decorators twice`, !isClassicDecorator(config)));
          this._getter = config;
        } else {
          var objectConfig = config;
          (true && !(typeof objectConfig === 'object' && !Array.isArray(objectConfig)) && (0, _debug.assert)('computed expects a function or an object as last argument.', typeof objectConfig === 'object' && !Array.isArray(objectConfig)));
          (true && !(Object.keys(objectConfig).every(key => key === 'get' || key === 'set')) && (0, _debug.assert)('Config object passed to computed can only contain `get` and `set` keys.', Object.keys(objectConfig).every(key => key === 'get' || key === 'set')));
          (true && !(Boolean(objectConfig.get) || Boolean(objectConfig.set)) && (0, _debug.assert)('Computed properties must receive a getter or a setter, you passed none.', Boolean(objectConfig.get) || Boolean(objectConfig.set)));
          this._getter = objectConfig.get || noop;
          this._setter = objectConfig.set;
        }
      }
      if (args.length > 0) {
        this._property(...args);
      }
    }
    setup(obj, keyName, propertyDesc, meta$$1) {
      super.setup(obj, keyName, propertyDesc, meta$$1);
      (true && !(!(propertyDesc && typeof propertyDesc.value === 'function')) && (0, _debug.assert)(`@computed can only be used on accessors or fields, attempted to use it with ${keyName} but that was a method. Try converting it to a getter (e.g. \`get ${keyName}() {}\`)`, !(propertyDesc && typeof propertyDesc.value === 'function')));
      (true && !(!propertyDesc || !propertyDesc.initializer) && (0, _debug.assert)(`@computed can only be used on empty fields. ${keyName} has an initial value (e.g. \`${keyName} = someValue\`)`, !propertyDesc || !propertyDesc.initializer));
      (true && !(!(this._hasConfig && propertyDesc && (typeof propertyDesc.get === 'function' || typeof propertyDesc.set === 'function'))) && (0, _debug.assert)(`Attempted to apply a computed property that already has a getter/setter to a ${keyName}, but it is a method or an accessor. If you passed @computed a function or getter/setter (e.g. \`@computed({ get() { ... } })\`), then it must be applied to a field`, !(this._hasConfig && propertyDesc && (typeof propertyDesc.get === 'function' || typeof propertyDesc.set === 'function'))));
      if (this._hasConfig === false) {
        (true && !(propertyDesc && (typeof propertyDesc.get === 'function' || typeof propertyDesc.set === 'function')) && (0, _debug.assert)(`Attempted to use @computed on ${keyName}, but it did not have a getter or a setter. You must either pass a get a function or getter/setter to @computed directly (e.g. \`@computed({ get() { ... } })\`) or apply @computed directly to a getter/setter`, propertyDesc && (typeof propertyDesc.get === 'function' || typeof propertyDesc.set === 'function')));
        var {
          get: _get2,
          set: _set2
        } = propertyDesc;
        if (_get2 !== undefined) {
          this._getter = _get2;
        }
        if (_set2 !== undefined) {
          this._setter = function setterWrapper(_key, value) {
            var ret = _set2.call(this, value);
            if (_get2 !== undefined) {
              return typeof ret === 'undefined' ? _get2.call(this) : ret;
            }
            return ret;
          };
        }
      }
    }
    _property(...passedArgs) {
      var args = [];
      function addArg(property) {
        (true && !(DEEP_EACH_REGEX.test(property) === false) && (0, _debug.assert)(`Dependent keys containing @each only work one level deep. ` + `You used the key "${property}" which is invalid. ` + `Please create an intermediary computed property or ` + `switch to using tracked properties.`, DEEP_EACH_REGEX.test(property) === false));
        args.push(property);
      }
      for (var arg of passedArgs) {
        expandProperties(arg, addArg);
      }
      this._dependentKeys = args;
    }
    get(obj, keyName) {
      var meta$$1 = (0, _meta2.meta)(obj);
      var tagMeta = (0, _validator.tagMetaFor)(obj);
      var propertyTag = (0, _validator.tagFor)(obj, keyName, tagMeta);
      var ret;
      var revision = meta$$1.revisionFor(keyName);
      if (revision !== undefined && (0, _validator.validateTag)(propertyTag, revision)) {
        ret = meta$$1.valueFor(keyName);
      } else {
        // For backwards compatibility, we only throw if the CP has any dependencies. CPs without dependencies
        // should be allowed, even after the object has been destroyed, which is why we check _dependentKeys.
        (true && !(this._dependentKeys === undefined || !(0, _destroyable.isDestroyed)(obj)) && (0, _debug.assert)(`Attempted to access the computed ${obj}.${keyName} on a destroyed object, which is not allowed`, this._dependentKeys === undefined || !(0, _destroyable.isDestroyed)(obj)));
        var {
          _getter,
          _dependentKeys
        } = this;
        // Create a tracker that absorbs any trackable actions inside the CP
        (0, _validator.untrack)(() => {
          ret = _getter.call(obj, keyName);
        });
        if (_dependentKeys !== undefined) {
          (0, _validator.updateTag)(propertyTag, getChainTagsForKeys(obj, _dependentKeys, tagMeta, meta$$1));
          if (true /* DEBUG */) {
            _validator.ALLOW_CYCLES.set(propertyTag, true);
          }
        }
        meta$$1.setValueFor(keyName, ret);
        meta$$1.setRevisionFor(keyName, (0, _validator.valueForTag)(propertyTag));
        finishLazyChains(meta$$1, keyName, ret);
      }
      (0, _validator.consumeTag)(propertyTag);
      // Add the tag of the returned value if it is an array, since arrays
      // should always cause updates if they are consumed and then changed
      if (Array.isArray(ret)) {
        (0, _validator.consumeTag)((0, _validator.tagFor)(ret, '[]'));
      }
      return ret;
    }
    set(obj, keyName, value) {
      if (this._readOnly) {
        this._throwReadOnlyError(obj, keyName);
      }
      (true && !(this._setter !== undefined) && (0, _debug.assert)(`Cannot override the computed property \`${keyName}\` on ${(0, _utils.toString)(obj)}.`, this._setter !== undefined));
      var meta$$1 = (0, _meta2.meta)(obj);
      // ensure two way binding works when the component has defined a computed
      // property with both a setter and dependent keys, in that scenario without
      // the sync observer added below the caller's value will never be updated
      //
      // See GH#18147 / GH#19028 for details.
      if (
      // ensure that we only run this once, while the component is being instantiated
      meta$$1.isInitializing() && this._dependentKeys !== undefined && this._dependentKeys.length > 0 && typeof obj[PROPERTY_DID_CHANGE] === 'function' && obj.isComponent) {
        // It's redundant to do this here, but we don't want to check above so we can avoid an extra function call in prod.
        (true && !(hasPropertyDidChange(obj)) && (0, _debug.assert)('property did change hook is invalid', hasPropertyDidChange(obj)));
        addObserver(obj, keyName, () => {
          obj[PROPERTY_DID_CHANGE](keyName);
        }, undefined, true);
      }
      var ret;
      try {
        beginPropertyChanges();
        ret = this._set(obj, keyName, value, meta$$1);
        finishLazyChains(meta$$1, keyName, ret);
        var tagMeta = (0, _validator.tagMetaFor)(obj);
        var propertyTag = (0, _validator.tagFor)(obj, keyName, tagMeta);
        var {
          _dependentKeys
        } = this;
        if (_dependentKeys !== undefined) {
          (0, _validator.updateTag)(propertyTag, getChainTagsForKeys(obj, _dependentKeys, tagMeta, meta$$1));
          if (true /* DEBUG */) {
            _validator.ALLOW_CYCLES.set(propertyTag, true);
          }
        }
        meta$$1.setRevisionFor(keyName, (0, _validator.valueForTag)(propertyTag));
      } finally {
        endPropertyChanges();
      }
      return ret;
    }
    _throwReadOnlyError(obj, keyName) {
      throw new Error(`Cannot set read-only property "${keyName}" on object: ${(0, _debug.inspect)(obj)}`);
    }
    _set(obj, keyName, value, meta$$1) {
      var hadCachedValue = meta$$1.revisionFor(keyName) !== undefined;
      var cachedValue = meta$$1.valueFor(keyName);
      var ret;
      var {
        _setter
      } = this;
      setObserverSuspended(obj, keyName, true);
      try {
        ret = _setter.call(obj, keyName, value, cachedValue);
      } finally {
        setObserverSuspended(obj, keyName, false);
      }
      // allows setter to return the same value that is cached already
      if (hadCachedValue && cachedValue === ret) {
        return ret;
      }
      meta$$1.setValueFor(keyName, ret);
      notifyPropertyChange(obj, keyName, meta$$1, value);
      return ret;
    }
    /* called before property is overridden */
    teardown(obj, keyName, meta$$1) {
      if (meta$$1.revisionFor(keyName) !== undefined) {
        meta$$1.setRevisionFor(keyName, undefined);
        meta$$1.setValueFor(keyName, undefined);
      }
      super.teardown(obj, keyName, meta$$1);
    }
  }
  _exports.ComputedProperty = ComputedProperty;
  class AutoComputedProperty extends ComputedProperty {
    get(obj, keyName) {
      var meta$$1 = (0, _meta2.meta)(obj);
      var tagMeta = (0, _validator.tagMetaFor)(obj);
      var propertyTag = (0, _validator.tagFor)(obj, keyName, tagMeta);
      var ret;
      var revision = meta$$1.revisionFor(keyName);
      if (revision !== undefined && (0, _validator.validateTag)(propertyTag, revision)) {
        ret = meta$$1.valueFor(keyName);
      } else {
        (true && !(!(0, _destroyable.isDestroyed)(obj)) && (0, _debug.assert)(`Attempted to access the computed ${obj}.${keyName} on a destroyed object, which is not allowed`, !(0, _destroyable.isDestroyed)(obj)));
        var {
          _getter
        } = this;
        // Create a tracker that absorbs any trackable actions inside the CP
        var tag = (0, _validator.track)(() => {
          ret = _getter.call(obj, keyName);
        });
        (0, _validator.updateTag)(propertyTag, tag);
        meta$$1.setValueFor(keyName, ret);
        meta$$1.setRevisionFor(keyName, (0, _validator.valueForTag)(propertyTag));
        finishLazyChains(meta$$1, keyName, ret);
      }
      (0, _validator.consumeTag)(propertyTag);
      // Add the tag of the returned value if it is an array, since arrays
      // should always cause updates if they are consumed and then changed
      if (Array.isArray(ret)) {
        (0, _validator.consumeTag)((0, _validator.tagFor)(ret, '[]', tagMeta));
      }
      return ret;
    }
  }
  // TODO: This class can be svelted once `meta` has been deprecated
  class ComputedDecoratorImpl extends Function {
    /**
      Call on a computed property to set it into read-only mode. When in this
      mode the computed property will throw an error when set.
         Example:
         ```javascript
      import { computed, set } from '@ember/object';
         class Person {
        @computed().readOnly()
        get guid() {
          return 'guid-guid-guid';
        }
      }
         let person = new Person();
      set(person, 'guid', 'new-guid'); // will throw an exception
      ```
         Classic Class Example:
         ```javascript
      import EmberObject, { computed } from '@ember/object';
         let Person = EmberObject.extend({
        guid: computed(function() {
          return 'guid-guid-guid';
        }).readOnly()
      });
         let person = Person.create();
      person.set('guid', 'new-guid'); // will throw an exception
      ```
         @method readOnly
      @return {ComputedProperty} this
      @chainable
      @public
    */
    readOnly() {
      var desc = descriptorForDecorator(this);
      (true && !(!(desc._setter && desc._setter !== desc._getter)) && (0, _debug.assert)('Computed properties that define a setter using the new syntax cannot be read-only', !(desc._setter && desc._setter !== desc._getter)));
      desc._readOnly = true;
      return this;
    }
    /**
      In some cases, you may want to annotate computed properties with additional
      metadata about how they function or what values they operate on. For example,
      computed property functions may close over variables that are then no longer
      available for introspection. You can pass a hash of these values to a
      computed property.
         Example:
         ```javascript
      import { computed } from '@ember/object';
      import Person from 'my-app/utils/person';
         class Store {
        @computed().meta({ type: Person })
        get person() {
          let personId = this.personId;
          return Person.create({ id: personId });
        }
      }
      ```
         Classic Class Example:
         ```javascript
      import { computed } from '@ember/object';
      import Person from 'my-app/utils/person';
         const Store = EmberObject.extend({
        person: computed(function() {
          let personId = this.get('personId');
          return Person.create({ id: personId });
        }).meta({ type: Person })
      });
      ```
         The hash that you pass to the `meta()` function will be saved on the
      computed property descriptor under the `_meta` key. Ember runtime
      exposes a public API for retrieving these values from classes,
      via the `metaForProperty()` function.
         @method meta
      @param {Object} meta
      @chainable
      @public
    */
    meta(meta$$1) {
      var prop = descriptorForDecorator(this);
      if (arguments.length === 0) {
        return prop._meta || {};
      } else {
        prop._meta = meta$$1;
        return this;
      }
    }
    // TODO: Remove this when we can provide alternatives in the ecosystem to
    // addons such as ember-macro-helpers that use it.
    /** @internal */
    get _getter() {
      return descriptorForDecorator(this)._getter;
    }
    // TODO: Refactor this, this is an internal API only
    /** @internal */
    set enumerable(value) {
      descriptorForDecorator(this).enumerable = value;
    }
  }
  function computed(...args) {
    (true && !(!(isElementDescriptor(args.slice(0, 3)) && args.length === 5 && args[4] === true)) && (0, _debug.assert)(`@computed can only be used directly as a native decorator. If you're using tracked in classic classes, add parenthesis to call it like a function: computed()`, !(isElementDescriptor(args.slice(0, 3)) && args.length === 5 && args[4] === true)));
    if (isElementDescriptor(args)) {
      // SAFETY: We passed in the impl for this class
      var decorator = makeComputedDecorator(new ComputedProperty([]), ComputedDecoratorImpl);
      return decorator(args[0], args[1], args[2]);
    }
    // SAFETY: We passed in the impl for this class
    return makeComputedDecorator(new ComputedProperty(args), ComputedDecoratorImpl);
  }
  function autoComputed(...config) {
    // SAFETY: We passed in the impl for this class
    return makeComputedDecorator(new AutoComputedProperty(config), ComputedDecoratorImpl);
  }
  /**
    Allows checking if a given property on an object is a computed property. For the most part,
    this doesn't matter (you would normally just access the property directly and use its value),
    but for some tooling specific scenarios (e.g. the ember-inspector) it is important to
    differentiate if a property is a computed property or a "normal" property.
  
    This will work on either a class's prototype or an instance itself.
  
    @static
    @method isComputed
    @for @ember/debug
    @private
   */
  function isComputed(obj, key) {
    return Boolean(descriptorForProperty(obj, key));
  }
  function getCachedValueFor(obj, key) {
    var meta$$1 = (0, _meta2.peekMeta)(obj);
    if (meta$$1) {
      return meta$$1.valueFor(key);
    } else {
      return undefined;
    }
  }

  /**
  @module @ember/object
  */
  /**
    NOTE: This is a low-level method used by other parts of the API. You almost
    never want to call this method directly. Instead you should use
    `mixin()` to define new properties.
  
    Defines a property on an object. This method works much like the ES5
    `Object.defineProperty()` method except that it can also accept computed
    properties and other special descriptors.
  
    Normally this method takes only three parameters. However if you pass an
    instance of `Descriptor` as the third param then you can pass an
    optional value as the fourth parameter. This is often more efficient than
    creating new descriptor hashes for each property.
  
    ## Examples
  
    ```javascript
    import { defineProperty, computed } from '@ember/object';
  
    // ES5 compatible mode
    defineProperty(contact, 'firstName', {
      writable: true,
      configurable: false,
      enumerable: true,
      value: 'Charles'
    });
  
    // define a simple property
    defineProperty(contact, 'lastName', undefined, 'Jolley');
  
    // define a computed property
    defineProperty(contact, 'fullName', computed('firstName', 'lastName', function() {
      return this.firstName+' '+this.lastName;
    }));
    ```
  
    @public
    @method defineProperty
    @static
    @for @ember/object
    @param {Object} obj the object to define this property on. This may be a prototype.
    @param {String} keyName the name of the property
    @param {Descriptor} [desc] an instance of `Descriptor` (typically a
      computed property) or an ES5 descriptor.
      You must provide this or `data` but not both.
    @param {*} [data] something other than a descriptor, that will
      become the explicit value of this property.
  */
  function defineProperty(obj, keyName, desc, data, _meta) {
    var meta$$1 = _meta === undefined ? (0, _meta2.meta)(obj) : _meta;
    var previousDesc = descriptorForProperty(obj, keyName, meta$$1);
    var wasDescriptor = previousDesc !== undefined;
    if (wasDescriptor) {
      previousDesc.teardown(obj, keyName, meta$$1);
    }
    if (isClassicDecorator(desc)) {
      defineDecorator(obj, keyName, desc, meta$$1);
    } else if (desc === null || desc === undefined) {
      defineValue(obj, keyName, data, wasDescriptor, true);
    } else {
      // fallback to ES5
      Object.defineProperty(obj, keyName, desc);
    }
    // if key is being watched, override chains that
    // were initialized with the prototype
    if (!meta$$1.isPrototypeMeta(obj)) {
      revalidateObservers(obj);
    }
  }
  function defineDecorator(obj, keyName, desc, meta$$1) {
    var propertyDesc;
    if (true /* DEBUG */) {
      propertyDesc = desc(obj, keyName, undefined, meta$$1, true);
    } else {
      propertyDesc = desc(obj, keyName, undefined, meta$$1);
    }
    Object.defineProperty(obj, keyName, propertyDesc);
    // pass the decorator function forward for backwards compat
    return desc;
  }
  function defineValue(obj, keyName, value, wasDescriptor, enumerable = true) {
    if (wasDescriptor === true || enumerable === false) {
      Object.defineProperty(obj, keyName, {
        configurable: true,
        enumerable,
        writable: true,
        value
      });
    } else {
      if (true /* DEBUG */) {
        (0, _utils.setWithMandatorySetter)(obj, keyName, value);
      } else {
        obj[keyName] = value;
      }
    }
    return value;
  }
  var firstDotIndexCache = new _utils.Cache(1000, key => key.indexOf('.'));
  function isPath(path) {
    return typeof path === 'string' && firstDotIndexCache.get(path) !== -1;
  }
  var PROXY_CONTENT = _exports.PROXY_CONTENT = (0, _utils.symbol)('PROXY_CONTENT');
  var getPossibleMandatoryProxyValue;
  if (true /* DEBUG */) {
    getPossibleMandatoryProxyValue = function getPossibleMandatoryProxyValue(obj, keyName) {
      var content = obj[PROXY_CONTENT];
      if (content === undefined) {
        return obj[keyName];
      } else {
        /* global Reflect */
        return Reflect.get(content, keyName, obj);
      }
    };
  }
  function hasUnknownProperty(val) {
    return typeof val === 'object' && val !== null && typeof val.unknownProperty === 'function';
  }
  function get(obj, keyName) {
    (true && !(arguments.length === 2) && (0, _debug.assert)(`Get must be called with two arguments; an object and a property key`, arguments.length === 2));
    (true && !(obj !== undefined && obj !== null) && (0, _debug.assert)(`Cannot call get with '${keyName}' on an undefined object.`, obj !== undefined && obj !== null));
    (true && !(typeof keyName === 'string' || typeof keyName === 'number' && !isNaN(keyName)) && (0, _debug.assert)(`The key provided to get must be a string or number, you passed ${keyName}`, typeof keyName === 'string' || typeof keyName === 'number' && !isNaN(keyName)));
    (true && !(typeof keyName !== 'string' || keyName.lastIndexOf('this.', 0) !== 0) && (0, _debug.assert)(`'this' in paths is not supported`, typeof keyName !== 'string' || keyName.lastIndexOf('this.', 0) !== 0));
    return isPath(keyName) ? _getPath(obj, keyName) : _getProp(obj, keyName);
  }
  function _getProp(obj, keyName) {
    if (obj == null) {
      return;
    }
    var value;
    if (typeof obj === 'object' || typeof obj === 'function') {
      if (true /* DEBUG */) {
        value = getPossibleMandatoryProxyValue(obj, keyName);
      } else {
        value = obj[keyName];
      }
      if (value === undefined && typeof obj === 'object' && !(keyName in obj) && hasUnknownProperty(obj)) {
        value = obj.unknownProperty(keyName);
      }
      if ((0, _validator.isTracking)()) {
        (0, _validator.consumeTag)((0, _validator.tagFor)(obj, keyName));
        if (Array.isArray(value) || (0, _internals.isEmberArray)(value)) {
          // Add the tag of the returned value if it is an array, since arrays
          // should always cause updates if they are consumed and then changed
          (0, _validator.consumeTag)((0, _validator.tagFor)(value, '[]'));
        }
      }
    } else {
      // SAFETY: It should be ok to access properties on any non-nullish value
      value = obj[keyName];
    }
    return value;
  }
  function _getPath(obj, path, forSet) {
    var parts = typeof path === 'string' ? path.split('.') : path;
    for (var part of parts) {
      if (obj === undefined || obj === null || obj.isDestroyed) {
        return undefined;
      }
      if (forSet && (part === '__proto__' || part === 'constructor')) {
        return;
      }
      obj = _getProp(obj, part);
    }
    return obj;
  }
  // Warm it up
  _getProp('foo', 'a');
  _getProp('foo', 1);
  _getProp({}, 'a');
  _getProp({}, 1);
  _getProp({
    unknownProperty() {}
  }, 'a');
  _getProp({
    unknownProperty() {}
  }, 1);
  get({}, 'foo');
  get({}, 'foo.bar');
  var fakeProxy = {};
  (0, _utils.setProxy)(fakeProxy);
  (0, _validator.track)(() => _getProp({}, 'a'));
  (0, _validator.track)(() => _getProp({}, 1));
  (0, _validator.track)(() => _getProp({
    a: []
  }, 'a'));
  (0, _validator.track)(() => _getProp({
    a: fakeProxy
  }, 'a'));

  /**
   @module @ember/object
  */
  /**
    Sets the value of a property on an object, respecting computed properties
    and notifying observers and other listeners of the change.
    If the specified property is not defined on the object and the object
    implements the `setUnknownProperty` method, then instead of setting the
    value of the property on the object, its `setUnknownProperty` handler
    will be invoked with the two parameters `keyName` and `value`.
  
    ```javascript
    import { set } from '@ember/object';
    set(obj, "name", value);
    ```
  
    @method set
    @static
    @for @ember/object
    @param {Object} obj The object to modify.
    @param {String} keyName The property key to set
    @param {Object} value The value to set
    @return {Object} the passed value.
    @public
  */
  function set(obj, keyName, value, tolerant) {
    (true && !(arguments.length === 3 || arguments.length === 4) && (0, _debug.assert)(`Set must be called with three or four arguments; an object, a property key, a value and tolerant true/false`, arguments.length === 3 || arguments.length === 4));
    (true && !(obj && typeof obj === 'object' || typeof obj === 'function') && (0, _debug.assert)(`Cannot call set with '${keyName}' on an undefined object.`, obj && typeof obj === 'object' || typeof obj === 'function'));
    (true && !(typeof keyName === 'string' || typeof keyName === 'number' && !isNaN(keyName)) && (0, _debug.assert)(`The key provided to set must be a string or number, you passed ${keyName}`, typeof keyName === 'string' || typeof keyName === 'number' && !isNaN(keyName)));
    (true && !(typeof keyName !== 'string' || keyName.lastIndexOf('this.', 0) !== 0) && (0, _debug.assert)(`'this' in paths is not supported`, typeof keyName !== 'string' || keyName.lastIndexOf('this.', 0) !== 0));
    if (obj.isDestroyed) {
      (true && !(tolerant) && (0, _debug.assert)(`calling set on destroyed object: ${(0, _utils.toString)(obj)}.${keyName} = ${(0, _utils.toString)(value)}`, tolerant));
      return value;
    }
    return isPath(keyName) ? _setPath(obj, keyName, value, tolerant) : _setProp(obj, keyName, value);
  }
  function _setProp(obj, keyName, value) {
    var descriptor = (0, _utils.lookupDescriptor)(obj, keyName);
    if (descriptor !== null && COMPUTED_SETTERS.has(descriptor.set)) {
      obj[keyName] = value;
      return value;
    }
    var currentValue;
    if (true /* DEBUG */) {
      currentValue = getPossibleMandatoryProxyValue(obj, keyName);
    } else {
      currentValue = obj[keyName];
    }
    if (currentValue === undefined && 'object' === typeof obj && !(keyName in obj) && typeof obj.setUnknownProperty === 'function') {
      /* unknown property */
      obj.setUnknownProperty(keyName, value);
    } else {
      if (true /* DEBUG */) {
        (0, _utils.setWithMandatorySetter)(obj, keyName, value);
      } else {
        obj[keyName] = value;
      }
      if (currentValue !== value) {
        notifyPropertyChange(obj, keyName);
      }
    }
    return value;
  }
  function _setPath(root, path, value, tolerant) {
    var parts = path.split('.');
    var keyName = parts.pop();
    (true && !(keyName.trim().length > 0) && (0, _debug.assert)('Property set failed: You passed an empty path', keyName.trim().length > 0));
    var newRoot = _getPath(root, parts, true);
    if (newRoot !== null && newRoot !== undefined) {
      return set(newRoot, keyName, value);
    } else if (!tolerant) {
      throw new Error(`Property set failed: object in path "${parts.join('.')}" could not be found.`);
    }
  }
  /**
    Error-tolerant form of `set`. Will not blow up if any part of the
    chain is `undefined`, `null`, or destroyed.
  
    This is primarily used when syncing bindings, which may try to update after
    an object has been destroyed.
  
    ```javascript
    import { trySet } from '@ember/object';
  
    let obj = { name: "Zoey" };
    trySet(obj, "contacts.twitter", "@emberjs");
    ```
  
    @method trySet
    @static
    @for @ember/object
    @param {Object} root The object to modify.
    @param {String} path The property path to set
    @param {Object} value The value to set
    @public
  */
  function trySet(root, path, value) {
    return set(root, path, value, true);
  }
  function alias(altKey) {
    (true && !(!isElementDescriptor(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @alias as a decorator directly, but it requires a `altKey` parameter', !isElementDescriptor(Array.prototype.slice.call(arguments)))); // SAFETY: We passed in the impl for this class
    return makeComputedDecorator(new AliasedProperty(altKey), AliasDecoratorImpl);
  }
  // TODO: This class can be svelted once `meta` has been deprecated
  class AliasDecoratorImpl extends Function {
    readOnly() {
      descriptorForDecorator(this).readOnly();
      return this;
    }
    oneWay() {
      descriptorForDecorator(this).oneWay();
      return this;
    }
    meta(meta$$1) {
      var prop = descriptorForDecorator(this);
      if (arguments.length === 0) {
        return prop._meta || {};
      } else {
        prop._meta = meta$$1;
      }
    }
  }
  class AliasedProperty extends ComputedDescriptor {
    constructor(altKey) {
      super();
      this.altKey = altKey;
    }
    setup(obj, keyName, propertyDesc, meta$$1) {
      (true && !(this.altKey !== keyName) && (0, _debug.assert)(`Setting alias '${keyName}' on self`, this.altKey !== keyName));
      super.setup(obj, keyName, propertyDesc, meta$$1);
      CHAIN_PASS_THROUGH.add(this);
    }
    get(obj, keyName) {
      var ret;
      var meta$$1 = (0, _meta2.meta)(obj);
      var tagMeta = (0, _validator.tagMetaFor)(obj);
      var propertyTag = (0, _validator.tagFor)(obj, keyName, tagMeta);
      // We don't use the tag since CPs are not automatic, we just want to avoid
      // anything tracking while we get the altKey
      (0, _validator.untrack)(() => {
        ret = get(obj, this.altKey);
      });
      var lastRevision = meta$$1.revisionFor(keyName);
      if (lastRevision === undefined || !(0, _validator.validateTag)(propertyTag, lastRevision)) {
        (0, _validator.updateTag)(propertyTag, getChainTagsForKey(obj, this.altKey, tagMeta, meta$$1));
        meta$$1.setRevisionFor(keyName, (0, _validator.valueForTag)(propertyTag));
        finishLazyChains(meta$$1, keyName, ret);
      }
      (0, _validator.consumeTag)(propertyTag);
      return ret;
    }
    set(obj, _keyName, value) {
      return set(obj, this.altKey, value);
    }
    readOnly() {
      this.set = AliasedProperty_readOnlySet;
    }
    oneWay() {
      this.set = AliasedProperty_oneWaySet;
    }
  }
  function AliasedProperty_readOnlySet(obj, keyName) {
    throw new Error(`Cannot set read-only property '${keyName}' on object: ${(0, _debug.inspect)(obj)}`);
  }
  function AliasedProperty_oneWaySet(obj, keyName, value) {
    defineProperty(obj, keyName, null);
    return set(obj, keyName, value);
  }

  /**
  @module ember
  */
  /**
    Used internally to allow changing properties in a backwards compatible way, and print a helpful
    deprecation warning.
  
    @method deprecateProperty
    @param {Object} object The object to add the deprecated property to.
    @param {String} deprecatedKey The property to add (and print deprecation warnings upon accessing).
    @param {String} newKey The property that will be aliased.
    @private
    @since 1.7.0
  */
  function deprecateProperty(object, deprecatedKey, newKey, options) {
    function _deprecate() {
      (true && !(false) && (0, _debug.deprecate)(`Usage of \`${deprecatedKey}\` is deprecated, use \`${newKey}\` instead.`, false, options));
    }
    Object.defineProperty(object, deprecatedKey, {
      configurable: true,
      enumerable: false,
      set(value) {
        _deprecate();
        set(this, newKey, value);
      },
      get() {
        _deprecate();
        return get(this, newKey);
      }
    });
  }
  var EACH_PROXIES = new WeakMap();
  function eachProxyArrayWillChange(array, idx, removedCnt, addedCnt) {
    var eachProxy = EACH_PROXIES.get(array);
    if (eachProxy !== undefined) {
      eachProxy.arrayWillChange(array, idx, removedCnt, addedCnt);
    }
  }
  function eachProxyArrayDidChange(array, idx, removedCnt, addedCnt) {
    var eachProxy = EACH_PROXIES.get(array);
    if (eachProxy !== undefined) {
      eachProxy.arrayDidChange(array, idx, removedCnt, addedCnt);
    }
  }

  /**
   @module ember
  */
  /**
    Helper class that allows you to register your library with Ember.
  
    Singleton created at `Ember.libraries`.
  
    @class Libraries
    @constructor
    @private
  */
  class Libraries {
    constructor() {
      this._registry = [];
      this._coreLibIndex = 0;
    }
    _getLibraryByName(name) {
      var libs = this._registry;
      for (var lib of libs) {
        if (lib.name === name) {
          return lib;
        }
      }
      return undefined;
    }
    register(name, version, isCoreLibrary) {
      var index = this._registry.length;
      if (!this._getLibraryByName(name)) {
        if (isCoreLibrary) {
          index = this._coreLibIndex++;
        }
        this._registry.splice(index, 0, {
          name,
          version
        });
      } else {
        (true && (0, _debug.warn)(`Library "${name}" is already registered with Ember.`, false, {
          id: 'ember-metal.libraries-register'
        }));
      }
    }
    registerCoreLibrary(name, version) {
      this.register(name, version, true);
    }
    deRegister(name) {
      var lib = this._getLibraryByName(name);
      var index;
      if (lib) {
        index = this._registry.indexOf(lib);
        this._registry.splice(index, 1);
      }
    }
  }
  _exports.Libraries = Libraries;
  if (true /* DEBUG */) {
    Libraries.prototype.logVersions = function () {
      var libs = this._registry;
      var nameLengths = libs.map(item => get(item, 'name.length'));
      (true && !(nameLengths instanceof Array && nameLengths.every(n => typeof n === 'number')) && (0, _debug.assert)('nameLengths is number array', nameLengths instanceof Array && nameLengths.every(n => typeof n === 'number')));
      var maxNameLength = Math.max.apply(null, nameLengths);
      (0, _debug.debug)('-------------------------------');
      for (var lib of libs) {
        var spaces = new Array(maxNameLength - lib.name.length + 1).join(' ');
        (0, _debug.debug)([lib.name, spaces, ' : ', lib.version].join(''));
      }
      (0, _debug.debug)('-------------------------------');
    };
  }
  var LIBRARIES = _exports.libraries = new Libraries();
  LIBRARIES.registerCoreLibrary('Ember', _version.default);
  function getProperties(obj, keys) {
    var ret = {};
    var propertyNames;
    var i = 1;
    if (arguments.length === 2 && Array.isArray(keys)) {
      i = 0;
      propertyNames = arguments[1];
    } else {
      propertyNames = Array.from(arguments);
    }
    for (; i < propertyNames.length; i++) {
      ret[propertyNames[i]] = get(obj, propertyNames[i]);
    }
    return ret;
  }

  /**
   @module @ember/object
  */
  /**
    Set a list of properties on an object. These properties are set inside
    a single `beginPropertyChanges` and `endPropertyChanges` batch, so
    observers will be buffered.
  
    ```javascript
    import EmberObject from '@ember/object';
    let anObject = EmberObject.create();
  
    anObject.setProperties({
      firstName: 'Stanley',
      lastName: 'Stuart',
      age: 21
    });
    ```
  
    @method setProperties
    @static
    @for @ember/object
    @param obj
    @param {Object} properties
    @return properties
    @public
  */
  function setProperties(obj, properties) {
    if (properties === null || typeof properties !== 'object') {
      return properties;
    }
    changeProperties(() => {
      var props = Object.keys(properties);
      for (var propertyName of props) {
        set(obj, propertyName, properties[propertyName]);
      }
    });
    return properties;
  }
  var DEBUG_INJECTION_FUNCTIONS;
  if (true /* DEBUG */) {
    _exports.DEBUG_INJECTION_FUNCTIONS = DEBUG_INJECTION_FUNCTIONS = new WeakMap();
  }
  function inject(type, ...args) {
    (true && !(typeof type === 'string') && (0, _debug.assert)('a string type must be provided to inject', typeof type === 'string'));
    var elementDescriptor;
    var name;
    if (isElementDescriptor(args)) {
      elementDescriptor = args;
    } else if (typeof args[0] === 'string') {
      name = args[0];
    }
    var getInjection = function (propertyName) {
      var owner = (0, _owner.getOwner)(this) || this.container; // fallback to `container` for backwards compat
      (true && !(Boolean(owner)) && (0, _debug.assert)(`Attempting to lookup an injected property on an object without a container, ensure that the object was instantiated via a container.`, Boolean(owner)));
      return owner.lookup(`${type}:${name || propertyName}`);
    };
    if (true /* DEBUG */) {
      DEBUG_INJECTION_FUNCTIONS.set(getInjection, {
        type,
        name
      });
    }
    var decorator = computed({
      get: getInjection,
      set(keyName, value) {
        defineProperty(this, keyName, null, value);
      }
    });
    if (elementDescriptor) {
      return decorator(elementDescriptor[0], elementDescriptor[1], elementDescriptor[2]);
    } else {
      return decorator;
    }
  }
  function tracked(...args) {
    (true && !(!(isElementDescriptor(args.slice(0, 3)) && args.length === 5 && args[4] === true)) && (0, _debug.assert)(`@tracked can only be used directly as a native decorator. If you're using tracked in classic classes, add parenthesis to call it like a function: tracked()`, !(isElementDescriptor(args.slice(0, 3)) && args.length === 5 && args[4] === true)));
    if (!isElementDescriptor(args)) {
      var propertyDesc = args[0];
      (true && !(args.length === 0 || typeof propertyDesc === 'object' && propertyDesc !== null) && (0, _debug.assert)(`tracked() may only receive an options object containing 'value' or 'initializer', received ${propertyDesc}`, args.length === 0 || typeof propertyDesc === 'object' && propertyDesc !== null));
      if (true /* DEBUG */ && propertyDesc) {
        var keys = Object.keys(propertyDesc);
        (true && !(keys.length <= 1 && (keys[0] === undefined || keys[0] === 'value' || keys[0] === 'initializer')) && (0, _debug.assert)(`The options object passed to tracked() may only contain a 'value' or 'initializer' property, not both. Received: [${keys}]`, keys.length <= 1 && (keys[0] === undefined || keys[0] === 'value' || keys[0] === 'initializer')));
        (true && !(!('initializer' in propertyDesc) || typeof propertyDesc.initializer === 'function') && (0, _debug.assert)(`The initializer passed to tracked must be a function. Received ${propertyDesc.initializer}`, !('initializer' in propertyDesc) || typeof propertyDesc.initializer === 'function'));
      }
      var initializer = propertyDesc ? propertyDesc.initializer : undefined;
      var value = propertyDesc ? propertyDesc.value : undefined;
      var decorator = function (target, key, _desc, _meta, isClassicDecorator$$1) {
        (true && !(isClassicDecorator$$1) && (0, _debug.assert)(`You attempted to set a default value for ${key} with the @tracked({ value: 'default' }) syntax. You can only use this syntax with classic classes. For native classes, you can use class initializers: @tracked field = 'default';`, isClassicDecorator$$1));
        var fieldDesc = {
          initializer: initializer || (() => value)
        };
        return descriptorForField([target, key, fieldDesc]);
      };
      setClassicDecorator(decorator);
      return decorator;
    }
    return descriptorForField(args);
  }
  if (true /* DEBUG */) {
    // Normally this isn't a classic decorator, but we want to throw a helpful
    // error in development so we need it to treat it like one
    setClassicDecorator(tracked);
  }
  function descriptorForField([target, key, desc]) {
    (true && !(!desc || !desc.value && !desc.get && !desc.set) && (0, _debug.assert)(`You attempted to use @tracked on ${key}, but that element is not a class field. @tracked is only usable on class fields. Native getters and setters will autotrack add any tracked fields they encounter, so there is no need mark getters and setters with @tracked.`, !desc || !desc.value && !desc.get && !desc.set));
    var {
      getter,
      setter
    } = (0, _validator.trackedData)(key, desc ? desc.initializer : undefined);
    function get() {
      var value = getter(this);
      // Add the tag of the returned value if it is an array, since arrays
      // should always cause updates if they are consumed and then changed
      if (Array.isArray(value) || (0, _internals.isEmberArray)(value)) {
        (0, _validator.consumeTag)((0, _validator.tagFor)(value, '[]'));
      }
      return value;
    }
    function set(newValue) {
      setter(this, newValue);
      (0, _validator.dirtyTagFor)(this, SELF_TAG);
    }
    var newDesc = {
      enumerable: true,
      configurable: true,
      isTracked: true,
      get,
      set
    };
    COMPUTED_SETTERS.add(set);
    (0, _meta2.meta)(target).writeDescriptors(key, new TrackedDescriptor(get, set));
    return newDesc;
  }
  class TrackedDescriptor {
    constructor(_get, _set) {
      this._get = _get;
      this._set = _set;
      CHAIN_PASS_THROUGH.add(this);
    }
    get(obj) {
      return this._get.call(obj);
    }
    set(obj, _key, value) {
      this._set.call(obj, value);
    }
  }

  // NOTE: copied from: https://github.com/glimmerjs/glimmer.js/pull/358
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  _exports.TrackedDescriptor = TrackedDescriptor;
  var cached = (...args) => {
    var [target, key, descriptor] = args;
    // Error on `@cached()`, `@cached(...args)`, and `@cached propName = value;`
    if (true /* DEBUG */ && target === undefined) throwCachedExtraneousParens();
    if (true /* DEBUG */ && (typeof target !== 'object' || typeof key !== 'string' || typeof descriptor !== 'object' || args.length !== 3)) {
      throwCachedInvalidArgsError(args);
    }
    if (true /* DEBUG */ && (!('get' in descriptor) || typeof descriptor.get !== 'function')) {
      throwCachedGetterOnlyError(key);
    }
    var caches = new WeakMap();
    var getter = descriptor.get;
    descriptor.get = function () {
      if (!caches.has(this)) {
        caches.set(this, (0, _validator.createCache)(getter.bind(this)));
      }
      return (0, _validator.getValue)(caches.get(this));
    };
  };
  _exports.cached = cached;
  function throwCachedExtraneousParens() {
    throw new Error('You attempted to use @cached(), which is not necessary nor supported. Remove the parentheses and you will be good to go!');
  }
  function throwCachedGetterOnlyError(key) {
    throw new Error(`The @cached decorator must be applied to getters. '${key}' is not a getter.`);
  }
  function throwCachedInvalidArgsError(args = []) {
    throw new Error(`You attempted to use @cached on with ${args.length > 1 ? 'arguments' : 'an argument'} ( @cached(${args.map(d => `'${d}'`).join(', ')}), which is not supported. Dependencies are automatically tracked, so you can just use ${'`@cached`'}`);
  }

  /**
    Ember uses caching based on trackable values to avoid updating large portions
    of the application. This caching is exposed via a cache primitive that can be
    used to cache a specific computation, so that it will not update and will
    return the cached value until a tracked value used in its computation has
    updated.
  
    @module @glimmer/tracking/primitives/cache
    @public
  */
  /**
    Receives a function, and returns a wrapped version of it that memoizes based on
    _autotracking_. The function will only rerun whenever any tracked values used
    within it have changed. Otherwise, it will return the previous value.
  
    ```js
    import { tracked } from '@glimmer/tracking';
    import { createCache, getValue } from '@glimmer/tracking/primitives/cache';
  
    class State {
      @tracked value;
    }
  
    let state = new State();
    let computeCount = 0;
  
    let counter = createCache(() => {
      // consume the state. Now, `counter` will
      // only rerun if `state.value` changes.
      state.value;
  
      return ++computeCount;
    });
  
    getValue(counter); // 1
  
    // returns the same value because no tracked state has changed
    getValue(counter); // 1
  
    state.value = 'foo';
  
    // reruns because a tracked value used in the function has changed,
    // incermenting the counter
    getValue(counter); // 2
    ```
  
    @method createCache
    @static
    @for @glimmer/tracking/primitives/cache
    @public
  */
  /**
    Gets the value of a cache created with `createCache`.
  
    ```js
    import { tracked } from '@glimmer/tracking';
    import { createCache, getValue } from '@glimmer/tracking/primitives/cache';
  
    let computeCount = 0;
  
    let counter = createCache(() => {
      return ++computeCount;
    });
  
    getValue(counter); // 1
    ```
  
    @method getValue
    @static
    @for @glimmer/tracking/primitives/cache
    @public
  */
  /**
    Can be used to check if a memoized function is _constant_. If no tracked state
    was used while running a memoized function, it will never rerun, because nothing
    can invalidate its result. `isConst` can be used to determine if a memoized
    function is constant or not, in order to optimize code surrounding that
    function.
  
    ```js
    import { tracked } from '@glimmer/tracking';
    import { createCache, getValue, isConst } from '@glimmer/tracking/primitives/cache';
  
    class State {
      @tracked value;
    }
  
    let state = new State();
    let computeCount = 0;
  
    let counter = createCache(() => {
      // consume the state
      state.value;
  
      return computeCount++;
    });
  
    let constCounter = createCache(() => {
      return computeCount++;
    });
  
    getValue(counter);
    getValue(constCounter);
  
    isConst(counter); // false
    isConst(constCounter); // true
    ```
  
    If called on a cache that hasn't been accessed yet, it will throw an
    error. This is because there's no way to know if the function will be constant
    or not yet, and so this helps prevent missing an optimization opportunity on
    accident.
  
    @method isConst
    @static
    @for @glimmer/tracking/primitives/cache
    @public
  */

  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var searchDisabled = false;
  var flags = {
    _set: 0,
    _unprocessedNamespaces: false,
    get unprocessedNamespaces() {
      return this._unprocessedNamespaces;
    },
    set unprocessedNamespaces(v) {
      this._set++;
      this._unprocessedNamespaces = v;
    }
  };
  var unprocessedMixins = false;
  var NAMESPACES = _exports.NAMESPACES = [];
  var NAMESPACES_BY_ID = _exports.NAMESPACES_BY_ID = Object.create(null);
  function addNamespace(namespace) {
    flags.unprocessedNamespaces = true;
    NAMESPACES.push(namespace);
  }
  function removeNamespace(namespace) {
    var name = (0, _utils.getName)(namespace);
    delete NAMESPACES_BY_ID[name];
    NAMESPACES.splice(NAMESPACES.indexOf(namespace), 1);
    if (name in _environment.context.lookup && namespace === _environment.context.lookup[name]) {
      _environment.context.lookup[name] = undefined;
    }
  }
  function findNamespaces() {
    if (!flags.unprocessedNamespaces) {
      return;
    }
    var lookup = _environment.context.lookup;
    var keys = Object.keys(lookup);
    for (var key of keys) {
      // Only process entities that start with uppercase A-Z
      if (!isUppercase(key.charCodeAt(0))) {
        continue;
      }
      var obj = tryIsNamespace(lookup, key);
      if (obj) {
        (0, _utils.setName)(obj, key);
      }
    }
  }
  function findNamespace(name) {
    if (!searchDisabled) {
      processAllNamespaces();
    }
    return NAMESPACES_BY_ID[name];
  }
  function processNamespace(namespace) {
    _processNamespace([namespace.toString()], namespace, new Set());
  }
  function processAllNamespaces() {
    var unprocessedNamespaces = flags.unprocessedNamespaces;
    if (unprocessedNamespaces) {
      findNamespaces();
      flags.unprocessedNamespaces = false;
    }
    if (unprocessedNamespaces || unprocessedMixins) {
      var namespaces = NAMESPACES;
      for (var namespace of namespaces) {
        processNamespace(namespace);
      }
      unprocessedMixins = false;
    }
  }
  function isSearchDisabled() {
    return searchDisabled;
  }
  function setSearchDisabled(flag) {
    searchDisabled = Boolean(flag);
  }
  function setUnprocessedMixins() {
    unprocessedMixins = true;
  }
  function _processNamespace(paths, root, seen) {
    var idx = paths.length;
    var id = paths.join('.');
    NAMESPACES_BY_ID[id] = root;
    (0, _utils.setName)(root, id);
    // Loop over all of the keys in the namespace, looking for classes
    for (var key in root) {
      if (!hasOwnProperty.call(root, key)) {
        continue;
      }
      var obj = root[key];
      // If we are processing the `Ember` namespace, for example, the
      // `paths` will start with `["Ember"]`. Every iteration through
      // the loop will update the **second** element of this list with
      // the key, so processing `Ember.View` will make the Array
      // `['Ember', 'View']`.
      paths[idx] = key;
      // If we have found an unprocessed class
      if (obj && (0, _utils.getName)(obj) === void 0) {
        // Replace the class' `toString` with the dot-separated path
        (0, _utils.setName)(obj, paths.join('.'));
        // Support nested namespaces
      } else if (obj && isNamespace(obj)) {
        // Skip aliased namespaces
        if (seen.has(obj)) {
          continue;
        }
        seen.add(obj);
        // Process the child namespace
        _processNamespace(paths, obj, seen);
      }
    }
    paths.length = idx; // cut out last item
  }
  function isNamespace(obj) {
    return obj != null && typeof obj === 'object' && obj.isNamespace;
  }
  function isUppercase(code) {
    return code >= 65 && code <= 90 // A
    ; // Z
  }
  function tryIsNamespace(lookup, prop) {
    try {
      var obj = lookup[prop];
      return (obj !== null && typeof obj === 'object' || typeof obj === 'function') && obj.isNamespace && obj;
    } catch (e) {
      // continue
    }
  }
});
define("@ember/-internals/overrides/index", [], function () {
  "use strict";

  function once(callback) {
    var called = false;
    return (...args) => {
      if (called) {
        return null;
      } else {
        called = true;
        return callback(...args);
      }
    };
  }
  undefined;
});
define("@ember/-internals/owner/index", ["exports", "@glimmer/owner"], function (_exports, _owner) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getOwner = getOwner;
  _exports.isFactory = isFactory;
  _exports.setOwner = setOwner;
  /**
    @private
    @method isFactory
    @param {Object} obj
    @return {Boolean}
    @static
   */
  function isFactory(obj) {
    return obj != null && typeof obj.create === 'function';
  }
  // NOTE: For docs, see the definition at the public API site in `@ember/owner`;
  // we document it there for the sake of public API docs and for TS consumption,
  // while having the richer `InternalOwner` representation for Ember itself.
  function getOwner(object) {
    return (0, _owner.getOwner)(object);
  }
  /**
    `setOwner` forces a new owner on a given object instance. This is primarily
    useful in some testing cases.
  
    @method setOwner
    @static
    @for @ember/owner
    @param {Object} object An object instance.
    @param {Owner} object The new owner object of the object instance.
    @since 2.3.0
    @public
  */
  function setOwner(object, owner) {
    (0, _owner.setOwner)(object, owner);
  }
});
define("@ember/-internals/routing/index", ["exports", "@ember/routing/-internals"], function (_exports, _internals) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "RouterDSL", {
    enumerable: true,
    get: function () {
      return _internals.DSL;
    }
  });
  Object.defineProperty(_exports, "controllerFor", {
    enumerable: true,
    get: function () {
      return _internals.controllerFor;
    }
  });
  Object.defineProperty(_exports, "generateController", {
    enumerable: true,
    get: function () {
      return _internals.generateController;
    }
  });
  Object.defineProperty(_exports, "generateControllerFactory", {
    enumerable: true,
    get: function () {
      return _internals.generateControllerFactory;
    }
  });
});
define("@ember/-internals/runtime/index", ["exports", "@ember/-internals/runtime/lib/mixins/registry_proxy", "@ember/-internals/runtime/lib/mixins/container_proxy", "@ember/-internals/runtime/lib/mixins/comparable", "@ember/-internals/runtime/lib/mixins/action_handler", "@ember/-internals/runtime/lib/mixins/-proxy", "@ember/enumerable/mutable", "@ember/-internals/runtime/lib/mixins/target_action_support", "@ember/-internals/runtime/lib/ext/rsvp"], function (_exports, _registry_proxy, _container_proxy, _comparable, _action_handler, _proxy, _mutable, _target_action_support, _rsvp) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "ActionHandler", {
    enumerable: true,
    get: function () {
      return _action_handler.default;
    }
  });
  Object.defineProperty(_exports, "Comparable", {
    enumerable: true,
    get: function () {
      return _comparable.default;
    }
  });
  Object.defineProperty(_exports, "ContainerProxyMixin", {
    enumerable: true,
    get: function () {
      return _container_proxy.default;
    }
  });
  Object.defineProperty(_exports, "MutableEnumerable", {
    enumerable: true,
    get: function () {
      return _mutable.default;
    }
  });
  Object.defineProperty(_exports, "RSVP", {
    enumerable: true,
    get: function () {
      return _rsvp.default;
    }
  });
  Object.defineProperty(_exports, "RegistryProxyMixin", {
    enumerable: true,
    get: function () {
      return _registry_proxy.default;
    }
  });
  Object.defineProperty(_exports, "TargetActionSupport", {
    enumerable: true,
    get: function () {
      return _target_action_support.default;
    }
  });
  Object.defineProperty(_exports, "_ProxyMixin", {
    enumerable: true,
    get: function () {
      return _proxy.default;
    }
  });
  Object.defineProperty(_exports, "_contentFor", {
    enumerable: true,
    get: function () {
      return _proxy.contentFor;
    }
  });
  Object.defineProperty(_exports, "onerrorDefault", {
    enumerable: true,
    get: function () {
      return _rsvp.onerrorDefault;
    }
  });
});
define("@ember/-internals/runtime/lib/ext/rsvp", ["exports", "rsvp", "@ember/runloop", "@ember/-internals/error-handling", "@ember/debug"], function (_exports, RSVP, _runloop, _errorHandling, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.onerrorDefault = onerrorDefault;
  RSVP.configure('async', (callback, promise) => {
    _runloop._backburner.schedule('actions', null, callback, promise);
  });
  RSVP.configure('after', cb => {
    _runloop._backburner.schedule(_runloop._rsvpErrorQueue, null, cb);
  });
  RSVP.on('error', onerrorDefault);
  function onerrorDefault(reason) {
    var error = errorFor(reason);
    if (error) {
      var overrideDispatch = (0, _errorHandling.getDispatchOverride)();
      if (overrideDispatch) {
        overrideDispatch(error);
      } else {
        throw error;
      }
    }
  }
  function errorFor(reason) {
    if (!reason) return;
    var withErrorThrown = reason;
    if (withErrorThrown.errorThrown) {
      return unwrapErrorThrown(withErrorThrown);
    }
    var withName = reason;
    if (withName.name === 'UnrecognizedURLError') {
      (true && !(false) && (0, _debug.assert)(`The URL '${withName.message}' did not match any routes in your application`, false)); // @ts-expect-error We'll hit this if the assert is stripped
      return;
    }
    if (reason.name === 'TransitionAborted') {
      return;
    }
    return reason;
  }
  function unwrapErrorThrown(reason) {
    var error = reason.errorThrown;
    if (typeof error === 'string') {
      error = new Error(error);
    }
    Object.defineProperty(error, '__reason_with_error_thrown__', {
      value: reason,
      enumerable: false
    });
    return error;
  }
  var _default = _exports.default = RSVP;
});
define("@ember/-internals/runtime/lib/mixins/-proxy", ["exports", "@ember/-internals/meta", "@ember/object/mixin", "@ember/-internals/metal", "@ember/-internals/utils", "@ember/debug", "@glimmer/manager", "@glimmer/validator"], function (_exports, _meta, _mixin, _metal, _utils, _debug, _manager, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.contentFor = contentFor;
  _exports.default = void 0;
  /**
  @module ember
  */

  function contentFor(proxy) {
    var content = (0, _metal.get)(proxy, 'content');
    // SAFETY: Ideally we'd assert instead of casting, but @glimmer/validator doesn't give us
    // sufficient public types for this. Previously this code was .js and worked correctly so
    // hopefully this is sufficiently reliable.
    (0, _validator.updateTag)((0, _metal.tagForObject)(proxy), (0, _metal.tagForObject)(content));
    return content;
  }
  function customTagForProxy(proxy, key, addMandatorySetter) {
    (true && !((0, _utils.isProxy)(proxy)) && (0, _debug.assert)('Expected a proxy', (0, _utils.isProxy)(proxy)));
    var meta = (0, _validator.tagMetaFor)(proxy);
    var tag = (0, _validator.tagFor)(proxy, key, meta);
    if (true /* DEBUG */) {
      // TODO: Replace this with something more first class for tracking tags in DEBUG
      // SAFETY: This is not an officially supported property but setting shouldn't cause issues.
      tag._propertyKey = key;
    }
    if (key in proxy) {
      if (true /* DEBUG */ && addMandatorySetter) {
        (true && !(_utils.setupMandatorySetter) && (0, _debug.assert)('[BUG] setupMandatorySetter should be set when debugging', setupMandatorySetter));
        (0, _utils.setupMandatorySetter)(tag, proxy, key);
      }
      return tag;
    } else {
      var tags = [tag, (0, _validator.tagFor)(proxy, 'content', meta)];
      var content = contentFor(proxy);
      if ((0, _utils.isObject)(content)) {
        tags.push((0, _metal.tagForProperty)(content, key, addMandatorySetter));
      }
      return (0, _validator.combine)(tags);
    }
  }
  var ProxyMixin = _mixin.default.create({
    /**
      The object whose properties will be forwarded.
         @property content
      @type {unknown}
      @default null
      @public
    */
    content: null,
    init() {
      this._super(...arguments);
      (0, _utils.setProxy)(this);
      (0, _metal.tagForObject)(this);
      (0, _manager.setCustomTagFor)(this, customTagForProxy);
    },
    willDestroy() {
      this.set('content', null);
      this._super(...arguments);
    },
    isTruthy: (0, _metal.computed)('content', function () {
      return Boolean((0, _metal.get)(this, 'content'));
    }),
    unknownProperty(key) {
      var content = contentFor(this);
      if (content) {
        return (0, _metal.get)(content, key);
      }
    },
    setUnknownProperty(key, value) {
      var m = (0, _meta.meta)(this);
      if (m.isInitializing() || m.isPrototypeMeta(this)) {
        // if marked as prototype or object is initializing then just
        // defineProperty rather than delegate
        (0, _metal.defineProperty)(this, key, null, value);
        return value;
      }
      var content = contentFor(this);
      (true && !(content) && (0, _debug.assert)(`Cannot delegate set('${key}', ${value}) to the 'content' property of object proxy ${this}: its 'content' is undefined.`, content)); // SAFETY: We don't actually guarantee that this is an object, so this isn't necessarily safe :(
      return (0, _metal.set)(content, key, value);
    }
  });
  var _default = _exports.default = ProxyMixin;
});
define("@ember/-internals/runtime/lib/mixins/action_handler", ["exports", "@ember/object/mixin", "@ember/-internals/metal", "@ember/debug"], function (_exports, _mixin, _metal, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module ember
  */

  var ActionHandler = _mixin.default.create({
    mergedProperties: ['actions'],
    /**
      The collection of functions, keyed by name, available on this
      `ActionHandler` as action targets.
         These functions will be invoked when a matching `{{action}}` is triggered
      from within a template and the application's current route is this route.
         Actions can also be invoked from other parts of your application
      via `ActionHandler#send`.
         The `actions` hash will inherit action handlers from
      the `actions` hash defined on extended parent classes
      or mixins rather than just replace the entire hash, e.g.:
         ```app/mixins/can-display-banner.js
      import Mixin from '@ember/object/mixin';
         export default Mixin.create({
        actions: {
          displayBanner(msg) {
            // ...
          }
        }
      });
      ```
         ```app/routes/welcome.js
      import Route from '@ember/routing/route';
      import CanDisplayBanner from '../mixins/can-display-banner';
         export default Route.extend(CanDisplayBanner, {
        actions: {
          playMusic() {
            // ...
          }
        }
      });
         // `WelcomeRoute`, when active, will be able to respond
      // to both actions, since the actions hash is merged rather
      // then replaced when extending mixins / parent classes.
      this.send('displayBanner');
      this.send('playMusic');
      ```
         Within a Controller, Route or Component's action handler,
      the value of the `this` context is the Controller, Route or
      Component object:
         ```app/routes/song.js
      import Route from '@ember/routing/route';
         export default Route.extend({
        actions: {
          myAction() {
            this.controllerFor("song");
            this.transitionTo("other.route");
            ...
          }
        }
      });
      ```
         It is also possible to call `this._super(...arguments)` from within an
      action handler if it overrides a handler defined on a parent
      class or mixin:
         Take for example the following routes:
         ```app/mixins/debug-route.js
      import Mixin from '@ember/object/mixin';
         export default Mixin.create({
        actions: {
          debugRouteInformation() {
            console.debug("It's a-me, console.debug!");
          }
        }
      });
      ```
         ```app/routes/annoying-debug.js
      import Route from '@ember/routing/route';
      import DebugRoute from '../mixins/debug-route';
         export default Route.extend(DebugRoute, {
        actions: {
          debugRouteInformation() {
            // also call the debugRouteInformation of mixed in DebugRoute
            this._super(...arguments);
               // show additional annoyance
            window.alert(...);
          }
        }
      });
      ```
         ## Bubbling
         By default, an action will stop bubbling once a handler defined
      on the `actions` hash handles it. To continue bubbling the action,
      you must return `true` from the handler:
         ```app/router.js
      Router.map(function() {
        this.route("album", function() {
          this.route("song");
        });
      });
      ```
         ```app/routes/album.js
      import Route from '@ember/routing/route';
         export default Route.extend({
        actions: {
          startPlaying: function() {
          }
        }
      });
      ```
         ```app/routes/album-song.js
      import Route from '@ember/routing/route';
         export default Route.extend({
        actions: {
          startPlaying() {
            // ...
               if (actionShouldAlsoBeTriggeredOnParentRoute) {
              return true;
            }
          }
        }
      });
      ```
         @property actions
      @type Object
      @default null
      @public
    */
    /**
      Triggers a named action on the `ActionHandler`. Any parameters
      supplied after the `actionName` string will be passed as arguments
      to the action target function.
         If the `ActionHandler` has its `target` property set, actions may
      bubble to the `target`. Bubbling happens when an `actionName` can
      not be found in the `ActionHandler`'s `actions` hash or if the
      action target function returns `true`.
         Example
         ```app/routes/welcome.js
      import Route from '@ember/routing/route';
         export default Route.extend({
        actions: {
          playTheme() {
            this.send('playMusic', 'theme.mp3');
          },
          playMusic(track) {
            // ...
          }
        }
      });
      ```
         @method send
      @param {String} actionName The action to trigger
      @param {*} context a context to send with the action
      @public
    */
    send(actionName, ...args) {
      (true && !(!this.isDestroying && !this.isDestroyed) && (0, _debug.assert)(`Attempted to call .send() with the action '${actionName}' on the destroyed object '${this}'.`, !this.isDestroying && !this.isDestroyed));
      if (this.actions && this.actions[actionName]) {
        var shouldBubble = this.actions[actionName].apply(this, args) === true;
        if (!shouldBubble) {
          return;
        }
      }
      var target = (0, _metal.get)(this, 'target');
      if (target) {
        (true && !(typeof target.send === 'function') && (0, _debug.assert)(`The \`target\` for ${this} (${target}) does not have a \`send\` method`, typeof target.send === 'function'));
        target.send(...arguments);
      }
    }
  });
  var _default = _exports.default = ActionHandler;
});
define("@ember/-internals/runtime/lib/mixins/comparable", ["exports", "@ember/object/mixin"], function (_exports, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var Comparable = _mixin.default.create({
    /**
      __Required.__ You must implement this method to apply this mixin.
         Override to return the result of the comparison of the two parameters. The
      compare method should return:
         - `-1` if `a < b`
      - `0` if `a == b`
      - `1` if `a > b`
         Default implementation raises an exception.
         @method compare
      @param a {Object} the first object to compare
      @param b {Object} the second object to compare
      @return {Number} the result of the comparison
      @private
    */
    compare: null
  });
  var _default = _exports.default = Comparable;
});
define("@ember/-internals/runtime/lib/mixins/container_proxy", ["exports", "@ember/runloop", "@ember/object/mixin"], function (_exports, _runloop, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var ContainerProxyMixin = _mixin.default.create({
    /**
     The container stores state.
        @private
     @property {Ember.Container} __container__
     */
    __container__: null,
    ownerInjection() {
      return this.__container__.ownerInjection();
    },
    lookup(fullName, options) {
      return this.__container__.lookup(fullName, options);
    },
    destroy() {
      var container = this.__container__;
      if (container) {
        (0, _runloop.join)(() => {
          container.destroy();
          (0, _runloop.schedule)('destroy', container, 'finalizeDestroy');
        });
      }
      this._super();
    },
    factoryFor(fullName) {
      return this.__container__.factoryFor(fullName);
    }
  });
  var _default = _exports.default = ContainerProxyMixin;
});
define("@ember/-internals/runtime/lib/mixins/registry_proxy", ["exports", "@ember/debug", "@ember/object/mixin"], function (_exports, _debug, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module ember
  */

  var RegistryProxyMixin = _mixin.default.create({
    __registry__: null,
    resolveRegistration(fullName) {
      (true && !(this.__registry__.isValidFullName(fullName)) && (0, _debug.assert)('fullName must be a proper full name', this.__registry__.isValidFullName(fullName)));
      return this.__registry__.resolve(fullName);
    },
    register: registryAlias('register'),
    unregister: registryAlias('unregister'),
    hasRegistration: registryAlias('has'),
    registeredOption: registryAlias('getOption'),
    registerOptions: registryAlias('options'),
    registeredOptions: registryAlias('getOptions'),
    registerOptionsForType: registryAlias('optionsForType'),
    registeredOptionsForType: registryAlias('getOptionsForType'),
    /**
      Define a dependency injection onto a specific factory or all factories
      of a type.
         When Ember instantiates a controller, view, or other framework component
      it can attach a dependency to that component. This is often used to
      provide services to a set of framework components.
         An example of providing a session object to all controllers:
         ```javascript
      import { alias } from '@ember/object/computed';
      import Application from '@ember/application';
      import Controller from '@ember/controller';
      import EmberObject from '@ember/object';
         let App = Application.create();
      let Session = EmberObject.extend({ isAuthenticated: false });
         // A factory must be registered before it can be injected
      App.register('session:main', Session);
         // Inject 'session:main' onto all factories of the type 'controller'
      // with the name 'session'
      App.inject('controller', 'session', 'session:main');
         App.IndexController = Controller.extend({
        isLoggedIn: alias('session.isAuthenticated')
      });
      ```
         Injections can also be performed on specific factories.
         ```javascript
      App.inject(<full_name or type>, <property name>, <full_name>)
      App.inject('route', 'source', 'source:main')
      App.inject('route:application', 'email', 'model:email')
      ```
         It is important to note that injections can only be performed on
      classes that are instantiated by Ember itself. Instantiating a class
      directly (via `create` or `new`) bypasses the dependency injection
      system.
         @public
      @method inject
      @param  factoryNameOrType {String}
      @param  property {String}
      @param  injectionName {String}
      @deprecated
    **/
    inject: registryAlias('injection')
  });
  function registryAlias(name) {
    return function (...args) {
      // We need this cast because `Parameters` is deferred so that it is not
      // possible for TS to see it will always produce the right type. However,
      // since `AnyFn` has a rest type, it is allowed. See discussion on [this
      // issue](https://github.com/microsoft/TypeScript/issues/47615).
      return this.__registry__[name](...args);
    };
  }
  var _default = _exports.default = RegistryProxyMixin;
});
define("@ember/-internals/runtime/lib/mixins/target_action_support", ["exports", "@ember/-internals/environment", "@ember/-internals/metal", "@ember/object/mixin", "@ember/debug"], function (_exports, _environment, _metal, _mixin, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module ember
  */

  var TargetActionSupport = _mixin.default.create({
    target: null,
    action: null,
    actionContext: null,
    actionContextObject: (0, _metal.computed)('actionContext', function () {
      var actionContext = (0, _metal.get)(this, 'actionContext');
      if (typeof actionContext === 'string') {
        var value = (0, _metal.get)(this, actionContext);
        if (value === undefined) {
          value = (0, _metal.get)(_environment.context.lookup, actionContext);
        }
        return value;
      } else {
        return actionContext;
      }
    }),
    /**
    Send an `action` with an `actionContext` to a `target`. The action, actionContext
    and target will be retrieved from properties of the object. For example:
       ```javascript
    import { alias } from '@ember/object/computed';
       App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
      target: alias('controller'),
      action: 'save',
      actionContext: alias('context'),
      click() {
        this.triggerAction(); // Sends the `save` action, along with the current context
                              // to the current controller
      }
    });
    ```
       The `target`, `action`, and `actionContext` can be provided as properties of
    an optional object argument to `triggerAction` as well.
       ```javascript
    App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
      click() {
        this.triggerAction({
          action: 'save',
          target: this.get('controller'),
          actionContext: this.get('context')
        }); // Sends the `save` action, along with the current context
            // to the current controller
      }
    });
    ```
       The `actionContext` defaults to the object you are mixing `TargetActionSupport` into.
    But `target` and `action` must be specified either as properties or with the argument
    to `triggerAction`, or a combination:
       ```javascript
    import { alias } from '@ember/object/computed';
       App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
      target: alias('controller'),
      click() {
        this.triggerAction({
          action: 'save'
        }); // Sends the `save` action, along with a reference to `this`,
            // to the current controller
      }
    });
    ```
       @method triggerAction
    @param opts {Object} (optional, with the optional keys action, target and/or actionContext)
    @return {Boolean} true if the action was sent successfully and did not return false
    @private
    */
    triggerAction(opts = {}) {
      var {
        action,
        target,
        actionContext
      } = opts;
      action = action || (0, _metal.get)(this, 'action');
      target = target || getTarget(this);
      if (actionContext === undefined) {
        actionContext = (0, _metal.get)(this, 'actionContextObject') || this;
      }
      var context = Array.isArray(actionContext) ? actionContext : [actionContext];
      if (target && action) {
        var ret;
        if (isSendable(target)) {
          ret = target.send(action, ...context);
        } else {
          (true && !(typeof target[action] === 'function') && (0, _debug.assert)(`The action '${action}' did not exist on ${target}`, typeof target[action] === 'function'));
          ret = target[action](...context);
        }
        if (ret !== false) {
          return true;
        }
      }
      return false;
    }
  });
  function isSendable(obj) {
    return obj != null && typeof obj === 'object' && typeof obj.send === 'function';
  }
  function getTarget(instance) {
    var target = (0, _metal.get)(instance, 'target');
    if (target) {
      if (typeof target === 'string') {
        var value = (0, _metal.get)(instance, target);
        if (value === undefined) {
          value = (0, _metal.get)(_environment.context.lookup, target);
        }
        return value;
      } else {
        return target;
      }
    }
    if (instance._target) {
      return instance._target;
    }
    return null;
  }
  if (true /* DEBUG */) {
    Object.seal(TargetActionSupport);
  }
  var _default = _exports.default = TargetActionSupport;
});
define("@ember/-internals/string/index", ["exports", "@ember/-internals/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.classify = classify;
  _exports.dasherize = dasherize;
  /*
    This module exists to separate the @ember/string methods used
    internally in ember-source, from those public methods that are
    now deprecated and to be removed.
  */

  var STRING_DASHERIZE_REGEXP = /[ _]/g;
  var STRING_DASHERIZE_CACHE = new _utils.Cache(1000, key => decamelize(key).replace(STRING_DASHERIZE_REGEXP, '-'));
  var STRING_CLASSIFY_REGEXP_1 = /^(-|_)+(.)?/;
  var STRING_CLASSIFY_REGEXP_2 = /(.)(-|_|\.|\s)+(.)?/g;
  var STRING_CLASSIFY_REGEXP_3 = /(^|\/|\.)([a-z])/g;
  var CLASSIFY_CACHE = new _utils.Cache(1000, str => {
    var replace1 = (_match, _separator, chr) => chr ? `_${chr.toUpperCase()}` : '';
    var replace2 = (_match, initialChar, _separator, chr) => initialChar + (chr ? chr.toUpperCase() : '');
    var parts = str.split('/');
    for (var i = 0; i < parts.length; i++) {
      parts[i] = parts[i].replace(STRING_CLASSIFY_REGEXP_1, replace1).replace(STRING_CLASSIFY_REGEXP_2, replace2);
    }
    return parts.join('/').replace(STRING_CLASSIFY_REGEXP_3, (match /*, separator, chr */) => match.toUpperCase());
  });
  var STRING_DECAMELIZE_REGEXP = /([a-z\d])([A-Z])/g;
  var DECAMELIZE_CACHE = new _utils.Cache(1000, str => str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase());
  /**
   Defines string helper methods used internally in ember-source.
  
   @class String
   @private
   */
  /**
   Replaces underscores, spaces, or camelCase with dashes.
  
   ```javascript
   import { dasherize } from '@ember/-internals/string';
  
   dasherize('innerHTML');                // 'inner-html'
   dasherize('action_name');              // 'action-name'
   dasherize('css-class-name');           // 'css-class-name'
   dasherize('my favorite items');        // 'my-favorite-items'
   dasherize('privateDocs/ownerInvoice';  // 'private-docs/owner-invoice'
   ```
  
   @method dasherize
   @param {String} str The string to dasherize.
   @return {String} the dasherized string.
   @private
   */
  function dasherize(str) {
    return STRING_DASHERIZE_CACHE.get(str);
  }
  /**
   Returns the UpperCamelCase form of a string.
  
   ```javascript
   import { classify } from '@ember/string';
  
   classify('innerHTML');                   // 'InnerHTML'
   classify('action_name');                 // 'ActionName'
   classify('css-class-name');              // 'CssClassName'
   classify('my favorite items');           // 'MyFavoriteItems'
   classify('private-docs/owner-invoice');  // 'PrivateDocs/OwnerInvoice'
   ```
  
   @method classify
   @param {String} str the string to classify
   @return {String} the classified string
   @private
   */
  function classify(str) {
    return CLASSIFY_CACHE.get(str);
  }
  /**
   Converts a camelized string into all lower case separated by underscores.
  
   ```javascript
   decamelize('innerHTML');          // 'inner_html'
   decamelize('action_name');        // 'action_name'
   decamelize('css-class-name');     // 'css-class-name'
   decamelize('my favorite items');  // 'my favorite items'
   ```
   */
  function decamelize(str) {
    return DECAMELIZE_CACHE.get(str);
  }
});
define("@ember/-internals/utility-types/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
});
define("@ember/-internals/utils/index", ["exports", "@glimmer/util", "@ember/debug"], function (_exports, _util, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ROOT = _exports.GUID_KEY = _exports.Cache = void 0;
  _exports.canInvoke = canInvoke;
  _exports.checkHasSuper = void 0;
  _exports.dictionary = makeDictionary;
  _exports.enumerableSymbol = enumerableSymbol;
  _exports.generateGuid = generateGuid;
  _exports.getDebugName = void 0;
  _exports.getName = getName;
  _exports.guidFor = guidFor;
  _exports.intern = intern;
  _exports.isInternalSymbol = isInternalSymbol;
  _exports.isObject = isObject;
  _exports.isProxy = isProxy;
  _exports.lookupDescriptor = lookupDescriptor;
  _exports.observerListenerMetaFor = observerListenerMetaFor;
  _exports.setListeners = setListeners;
  _exports.setName = setName;
  _exports.setObservers = setObservers;
  _exports.setProxy = setProxy;
  _exports.teardownMandatorySetter = _exports.symbol = _exports.setupMandatorySetter = _exports.setWithMandatorySetter = void 0;
  _exports.toString = toString;
  _exports.uuid = uuid;
  _exports.wrap = wrap;
  /**
    Strongly hint runtimes to intern the provided string.
  
    When do I need to use this function?
  
    For the most part, never. Pre-mature optimization is bad, and often the
    runtime does exactly what you need it to, and more often the trade-off isn't
    worth it.
  
    Why?
  
    Runtimes store strings in at least 2 different representations:
    Ropes and Symbols (interned strings). The Rope provides a memory efficient
    data-structure for strings created from concatenation or some other string
    manipulation like splitting.
  
    Unfortunately checking equality of different ropes can be quite costly as
    runtimes must resort to clever string comparison algorithms. These
    algorithms typically cost in proportion to the length of the string.
    Luckily, this is where the Symbols (interned strings) shine. As Symbols are
    unique by their string content, equality checks can be done by pointer
    comparison.
  
    How do I know if my string is a rope or symbol?
  
    Typically (warning general sweeping statement, but truthy in runtimes at
    present) static strings created as part of the JS source are interned.
    Strings often used for comparisons can be interned at runtime if some
    criteria are met.  One of these criteria can be the size of the entire rope.
    For example, in chrome 38 a rope longer then 12 characters will not
    intern, nor will segments of that rope.
  
    Some numbers: http://jsperf.com/eval-vs-keys/8
  
    Known Trick™
  
    @private
    @return {String} interned version of the provided string
  */
  function intern(str) {
    var obj = Object.create(null);
    obj[str] = 1;
    for (var key in obj) {
      if (key === str) {
        return key;
      }
    }
    return str;
  }

  /**
    Returns whether Type(value) is Object.
  
    Useful for checking whether a value is a valid WeakMap key.
  
    Refs: https://tc39.github.io/ecma262/#sec-typeof-operator-runtime-semantics-evaluation
          https://tc39.github.io/ecma262/#sec-weakmap.prototype.set
  
    @private
    @function isObject
  */
  function isObject(value) {
    return value !== null && (typeof value === 'object' || typeof value === 'function');
  }

  /**
   @module @ember/object
  */
  /**
   @private
   @return {Number} the uuid
   */
  var _uuid = 0;
  /**
   Generates a universally unique identifier. This method
   is used internally by Ember for assisting with
   the generation of GUID's and other unique identifiers.
  
   @public
   @return {Number} [description]
   */
  function uuid() {
    return ++_uuid;
  }
  /**
   Prefix used for guids through out Ember.
   @private
   @property GUID_PREFIX
   @for Ember
   @type String
   @final
   */
  var GUID_PREFIX = 'ember';
  // Used for guid generation...
  var OBJECT_GUIDS = new WeakMap();
  var NON_OBJECT_GUIDS = new Map();
  /**
    A unique key used to assign guids and other private metadata to objects.
    If you inspect an object in your browser debugger you will often see these.
    They can be safely ignored.
  
    On browsers that support it, these properties are added with enumeration
    disabled so they won't show up when you iterate over your properties.
  
    @private
    @property GUID_KEY
    @for Ember
    @type String
    @final
  */
  var GUID_KEY = _exports.GUID_KEY = intern(`__ember${Date.now()}`);
  /**
    Generates a new guid, optionally saving the guid to the object that you
    pass in. You will rarely need to use this method. Instead you should
    call `guidFor(obj)`, which return an existing guid if available.
  
    @private
    @method generateGuid
    @static
    @for @ember/object/internals
    @param {Object} [obj] Object the guid will be used for. If passed in, the guid will
      be saved on the object and reused whenever you pass the same object
      again.
  
      If no object is passed, just generate a new guid.
    @param {String} [prefix] Prefix to place in front of the guid. Useful when you want to
      separate the guid into separate namespaces.
    @return {String} the guid
  */
  function generateGuid(obj, prefix = GUID_PREFIX) {
    var guid = prefix + uuid().toString();
    if (isObject(obj)) {
      OBJECT_GUIDS.set(obj, guid);
    }
    return guid;
  }
  /**
    Returns a unique id for the object. If the object does not yet have a guid,
    one will be assigned to it. You can call this on any object,
    `EmberObject`-based or not.
  
    You can also use this method on DOM Element objects.
  
    @public
    @static
    @method guidFor
    @for @ember/object/internals
    @param {Object} obj any object, string, number, Element, or primitive
    @return {String} the unique guid for this instance.
  */
  function guidFor(value) {
    var guid;
    if (isObject(value)) {
      guid = OBJECT_GUIDS.get(value);
      if (guid === undefined) {
        guid = `${GUID_PREFIX}${uuid()}`;
        OBJECT_GUIDS.set(value, guid);
      }
    } else {
      guid = NON_OBJECT_GUIDS.get(value);
      if (guid === undefined) {
        var type = typeof value;
        if (type === 'string') {
          guid = `st${uuid()}`;
        } else if (type === 'number') {
          guid = `nu${uuid()}`;
        } else if (type === 'symbol') {
          guid = `sy${uuid()}`;
        } else {
          guid = `(${value})`;
        }
        NON_OBJECT_GUIDS.set(value, guid);
      }
    }
    return guid;
  }
  var GENERATED_SYMBOLS = [];
  function isInternalSymbol(possibleSymbol) {
    return GENERATED_SYMBOLS.indexOf(possibleSymbol) !== -1;
  }
  // Some legacy symbols still need to be enumerable for a variety of reasons.
  // This code exists for that, and as a fallback in IE11. In general, prefer
  // `symbol` below when creating a new symbol.
  function enumerableSymbol(debugName) {
    // TODO: Investigate using platform symbols, but we do not
    // want to require non-enumerability for this API, which
    // would introduce a large cost.
    var id = GUID_KEY + Math.floor(Math.random() * Date.now()).toString();
    var symbol = intern(`__${debugName}${id}__`);
    if (true /* DEBUG */) {
      GENERATED_SYMBOLS.push(symbol);
    }
    return symbol;
  }
  var symbol = _exports.symbol = Symbol;

  // the delete is meant to hint at runtimes that this object should remain in
  // dictionary mode. This is clearly a runtime specific hack, but currently it
  // appears worthwhile in some usecases. Please note, these deletes do increase
  // the cost of creation dramatically over a plain Object.create. And as this
  // only makes sense for long-lived dictionaries that aren't instantiated often.
  function makeDictionary(parent) {
    var dict = Object.create(parent);
    dict['_dict'] = null;
    delete dict['_dict'];
    return dict;
  }
  var getDebugName;
  if (true /* DEBUG */) {
    var getFunctionName = fn => {
      var functionName = fn.name;
      if (functionName === undefined) {
        var match = Function.prototype.toString.call(fn).match(/function (\w+)\s*\(/);
        functionName = match && match[1] || '';
      }
      return functionName.replace(/^bound /, '');
    };
    var getObjectName = obj => {
      var name;
      var className;
      if (obj.constructor && obj.constructor !== Object) {
        className = getFunctionName(obj.constructor);
      }
      if ('toString' in obj && obj.toString !== Object.prototype.toString && obj.toString !== Function.prototype.toString) {
        name = obj.toString();
      }
      // If the class has a decent looking name, and the `toString` is one of the
      // default Ember toStrings, replace the constructor portion of the toString
      // with the class name. We check the length of the class name to prevent doing
      // this when the value is minified.
      if (name && name.match(/<.*:ember\d+>/) && className && className[0] !== '_' && className.length > 2 && className !== 'Class') {
        return name.replace(/<.*:/, `<${className}:`);
      }
      return name || className;
    };
    var getPrimitiveName = value => {
      return String(value);
    };
    getDebugName = value => {
      if (typeof value === 'function') {
        return getFunctionName(value) || `(unknown function)`;
      } else if (typeof value === 'object' && value !== null) {
        return getObjectName(value) || `(unknown object)`;
      } else {
        return getPrimitiveName(value);
      }
    };
  }
  var getDebugName$1 = _exports.getDebugName = getDebugName;
  var HAS_SUPER_PATTERN = /\.(_super|call\(this|apply\(this)/;
  var fnToString = Function.prototype.toString;
  var checkHasSuper = _exports.checkHasSuper = (() => {
    var sourceAvailable = fnToString.call(function () {
      return this;
    }).indexOf('return this') > -1;
    if (sourceAvailable) {
      return function checkHasSuper(func) {
        return HAS_SUPER_PATTERN.test(fnToString.call(func));
      };
    }
    return function checkHasSuper() {
      return true;
    };
  })();
  var HAS_SUPER_MAP = new WeakMap();
  var ROOT = _exports.ROOT = Object.freeze(function () {});
  HAS_SUPER_MAP.set(ROOT, false);
  function hasSuper(func) {
    var hasSuper = HAS_SUPER_MAP.get(func);
    if (hasSuper === undefined) {
      hasSuper = checkHasSuper(func);
      HAS_SUPER_MAP.set(func, hasSuper);
    }
    return hasSuper;
  }
  class ObserverListenerMeta {
    constructor() {
      this.listeners = undefined;
      this.observers = undefined;
    }
  }
  var OBSERVERS_LISTENERS_MAP = new WeakMap();
  function createObserverListenerMetaFor(fn) {
    var meta = OBSERVERS_LISTENERS_MAP.get(fn);
    if (meta === undefined) {
      meta = new ObserverListenerMeta();
      OBSERVERS_LISTENERS_MAP.set(fn, meta);
    }
    return meta;
  }
  function observerListenerMetaFor(fn) {
    return OBSERVERS_LISTENERS_MAP.get(fn);
  }
  function setObservers(func, observers) {
    var meta = createObserverListenerMetaFor(func);
    meta.observers = observers;
  }
  function setListeners(func, listeners) {
    var meta = createObserverListenerMetaFor(func);
    meta.listeners = listeners;
  }
  var IS_WRAPPED_FUNCTION_SET = new _util._WeakSet();
  /**
    Wraps the passed function so that `this._super` will point to the superFunc
    when the function is invoked. This is the primitive we use to implement
    calls to super.
  
    @private
    @method wrap
    @for Ember
    @param {Function} func The function to call
    @param {Function} superFunc The super function.
    @return {Function} wrapped function.
  */
  function wrap(func, superFunc) {
    if (!hasSuper(func)) {
      return func;
    }
    // ensure an unwrapped super that calls _super is wrapped with a terminal _super
    if (!IS_WRAPPED_FUNCTION_SET.has(superFunc) && hasSuper(superFunc)) {
      return _wrap(func, _wrap(superFunc, ROOT));
    }
    return _wrap(func, superFunc);
  }
  function _wrap(func, superFunc) {
    function superWrapper() {
      var orig = this._super;
      this._super = superFunc;
      var ret = func.apply(this, arguments);
      this._super = orig;
      return ret;
    }
    IS_WRAPPED_FUNCTION_SET.add(superWrapper);
    var meta = OBSERVERS_LISTENERS_MAP.get(func);
    if (meta !== undefined) {
      OBSERVERS_LISTENERS_MAP.set(superWrapper, meta);
    }
    return superWrapper;
  }
  function lookupDescriptor(obj, keyName) {
    var current = obj;
    do {
      var descriptor = Object.getOwnPropertyDescriptor(current, keyName);
      if (descriptor !== undefined) {
        return descriptor;
      }
      current = Object.getPrototypeOf(current);
    } while (current !== null);
    return null;
  }

  /**
    Checks to see if the `methodName` exists on the `obj`.
  
    ```javascript
    let foo = { bar: function() { return 'bar'; }, baz: null };
  
    Ember.canInvoke(foo, 'bar'); // true
    Ember.canInvoke(foo, 'baz'); // false
    Ember.canInvoke(foo, 'bat'); // false
    ```
  
    @method canInvoke
    @for Ember
    @param {Object} obj The object to check for the method
    @param {String} methodName The method name to check for
    @return {Boolean}
    @private
  */
  function canInvoke(obj, methodName) {
    return obj != null && typeof obj[methodName] === 'function';
  }
  /**
    @module @ember/utils
  */

  var NAMES = new WeakMap();
  function setName(obj, name) {
    if (isObject(obj)) NAMES.set(obj, name);
  }
  function getName(obj) {
    return NAMES.get(obj);
  }
  var objectToString = Object.prototype.toString;
  function isNone(obj) {
    return obj === null || obj === undefined;
  }
  /*
   A `toString` util function that supports objects without a `toString`
   method, e.g. an object created with `Object.create(null)`.
  */
  function toString(obj) {
    if (typeof obj === 'string') {
      return obj;
    }
    if (null === obj) return 'null';
    if (undefined === obj) return 'undefined';
    if (Array.isArray(obj)) {
      // Reimplement Array.prototype.join according to spec (22.1.3.13)
      // Changing ToString(element) with this safe version of ToString.
      var r = '';
      for (var k = 0; k < obj.length; k++) {
        if (k > 0) {
          r += ',';
        }
        if (!isNone(obj[k])) {
          r += toString(obj[k]);
        }
      }
      return r;
    }
    if (typeof obj.toString === 'function') {
      return obj.toString();
    }
    return objectToString.call(obj);
  }
  var PROXIES = new _util._WeakSet();
  function isProxy(value) {
    if (isObject(value)) {
      return PROXIES.has(value);
    }
    return false;
  }
  function setProxy(object) {
    if (isObject(object)) {
      PROXIES.add(object);
    }
  }
  class Cache {
    constructor(limit, func, store = new Map()) {
      this.limit = limit;
      this.func = func;
      this.store = store;
      this.size = 0;
      this.misses = 0;
      this.hits = 0;
    }
    get(key) {
      if (this.store.has(key)) {
        this.hits++;
        // SAFETY: we know the value is present because `.has(key)` was `true`.
        return this.store.get(key);
      } else {
        this.misses++;
        return this.set(key, this.func(key));
      }
    }
    set(key, value) {
      if (this.limit > this.size) {
        this.size++;
        this.store.set(key, value);
      }
      return value;
    }
    purge() {
      this.store.clear();
      this.size = 0;
      this.hits = 0;
      this.misses = 0;
    }
  }
  _exports.Cache = Cache;
  var setupMandatorySetter;
  var teardownMandatorySetter;
  var setWithMandatorySetter;
  function isElementKey(key) {
    return typeof key === 'number' ? isPositiveInt(key) : isStringInt(key);
  }
  function isStringInt(str) {
    var num = parseInt(str, 10);
    return isPositiveInt(num) && str === String(num);
  }
  function isPositiveInt(num) {
    return num >= 0 && num % 1 === 0;
  }
  if (true /* DEBUG */) {
    var SEEN_TAGS = new _util._WeakSet();
    var MANDATORY_SETTERS = new WeakMap();
    var _propertyIsEnumerable = function (obj, key) {
      return Object.prototype.propertyIsEnumerable.call(obj, key);
    };
    _exports.setupMandatorySetter = setupMandatorySetter = function (tag, obj, keyName) {
      if (SEEN_TAGS.has(tag)) {
        return;
      }
      SEEN_TAGS.add(tag);
      if (Array.isArray(obj) && isElementKey(keyName)) {
        return;
      }
      var desc = lookupDescriptor(obj, keyName) || {};
      if (desc.get || desc.set) {
        // if it has a getter or setter, we can't install the mandatory setter.
        // native setters are allowed, we have to assume that they will resolve
        // to tracked properties.
        return;
      }
      if (desc && (!desc.configurable || !desc.writable)) {
        // if it isn't writable anyways, so we shouldn't provide the setter.
        // if it isn't configurable, we can't overwrite it anyways.
        return;
      }
      var setters = MANDATORY_SETTERS.get(obj);
      if (setters === undefined) {
        setters = {};
        MANDATORY_SETTERS.set(obj, setters);
      }
      desc.hadOwnProperty = Object.hasOwnProperty.call(obj, keyName);
      setters[keyName] = desc;
      Object.defineProperty(obj, keyName, {
        configurable: true,
        enumerable: _propertyIsEnumerable(obj, keyName),
        get() {
          if (desc.get) {
            return desc.get.call(this);
          } else {
            return desc.value;
          }
        },
        set(value) {
          (true && !(false) && (0, _debug.assert)(`You attempted to update ${this}.${String(keyName)} to "${String(value)}", but it is being tracked by a tracking context, such as a template, computed property, or observer. In order to make sure the context updates properly, you must invalidate the property when updating it. You can mark the property as \`@tracked\`, or use \`@ember/object#set\` to do this.`));
        }
      });
    };
    _exports.teardownMandatorySetter = teardownMandatorySetter = function (obj, keyName) {
      var setters = MANDATORY_SETTERS.get(obj);
      if (setters !== undefined && setters[keyName] !== undefined) {
        Object.defineProperty(obj, keyName, setters[keyName]);
        delete setters[keyName];
      }
    };
    _exports.setWithMandatorySetter = setWithMandatorySetter = function (obj, keyName, value) {
      var setters = MANDATORY_SETTERS.get(obj);
      if (setters !== undefined && setters[keyName] !== undefined) {
        var setter = setters[keyName];
        if (setter.set) {
          setter.set.call(obj, value);
        } else {
          setter.value = value;
          // If the object didn't have own property before, it would have changed
          // the enumerability after setting the value the first time.
          if (!setter.hadOwnProperty) {
            var desc = lookupDescriptor(obj, keyName);
            desc.enumerable = true;
            Object.defineProperty(obj, keyName, desc);
          }
        }
      } else {
        obj[keyName] = value;
      }
    };
  }

  /*
   This package will be eagerly parsed and should have no dependencies on external
   packages.
  
   It is intended to be used to share utility methods that will be needed
   by every Ember application (and is **not** a dumping ground of useful utilities).
  
   Utility methods that are needed in < 80% of cases should be placed
   elsewhere (so they can be lazily evaluated / parsed).
  */
});
define("@ember/-internals/views/index", ["exports", "@ember/-internals/views/lib/system/utils", "@ember/-internals/views/lib/system/event_dispatcher", "@ember/-internals/views/lib/component_lookup", "@ember/-internals/views/lib/views/core_view", "@ember/-internals/views/lib/mixins/class_names_support", "@ember/-internals/views/lib/mixins/child_views_support", "@ember/-internals/views/lib/mixins/view_state_support", "@ember/-internals/views/lib/mixins/view_support", "@ember/-internals/views/lib/mixins/action_support", "@ember/-internals/views/lib/compat/attrs", "@ember/-internals/views/lib/system/action_manager"], function (_exports, _utils, _event_dispatcher, _component_lookup, _core_view, _class_names_support, _child_views_support, _view_state_support, _view_support, _action_support, _attrs, _action_manager) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "ActionManager", {
    enumerable: true,
    get: function () {
      return _action_manager.default;
    }
  });
  Object.defineProperty(_exports, "ActionSupport", {
    enumerable: true,
    get: function () {
      return _action_support.default;
    }
  });
  Object.defineProperty(_exports, "ChildViewsSupport", {
    enumerable: true,
    get: function () {
      return _child_views_support.default;
    }
  });
  Object.defineProperty(_exports, "ClassNamesSupport", {
    enumerable: true,
    get: function () {
      return _class_names_support.default;
    }
  });
  Object.defineProperty(_exports, "ComponentLookup", {
    enumerable: true,
    get: function () {
      return _component_lookup.default;
    }
  });
  Object.defineProperty(_exports, "CoreView", {
    enumerable: true,
    get: function () {
      return _core_view.default;
    }
  });
  Object.defineProperty(_exports, "EventDispatcher", {
    enumerable: true,
    get: function () {
      return _event_dispatcher.default;
    }
  });
  Object.defineProperty(_exports, "MUTABLE_CELL", {
    enumerable: true,
    get: function () {
      return _attrs.MUTABLE_CELL;
    }
  });
  Object.defineProperty(_exports, "ViewMixin", {
    enumerable: true,
    get: function () {
      return _view_support.default;
    }
  });
  Object.defineProperty(_exports, "ViewStateSupport", {
    enumerable: true,
    get: function () {
      return _view_state_support.default;
    }
  });
  Object.defineProperty(_exports, "addChildView", {
    enumerable: true,
    get: function () {
      return _utils.addChildView;
    }
  });
  Object.defineProperty(_exports, "clearElementView", {
    enumerable: true,
    get: function () {
      return _utils.clearElementView;
    }
  });
  Object.defineProperty(_exports, "clearViewElement", {
    enumerable: true,
    get: function () {
      return _utils.clearViewElement;
    }
  });
  Object.defineProperty(_exports, "constructStyleDeprecationMessage", {
    enumerable: true,
    get: function () {
      return _utils.constructStyleDeprecationMessage;
    }
  });
  Object.defineProperty(_exports, "getChildViews", {
    enumerable: true,
    get: function () {
      return _utils.getChildViews;
    }
  });
  Object.defineProperty(_exports, "getElementView", {
    enumerable: true,
    get: function () {
      return _utils.getElementView;
    }
  });
  Object.defineProperty(_exports, "getRootViews", {
    enumerable: true,
    get: function () {
      return _utils.getRootViews;
    }
  });
  Object.defineProperty(_exports, "getViewBoundingClientRect", {
    enumerable: true,
    get: function () {
      return _utils.getViewBoundingClientRect;
    }
  });
  Object.defineProperty(_exports, "getViewBounds", {
    enumerable: true,
    get: function () {
      return _utils.getViewBounds;
    }
  });
  Object.defineProperty(_exports, "getViewClientRects", {
    enumerable: true,
    get: function () {
      return _utils.getViewClientRects;
    }
  });
  Object.defineProperty(_exports, "getViewElement", {
    enumerable: true,
    get: function () {
      return _utils.getViewElement;
    }
  });
  Object.defineProperty(_exports, "getViewId", {
    enumerable: true,
    get: function () {
      return _utils.getViewId;
    }
  });
  Object.defineProperty(_exports, "isSimpleClick", {
    enumerable: true,
    get: function () {
      return _utils.isSimpleClick;
    }
  });
  Object.defineProperty(_exports, "setElementView", {
    enumerable: true,
    get: function () {
      return _utils.setElementView;
    }
  });
  Object.defineProperty(_exports, "setViewElement", {
    enumerable: true,
    get: function () {
      return _utils.setViewElement;
    }
  });
});
define("@ember/-internals/views/lib/compat/attrs", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MUTABLE_CELL = void 0;
  var MUTABLE_CELL = _exports.MUTABLE_CELL = Symbol('MUTABLE_CELL');
});
define("@ember/-internals/views/lib/compat/fallback-view-registry", ["exports", "@ember/-internals/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _utils.dictionary)(null);
});
define("@ember/-internals/views/lib/component_lookup", ["exports", "@ember/object"], function (_exports, _object) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = _object.default.extend({
    componentFor(name, owner) {
      var fullName = `component:${name}`;
      return owner.factoryFor(fullName);
    },
    layoutFor(name, owner, options) {
      var templateFullName = `template:components/${name}`;
      return owner.lookup(templateFullName, options);
    }
  });
});
define("@ember/-internals/views/lib/mixins/action_support", ["exports", "@ember/-internals/metal", "@ember/object/mixin", "@ember/debug"], function (_exports, _metal, _mixin, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
   @module ember
  */

  var ActionSupport = _mixin.default.create({
    send(actionName, ...args) {
      (true && !(!this.isDestroying && !this.isDestroyed) && (0, _debug.assert)(`Attempted to call .send() with the action '${actionName}' on the destroyed object '${this}'.`, !this.isDestroying && !this.isDestroyed));
      var action = this.actions && this.actions[actionName];
      if (action) {
        var shouldBubble = action.apply(this, args) === true;
        if (!shouldBubble) {
          return;
        }
      }
      var target = (0, _metal.get)(this, 'target');
      if (target) {
        (true && !(typeof target.send === 'function') && (0, _debug.assert)(`The \`target\` for ${this} (${target}) does not have a \`send\` method`, typeof target.send === 'function'));
        target.send(...arguments);
      } else {
        (true && !(action) && (0, _debug.assert)(`${(0, _debug.inspect)(this)} had no action handler for: ${actionName}`, action));
      }
    }
  });
  var _default = _exports.default = ActionSupport;
});
define("@ember/-internals/views/lib/mixins/child_views_support", ["exports", "@ember/-internals/metal", "@ember/object/mixin", "@ember/-internals/views/lib/system/utils"], function (_exports, _metal, _mixin, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var ChildViewsSupport = _mixin.default.create({
    /**
      Array of child views. You should never edit this array directly.
         @property childViews
      @type Array
      @default []
      @private
    */
    childViews: (0, _metal.nativeDescDecorator)({
      configurable: false,
      enumerable: false,
      get() {
        return (0, _utils.getChildViews)(this);
      }
    }),
    appendChild(view) {
      (0, _utils.addChildView)(this, view);
    }
  });
  var _default = _exports.default = ChildViewsSupport;
});
define("@ember/-internals/views/lib/mixins/class_names_support", ["exports", "@ember/-internals/metal", "@ember/object/mixin", "@ember/debug"], function (_exports, _metal, _mixin, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module ember
  */

  var EMPTY_ARRAY = Object.freeze([]);
  var ClassNamesSupport = _mixin.default.create({
    concatenatedProperties: ['classNames', 'classNameBindings'],
    init() {
      this._super(...arguments);
      (true && !((0, _metal.descriptorForProperty)(this, 'classNameBindings') === undefined && Array.isArray(this.classNameBindings)) && (0, _debug.assert)(`Only arrays are allowed for 'classNameBindings'`, (0, _metal.descriptorForProperty)(this, 'classNameBindings') === undefined && Array.isArray(this.classNameBindings)));
      (true && !((0, _metal.descriptorForProperty)(this, 'classNames') === undefined && Array.isArray(this.classNames)) && (0, _debug.assert)(`Only arrays of static class strings are allowed for 'classNames'. For dynamic classes, use 'classNameBindings'.`, (0, _metal.descriptorForProperty)(this, 'classNames') === undefined && Array.isArray(this.classNames)));
    },
    /**
      Standard CSS class names to apply to the view's outer element. This
      property automatically inherits any class names defined by the view's
      superclasses as well.
         @property classNames
      @type Array
      @default ['ember-view']
      @public
    */
    classNames: EMPTY_ARRAY,
    /**
      A list of properties of the view to apply as class names. If the property
      is a string value, the value of that string will be applied as a class
      name.
         ```javascript
      // Applies the 'high' class to the view element
      import Component from '@ember/component';
      Component.extend({
        classNameBindings: ['priority'],
        priority: 'high'
      });
      ```
         If the value of the property is a Boolean, the name of that property is
      added as a dasherized class name.
         ```javascript
      // Applies the 'is-urgent' class to the view element
      import Component from '@ember/component';
      Component.extend({
        classNameBindings: ['isUrgent'],
        isUrgent: true
      });
      ```
         If you would prefer to use a custom value instead of the dasherized
      property name, you can pass a binding like this:
         ```javascript
      // Applies the 'urgent' class to the view element
      import Component from '@ember/component';
      Component.extend({
        classNameBindings: ['isUrgent:urgent'],
        isUrgent: true
      });
      ```
         If you would like to specify a class that should only be added when the
      property is false, you can declare a binding like this:
         ```javascript
      // Applies the 'disabled' class to the view element
      import Component from '@ember/component';
      Component.extend({
        classNameBindings: ['isEnabled::disabled'],
        isEnabled: false
      });
      ```
         This list of properties is inherited from the component's superclasses as well.
         @property classNameBindings
      @type Array
      @default []
      @public
    */
    classNameBindings: EMPTY_ARRAY
  });
  var _default = _exports.default = ClassNamesSupport;
});
define("@ember/-internals/views/lib/mixins/view_state_support", ["exports", "@ember/object/mixin"], function (_exports, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module ember
  */

  var ViewStateSupport = _mixin.default.create({
    _transitionTo(state) {
      var priorState = this._currentState;
      var currentState = this._currentState = this._states[state];
      this._state = state;
      if (priorState && priorState.exit) {
        priorState.exit(this);
      }
      if (currentState.enter) {
        currentState.enter(this);
      }
    }
  });
  var _default = _exports.default = ViewStateSupport;
});
define("@ember/-internals/views/lib/mixins/view_support", ["exports", "@ember/-internals/utils", "@ember/-internals/metal", "@ember/object/mixin", "@ember/debug", "@ember/-internals/browser-environment", "@ember/-internals/views/lib/system/utils"], function (_exports, _utils, _metal, _mixin, _debug, _browserEnvironment, _utils2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function K() {
    return this;
  }
  var ViewMixin = _mixin.default.create({
    /**
     A list of properties of the view to apply as attributes. If the property
     is a string value, the value of that string will be applied as the value
     for an attribute of the property's name.
        The following example creates a tag like `<div priority="high" />`.
        ```app/components/my-component.js
     import Component from '@ember/component';
        export default Component.extend({
        attributeBindings: ['priority'],
        priority: 'high'
      });
     ```
        If the value of the property is a Boolean, the attribute is treated as
     an HTML Boolean attribute. It will be present if the property is `true`
     and omitted if the property is `false`.
        The following example creates markup like `<div visible />`.
        ```app/components/my-component.js
     import Component from '@ember/component';
        export default Component.extend({
        attributeBindings: ['visible'],
        visible: true
      });
     ```
        If you would prefer to use a custom value instead of the property name,
     you can create the same markup as the last example with a binding like
     this:
        ```app/components/my-component.js
     import Component from '@ember/component';
        export default Component.extend({
        attributeBindings: ['isVisible:visible'],
        isVisible: true
      });
     ```
        This list of attributes is inherited from the component's superclasses,
     as well.
        @property attributeBindings
     @type Array
     @default []
     @public
     */
    concatenatedProperties: ['attributeBindings'],
    // ..........................................................
    // TEMPLATE SUPPORT
    //
    /**
     Return the nearest ancestor that is an instance of the provided
     class or mixin.
        @method nearestOfType
     @param {Class,Mixin} klass Subclass of Ember.View (or Ember.View itself),
     or an instance of Mixin.
     @return Ember.View
     @deprecated use `yield` and contextual components for composition instead.
     @private
     */
    nearestOfType(klass) {
      var view = this.parentView;
      var isOfType = klass instanceof _mixin.default ? view => klass.detect(view) : view => klass.detect(view.constructor);
      while (view) {
        if (isOfType(view)) {
          return view;
        }
        view = view.parentView;
      }
      return;
    },
    /**
     Return the nearest ancestor that has a given property.
        @method nearestWithProperty
     @param {String} property A property name
     @return Ember.View
     @deprecated use `yield` and contextual components for composition instead.
     @private
     */
    nearestWithProperty(property) {
      var view = this.parentView;
      while (view) {
        if (property in view) {
          return view;
        }
        view = view.parentView;
      }
    },
    /**
     Renders the view again. This will work regardless of whether the
     view is already in the DOM or not. If the view is in the DOM, the
     rendering process will be deferred to give bindings a chance
     to synchronize.
        If children were added during the rendering process using `appendChild`,
     `rerender` will remove them, because they will be added again
     if needed by the next `render`.
        In general, if the display of your view changes, you should modify
     the DOM element directly instead of manually calling `rerender`, which can
     be slow.
        @method rerender
     @public
     */
    rerender() {
      return this._currentState.rerender(this);
    },
    // ..........................................................
    // ELEMENT SUPPORT
    //
    /**
     Returns the current DOM element for the view.
         @property element
      @type DOMElement
      @public
    */
    element: (0, _metal.nativeDescDecorator)({
      configurable: false,
      enumerable: false,
      get() {
        return this.renderer.getElement(this);
      }
    }),
    /**
     Appends the view's element to the specified parent element.
        Note that this method just schedules the view to be appended; the DOM
     element will not be appended to the given element until all bindings have
     finished synchronizing.
        This is not typically a function that you will need to call directly when
     building your application. If you do need to use `appendTo`, be sure that
     the target element you are providing is associated with an `Application`
     and does not have an ancestor element that is associated with an Ember view.
        @method appendTo
     @param {String|DOMElement} A selector, element, HTML string
     @return {Ember.View} receiver
     @private
     */
    appendTo(selector) {
      var target;
      if (_browserEnvironment.hasDOM) {
        (true && !(typeof selector === 'string' || selector instanceof Element) && (0, _debug.assert)(`Expected a selector or instance of Element`, typeof selector === 'string' || selector instanceof Element));
        target = typeof selector === 'string' ? document.querySelector(selector) : selector;
        (true && !(target) && (0, _debug.assert)(`You tried to append to (${selector}) but that isn't in the DOM`, target));
        (true && !(!(0, _utils2.matches)(target, '.ember-view')) && (0, _debug.assert)('You cannot append to an existing Ember.View.', !(0, _utils2.matches)(target, '.ember-view')));
        (true && !((() => {
          var node = target.parentNode;
          while (node instanceof Element) {
            if ((0, _utils2.matches)(node, '.ember-view')) {
              return false;
            }
            node = node.parentNode;
          }
          return true;
        })()) && (0, _debug.assert)('You cannot append to an existing Ember.View.', (() => {
          var node = target.parentNode;
          while (node instanceof Element) {
            if ((0, _utils2.matches)(node, '.ember-view')) {
              return false;
            }
            node = node.parentNode;
          }
          return true;
        })()));
      } else {
        target = selector;
        (true && !(typeof target !== 'string') && (0, _debug.assert)(`You tried to append to a selector string (${selector}) in an environment without a DOM`, typeof target !== 'string'));
        (true && !(typeof target.appendChild === 'function') && (0, _debug.assert)(`You tried to append to a non-Element (${selector}) in an environment without a DOM`, typeof target.appendChild === 'function'));
      }
      // SAFETY: SimpleElement is supposed to be a subset of Element so this _should_ be safe.
      // However, the types are more specific in some places which necessitates the `as`.
      this.renderer.appendTo(this, target);
      return this;
    },
    /**
     Appends the view's element to the document body. If the view does
     not have an HTML representation yet
     the element will be generated automatically.
        If your application uses the `rootElement` property, you must append
     the view within that element. Rendering views outside of the `rootElement`
     is not supported.
        Note that this method just schedules the view to be appended; the DOM
     element will not be appended to the document body until all bindings have
     finished synchronizing.
        @method append
     @return {Ember.View} receiver
     @private
     */
    append() {
      return this.appendTo(document.body);
    },
    /**
     The HTML `id` of the view's element in the DOM. You can provide this
     value yourself but it must be unique (just as in HTML):
        ```handlebars
     {{my-component elementId="a-really-cool-id"}}
     ```
        If not manually set a default value will be provided by the framework.
        Once rendered an element's `elementId` is considered immutable and you
     should never change it. If you need to compute a dynamic value for the
     `elementId`, you should do this when the component or element is being
     instantiated:
        ```app/components/my-component.js
     import Component from '@ember/component';
        export default Component.extend({
        init() {
          this._super(...arguments);
          let index = this.get('index');
          this.set('elementId', 'component-id' + index);
        }
      });
     ```
        @property elementId
     @type String
     @public
     */
    elementId: null,
    /**
     Called when a view is going to insert an element into the DOM.
        @event willInsertElement
     @public
     */
    willInsertElement: K,
    /**
     Called when the element of the view has been inserted into the DOM.
     Override this function to do any set up that requires an element
     in the document body.
        When a view has children, didInsertElement will be called on the
     child view(s) first and on itself afterwards.
        @event didInsertElement
     @public
     */
    didInsertElement: K,
    /**
     Called when the view is about to rerender, but before anything has
     been torn down. This is a good opportunity to tear down any manual
     observers you have installed based on the DOM state
        @event willClearRender
     @public
     */
    willClearRender: K,
    /**
     You must call `destroy` on a view to destroy the view (and all of its
     child views). This will remove the view from any parent node, then make
     sure that the DOM element managed by the view can be released by the
     memory manager.
        @method destroy
     @private
     */
    destroy() {
      this._super(...arguments);
      this._currentState.destroy(this);
    },
    /**
     Called when the element of the view is going to be destroyed. Override
     this function to do any teardown that requires an element, like removing
     event listeners.
        Please note: any property changes made during this event will have no
     effect on object observers.
        @event willDestroyElement
     @public
     */
    willDestroyElement: K,
    /**
     Called after the element of the view is destroyed.
        @event willDestroyElement
     @public
     */
    didDestroyElement: K,
    /**
     Called when the parentView property has changed.
        @event parentViewDidChange
     @private
     */
    parentViewDidChange: K,
    // ..........................................................
    // STANDARD RENDER PROPERTIES
    //
    /**
     Tag name for the view's outer element. The tag name is only used when an
     element is first created. If you change the `tagName` for an element, you
     must destroy and recreate the view element.
        By default, the render buffer will use a `<div>` tag for views.
        If the tagName is `''`, the view will be tagless, with no outer element.
     Component properties that depend on the presence of an outer element, such
     as `classNameBindings` and `attributeBindings`, do not work with tagless
     components. Tagless components cannot implement methods to handle events,
     and their `element` property has a `null` value.
        @property tagName
     @type String
     @default null
     @public
     */
    // We leave this null by default so we can tell the difference between
    // the default case and a user-specified tag.
    tagName: null,
    // .......................................................
    // CORE DISPLAY METHODS
    //
    /**
     Setup a view, but do not finish waking it up.
        * configure `childViews`
     * register the view with the global views hash, which is used for event
     dispatch
        @method init
     @private
     */
    init() {
      this._super(...arguments);
      (true && !((0, _metal.descriptorForProperty)(this, 'elementId') === undefined) && (0, _debug.assert)(`You cannot use a computed property for the component's \`elementId\` (${this}).`, (0, _metal.descriptorForProperty)(this, 'elementId') === undefined));
      (true && !((0, _metal.descriptorForProperty)(this, 'tagName') === undefined) && (0, _debug.assert)(`You cannot use a computed property for the component's \`tagName\` (${this}).`, (0, _metal.descriptorForProperty)(this, 'tagName') === undefined));
      if (!this.elementId && this.tagName !== '') {
        this.elementId = (0, _utils.guidFor)(this);
      }
      (true && !(!this.render) && (0, _debug.assert)('Using a custom `.render` function is no longer supported.', !this.render));
    },
    // .......................................................
    // EVENT HANDLING
    //
    /**
     Handle events from `EventDispatcher`
        @method handleEvent
     @param eventName {String}
     @param evt {Event}
     @private
     */
    handleEvent(eventName, evt) {
      return this._currentState.handleEvent(this, eventName, evt);
    }
  });
  var _default = _exports.default = ViewMixin;
});
define("@ember/-internals/views/lib/system/action_manager", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = ActionManager;
  /**
  @module ember
  */
  function ActionManager() {}
  /**
    Global action id hash.
  
    @private
    @property registeredActions
    @type Object
  */
  ActionManager.registeredActions = {};
});
define("@ember/-internals/views/lib/system/event_dispatcher", ["exports", "@ember/-internals/owner", "@ember/debug", "@ember/-internals/metal", "@ember/object", "@ember/-internals/views", "@ember/-internals/views/lib/system/action_manager"], function (_exports, _owner, _debug, _metal, _object, _views, _action_manager) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module ember
  */
  var ROOT_ELEMENT_CLASS = 'ember-application';
  var ROOT_ELEMENT_SELECTOR = `.${ROOT_ELEMENT_CLASS}`;
  /**
    `Ember.EventDispatcher` handles delegating browser events to their
    corresponding `Ember.Views.` For example, when you click on a view,
    `Ember.EventDispatcher` ensures that that view's `mouseDown` method gets
    called.
  
    @class EventDispatcher
    @namespace Ember
    @private
    @extends EmberObject
  */
  class EventDispatcher extends _object.default {
    constructor() {
      super(...arguments);
      /**
        The set of events names (and associated handler function names) to be setup
        and dispatched by the `EventDispatcher`. Modifications to this list can be done
        at setup time, generally via the `Application.customEvents` hash.
               To add new events to be listened to:
               ```javascript
        import Application from '@ember/application';
               let App = Application.create({
          customEvents: {
            paste: 'paste'
          }
        });
        ```
               To prevent default events from being listened to:
               ```javascript
        import Application from '@ember/application';
               let App = Application.create({
          customEvents: {
            mouseenter: null,
            mouseleave: null
          }
        });
        ```
        @property events
        @type Object
        @private
      */
      this.events = {
        touchstart: 'touchStart',
        touchmove: 'touchMove',
        touchend: 'touchEnd',
        touchcancel: 'touchCancel',
        keydown: 'keyDown',
        keyup: 'keyUp',
        keypress: 'keyPress',
        mousedown: 'mouseDown',
        mouseup: 'mouseUp',
        contextmenu: 'contextMenu',
        click: 'click',
        dblclick: 'doubleClick',
        focusin: 'focusIn',
        focusout: 'focusOut',
        submit: 'submit',
        input: 'input',
        change: 'change',
        dragstart: 'dragStart',
        drag: 'drag',
        dragenter: 'dragEnter',
        dragleave: 'dragLeave',
        dragover: 'dragOver',
        drop: 'drop',
        dragend: 'dragEnd'
      };
      /**
        The root DOM element to which event listeners should be attached. Event
        listeners will be attached to the document unless this is overridden.
               Can be specified as a DOMElement or a selector string.
               The default body is a string since this may be evaluated before document.body
        exists in the DOM.
               @private
        @property rootElement
        @type DOMElement
        @default 'body'
      */
      this.rootElement = 'body';
      this._eventHandlers = Object.create(null);
      this._didSetup = false;
      this.finalEventNameMapping = null;
      this._sanitizedRootElement = null;
      this.lazyEvents = new Map();
      this._reverseEventNameMapping = null;
    }
    /**
      Sets up event listeners for standard browser events.
         This will be called after the browser sends a `DOMContentReady` event. By
      default, it will set up all of the listeners on the document body. If you
      would like to register the listeners on a different element, set the event
      dispatcher's `root` property.
         @private
      @method setup
      @param addedEvents {Object}
    */
    setup(addedEvents, _rootElement) {
      var _a;
      (true && !((() => {
        var owner = (0, _owner.getOwner)(this);
        (true && !(owner) && (0, _debug.assert)('[BUG] Missing owner', owner)); // SAFETY: This is not guaranteed to be safe, but this is what we expect to be returned.
        var environment = owner.lookup('-environment:main');
        return environment.isInteractive;
      })()) && (0, _debug.assert)('EventDispatcher should never be setup in fastboot mode. Please report this as an Ember bug.', (() => {
        var owner = (0, _owner.getOwner)(this);
        (true && !(owner) && (0, _debug.assert)('[BUG] Missing owner', owner));
        var environment = owner.lookup('-environment:main');
        return environment.isInteractive;
      })()));
      var events = this.finalEventNameMapping = Object.assign(Object.assign({}, (0, _metal.get)(this, 'events')), addedEvents);
      this._reverseEventNameMapping = Object.keys(events).reduce((result, key) => {
        var eventName = events[key];
        return eventName ? Object.assign(Object.assign({}, result), {
          [eventName]: key
        }) : result;
      }, {});
      var lazyEvents = this.lazyEvents;
      if (_rootElement !== undefined && _rootElement !== null) {
        (0, _metal.set)(this, 'rootElement', _rootElement);
      }
      var specifiedRootElement = (0, _metal.get)(this, 'rootElement');
      var rootElement = typeof specifiedRootElement !== 'string' ? specifiedRootElement : document.querySelector(specifiedRootElement);
      (true && !(rootElement) && (0, _debug.assert)(`Could not find rootElement (${specifiedRootElement})`, rootElement));
      (true && !(!rootElement.classList.contains(ROOT_ELEMENT_CLASS)) && (0, _debug.assert)(`You cannot use the same root element (${specifiedRootElement}) multiple times in an Ember.Application`, !rootElement.classList.contains(ROOT_ELEMENT_CLASS)));
      (true && !((() => {
        var target = rootElement.parentNode;
        while (target instanceof Element) {
          if (target.classList.contains(ROOT_ELEMENT_CLASS)) {
            return false;
          }
          target = target.parentNode;
        }
        return true;
      })()) && (0, _debug.assert)('You cannot make a new Ember.Application using a root element that is a descendent of an existing Ember.Application', (() => {
        var target = rootElement.parentNode;
        while (target instanceof Element) {
          if (target.classList.contains(ROOT_ELEMENT_CLASS)) {
            return false;
          }
          target = target.parentNode;
        }
        return true;
      })()));
      (true && !(!rootElement.querySelector(ROOT_ELEMENT_SELECTOR)) && (0, _debug.assert)('You cannot make a new Ember.Application using a root element that is an ancestor of an existing Ember.Application', !rootElement.querySelector(ROOT_ELEMENT_SELECTOR)));
      rootElement.classList.add(ROOT_ELEMENT_CLASS);
      (true && !(rootElement.classList.contains(ROOT_ELEMENT_CLASS)) && (0, _debug.assert)(`Unable to add '${ROOT_ELEMENT_CLASS}' class to root element (${(0, _metal.get)(this, 'rootElement') || rootElement.tagName}). Make sure you set rootElement to the body or an element in the body.`, rootElement.classList.contains(ROOT_ELEMENT_CLASS))); // save off the final sanitized root element (for usage in setupHandler)
      this._sanitizedRootElement = rootElement;
      // setup event listeners for the non-lazily setup events
      for (var event in events) {
        if (Object.prototype.hasOwnProperty.call(events, event)) {
          lazyEvents.set(event, (_a = events[event]) !== null && _a !== void 0 ? _a : null);
        }
      }
      this._didSetup = true;
    }
    /**
      Setup event listeners for the given browser event name
         @private
      @method setupHandlerForBrowserEvent
      @param event the name of the event in the browser
    */
    setupHandlerForBrowserEvent(event) {
      var _a;
      (true && !(this.finalEventNameMapping) && (0, _debug.assert)('[BUG] Expected finalEventNameMapping to be set', this.finalEventNameMapping));
      (true && !(this._sanitizedRootElement) && (0, _debug.assert)('[BUG] Expected _santizedRootElement to be set', this._sanitizedRootElement));
      this.setupHandler(this._sanitizedRootElement, event, (_a = this.finalEventNameMapping[event]) !== null && _a !== void 0 ? _a : null);
    }
    /**
      Setup event listeners for the given Ember event name (camel case)
         @private
      @method setupHandlerForEmberEvent
      @param eventName
    */
    setupHandlerForEmberEvent(eventName) {
      var _a;
      (true && !(this._sanitizedRootElement) && (0, _debug.assert)('[BUG] Expected _sanitizedRootElement to be set', this._sanitizedRootElement));
      var event = (_a = this._reverseEventNameMapping) === null || _a === void 0 ? void 0 : _a[eventName];
      if (event) {
        this.setupHandler(this._sanitizedRootElement, event, eventName);
      }
    }
    /**
      Registers an event listener on the rootElement. If the given event is
      triggered, the provided event handler will be triggered on the target view.
         If the target view does not implement the event handler, or if the handler
      returns `false`, the parent view will be called. The event will continue to
      bubble to each successive parent view until it reaches the top.
         @private
      @method setupHandler
      @param {Element} rootElement
      @param {String} event the name of the event in the browser
      @param {String} eventName the name of the method to call on the view
    */
    setupHandler(rootElement, event, eventName) {
      if (eventName === null || !this.lazyEvents.has(event)) {
        return; // nothing to do
      }
      var viewHandler = (target, event) => {
        // SAFETY: SimpleElement is supposed to be a subset of Element so this _should_ be safe.
        // However, the types are more specific in some places which necessitates the `as`.
        var view = (0, _views.getElementView)(target);
        var result = true;
        if (view) {
          // SAFETY: As currently written, this is not safe. Though it seems to always be true.
          result = view.handleEvent(eventName, event);
        }
        return result;
      };
      var actionHandler = (target, event) => {
        var actionId = target.getAttribute('data-ember-action');
        var actions;
        // In Glimmer2 this attribute is set to an empty string and an additional
        // attribute it set for each action on a given element. In this case, the
        // attributes need to be read so that a proper set of action handlers can
        // be coalesced.
        if (actionId === '') {
          actions = [];
          for (var attr of target.attributes) {
            var attrName = attr.name;
            if (attrName.indexOf('data-ember-action-') === 0) {
              var action = _action_manager.default.registeredActions[attr.value];
              (true && !(action) && (0, _debug.assert)('[BUG] Missing action', action));
              actions.push(action);
            }
          }
        } else if (actionId) {
          // FIXME: This branch is never called in tests. Improve tests or remove
          var actionState = _action_manager.default.registeredActions[actionId];
          if (actionState) {
            actions = [actionState];
          }
        }
        // We have to check for actions here since in some cases, jQuery will trigger
        // an event on `removeChild` (i.e. focusout) after we've already torn down the
        // action handlers for the view.
        if (!actions) {
          // FIXME: This branch is never called in tests. Improve tests or remove
          return;
        }
        var result = true;
        for (var index = 0; index < actions.length; index++) {
          var _action = actions[index];
          if (_action && _action.eventName === eventName) {
            // return false if any of the action handlers returns false
            result = _action.handler(event) && result;
          }
        }
        return result;
      };
      var handleEvent = this._eventHandlers[event] = event => {
        var target = event.target;
        (true && !(target instanceof Element) && (0, _debug.assert)(`[BUG] Received event without an Element target: ${event.type}, ${target}`, target instanceof Element));
        do {
          // SAFETY: SimpleElement is supposed to be a subset of Element so this _should_ be safe.
          // However, the types are more specific in some places which necessitates the `as`.
          if ((0, _views.getElementView)(target)) {
            if (viewHandler(target, event) === false) {
              event.preventDefault();
              event.stopPropagation();
              break;
            } else if (event.cancelBubble === true) {
              break;
            }
          } else if (typeof target.hasAttribute === 'function' && target.hasAttribute('data-ember-action')) {
            if (actionHandler(target, event) === false) {
              break;
            }
          }
          target = target.parentNode;
        } while (target instanceof Element);
      };
      rootElement.addEventListener(event, handleEvent);
      this.lazyEvents.delete(event);
    }
    destroy() {
      if (this._didSetup === false) {
        return;
      }
      var rootElement = this._sanitizedRootElement;
      if (!rootElement) {
        return;
      }
      for (var event in this._eventHandlers) {
        rootElement.removeEventListener(event, this._eventHandlers[event]);
      }
      rootElement.classList.remove(ROOT_ELEMENT_CLASS);
      return this._super(...arguments);
    }
    toString() {
      return '(EventDispatcher)';
    }
  }
  _exports.default = EventDispatcher;
});
define("@ember/-internals/views/lib/system/utils", ["exports", "@ember/-internals/owner", "@ember/-internals/utils", "@ember/debug"], function (_exports, _owner, _utils, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.addChildView = addChildView;
  _exports.clearElementView = clearElementView;
  _exports.clearViewElement = clearViewElement;
  _exports.collectChildViews = collectChildViews;
  _exports.constructStyleDeprecationMessage = constructStyleDeprecationMessage;
  _exports.contains = contains;
  _exports.elMatches = void 0;
  _exports.getChildViews = getChildViews;
  _exports.getElementView = getElementView;
  _exports.getRootViews = getRootViews;
  _exports.getViewBoundingClientRect = getViewBoundingClientRect;
  _exports.getViewBounds = getViewBounds;
  _exports.getViewClientRects = getViewClientRects;
  _exports.getViewElement = getViewElement;
  _exports.getViewId = getViewId;
  _exports.getViewRange = getViewRange;
  _exports.initChildViews = initChildViews;
  _exports.isSimpleClick = isSimpleClick;
  _exports.matches = matches;
  _exports.setElementView = setElementView;
  _exports.setViewElement = setViewElement;
  /**
  @module ember
  */
  function isSimpleClick(event) {
    if (!(event instanceof MouseEvent)) {
      return false;
    }
    var modifier = event.shiftKey || event.metaKey || event.altKey || event.ctrlKey;
    var secondaryClick = event.which > 1; // IE9 may return undefined
    return !modifier && !secondaryClick;
  }
  function constructStyleDeprecationMessage(affectedStyle) {
    return '' + 'Binding style attributes may introduce cross-site scripting vulnerabilities; ' + 'please ensure that values being bound are properly escaped. For more information, ' + 'including how to disable this warning, see ' + 'https://deprecations.emberjs.com/v1.x/#toc_binding-style-attributes. ' + 'Style affected: "' + affectedStyle + '"';
  }
  /**
    @private
    @method getRootViews
    @param {Object} owner
  */
  function getRootViews(owner) {
    var registry = owner.lookup('-view-registry:main');
    var rootViews = [];
    Object.keys(registry).forEach(id => {
      var view = registry[id];
      (true && !(view) && (0, _debug.assert)('expected view', view));
      if (view.parentView === null) {
        rootViews.push(view);
      }
    });
    return rootViews;
  }
  /**
    @private
    @method getViewId
    @param {Ember.View} view
   */
  function getViewId(view) {
    if (view.tagName !== '' && view.elementId) {
      return view.elementId;
    } else {
      return (0, _utils.guidFor)(view);
    }
  }
  var ELEMENT_VIEW = new WeakMap();
  var VIEW_ELEMENT = new WeakMap();
  function getElementView(element) {
    return ELEMENT_VIEW.get(element) || null;
  }
  /**
    @private
    @method getViewElement
    @param {Ember.View} view
   */
  function getViewElement(view) {
    return VIEW_ELEMENT.get(view) || null;
  }
  function setElementView(element, view) {
    ELEMENT_VIEW.set(element, view);
  }
  function setViewElement(view, element) {
    VIEW_ELEMENT.set(view, element);
  }
  // These are not needed for GC, but for correctness. We want to be able to
  // null-out these links while the objects are still live. Specifically, in
  // this case, we want to prevent access to the element (and vice verse) during
  // destruction.
  function clearElementView(element) {
    ELEMENT_VIEW.delete(element);
  }
  function clearViewElement(view) {
    VIEW_ELEMENT.delete(view);
  }
  var CHILD_VIEW_IDS = new WeakMap();
  /**
    @private
    @method getChildViews
    @param {Ember.View} view
  */
  function getChildViews(view) {
    var owner = (0, _owner.getOwner)(view);
    (true && !(owner) && (0, _debug.assert)('View is unexpectedly missing an owner', owner));
    var registry = owner.lookup('-view-registry:main');
    return collectChildViews(view, registry);
  }
  function initChildViews(view) {
    var childViews = new Set();
    CHILD_VIEW_IDS.set(view, childViews);
    return childViews;
  }
  function addChildView(parent, child) {
    var childViews = CHILD_VIEW_IDS.get(parent);
    if (childViews === undefined) {
      childViews = initChildViews(parent);
    }
    childViews.add(getViewId(child));
  }
  function collectChildViews(view, registry) {
    var views = [];
    var childViews = CHILD_VIEW_IDS.get(view);
    if (childViews !== undefined) {
      childViews.forEach(id => {
        var view = registry[id];
        if (view && !view.isDestroying && !view.isDestroyed) {
          views.push(view);
        }
      });
    }
    return views;
  }
  /**
    @private
    @method getViewBounds
    @param {Ember.View} view
  */
  function getViewBounds(view) {
    return view.renderer.getBounds(view);
  }
  /**
    @private
    @method getViewRange
    @param {Ember.View} view
  */
  function getViewRange(view) {
    var bounds = getViewBounds(view);
    var range = document.createRange();
    range.setStartBefore(bounds.firstNode);
    range.setEndAfter(bounds.lastNode);
    return range;
  }
  /**
    `getViewClientRects` provides information about the position of the border
    box edges of a view relative to the viewport.
  
    It is only intended to be used by development tools like the Ember Inspector
    and may not work on older browsers.
  
    @private
    @method getViewClientRects
    @param {Ember.View} view
  */
  function getViewClientRects(view) {
    var range = getViewRange(view);
    return range.getClientRects();
  }
  /**
    `getViewBoundingClientRect` provides information about the position of the
    bounding border box edges of a view relative to the viewport.
  
    It is only intended to be used by development tools like the Ember Inspector
    and may not work on older browsers.
  
    @private
    @method getViewBoundingClientRect
    @param {Ember.View} view
  */
  function getViewBoundingClientRect(view) {
    var range = getViewRange(view);
    return range.getBoundingClientRect();
  }
  /**
    Determines if the element matches the specified selector.
  
    @private
    @method matches
    @param {DOMElement} el
    @param {String} selector
  */
  var elMatches = _exports.elMatches = typeof Element !== 'undefined' ? Element.prototype.matches : undefined;
  function matches(el, selector) {
    (true && !(elMatches !== undefined) && (0, _debug.assert)('cannot call `matches` in fastboot mode', elMatches !== undefined));
    return elMatches.call(el, selector);
  }
  function contains(a, b) {
    if (a.contains !== undefined) {
      return a.contains(b);
    }
    var current = b.parentNode;
    while (current && (current = current.parentNode)) {
      if (current === a) {
        return true;
      }
    }
    return false;
  }
});
define("@ember/-internals/views/lib/views/core_view", ["exports", "@ember/-internals/metal", "@ember/-internals/runtime", "@ember/object/evented", "@ember/object/-internals", "@ember/-internals/views/lib/views/states"], function (_exports, _metal, _runtime, _evented, _internals, _states) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  class CoreView extends _internals.FrameworkObject.extend(_evented.default, _runtime.ActionHandler) {
    constructor() {
      super(...arguments);
      this.isView = true;
    }
    init(properties) {
      var _a;
      super.init(properties);
      // Handle methods from Evented
      // The native class inheritance will not work for mixins. To work around this,
      // we copy the existing trigger and has methods provided by the mixin and swap in the
      // new ones from our class.
      this._superTrigger = this.trigger;
      this.trigger = this._trigger;
      this._superHas = this.has;
      this.has = this._has;
      (_a = this.parentView) !== null && _a !== void 0 ? _a : this.parentView = null;
      this._state = 'preRender';
      this._currentState = this._states.preRender;
    }
    instrumentDetails(hash) {
      hash['object'] = this.toString();
      hash['containerKey'] = this._debugContainerKey;
      hash['view'] = this;
      return hash;
    }
    /**
      Override the default event firing from `Evented` to
      also call methods with the given name.
         @method trigger
      @param name {String}
      @private
    */
    // Changed to `trigger` on init
    _trigger(name, ...args) {
      this._superTrigger(name, ...args);
      var method = this[name];
      if (typeof method === 'function') {
        return method.apply(this, args);
      }
    }
    // Changed to `has` on init
    _has(name) {
      return typeof this[name] === 'function' || this._superHas(name);
    }
  }
  CoreView.isViewFactory = true;
  __decorate([(0, _metal.inject)('renderer', '-dom')], CoreView.prototype, "renderer", void 0);
  // Declare on the prototype to have a single shared value.
  CoreView.prototype._states = _states.default;
  var _default = _exports.default = CoreView;
});
define("@ember/-internals/views/lib/views/states", ["exports", "@ember/-internals/utils", "@ember/debug", "@ember/instrumentation", "@ember/runloop"], function (_exports, _utils, _debug, _instrumentation, _runloop) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var DEFAULT = Object.freeze({
    // appendChild is only legal while rendering the buffer.
    appendChild() {
      throw new Error("You can't use appendChild outside of the rendering process");
    },
    // Handle events from `Ember.EventDispatcher`
    handleEvent() {
      return true; // continue event propagation
    },
    rerender() {},
    destroy() {}
  });
  var PRE_RENDER = Object.freeze(Object.assign({}, DEFAULT));
  var HAS_ELEMENT = Object.freeze(Object.assign(Object.assign({}, DEFAULT), {
    rerender(view) {
      view.renderer.rerender();
    },
    destroy(view) {
      view.renderer.remove(view);
    },
    // Handle events from `Ember.EventDispatcher`
    handleEvent(view, eventName, event) {
      if (view.has(eventName)) {
        // Handler should be able to re-dispatch events, so we don't
        // preventDefault or stopPropagation.
        return (0, _instrumentation.flaggedInstrument)(`interaction.${eventName}`, {
          event,
          view
        }, () => {
          return (0, _runloop.join)(view, view.trigger, eventName, event);
        });
      } else {
        return true; // continue event propagation
      }
    }
  }));
  var IN_DOM = Object.freeze(Object.assign(Object.assign({}, HAS_ELEMENT), {
    enter(view) {
      // Register the view for event handling. This hash is used by
      // Ember.EventDispatcher to dispatch incoming events.
      view.renderer.register(view);
      if (true /* DEBUG */) {
        var elementId = view.elementId;
        (true && !(_utils.teardownMandatorySetter) && (0, _debug.assert)('[BUG] Expected teardownMandatorySetter to be set in DEBUG mode', teardownMandatorySetter));
        (0, _utils.teardownMandatorySetter)(view, 'elementId');
        Object.defineProperty(view, 'elementId', {
          configurable: true,
          enumerable: true,
          get() {
            return elementId;
          },
          set(value) {
            if (value !== elementId) {
              throw new Error("Changing a view's elementId after creation is not allowed");
            }
          }
        });
      }
    }
  }));
  var DESTROYING = Object.freeze(Object.assign(Object.assign({}, DEFAULT), {
    appendChild() {
      throw new Error("You can't call appendChild on a view being destroyed");
    },
    rerender() {
      throw new Error("You can't call rerender on a view being destroyed");
    }
  }));
  /*
    Describe how the specified actions should behave in the various
    states that a view can exist in. Possible states:
  
    * preRender: when a view is first instantiated, and after its
      element was destroyed, it is in the preRender state
    * hasElement: the DOM representation of the view is created,
      and is ready to be inserted
    * inDOM: once a view has been inserted into the DOM it is in
      the inDOM state. A view spends the vast majority of its
      existence in this state.
    * destroyed: once a view has been destroyed (using the destroy
      method), it is in this state. No further actions can be invoked
      on a destroyed view.
  */
  var states = Object.freeze({
    preRender: PRE_RENDER,
    inDOM: IN_DOM,
    hasElement: HAS_ELEMENT,
    destroying: DESTROYING
  });
  var _default = _exports.default = states;
});
define("@ember/application/index", ["exports", "@ember/owner", "@ember/-internals/utils", "@ember/-internals/environment", "@ember/-internals/browser-environment", "@ember/debug", "@ember/runloop", "@ember/-internals/metal", "@ember/application/lib/lazy_load", "@ember/-internals/runtime", "@ember/-internals/views", "@ember/routing/route", "@ember/routing/router", "@ember/routing/auto-location", "@ember/routing/hash-location", "@ember/routing/history-location", "@ember/routing/none-location", "@ember/routing/-internals", "@ember/application/instance", "@ember/engine", "@ember/-internals/container", "@ember/-internals/glimmer", "@ember/routing/router-service"], function (_exports, _owner, _utils, _environment, _browserEnvironment, _debug, _runloop, _metal, _lazy_load, _runtime, _views, _route, _router, _autoLocation, _hashLocation, _historyLocation, _noneLocation, _internals, _instance, _engine, _container, _glimmer, _routerService) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "_loaded", {
    enumerable: true,
    get: function () {
      return _lazy_load._loaded;
    }
  });
  _exports.getOwner = _exports.default = void 0;
  Object.defineProperty(_exports, "onLoad", {
    enumerable: true,
    get: function () {
      return _lazy_load.onLoad;
    }
  });
  Object.defineProperty(_exports, "runLoadHooks", {
    enumerable: true,
    get: function () {
      return _lazy_load.runLoadHooks;
    }
  });
  _exports.setOwner = void 0;
  /**
  @module @ember/application
  */

  /**
   * @deprecated Use `import { getOwner } from '@ember/owner';` instead.
   */
  var getOwner = _exports.getOwner = _owner.getOwner;
  /**
   * @deprecated Use `import { setOwner } from '@ember/owner';` instead.
   */
  var setOwner = _exports.setOwner = _owner.setOwner;
  /**
    An instance of `Application` is the starting point for every Ember
    application. It instantiates, initializes and coordinates the
    objects that make up your app.
  
    Each Ember app has one and only one `Application` object. Although
    Ember CLI creates this object implicitly, the `Application` class
    is defined in the `app/app.js`. You can define a `ready` method on the
    `Application` class, which will be run by Ember when the application is
    initialized.
  
    ```app/app.js
    export default class App extends Application {
      ready() {
        // your code here
      }
    }
    ```
  
    Because `Application` ultimately inherits from `Ember.Namespace`, any classes
    you create will have useful string representations when calling `toString()`.
    See the `Ember.Namespace` documentation for more information.
  
    While you can think of your `Application` as a container that holds the
    other classes in your application, there are several other responsibilities
    going on under-the-hood that you may want to understand. It is also important
    to understand that an `Application` is different from an `ApplicationInstance`.
    Refer to the Guides to understand the difference between these.
  
    ### Event Delegation
  
    Ember uses a technique called _event delegation_. This allows the framework
    to set up a global, shared event listener instead of requiring each view to
    do it manually. For example, instead of each view registering its own
    `mousedown` listener on its associated element, Ember sets up a `mousedown`
    listener on the `body`.
  
    If a `mousedown` event occurs, Ember will look at the target of the event and
    start walking up the DOM node tree, finding corresponding views and invoking
    their `mouseDown` method as it goes.
  
    `Application` has a number of default events that it listens for, as
    well as a mapping from lowercase events to camel-cased view method names. For
    example, the `keypress` event causes the `keyPress` method on the view to be
    called, the `dblclick` event causes `doubleClick` to be called, and so on.
  
    If there is a bubbling browser event that Ember does not listen for by
    default, you can specify custom events and their corresponding view method
    names by setting the application's `customEvents` property:
  
    ```app/app.js
    import Application from '@ember/application';
  
    export default class App extends Application {
      customEvents = {
        // add support for the paste event
        paste: 'paste'
      }
    }
    ```
  
    To prevent Ember from setting up a listener for a default event,
    specify the event name with a `null` value in the `customEvents`
    property:
  
    ```app/app.js
    import Application from '@ember/application';
  
    export default class App extends Application {
      customEvents = {
        // prevent listeners for mouseenter/mouseleave events
        mouseenter: null,
        mouseleave: null
      }
    }
    ```
  
    By default, the application sets up these event listeners on the document
    body. However, in cases where you are embedding an Ember application inside
    an existing page, you may want it to set up the listeners on an element
    inside the body.
  
    For example, if only events inside a DOM element with the ID of `ember-app`
    should be delegated, set your application's `rootElement` property:
  
    ```app/app.js
    import Application from '@ember/application';
  
    export default class App extends Application {
      rootElement = '#ember-app'
    }
    ```
  
    The `rootElement` can be either a DOM element or a CSS selector
    string. Note that *views appended to the DOM outside the root element will
    not receive events.* If you specify a custom root element, make sure you only
    append views inside it!
  
    To learn more about the events Ember components use, see
  
    [components/handling-events](https://guides.emberjs.com/release/components/handling-events/#toc_event-names).
  
    ### Initializers
  
    To add behavior to the Application's boot process, you can define initializers in
    the `app/initializers` directory, or with `ember generate initializer` using Ember CLI.
    These files should export a named `initialize` function which will receive the created `application`
    object as its first argument.
  
    ```javascript
    export function initialize(application) {
      // application.inject('route', 'foo', 'service:foo');
    }
    ```
  
    Application initializers can be used for a variety of reasons including:
  
    - setting up external libraries
    - injecting dependencies
    - setting up event listeners in embedded apps
    - deferring the boot process using the `deferReadiness` and `advanceReadiness` APIs.
  
    ### Routing
  
    In addition to creating your application's router, `Application` is
    also responsible for telling the router when to start routing. Transitions
    between routes can be logged with the `LOG_TRANSITIONS` flag, and more
    detailed intra-transition logging can be logged with
    the `LOG_TRANSITIONS_INTERNAL` flag:
  
    ```javascript
    import Application from '@ember/application';
  
    let App = Application.create({
      LOG_TRANSITIONS: true, // basic logging of successful transitions
      LOG_TRANSITIONS_INTERNAL: true // detailed logging of all routing steps
    });
    ```
  
    By default, the router will begin trying to translate the current URL into
    application state once the browser emits the `DOMContentReady` event. If you
    need to defer routing, you can call the application's `deferReadiness()`
    method. Once routing can begin, call the `advanceReadiness()` method.
  
    If there is any setup required before routing begins, you can implement a
    `ready()` method on your app that will be invoked immediately before routing
    begins.
  
    @class Application
    @extends Engine
    @public
  */
  class Application extends _engine.default {
    constructor() {
      super(...arguments);
      this._bootPromise = null;
      this._bootResolver = null;
    }
    /**
      This creates a registry with the default Ember naming conventions.
         It also configures the registry:
         * registered views are created every time they are looked up (they are
        not singletons)
      * registered templates are not factories; the registered value is
        returned directly.
      * the router receives the application as its `namespace` property
      * all controllers receive the router as their `target` and `controllers`
        properties
      * all controllers receive the application as their `namespace` property
      * the application view receives the application controller as its
        `controller` property
      * the application view receives the application template as its
        `defaultTemplate` property
         @method buildRegistry
      @static
      @param {Application} namespace the application for which to
        build the registry
      @return {Ember.Registry} the built registry
      @private
    */
    static buildRegistry(namespace) {
      var registry = super.buildRegistry(namespace);
      commonSetupRegistry(registry);
      (0, _glimmer.setupApplicationRegistry)(registry);
      return registry;
    }
    init(properties) {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      super.init(properties);
      (_a = this.rootElement) !== null && _a !== void 0 ? _a : this.rootElement = 'body';
      (_b = this._document) !== null && _b !== void 0 ? _b : this._document = null;
      (_c = this.eventDispatcher) !== null && _c !== void 0 ? _c : this.eventDispatcher = null;
      (_d = this.customEvents) !== null && _d !== void 0 ? _d : this.customEvents = null;
      (_e = this.autoboot) !== null && _e !== void 0 ? _e : this.autoboot = true;
      (_f = this._document) !== null && _f !== void 0 ? _f : this._document = _browserEnvironment.hasDOM ? window.document : null;
      (_g = this._globalsMode) !== null && _g !== void 0 ? _g : this._globalsMode = true;
      if (true /* DEBUG */) {
        if (_environment.ENV.LOG_VERSION) {
          // we only need to see this once per Application#init
          _environment.ENV.LOG_VERSION = false;
          (_h = _metal.libraries.logVersions) === null || _h === void 0 ? void 0 : _h.call(_metal.libraries);
        }
      }
      // Start off the number of deferrals at 1. This will be decremented by
      // the Application's own `boot` method.
      this._readinessDeferrals = 1;
      this._booted = false;
      this._applicationInstances = new Set();
      this.autoboot = this._globalsMode = Boolean(this.autoboot);
      if (this._globalsMode) {
        this._prepareForGlobalsMode();
      }
      if (this.autoboot) {
        this.waitForDOMReady();
      }
    }
    /**
      Create an ApplicationInstance for this application.
         @public
      @method buildInstance
      @return {ApplicationInstance} the application instance
    */
    buildInstance(options = {}) {
      (true && !(!this.isDestroyed) && (0, _debug.assert)('You cannot build new instances of this application since it has already been destroyed', !this.isDestroyed));
      (true && !(!this.isDestroying) && (0, _debug.assert)('You cannot build new instances of this application since it is being destroyed', !this.isDestroying));
      return _instance.default.create(Object.assign(Object.assign({}, options), {
        base: this,
        application: this
      }));
    }
    /**
      Start tracking an ApplicationInstance for this application.
      Used when the ApplicationInstance is created.
         @private
      @method _watchInstance
    */
    _watchInstance(instance) {
      this._applicationInstances.add(instance);
    }
    /**
      Stop tracking an ApplicationInstance for this application.
      Used when the ApplicationInstance is about to be destroyed.
         @private
      @method _unwatchInstance
    */
    _unwatchInstance(instance) {
      return this._applicationInstances.delete(instance);
    }
    /**
      Enable the legacy globals mode by allowing this application to act
      as a global namespace. See the docs on the `_globalsMode` property
      for details.
         Most of these features are already deprecated in 1.x, so we can
      stop using them internally and try to remove them.
         @private
      @method _prepareForGlobalsMode
    */
    _prepareForGlobalsMode() {
      // Create subclass of Router for this Application instance.
      // This is to ensure that someone reopening `App.Router` does not
      // tamper with the default `Router`.
      this.Router = (this.Router || _router.default).extend();
      this._buildDeprecatedInstance();
    }
    /*
      Build the deprecated instance for legacy globals mode support.
      Called when creating and resetting the application.
         This is orthogonal to autoboot: the deprecated instance needs to
      be created at Application construction (not boot) time to expose
      App.__container__. If autoboot sees that this instance exists,
      it will continue booting it to avoid doing unncessary work (as
      opposed to building a new instance at boot time), but they are
      otherwise unrelated.
         @private
      @method _buildDeprecatedInstance
    */
    _buildDeprecatedInstance() {
      // Build a default instance
      var instance = this.buildInstance();
      // Legacy support for App.__container__ and other global methods
      // on App that rely on a single, default instance.
      this.__deprecatedInstance__ = instance;
      this.__container__ = instance.__container__;
    }
    /**
      Automatically kick-off the boot process for the application once the
      DOM has become ready.
         The initialization itself is scheduled on the actions queue which
      ensures that code-loading finishes before booting.
         If you are asynchronously loading code, you should call `deferReadiness()`
      to defer booting, and then call `advanceReadiness()` once all of your code
      has finished loading.
         @private
      @method waitForDOMReady
    */
    waitForDOMReady() {
      var document = this._document;
      // SAFETY: Casting as Document should be safe since we're just reading a property.
      // If it's not actually a Document then it will evaluate false which is fine for our
      // purposes.
      if (document === null || document.readyState !== 'loading') {
        (0, _runloop.schedule)('actions', this, this.domReady);
      } else {
        // Ideally we'd just check `document instanceof Document` but currently some tests pass a fake document.
        (true && !(function (d) {
          return typeof d.removeEventListener === 'function';
        }(document)) && (0, _debug.assert)('[BUG] Called waitForDOMReady with an invalid document', function (d) {
          return typeof d.removeEventListener === 'function';
        }(document)));
        var callback = () => {
          document.removeEventListener('DOMContentLoaded', callback);
          (0, _runloop.run)(this, this.domReady);
        };
        document.addEventListener('DOMContentLoaded', callback);
      }
    }
    /**
      This is the autoboot flow:
         1. Boot the app by calling `this.boot()`
      2. Create an instance (or use the `__deprecatedInstance__` in globals mode)
      3. Boot the instance by calling `instance.boot()`
      4. Invoke the `App.ready()` callback
      5. Kick-off routing on the instance
         Ideally, this is all we would need to do:
         ```javascript
      _autoBoot() {
        this.boot().then(() => {
          let instance = (this._globalsMode) ? this.__deprecatedInstance__ : this.buildInstance();
          return instance.boot();
        }).then((instance) => {
          App.ready();
          instance.startRouting();
        });
      }
      ```
         Unfortunately, we cannot actually write this because we need to participate
      in the "synchronous" boot process. While the code above would work fine on
      the initial boot (i.e. DOM ready), when `App.reset()` is called, we need to
      boot a new instance synchronously (see the documentation on `_bootSync()`
      for details).
         Because of this restriction, the actual logic of this method is located
      inside `didBecomeReady()`.
         @private
      @method domReady
    */
    domReady() {
      if (this.isDestroying || this.isDestroyed) {
        return;
      }
      this._bootSync();
      // Continues to `didBecomeReady`
    }
    /**
      Use this to defer readiness until some condition is true.
         Example:
         ```javascript
      import Application from '@ember/application';
         let App = Application.create();
         App.deferReadiness();
         fetch('/auth-token')
      .then(response => response.json())
      .then(data => {
        App.token = data.token;
        App.advanceReadiness();
      });
      ```
         This allows you to perform asynchronous setup logic and defer
      booting your application until the setup has finished.
         However, if the setup requires a loading UI, it might be better
      to use the router for this purpose.
         @method deferReadiness
      @public
    */
    deferReadiness() {
      (true && !(this instanceof Application) && (0, _debug.assert)('You must call deferReadiness on an instance of Application', this instanceof Application));
      (true && !(!this.isDestroyed) && (0, _debug.assert)('You cannot defer readiness since application has already destroyed', !this.isDestroyed));
      (true && !(!this.isDestroying) && (0, _debug.assert)('You cannot defer readiness since the application is being destroyed', !this.isDestroying));
      (true && !(this._readinessDeferrals > 0) && (0, _debug.assert)('You cannot defer readiness since the `ready()` hook has already been called', this._readinessDeferrals > 0));
      this._readinessDeferrals++;
    }
    /**
      Call `advanceReadiness` after any asynchronous setup logic has completed.
      Each call to `deferReadiness` must be matched by a call to `advanceReadiness`
      or the application will never become ready and routing will not begin.
         @method advanceReadiness
      @see {Application#deferReadiness}
      @public
    */
    advanceReadiness() {
      (true && !(this instanceof Application) && (0, _debug.assert)('You must call advanceReadiness on an instance of Application', this instanceof Application));
      (true && !(!this.isDestroyed) && (0, _debug.assert)('You cannot advance readiness since application has already destroyed', !this.isDestroyed));
      (true && !(!this.isDestroying) && (0, _debug.assert)('You cannot advance readiness since the application is being destroyed', !this.isDestroying));
      (true && !(this._readinessDeferrals > 0) && (0, _debug.assert)('You cannot advance readiness since the `ready()` hook has already been called', this._readinessDeferrals > 0));
      this._readinessDeferrals--;
      if (this._readinessDeferrals === 0) {
        (0, _runloop.once)(this, this.didBecomeReady);
      }
    }
    /**
      Initialize the application and return a promise that resolves with the `Application`
      object when the boot process is complete.
         Run any application initializers and run the application load hook. These hooks may
      choose to defer readiness. For example, an authentication hook might want to defer
      readiness until the auth token has been retrieved.
         By default, this method is called automatically on "DOM ready"; however, if autoboot
      is disabled, this is automatically called when the first application instance is
      created via `visit`.
         @public
      @method boot
      @return {Promise<Application,Error>}
    */
    boot() {
      (true && !(!this.isDestroyed) && (0, _debug.assert)('You cannot boot this application since it has already been destroyed', !this.isDestroyed));
      (true && !(!this.isDestroying) && (0, _debug.assert)('You cannot boot this application since it is being destroyed', !this.isDestroying));
      if (this._bootPromise) {
        return this._bootPromise;
      }
      try {
        this._bootSync();
      } catch (_) {
        // Ignore the error: in the asynchronous boot path, the error is already reflected
        // in the promise rejection
      }
      (true && !(this._bootPromise) && (0, _debug.assert)('has boot promise', this._bootPromise));
      return this._bootPromise;
    }
    /**
      Unfortunately, a lot of existing code assumes the booting process is
      "synchronous". Specifically, a lot of tests assumes the last call to
      `app.advanceReadiness()` or `app.reset()` will result in the app being
      fully-booted when the current runloop completes.
         We would like new code (like the `visit` API) to stop making this assumption,
      so we created the asynchronous version above that returns a promise. But until
      we have migrated all the code, we would have to expose this method for use
      *internally* in places where we need to boot an app "synchronously".
         @private
    */
    _bootSync() {
      if (this._booted || this.isDestroying || this.isDestroyed) {
        return;
      }
      // Even though this returns synchronously, we still need to make sure the
      // boot promise exists for book-keeping purposes: if anything went wrong in
      // the boot process, we need to store the error as a rejection on the boot
      // promise so that a future caller of `boot()` can tell what failed.
      var defer = this._bootResolver = _runtime.RSVP.defer();
      this._bootPromise = defer.promise;
      try {
        this.runInitializers();
        (0, _lazy_load.runLoadHooks)('application', this);
        this.advanceReadiness();
        // Continues to `didBecomeReady`
      } catch (error) {
        // For the asynchronous boot path
        defer.reject(error);
        // For the synchronous boot path
        throw error;
      }
    }
    /**
      Reset the application. This is typically used only in tests. It cleans up
      the application in the following order:
         1. Deactivate existing routes
      2. Destroy all objects in the container
      3. Create a new application container
      4. Re-route to the existing url
         Typical Example:
         ```javascript
      import Application from '@ember/application';
      let App;
         run(function() {
        App = Application.create();
      });
         module('acceptance test', {
        setup: function() {
          App.reset();
        }
      });
         test('first test', function() {
        // App is freshly reset
      });
         test('second test', function() {
        // App is again freshly reset
      });
      ```
         Advanced Example:
         Occasionally you may want to prevent the app from initializing during
      setup. This could enable extra configuration, or enable asserting prior
      to the app becoming ready.
         ```javascript
      import Application from '@ember/application';
      let App;
         run(function() {
        App = Application.create();
      });
         module('acceptance test', {
        setup: function() {
          run(function() {
            App.reset();
            App.deferReadiness();
          });
        }
      });
         test('first test', function() {
        ok(true, 'something before app is initialized');
           run(function() {
          App.advanceReadiness();
        });
           ok(true, 'something after app is initialized');
      });
      ```
         @method reset
      @public
    */
    reset() {
      (true && !(!this.isDestroyed) && (0, _debug.assert)('You cannot reset this application since it has already been destroyed', !this.isDestroyed));
      (true && !(!this.isDestroying) && (0, _debug.assert)('You cannot reset this application since it is being destroyed', !this.isDestroying));
      (true && !(this._globalsMode && this.autoboot) && (0, _debug.assert)(`Calling reset() on instances of \`Application\` is not
            supported when globals mode is disabled; call \`visit()\` to
            create new \`ApplicationInstance\`s and dispose them
            via their \`destroy()\` method instead.`, this._globalsMode && this.autoboot));
      var instance = this.__deprecatedInstance__;
      this._readinessDeferrals = 1;
      this._bootPromise = null;
      this._bootResolver = null;
      this._booted = false;
      function handleReset() {
        (true && !(instance) && (0, _debug.assert)('expected instance', instance));
        (0, _runloop.run)(instance, 'destroy');
        this._buildDeprecatedInstance();
        (0, _runloop.schedule)('actions', this, '_bootSync');
      }
      (0, _runloop.join)(this, handleReset);
    }
    /**
      @private
      @method didBecomeReady
    */
    didBecomeReady() {
      if (this.isDestroying || this.isDestroyed) {
        return;
      }
      (true && !(this._bootResolver) && (0, _debug.assert)('expected _bootResolver', this._bootResolver));
      try {
        // TODO: Is this still needed for _globalsMode = false?
        // See documentation on `_autoboot()` for details
        if (this.autoboot) {
          var instance;
          if (this._globalsMode) {
            // If we already have the __deprecatedInstance__ lying around, boot it to
            // avoid unnecessary work
            instance = this.__deprecatedInstance__;
            (true && !(instance) && (0, _debug.assert)('expected instance', instance));
          } else {
            // Otherwise, build an instance and boot it. This is currently unreachable,
            // because we forced _globalsMode to === autoboot; but having this branch
            // allows us to locally toggle that flag for weeding out legacy globals mode
            // dependencies independently
            instance = this.buildInstance();
          }
          instance._bootSync();
          // TODO: App.ready() is not called when autoboot is disabled, is this correct?
          this.ready();
          instance.startRouting();
        }
        // For the asynchronous boot path
        this._bootResolver.resolve(this);
        // For the synchronous boot path
        this._booted = true;
      } catch (error) {
        // For the asynchronous boot path
        this._bootResolver.reject(error);
        // For the synchronous boot path
        throw error;
      }
    }
    /**
      Called when the Application has become ready, immediately before routing
      begins. The call will be delayed until the DOM has become ready.
         @event ready
      @public
    */
    ready() {
      return this;
    }
    // This method must be moved to the application instance object
    willDestroy() {
      super.willDestroy();
      if (_lazy_load._loaded['application'] === this) {
        _lazy_load._loaded['application'] = undefined;
      }
      if (this._applicationInstances.size) {
        this._applicationInstances.forEach(i => i.destroy());
        this._applicationInstances.clear();
      }
    }
    /**
      Boot a new instance of `ApplicationInstance` for the current
      application and navigate it to the given `url`. Returns a `Promise` that
      resolves with the instance when the initial routing and rendering is
      complete, or rejects with any error that occurred during the boot process.
         When `autoboot` is disabled, calling `visit` would first cause the
      application to boot, which runs the application initializers.
         This method also takes a hash of boot-time configuration options for
      customizing the instance's behavior. See the documentation on
      `ApplicationInstance.BootOptions` for details.
         `ApplicationInstance.BootOptions` is an interface class that exists
      purely to document the available options; you do not need to construct it
      manually. Simply pass a regular JavaScript object containing of the
      desired options:
         ```javascript
      MyApp.visit("/", { location: "none", rootElement: "#container" });
      ```
         ### Supported Scenarios
         While the `BootOptions` class exposes a large number of knobs, not all
      combinations of them are valid; certain incompatible combinations might
      result in unexpected behavior.
         For example, booting the instance in the full browser environment
      while specifying a foreign `document` object (e.g. `{ isBrowser: true,
      document: iframe.contentDocument }`) does not work correctly today,
      largely due to Ember's jQuery dependency.
         Currently, there are three officially supported scenarios/configurations.
      Usages outside of these scenarios are not guaranteed to work, but please
      feel free to file bug reports documenting your experience and any issues
      you encountered to help expand support.
         #### Browser Applications (Manual Boot)
         The setup is largely similar to how Ember works out-of-the-box. Normally,
      Ember will boot a default instance for your Application on "DOM ready".
      However, you can customize this behavior by disabling `autoboot`.
         For example, this allows you to render a miniture demo of your application
      into a specific area on your marketing website:
         ```javascript
      import MyApp from 'my-app';
         $(function() {
        let App = MyApp.create({ autoboot: false });
           let options = {
          // Override the router's location adapter to prevent it from updating
          // the URL in the address bar
          location: 'none',
             // Override the default `rootElement` on the app to render into a
          // specific `div` on the page
          rootElement: '#demo'
        };
           // Start the app at the special demo URL
        App.visit('/demo', options);
      });
      ```
         Or perhaps you might want to boot two instances of your app on the same
      page for a split-screen multiplayer experience:
         ```javascript
      import MyApp from 'my-app';
         $(function() {
        let App = MyApp.create({ autoboot: false });
           let sessionId = MyApp.generateSessionID();
           let player1 = App.visit(`/matches/join?name=Player+1&session=${sessionId}`, { rootElement: '#left', location: 'none' });
        let player2 = App.visit(`/matches/join?name=Player+2&session=${sessionId}`, { rootElement: '#right', location: 'none' });
           Promise.all([player1, player2]).then(() => {
          // Both apps have completed the initial render
          $('#loading').fadeOut();
        });
      });
      ```
         Do note that each app instance maintains their own registry/container, so
      they will run in complete isolation by default.
         #### Server-Side Rendering (also known as FastBoot)
         This setup allows you to run your Ember app in a server environment using
      Node.js and render its content into static HTML for SEO purposes.
         ```javascript
      const HTMLSerializer = new SimpleDOM.HTMLSerializer(SimpleDOM.voidMap);
         function renderURL(url) {
        let dom = new SimpleDOM.Document();
        let rootElement = dom.body;
        let options = { isBrowser: false, document: dom, rootElement: rootElement };
           return MyApp.visit(options).then(instance => {
          try {
            return HTMLSerializer.serialize(rootElement.firstChild);
          } finally {
            instance.destroy();
          }
        });
      }
      ```
         In this scenario, because Ember does not have access to a global `document`
      object in the Node.js environment, you must provide one explicitly. In practice,
      in the non-browser environment, the stand-in `document` object only needs to
      implement a limited subset of the full DOM API. The `SimpleDOM` library is known
      to work.
         Since there is no DOM access in the non-browser environment, you must also
      specify a DOM `Element` object in the same `document` for the `rootElement` option
      (as opposed to a selector string like `"body"`).
         See the documentation on the `isBrowser`, `document` and `rootElement` properties
      on `ApplicationInstance.BootOptions` for details.
         #### Server-Side Resource Discovery
         This setup allows you to run the routing layer of your Ember app in a server
      environment using Node.js and completely disable rendering. This allows you
      to simulate and discover the resources (i.e. AJAX requests) needed to fulfill
      a given request and eagerly "push" these resources to the client.
         ```app/initializers/network-service.js
      import BrowserNetworkService from 'app/services/network/browser';
      import NodeNetworkService from 'app/services/network/node';
         // Inject a (hypothetical) service for abstracting all AJAX calls and use
      // the appropriate implementation on the client/server. This also allows the
      // server to log all the AJAX calls made during a particular request and use
      // that for resource-discovery purpose.
         export function initialize(application) {
        if (window) { // browser
          application.register('service:network', BrowserNetworkService);
        } else { // node
          application.register('service:network', NodeNetworkService);
        }
      };
         export default {
        name: 'network-service',
        initialize: initialize
      };
      ```
         ```app/routes/post.js
      import Route from '@ember/routing/route';
      import { service } from '@ember/service';
         // An example of how the (hypothetical) service is used in routes.
         export default class IndexRoute extends Route {
        @service network;
           model(params) {
          return this.network.fetch(`/api/posts/${params.post_id}.json`);
        }
           afterModel(post) {
          if (post.isExternalContent) {
            return this.network.fetch(`/api/external/?url=${post.externalURL}`);
          } else {
            return post;
          }
        }
      }
      ```
         ```javascript
      // Finally, put all the pieces together
         function discoverResourcesFor(url) {
        return MyApp.visit(url, { isBrowser: false, shouldRender: false }).then(instance => {
          let networkService = instance.lookup('service:network');
          return networkService.requests; // => { "/api/posts/123.json": "..." }
        });
      }
      ```
         @public
      @method visit
      @param url {String} The initial URL to navigate to
      @param options {ApplicationInstance.BootOptions}
      @return {Promise<ApplicationInstance, Error>}
    */
    visit(url, options) {
      (true && !(!this.isDestroyed) && (0, _debug.assert)('You cannot visit this application since it has already been destroyed', !this.isDestroyed));
      (true && !(!this.isDestroying) && (0, _debug.assert)('You cannot visit this application since it is being destroyed', !this.isDestroying));
      return this.boot().then(() => {
        var instance = this.buildInstance();
        return instance.boot(options).then(() => instance.visit(url)).catch(error => {
          (0, _runloop.run)(instance, 'destroy');
          throw error;
        });
      });
    }
  }
  _exports.default = Application;
  Application.initializer = (0, _engine.buildInitializerMethod)('initializers', 'initializer');
  Application.instanceInitializer = (0, _engine.buildInitializerMethod)('instanceInitializers', 'instance initializer');
  function commonSetupRegistry(registry) {
    registry.register('router:main', _router.default);
    registry.register('-view-registry:main', {
      create() {
        return (0, _utils.dictionary)(null);
      }
    });
    registry.register('route:basic', _route.default);
    registry.register('event_dispatcher:main', _views.EventDispatcher);
    registry.register('location:auto', _autoLocation.default);
    registry.register('location:hash', _hashLocation.default);
    registry.register('location:history', _historyLocation.default);
    registry.register('location:none', _noneLocation.default);
    registry.register((0, _container.privatize)`-bucket-cache:main`, {
      create() {
        return new _internals.BucketCache();
      }
    });
    registry.register('service:router', _routerService.default);
  }
});
define("@ember/application/instance", ["exports", "@ember/object", "@ember/-internals/browser-environment", "@ember/engine/instance", "@ember/-internals/glimmer", "@ember/debug", "@ember/routing/router", "@ember/-internals/views"], function (_exports, _object, environment, _instance, _glimmer, _debug, _router, _views) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/application
  */

  /**
    The `ApplicationInstance` encapsulates all of the stateful aspects of a
    running `Application`.
  
    At a high-level, we break application boot into two distinct phases:
  
    * Definition time, where all of the classes, templates, and other
      dependencies are loaded (typically in the browser).
    * Run time, where we begin executing the application once everything
      has loaded.
  
    Definition time can be expensive and only needs to happen once since it is
    an idempotent operation. For example, between test runs and FastBoot
    requests, the application stays the same. It is only the state that we want
    to reset.
  
    That state is what the `ApplicationInstance` manages: it is responsible for
    creating the container that contains all application state, and disposing of
    it once the particular test run or FastBoot request has finished.
  
    @public
    @class ApplicationInstance
    @extends EngineInstance
  */
  class ApplicationInstance extends _instance.default {
    constructor() {
      super(...arguments);
      /**
        The root DOM element of the Application as an element or a
        CSS selector.
               @private
        @property {String|DOMElement} rootElement
      */
      this.rootElement = null;
    }
    init(properties) {
      super.init(properties);
      this.application._watchInstance(this);
      // Register this instance in the per-instance registry.
      //
      // Why do we need to register the instance in the first place?
      // Because we need a good way for the root route (a.k.a ApplicationRoute)
      // to notify us when it has created the root-most view. That view is then
      // appended to the rootElement, in the case of apps, to the fixture harness
      // in tests, or rendered to a string in the case of FastBoot.
      this.register('-application-instance:main', this, {
        instantiate: false
      });
    }
    /**
      Overrides the base `EngineInstance._bootSync` method with concerns relevant
      to booting application (instead of engine) instances.
         This method should only contain synchronous boot concerns. Asynchronous
      boot concerns should eventually be moved to the `boot` method, which
      returns a promise.
         Until all boot code has been made asynchronous, we need to continue to
      expose this method for use *internally* in places where we need to boot an
      instance synchronously.
         @private
    */
    _bootSync(options) {
      if (this._booted) {
        return this;
      }
      options = new _BootOptions(options);
      this.setupRegistry(options);
      if (options.rootElement) {
        this.rootElement = options.rootElement;
      } else {
        this.rootElement = this.application.rootElement;
      }
      if (options.location) {
        (0, _object.set)(this.router, 'location', options.location);
      }
      this.application.runInstanceInitializers(this);
      if (options.isInteractive) {
        this.setupEventDispatcher();
      }
      this._booted = true;
      return this;
    }
    setupRegistry(options) {
      this.constructor.setupRegistry(this.__registry__, options);
    }
    get router() {
      if (!this._router) {
        var router = this.lookup('router:main');
        (true && !(router instanceof _router.default) && (0, _debug.assert)('expected an instance of Router', router instanceof _router.default));
        this._router = router;
      }
      return this._router;
    }
    /**
      This hook is called by the root-most Route (a.k.a. the ApplicationRoute)
      when it has finished creating the root View. By default, we simply take the
      view and append it to the `rootElement` specified on the Application.
         In cases like FastBoot and testing, we can override this hook and implement
      custom behavior, such as serializing to a string and sending over an HTTP
      socket rather than appending to DOM.
         @param view {Ember.View} the root-most view
      @deprecated
      @private
    */
    didCreateRootView(view) {
      view.appendTo(this.rootElement);
    }
    /**
      Tells the router to start routing. The router will ask the location for the
      current URL of the page to determine the initial URL to start routing to.
      To start the app at a specific URL, call `handleURL` instead.
         @private
    */
    startRouting() {
      this.router.startRouting();
    }
    /**
      Sets up the router, initializing the child router and configuring the
      location before routing begins.
         Because setup should only occur once, multiple calls to `setupRouter`
      beyond the first call have no effect.
         This is commonly used in order to confirm things that rely on the router
      are functioning properly from tests that are primarily rendering related.
         For example, from within [ember-qunit](https://github.com/emberjs/ember-qunit)'s
      `setupRenderingTest` calling `this.owner.setupRouter()` would allow that
      rendering test to confirm that any `<LinkTo></LinkTo>`'s that are rendered
      have the correct URL.
         @public
    */
    setupRouter() {
      this.router.setupRouter();
    }
    /**
      Directs the router to route to a particular URL. This is useful in tests,
      for example, to tell the app to start at a particular URL.
         @param url {String} the URL the router should route to
      @private
    */
    handleURL(url) {
      this.setupRouter();
      return this.router.handleURL(url);
    }
    /**
      @private
    */
    setupEventDispatcher() {
      var dispatcher = this.lookup('event_dispatcher:main');
      (true && !(dispatcher instanceof _views.EventDispatcher) && (0, _debug.assert)('expected EventDispatcher', dispatcher instanceof _views.EventDispatcher));
      var applicationCustomEvents = (0, _object.get)(this.application, 'customEvents');
      var instanceCustomEvents = (0, _object.get)(this, 'customEvents');
      var customEvents = Object.assign({}, applicationCustomEvents, instanceCustomEvents);
      (true && !(this.rootElement === null || typeof this.rootElement === 'string' || this.rootElement instanceof Element) && (0, _debug.assert)('[BUG] Tried to set up dispatcher with an invalid root element', this.rootElement === null || typeof this.rootElement === 'string' || this.rootElement instanceof Element));
      dispatcher.setup(customEvents, this.rootElement);
      return dispatcher;
    }
    /**
      Returns the current URL of the app instance. This is useful when your
      app does not update the browsers URL bar (i.e. it uses the `'none'`
      location adapter).
         @public
      @return {String} the current URL
    */
    getURL() {
      return this.router.url;
    }
    // `instance.visit(url)` should eventually replace `instance.handleURL()`;
    // the test helpers can probably be switched to use this implementation too
    /**
      Navigate the instance to a particular URL. This is useful in tests, for
      example, or to tell the app to start at a particular URL. This method
      returns a promise that resolves with the app instance when the transition
      is complete, or rejects if the transition was aborted due to an error.
         @public
      @param url {String} the destination URL
      @return {Promise<ApplicationInstance>}
    */
    visit(url) {
      this.setupRouter();
      var bootOptions = this.__container__.lookup('-environment:main');
      var router = this.router;
      var handleTransitionResolve = () => {
        if (!bootOptions.options.shouldRender) {
          // No rendering is needed, and routing has completed, simply return.
          return this;
        } else {
          // Ensure that the visit promise resolves when all rendering has completed
          return (0, _glimmer.renderSettled)().then(() => this);
        }
      };
      var handleTransitionReject = error => {
        if (error.error) {
          throw error.error;
        } else if (error.name === 'TransitionAborted' && router._routerMicrolib.activeTransition) {
          return router._routerMicrolib.activeTransition.then(handleTransitionResolve, handleTransitionReject);
        } else if (error.name === 'TransitionAborted') {
          throw new Error(error.message);
        } else {
          throw error;
        }
      };
      var location = (0, _object.get)(router, 'location');
      (true && !(typeof location !== 'string') && (0, _debug.assert)('location has been initialized', typeof location !== 'string')); // Keeps the location adapter's internal URL in-sync
      location.setURL(url);
      // getURL returns the set url with the rootURL stripped off
      return router.handleURL(location.getURL()).then(handleTransitionResolve, handleTransitionReject);
    }
    willDestroy() {
      super.willDestroy();
      this.application._unwatchInstance(this);
    }
    /**
     @private
     @method setupRegistry
     @param {Registry} registry
     @param {BootOptions} options
    */
    static setupRegistry(registry, options = {}) {
      var coptions = options instanceof _BootOptions ? options : new _BootOptions(options);
      registry.register('-environment:main', coptions.toEnvironment(), {
        instantiate: false
      });
      registry.register('service:-document', coptions.document, {
        instantiate: false
      });
      super.setupRegistry(registry, coptions);
    }
  }
  /**
    A list of boot-time configuration options for customizing the behavior of
    an `ApplicationInstance`.
  
    This is an interface class that exists purely to document the available
    options; you do not need to construct it manually. Simply pass a regular
    JavaScript object containing the desired options into methods that require
    one of these options object:
  
    ```javascript
    MyApp.visit("/", { location: "none", rootElement: "#container" });
    ```
  
    Not all combinations of the supported options are valid. See the documentation
    on `Application#visit` for the supported configurations.
  
    Internal, experimental or otherwise unstable flags are marked as private.
  
    @class BootOptions
    @namespace ApplicationInstance
    @public
  */
  class _BootOptions {
    constructor(options = {}) {
      /**
        If present, overrides the router's `location` property with this
        value. This is useful for environments where trying to modify the
        URL would be inappropriate.
               @property location
        @type string
        @default null
        @public
      */
      this.location = null;
      this.isInteractive = Boolean(environment.hasDOM); // This default is overridable below
      this._renderMode = options._renderMode;
      if (options.isBrowser !== undefined) {
        this.isBrowser = Boolean(options.isBrowser);
      } else {
        this.isBrowser = Boolean(environment.hasDOM);
      }
      if (!this.isBrowser) {
        this.isInteractive = false;
        this.location = 'none';
      }
      if (options.shouldRender !== undefined) {
        this.shouldRender = Boolean(options.shouldRender);
      } else {
        this.shouldRender = true;
      }
      if (!this.shouldRender) {
        this.isInteractive = false;
      }
      if (options.document) {
        this.document = options.document;
      } else {
        this.document = typeof document !== 'undefined' ? document : null;
      }
      if (options.rootElement) {
        this.rootElement = options.rootElement;
      }
      // Set these options last to give the user a chance to override the
      // defaults from the "combo" options like `isBrowser` (although in
      // practice, the resulting combination is probably invalid)
      if (options.location !== undefined) {
        this.location = options.location;
      }
      if (options.isInteractive !== undefined) {
        this.isInteractive = Boolean(options.isInteractive);
      }
    }
    toEnvironment() {
      // Do we really want to assign all of this!?
      return Object.assign(Object.assign({}, environment), {
        // For compatibility with existing code
        hasDOM: this.isBrowser,
        isInteractive: this.isInteractive,
        _renderMode: this._renderMode,
        options: this
      });
    }
  }
  var _default = _exports.default = ApplicationInstance;
});
define("@ember/application/lib/lazy_load", ["exports", "@ember/-internals/environment", "@ember/-internals/browser-environment"], function (_exports, _environment, _browserEnvironment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports._loaded = void 0;
  _exports.onLoad = onLoad;
  _exports.runLoadHooks = runLoadHooks;
  /*globals CustomEvent */

  /**
    @module @ember/application
  */
  var loadHooks = _environment.ENV.EMBER_LOAD_HOOKS || {};
  var loaded = {};
  var _loaded = _exports._loaded = loaded;
  /**
    Detects when a specific package of Ember (e.g. 'Application')
    has fully loaded and is available for extension.
  
    The provided `callback` will be called with the `name` passed
    resolved from a string into the object:
  
    ``` javascript
    import { onLoad } from '@ember/application';
  
    onLoad('Ember.Application' function(hbars) {
      hbars.registerHelper(...);
    });
    ```
  
    @method onLoad
    @static
    @for @ember/application
    @param name {String} name of hook
    @param callback {Function} callback to be called
    @private
  */
  function onLoad(name, callback) {
    var _a;
    var object = loaded[name];
    var hooks = (_a = loadHooks[name]) !== null && _a !== void 0 ? _a : loadHooks[name] = [];
    hooks.push(callback);
    if (object) {
      callback(object);
    }
  }
  /**
    Called when an Ember.js package (e.g Application) has finished
    loading. Triggers any callbacks registered for this event.
  
    @method runLoadHooks
    @static
    @for @ember/application
    @param name {String} name of hook
    @param object {Object} object to pass to callbacks
    @private
  */
  function runLoadHooks(name, object) {
    var _a;
    loaded[name] = object;
    if (_browserEnvironment.window && typeof CustomEvent === 'function') {
      var event = new CustomEvent(name, {
        detail: object
      });
      _browserEnvironment.window.dispatchEvent(event);
    }
    (_a = loadHooks[name]) === null || _a === void 0 ? void 0 : _a.forEach(callback => callback(object));
  }
});
define("@ember/application/namespace", ["exports", "@ember/-internals/metal", "@ember/object", "@ember/-internals/utils", "@ember/debug"], function (_exports, _metal, _object, _utils, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/application/namespace
  */
  // Preloaded into namespaces

  /**
    A Namespace is an object usually used to contain other objects or methods
    such as an application or framework. Create a namespace anytime you want
    to define one of these new containers.
  
    # Example Usage
  
    ```javascript
    MyFramework = Ember.Namespace.create({
      VERSION: '1.0.0'
    });
    ```
  
    @class Namespace
    @extends EmberObject
    @public
  */
  class Namespace extends _object.default {
    init(properties) {
      super.init(properties);
      (0, _metal.addNamespace)(this);
    }
    toString() {
      var existing_name = (0, _object.get)(this, 'name') || (0, _object.get)(this, 'modulePrefix');
      if (existing_name) {
        (true && !(typeof existing_name === 'string') && (0, _debug.assert)("name wasn't a string", typeof existing_name === 'string'));
        return existing_name;
      }
      (0, _metal.findNamespaces)();
      var name = (0, _utils.getName)(this);
      if (name === undefined) {
        name = (0, _utils.guidFor)(this);
        (0, _utils.setName)(this, name);
      }
      return name;
    }
    nameClasses() {
      (0, _metal.processNamespace)(this);
    }
    destroy() {
      (0, _metal.removeNamespace)(this);
      return super.destroy();
    }
  }
  Namespace.NAMESPACES = _metal.NAMESPACES;
  Namespace.NAMESPACES_BY_ID = _metal.NAMESPACES_BY_ID;
  Namespace.processAll = _metal.processAllNamespaces;
  Namespace.byName = _metal.findNamespace;
  // Declare on the prototype to have a single shared value.
  Namespace.prototype.isNamespace = true;
  var _default = _exports.default = Namespace;
});
define("@ember/array/-internals", ["exports", "@glimmer/util"], function (_exports, _util) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isEmberArray = isEmberArray;
  _exports.setEmberArray = setEmberArray;
  var EMBER_ARRAYS = new _util._WeakSet();
  function setEmberArray(obj) {
    EMBER_ARRAYS.add(obj);
  }
  function isEmberArray(obj) {
    return EMBER_ARRAYS.has(obj);
  }
});
define("@ember/array/index", ["exports", "@ember/-internals/metal", "@ember/object", "@ember/object/mixin", "@ember/debug", "@ember/enumerable", "@ember/enumerable/mutable", "@ember/utils", "@ember/-internals/environment", "@ember/object/observable", "@ember/array/-internals", "@ember/array/lib/make-array"], function (_exports, _metal, _object, _mixin, _debug, _enumerable, _mutable, _utils, _environment, _observable, _internals, _makeArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.NativeArray = _exports.MutableArray = _exports.A = void 0;
  _exports.isArray = isArray;
  Object.defineProperty(_exports, "makeArray", {
    enumerable: true,
    get: function () {
      return _makeArray.default;
    }
  });
  _exports.removeAt = removeAt;
  _exports.uniqBy = uniqBy;
  /**
  @module @ember/array
  */

  var EMPTY_ARRAY = Object.freeze([]);
  var identityFunction = item => item;
  function uniqBy(array, keyOrFunc = identityFunction) {
    (true && !(isArray(array)) && (0, _debug.assert)(`first argument passed to \`uniqBy\` should be array`, isArray(array)));
    var ret = A();
    var seen = new Set();
    var getter = typeof keyOrFunc === 'function' ? keyOrFunc : item => (0, _object.get)(item, keyOrFunc);
    array.forEach(item => {
      var val = getter(item);
      if (!seen.has(val)) {
        seen.add(val);
        ret.push(item);
      }
    });
    return ret;
  }
  function iter(...args) {
    var valueProvided = args.length === 2;
    var [key, value] = args;
    return valueProvided ? item => value === (0, _object.get)(item, key) : item => Boolean((0, _object.get)(item, key));
  }
  function findIndex(array, predicate, startAt) {
    var len = array.length;
    for (var index = startAt; index < len; index++) {
      // SAFETY: Because we're checking the index this value should always be set.
      var item = (0, _metal.objectAt)(array, index);
      if (predicate(item, index, array)) {
        return index;
      }
    }
    return -1;
  }
  function find(array, callback, target = null) {
    var predicate = callback.bind(target);
    var index = findIndex(array, predicate, 0);
    return index === -1 ? undefined : (0, _metal.objectAt)(array, index);
  }
  function any(array, callback, target = null) {
    var predicate = callback.bind(target);
    return findIndex(array, predicate, 0) !== -1;
  }
  function every(array, callback, target = null) {
    var cb = callback.bind(target);
    var predicate = (item, index, array) => !cb(item, index, array);
    return findIndex(array, predicate, 0) === -1;
  }
  function indexOf(array, val, startAt = 0, withNaNCheck) {
    var len = array.length;
    if (startAt < 0) {
      startAt += len;
    }
    // SameValueZero comparison (NaN !== NaN)
    var predicate = withNaNCheck && val !== val ? item => item !== item : item => item === val;
    return findIndex(array, predicate, startAt);
  }
  function removeAt(array, index, len) {
    (true && !(index > -1 && index < array.length) && (0, _debug.assert)(`\`removeAt\` index provided is out of range`, index > -1 && index < array.length));
    (0, _metal.replace)(array, index, len !== null && len !== void 0 ? len : 1, EMPTY_ARRAY);
    return array;
  }
  function insertAt(array, index, item) {
    (true && !(index > -1 && index <= array.length) && (0, _debug.assert)(`\`insertAt\` index provided is out of range`, index > -1 && index <= array.length));
    (0, _metal.replace)(array, index, 0, [item]);
    return item;
  }
  /**
    Returns true if the passed object is an array or Array-like.
  
    Objects are considered Array-like if any of the following are true:
  
      - the object is a native Array
      - the object has an objectAt property
      - the object is an Object, and has a length property
  
    Unlike `typeOf` this method returns true even if the passed object is
    not formally an array but appears to be array-like (i.e. implements `Array`)
  
    ```javascript
    import { isArray } from '@ember/array';
    import ArrayProxy from '@ember/array/proxy';
  
    isArray();                                      // false
    isArray([]);                                    // true
    isArray(ArrayProxy.create({ content: [] }));    // true
    ```
  
    @method isArray
    @static
    @for @ember/array
    @param {Object} obj The object to test
    @return {Boolean} true if the passed object is an array or Array-like
    @public
  */
  function isArray(obj) {
    if (true /* DEBUG */ && typeof obj === 'object' && obj !== null) {
      // SAFETY: Property read checks are safe if it's an object
      var possibleProxyContent = obj[_metal.PROXY_CONTENT];
      if (possibleProxyContent !== undefined) {
        obj = possibleProxyContent;
      }
    }
    // SAFETY: Property read checks are safe if it's an object
    if (!obj || obj.setInterval) {
      return false;
    }
    if (Array.isArray(obj) || EmberArray.detect(obj)) {
      return true;
    }
    var type = (0, _utils.typeOf)(obj);
    if ('array' === type) {
      return true;
    }
    // SAFETY: Property read checks are safe if it's an object
    var length = obj.length;
    if (typeof length === 'number' && length === length && 'object' === type) {
      return true;
    }
    return false;
  }
  /*
    This allows us to define computed properties that are not enumerable.
    The primary reason this is important is that when `NativeArray` is
    applied to `Array.prototype` we need to ensure that we do not add _any_
    new enumerable properties.
  */
  function nonEnumerableComputed(callback) {
    var property = (0, _metal.computed)(callback);
    property.enumerable = false;
    return property;
  }
  function mapBy(key) {
    return this.map(next => (0, _object.get)(next, key));
  }
  var EmberArray = _mixin.default.create(_enumerable.default, {
    init() {
      this._super(...arguments);
      (0, _internals.setEmberArray)(this);
    },
    objectsAt(indexes) {
      return indexes.map(idx => (0, _metal.objectAt)(this, idx));
    },
    '[]': nonEnumerableComputed({
      get() {
        return this;
      },
      set(_key, value) {
        this.replace(0, this.length, value);
        return this;
      }
    }),
    firstObject: nonEnumerableComputed(function () {
      return (0, _metal.objectAt)(this, 0);
    }).readOnly(),
    lastObject: nonEnumerableComputed(function () {
      return (0, _metal.objectAt)(this, this.length - 1);
    }).readOnly(),
    // Add any extra methods to EmberArray that are native to the built-in Array.
    slice(beginIndex = 0, endIndex) {
      var ret = A();
      var length = this.length;
      if (beginIndex < 0) {
        beginIndex = length + beginIndex;
      }
      var validatedEndIndex;
      if (endIndex === undefined || endIndex > length) {
        validatedEndIndex = length;
      } else if (endIndex < 0) {
        validatedEndIndex = length + endIndex;
      } else {
        validatedEndIndex = endIndex;
      }
      while (beginIndex < validatedEndIndex) {
        ret[ret.length] = (0, _metal.objectAt)(this, beginIndex++);
      }
      return ret;
    },
    indexOf(object, startAt) {
      return indexOf(this, object, startAt, false);
    },
    lastIndexOf(object, startAt) {
      var len = this.length;
      if (startAt === undefined || startAt >= len) {
        startAt = len - 1;
      }
      if (startAt < 0) {
        startAt += len;
      }
      for (var idx = startAt; idx >= 0; idx--) {
        if ((0, _metal.objectAt)(this, idx) === object) {
          return idx;
        }
      }
      return -1;
    },
    forEach(callback, target = null) {
      (true && !(typeof callback === 'function') && (0, _debug.assert)('`forEach` expects a function as first argument.', typeof callback === 'function'));
      var length = this.length;
      for (var index = 0; index < length; index++) {
        var item = this.objectAt(index);
        callback.call(target, item, index, this);
      }
      return this;
    },
    getEach: mapBy,
    setEach(key, value) {
      return this.forEach(item => (0, _object.set)(item, key, value));
    },
    map(callback, target = null) {
      (true && !(typeof callback === 'function') && (0, _debug.assert)('`map` expects a function as first argument.', typeof callback === 'function'));
      var ret = A();
      this.forEach((x, idx, i) => ret[idx] = callback.call(target, x, idx, i));
      return ret;
    },
    mapBy,
    filter(callback, target = null) {
      (true && !(typeof callback === 'function') && (0, _debug.assert)('`filter` expects a function as first argument.', typeof callback === 'function'));
      var ret = A();
      this.forEach((x, idx, i) => {
        if (callback.call(target, x, idx, i)) {
          ret.push(x);
        }
      });
      return ret;
    },
    reject(callback, target = null) {
      (true && !(typeof callback === 'function') && (0, _debug.assert)('`reject` expects a function as first argument.', typeof callback === 'function'));
      return this.filter(function () {
        // @ts-expect-error TS doesn't like us using arguments like this
        return !callback.apply(target, arguments);
      });
    },
    filterBy() {
      // @ts-expect-error TS doesn't like the ...arguments spread here.
      return this.filter(iter(...arguments));
    },
    rejectBy() {
      // @ts-expect-error TS doesn't like the ...arguments spread here.
      return this.reject(iter(...arguments));
    },
    find(callback, target = null) {
      (true && !(typeof callback === 'function') && (0, _debug.assert)('`find` expects a function as first argument.', typeof callback === 'function'));
      return find(this, callback, target);
    },
    findBy() {
      // @ts-expect-error TS doesn't like the ...arguments spread here.
      var callback = iter(...arguments);
      return find(this, callback);
    },
    every(callback, target = null) {
      (true && !(typeof callback === 'function') && (0, _debug.assert)('`every` expects a function as first argument.', typeof callback === 'function'));
      return every(this, callback, target);
    },
    isEvery() {
      // @ts-expect-error TS doesn't like the ...arguments spread here.
      var callback = iter(...arguments);
      return every(this, callback);
    },
    any(callback, target = null) {
      (true && !(typeof callback === 'function') && (0, _debug.assert)('`any` expects a function as first argument.', typeof callback === 'function'));
      return any(this, callback, target);
    },
    isAny() {
      // @ts-expect-error TS doesn't like us using arguments like this
      var callback = iter(...arguments);
      return any(this, callback);
    },
    // FIXME: When called without initialValue, behavior does not match native behavior
    reduce(callback, initialValue) {
      (true && !(typeof callback === 'function') && (0, _debug.assert)('`reduce` expects a function as first argument.', typeof callback === 'function'));
      var ret = initialValue;
      this.forEach(function (item, i) {
        ret = callback(ret, item, i, this);
      }, this);
      return ret;
    },
    invoke(methodName, ...args) {
      var ret = A();
      // SAFETY: This is not entirely safe and the code will not work with Ember proxies
      this.forEach(item => {
        var _a, _b;
        return ret.push((_b = (_a = item)[methodName]) === null || _b === void 0 ? void 0 : _b.call(_a, ...args));
      });
      return ret;
    },
    toArray() {
      return this.map(item => item);
    },
    compact() {
      return this.filter(value => value != null);
    },
    includes(object, startAt) {
      return indexOf(this, object, startAt, true) !== -1;
    },
    sortBy() {
      var sortKeys = arguments;
      return this.toArray().sort((a, b) => {
        for (var i = 0; i < sortKeys.length; i++) {
          var key = sortKeys[i];
          var propA = (0, _object.get)(a, key);
          var propB = (0, _object.get)(b, key);
          // return 1 or -1 else continue to the next sortKey
          var compareValue = (0, _utils.compare)(propA, propB);
          if (compareValue) {
            return compareValue;
          }
        }
        return 0;
      });
    },
    uniq() {
      return uniqBy(this);
    },
    uniqBy(key) {
      return uniqBy(this, key);
    },
    without(value) {
      if (!this.includes(value)) {
        return this; // nothing to do
      }
      // SameValueZero comparison (NaN !== NaN)
      var predicate = value === value ? item => item !== value : item => item === item;
      return this.filter(predicate);
    }
  });
  var MutableArray = _exports.MutableArray = _mixin.default.create(EmberArray, _mutable.default, {
    clear() {
      var len = this.length;
      if (len === 0) {
        return this;
      }
      this.replace(0, len, EMPTY_ARRAY);
      return this;
    },
    insertAt(idx, object) {
      insertAt(this, idx, object);
      return this;
    },
    removeAt(start, len) {
      return removeAt(this, start, len);
    },
    pushObject(obj) {
      return insertAt(this, this.length, obj);
    },
    pushObjects(objects) {
      this.replace(this.length, 0, objects);
      return this;
    },
    popObject() {
      var len = this.length;
      if (len === 0) {
        return null;
      }
      var ret = (0, _metal.objectAt)(this, len - 1);
      this.removeAt(len - 1, 1);
      return ret;
    },
    shiftObject() {
      if (this.length === 0) {
        return null;
      }
      var ret = (0, _metal.objectAt)(this, 0);
      this.removeAt(0);
      return ret;
    },
    unshiftObject(obj) {
      return insertAt(this, 0, obj);
    },
    unshiftObjects(objects) {
      this.replace(0, 0, objects);
      return this;
    },
    reverseObjects() {
      var len = this.length;
      if (len === 0) {
        return this;
      }
      var objects = this.toArray().reverse();
      this.replace(0, len, objects);
      return this;
    },
    setObjects(objects) {
      if (objects.length === 0) {
        return this.clear();
      }
      var len = this.length;
      this.replace(0, len, objects);
      return this;
    },
    removeObject(obj) {
      var loc = this.length || 0;
      while (--loc >= 0) {
        var curObject = (0, _metal.objectAt)(this, loc);
        if (curObject === obj) {
          this.removeAt(loc);
        }
      }
      return this;
    },
    removeObjects(objects) {
      (0, _metal.beginPropertyChanges)();
      for (var i = objects.length - 1; i >= 0; i--) {
        // SAFETY: Due to the loop structure we know this will always exist.
        this.removeObject(objects[i]);
      }
      (0, _metal.endPropertyChanges)();
      return this;
    },
    addObject(obj) {
      var included = this.includes(obj);
      if (!included) {
        this.pushObject(obj);
      }
      return this;
    },
    addObjects(objects) {
      (0, _metal.beginPropertyChanges)();
      objects.forEach(obj => this.addObject(obj));
      (0, _metal.endPropertyChanges)();
      return this;
    }
  });
  var NativeArray = _exports.NativeArray = _mixin.default.create(MutableArray, _observable.default, {
    objectAt(idx) {
      return this[idx];
    },
    // primitive for array support.
    replace(start, deleteCount, items = EMPTY_ARRAY) {
      (true && !(Array.isArray(items)) && (0, _debug.assert)('The third argument to replace needs to be an array.', Array.isArray(items)));
      (0, _metal.replaceInNativeArray)(this, start, deleteCount, items);
      return this;
    }
  });
  // Remove any methods implemented natively so we don't override them
  var ignore = ['length'];
  NativeArray.keys().forEach(methodName => {
    // SAFETY: It's safe to read unknown properties from an object
    if (Array.prototype[methodName]) {
      ignore.push(methodName);
    }
  });
  _exports.NativeArray = NativeArray = NativeArray.without(...ignore);
  var A;
  if (_environment.ENV.EXTEND_PROTOTYPES.Array) {
    NativeArray.apply(Array.prototype, true);
    _exports.A = A = function (arr) {
      (true && !(!(this instanceof A)) && (0, _debug.assert)('You cannot create an Ember Array with `new A()`, please update to calling A as a function: `A()`', !(this instanceof A))); // SAFTEY: Since we are extending prototypes all true native arrays are Ember NativeArrays
      return arr || [];
    };
  } else {
    _exports.A = A = function (arr) {
      (true && !(!(this instanceof A)) && (0, _debug.assert)('You cannot create an Ember Array with `new A()`, please update to calling A as a function: `A()`', !(this instanceof A)));
      if ((0, _internals.isEmberArray)(arr)) {
        // SAFETY: If it's a true native array and it is also an EmberArray then it should be an Ember NativeArray
        return arr;
      } else {
        // SAFETY: This will return an NativeArray but TS can't infer that.
        return NativeArray.apply(arr !== null && arr !== void 0 ? arr : []);
      }
    };
  }
  var _default = _exports.default = EmberArray;
});
define("@ember/array/lib/make-array", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var {
    isArray
  } = Array;
  function makeArray(obj) {
    if (obj === null || obj === undefined) {
      return [];
    }
    return isArray(obj) ? obj : [obj];
  }
  var _default = _exports.default = makeArray;
});
define("@ember/array/mutable", ["exports", "@ember/array"], function (_exports, _array) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _array.MutableArray;
    }
  });
});
define("@ember/array/proxy", ["exports", "@ember/-internals/metal", "@ember/object", "@ember/-internals/utils", "@ember/array", "@ember/array/mutable", "@ember/debug", "@glimmer/manager", "@glimmer/validator"], function (_exports, _metal, _object, _utils, _array, _mutable, _debug, _manager, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/array/proxy
  */

  function isMutable(obj) {
    return Array.isArray(obj) || typeof obj.replace === 'function';
  }
  var ARRAY_OBSERVER_MAPPING = {
    willChange: '_arrangedContentArrayWillChange',
    didChange: '_arrangedContentArrayDidChange'
  };
  function customTagForArrayProxy(proxy, key) {
    (true && !(proxy instanceof ArrayProxy) && (0, _debug.assert)('[BUG] Expected a proxy', proxy instanceof ArrayProxy));
    if (key === '[]') {
      proxy._revalidate();
      return proxy._arrTag;
    } else if (key === 'length') {
      proxy._revalidate();
      return proxy._lengthTag;
    }
    return (0, _validator.tagFor)(proxy, key);
  }
  class ArrayProxy extends _object.default {
    constructor() {
      super(...arguments);
      /*
        `this._objectsDirtyIndex` determines which indexes in the `this._objects`
        cache are dirty.
               If `this._objectsDirtyIndex === -1` then no indexes are dirty.
        Otherwise, an index `i` is dirty if `i >= this._objectsDirtyIndex`.
               Calling `objectAt` with a dirty index will cause the `this._objects`
        cache to be recomputed.
      */
      /** @internal */
      this._objectsDirtyIndex = 0;
      /** @internal */
      this._objects = null;
      /** @internal */
      this._lengthDirty = true;
      /** @internal */
      this._length = 0;
      /** @internal */
      this._arrangedContent = null;
      /** @internal */
      this._arrangedContentIsUpdating = false;
      /** @internal */
      this._arrangedContentTag = null;
      /** @internal */
      this._arrangedContentRevision = null;
      /** @internal */
      this._lengthTag = null;
      /** @internal */
      this._arrTag = null;
    }
    init(props) {
      super.init(props);
      (0, _manager.setCustomTagFor)(this, customTagForArrayProxy);
    }
    [_metal.PROPERTY_DID_CHANGE]() {
      this._revalidate();
    }
    willDestroy() {
      this._removeArrangedContentArrayObserver();
    }
    objectAtContent(idx) {
      var arrangedContent = (0, _object.get)(this, 'arrangedContent');
      (true && !(arrangedContent) && (0, _debug.assert)('[BUG] Called objectAtContent without content', arrangedContent));
      return (0, _metal.objectAt)(arrangedContent, idx);
    }
    // See additional docs for `replace` from `MutableArray`:
    // https://api.emberjs.com/ember/release/classes/MutableArray/methods/replace?anchor=replace
    replace(idx, amt, objects) {
      (true && !((0, _object.get)(this, 'arrangedContent') === (0, _object.get)(this, 'content')) && (0, _debug.assert)('Mutating an arranged ArrayProxy is not allowed', (0, _object.get)(this, 'arrangedContent') === (0, _object.get)(this, 'content')));
      this.replaceContent(idx, amt, objects);
    }
    replaceContent(idx, amt, objects) {
      var content = (0, _object.get)(this, 'content');
      (true && !(content) && (0, _debug.assert)('[BUG] Called replaceContent without content', content));
      (true && !(isMutable(content)) && (0, _debug.assert)('Mutating a non-mutable array is not allowed', isMutable(content)));
      (0, _metal.replace)(content, idx, amt, objects);
    }
    // Overriding objectAt is not supported.
    objectAt(idx) {
      this._revalidate();
      if (this._objects === null) {
        this._objects = [];
      }
      if (this._objectsDirtyIndex !== -1 && idx >= this._objectsDirtyIndex) {
        var arrangedContent = (0, _object.get)(this, 'arrangedContent');
        if (arrangedContent) {
          var length = this._objects.length = (0, _object.get)(arrangedContent, 'length');
          for (var i = this._objectsDirtyIndex; i < length; i++) {
            // SAFETY: This is expected to only ever return an instance of T. In other words, there should
            // be no gaps in the array. Unfortunately, we can't actually assert for it since T could include
            // any types, including null or undefined.
            this._objects[i] = this.objectAtContent(i);
          }
        } else {
          this._objects.length = 0;
        }
        this._objectsDirtyIndex = -1;
      }
      return this._objects[idx];
    }
    // Overriding length is not supported.
    get length() {
      this._revalidate();
      if (this._lengthDirty) {
        var arrangedContent = (0, _object.get)(this, 'arrangedContent');
        this._length = arrangedContent ? (0, _object.get)(arrangedContent, 'length') : 0;
        this._lengthDirty = false;
      }
      (true && !(this._lengthTag) && (0, _debug.assert)('[BUG] _lengthTag is not set', this._lengthTag));
      (0, _validator.consumeTag)(this._lengthTag);
      return this._length;
    }
    set length(value) {
      var length = this.length;
      var removedCount = length - value;
      var added;
      if (removedCount === 0) {
        return;
      } else if (removedCount < 0) {
        added = new Array(-removedCount);
        removedCount = 0;
      }
      var content = (0, _object.get)(this, 'content');
      if (content) {
        (true && !(isMutable(content)) && (0, _debug.assert)('Mutating a non-mutable array is not allowed', isMutable(content)));
        (0, _metal.replace)(content, value, removedCount, added);
        this._invalidate();
      }
    }
    _updateArrangedContentArray(arrangedContent) {
      var oldLength = this._objects === null ? 0 : this._objects.length;
      var newLength = arrangedContent ? (0, _object.get)(arrangedContent, 'length') : 0;
      this._removeArrangedContentArrayObserver();
      (0, _metal.arrayContentWillChange)(this, 0, oldLength, newLength);
      this._invalidate();
      (0, _metal.arrayContentDidChange)(this, 0, oldLength, newLength, false);
      this._addArrangedContentArrayObserver(arrangedContent);
    }
    _addArrangedContentArrayObserver(arrangedContent) {
      if (arrangedContent && !arrangedContent.isDestroyed) {
        // @ts-expect-error This check is still good for ensuring correctness
        (true && !(arrangedContent !== this) && (0, _debug.assert)("Can't set ArrayProxy's content to itself", arrangedContent !== this));
        (true && !(function (arr) {
          return Array.isArray(arr) || _array.default.detect(arr);
        }(arrangedContent)) && (0, _debug.assert)(`ArrayProxy expects a native Array, EmberArray, or ArrayProxy, but you passed ${typeof arrangedContent}`, function (arr) {
          return Array.isArray(arr) || _array.default.detect(arr);
        }(arrangedContent)));
        (true && !(!arrangedContent.isDestroyed) && (0, _debug.assert)('ArrayProxy expected its contents to not be destroyed', !arrangedContent.isDestroyed));
        (0, _metal.addArrayObserver)(arrangedContent, this, ARRAY_OBSERVER_MAPPING);
        this._arrangedContent = arrangedContent;
      }
    }
    _removeArrangedContentArrayObserver() {
      if (this._arrangedContent) {
        (0, _metal.removeArrayObserver)(this._arrangedContent, this, ARRAY_OBSERVER_MAPPING);
      }
    }
    _arrangedContentArrayWillChange() {}
    _arrangedContentArrayDidChange(_proxy, idx, removedCnt, addedCnt) {
      (0, _metal.arrayContentWillChange)(this, idx, removedCnt, addedCnt);
      var dirtyIndex = idx;
      if (dirtyIndex < 0) {
        var length = (0, _object.get)(this._arrangedContent, 'length');
        dirtyIndex += length + removedCnt - addedCnt;
      }
      if (this._objectsDirtyIndex === -1 || this._objectsDirtyIndex > dirtyIndex) {
        this._objectsDirtyIndex = dirtyIndex;
      }
      this._lengthDirty = true;
      (0, _metal.arrayContentDidChange)(this, idx, removedCnt, addedCnt, false);
    }
    _invalidate() {
      this._objectsDirtyIndex = 0;
      this._lengthDirty = true;
    }
    _revalidate() {
      if (this._arrangedContentIsUpdating === true) return;
      if (this._arrangedContentTag === null || !(0, _validator.validateTag)(this._arrangedContentTag, this._arrangedContentRevision)) {
        var arrangedContent = this.get('arrangedContent');
        if (this._arrangedContentTag === null) {
          // This is the first time the proxy has been setup, only add the observer
          // don't trigger any events
          this._addArrangedContentArrayObserver(arrangedContent);
        } else {
          this._arrangedContentIsUpdating = true;
          this._updateArrangedContentArray(arrangedContent);
          this._arrangedContentIsUpdating = false;
        }
        var arrangedContentTag = this._arrangedContentTag = (0, _validator.tagFor)(this, 'arrangedContent');
        this._arrangedContentRevision = (0, _validator.valueForTag)(this._arrangedContentTag);
        if ((0, _utils.isObject)(arrangedContent)) {
          this._lengthTag = (0, _validator.combine)([arrangedContentTag, (0, _metal.tagForProperty)(arrangedContent, 'length')]);
          this._arrTag = (0, _validator.combine)([arrangedContentTag, (0, _metal.tagForProperty)(arrangedContent, '[]')]);
        } else {
          this._lengthTag = this._arrTag = arrangedContentTag;
        }
      }
    }
  }
  ArrayProxy.reopen(_mutable.default, {
    arrangedContent: (0, _metal.alias)('content')
  });
  var _default = _exports.default = ArrayProxy;
});
define("@ember/canary-features/index", ["exports", "@ember/-internals/environment"], function (_exports, _environment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.FEATURES = _exports.DEFAULT_FEATURES = void 0;
  _exports.isEnabled = isEnabled;
  /**
    Set `EmberENV.FEATURES` in your application's `config/environment.js` file
    to enable canary features in your application.
  
    See the [feature flag guide](https://guides.emberjs.com/release/configuring-ember/feature-flags/)
    for more details.
  
    @module @ember/canary-features
    @public
  */
  var DEFAULT_FEATURES = _exports.DEFAULT_FEATURES = {
    // FLAG_NAME: true/false
  };
  /**
    The hash of enabled Canary features. Add to this, any canary features
    before creating your application.
  
    @class FEATURES
    @static
    @since 1.1.0
    @public
  */
  var FEATURES = _exports.FEATURES = Object.assign(DEFAULT_FEATURES, _environment.ENV.FEATURES);
  /**
    Determine whether the specified `feature` is enabled. Used by Ember's
    build tools to exclude experimental features from beta/stable builds.
  
    You can define the following configuration options:
  
    * `EmberENV.ENABLE_OPTIONAL_FEATURES` - enable any features that have not been explicitly
      enabled/disabled.
  
    @method isEnabled
    @param {String} feature The feature to check
    @return {Boolean}
    @since 1.1.0
    @public
  */
  function isEnabled(feature) {
    var value = FEATURES[feature];
    if (value === true || value === false) {
      return value;
    } else if (_environment.ENV.ENABLE_OPTIONAL_FEATURES) {
      return true;
    } else {
      return false;
    }
  }
  // Uncomment the below when features are present:
  // function featureValue(value: null | boolean) {
  //   if (ENV.ENABLE_OPTIONAL_FEATURES && value === null) {
  //     return true;
  //   }
  //   return value;
  // }
  // export const FLAG_NAME = featureValue(FEATURES.FLAG_NAME);
});
define("@ember/component/helper", ["exports", "@ember/-internals/glimmer"], function (_exports, _glimmer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _glimmer.Helper;
    }
  });
  Object.defineProperty(_exports, "helper", {
    enumerable: true,
    get: function () {
      return _glimmer.helper;
    }
  });
});
define("@ember/component/index", ["exports", "@glimmer/manager", "@ember/-internals/glimmer"], function (_exports, _manager, _glimmer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "Input", {
    enumerable: true,
    get: function () {
      return _glimmer.Input;
    }
  });
  Object.defineProperty(_exports, "Textarea", {
    enumerable: true,
    get: function () {
      return _glimmer.Textarea;
    }
  });
  Object.defineProperty(_exports, "capabilities", {
    enumerable: true,
    get: function () {
      return _glimmer.componentCapabilities;
    }
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _glimmer.Component;
    }
  });
  Object.defineProperty(_exports, "getComponentTemplate", {
    enumerable: true,
    get: function () {
      return _manager.getComponentTemplate;
    }
  });
  Object.defineProperty(_exports, "setComponentManager", {
    enumerable: true,
    get: function () {
      return _glimmer.setComponentManager;
    }
  });
  Object.defineProperty(_exports, "setComponentTemplate", {
    enumerable: true,
    get: function () {
      return _manager.setComponentTemplate;
    }
  });
});
define("@ember/component/template-only", ["exports", "@glimmer/runtime"], function (_exports, _runtime) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _runtime.templateOnlyComponent;
    }
  });
});
define("@ember/controller/index", ["exports", "@ember/-internals/owner", "@ember/object", "@ember/object/-internals", "@ember/-internals/metal", "@ember/object/mixin", "@ember/routing/-internals", "@ember/-internals/runtime", "@ember/-internals/utils"], function (_exports, _owner, _object, _internals, _metal, _mixin, _internals2, _runtime, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.ControllerMixin = void 0;
  _exports.inject = inject;
  // This is imported from -internals to avoid circularity

  var MODEL = (0, _utils.symbol)('MODEL');
  var ControllerMixin = _exports.ControllerMixin = _mixin.default.create(_runtime.ActionHandler, {
    /* ducktype as a controller */
    isController: true,
    concatenatedProperties: ['queryParams'],
    target: null,
    store: null,
    init() {
      this._super(...arguments);
      var owner = (0, _owner.getOwner)(this);
      if (owner) {
        this.namespace = owner.lookup('application:main');
        this.target = owner.lookup('router:main');
      }
    },
    model: (0, _object.computed)({
      get() {
        return this[MODEL];
      },
      set(_key, value) {
        return this[MODEL] = value;
      }
    }),
    queryParams: null,
    /**
     This property is updated to various different callback functions depending on
     the current "state" of the backing route. It is used by
     `Controller.prototype._qpChanged`.
        The methods backing each state can be found in the `Route.prototype._qp` computed
     property return value (the `.states` property). The current values are listed here for
     the sanity of future travelers:
        * `inactive` - This state is used when this controller instance is not part of the active
       route hierarchy. Set in `Route.prototype._reset` (a `router.js` microlib hook) and
       `Route.prototype.actions.finalizeQueryParamChange`.
     * `active` - This state is used when this controller instance is part of the active
       route hierarchy. Set in `Route.prototype.actions.finalizeQueryParamChange`.
     * `allowOverrides` - This state is used in `Route.prototype.setup` (`route.js` microlib hook).
         @method _qpDelegate
      @private
    */
    _qpDelegate: null,
    /**
     During `Route#setup` observers are created to invoke this method
     when any of the query params declared in `Controller#queryParams` property
     are changed.
        When invoked this method uses the currently active query param update delegate
     (see `Controller.prototype._qpDelegate` for details) and invokes it with
     the QP key/value being changed.
         @method _qpChanged
      @private
    */
    _qpChanged(controller, _prop) {
      var dotIndex = _prop.indexOf('.[]');
      var prop = dotIndex === -1 ? _prop : _prop.slice(0, dotIndex);
      var delegate = controller._qpDelegate;
      var value = (0, _object.get)(controller, prop);
      delegate(prop, value);
    },
    transitionToRoute(...args) {
      var _a;
      (0, _internals2.deprecateTransitionMethods)('controller', 'transitionToRoute');
      // target may be either another controller or a router
      var target = (0, _object.get)(this, 'target');
      // SAFETY: We can't actually assert that this is a full Controller or Router since some tests
      // mock out an object that only has the single method. Since this is deprecated, I think it's
      // ok to be a little less than proper here.
      var method = (_a = target.transitionToRoute) !== null && _a !== void 0 ? _a : target.transitionTo;
      return method.apply(target, (0, _internals2.prefixRouteNameArg)(this, args));
    },
    replaceRoute(...args) {
      var _a;
      (0, _internals2.deprecateTransitionMethods)('controller', 'replaceRoute');
      // target may be either another controller or a router
      var target = (0, _object.get)(this, 'target');
      // SAFETY: We can't actually assert that this is a full Controller or Router since some tests
      // mock out an object that only has the single method. Since this is deprecated, I think it's
      // ok to be a little less than proper here.
      var method = (_a = target.replaceRoute) !== null && _a !== void 0 ? _a : target.replaceWith;
      return method.apply(target, (0, _internals2.prefixRouteNameArg)(this, args));
    }
  });
  class Controller extends _internals.FrameworkObject.extend(ControllerMixin) {}
  _exports.default = Controller;
  function inject(...args) {
    return (0, _metal.inject)('controller', ...args);
  }
});
define("@ember/debug/container-debug-adapter", ["exports", "@ember/-internals/string", "@ember/object", "@ember/utils", "@ember/-internals/owner", "@ember/application/namespace"], function (_exports, _string, _object, _utils, _owner, _namespace) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/debug/container-debug-adapter
  */
  /**
    The `ContainerDebugAdapter` helps the container and resolver interface
    with tools that debug Ember such as the
    [Ember Inspector](https://github.com/emberjs/ember-inspector)
    for Chrome and Firefox.
  
    This class can be extended by a custom resolver implementer
    to override some of the methods with library-specific code.
  
    The methods likely to be overridden are:
  
    * `canCatalogEntriesByType`
    * `catalogEntriesByType`
  
    The adapter will need to be registered
    in the application's container as `container-debug-adapter:main`.
  
    Example:
  
    ```javascript
    Application.initializer({
      name: "containerDebugAdapter",
  
      initialize(application) {
        application.register('container-debug-adapter:main', require('app/container-debug-adapter'));
      }
    });
    ```
  
    @class ContainerDebugAdapter
    @extends EmberObject
    @since 1.5.0
    @public
  */
  class ContainerDebugAdapter extends _object.default {
    constructor(owner) {
      super(owner);
      this.resolver = (0, _owner.getOwner)(this).lookup('resolver-for-debugging:main');
    }
    /**
      Returns true if it is possible to catalog a list of available
      classes in the resolver for a given type.
         @method canCatalogEntriesByType
      @param {String} type The type. e.g. "model", "controller", "route".
      @return {boolean} whether a list is available for this type.
      @public
    */
    canCatalogEntriesByType(type) {
      if (type === 'model' || type === 'template') {
        return false;
      }
      return true;
    }
    /**
      Returns the available classes a given type.
         @method catalogEntriesByType
      @param {String} type The type. e.g. "model", "controller", "route".
      @return {Array} An array of strings.
      @public
    */
    catalogEntriesByType(type) {
      var namespaces = _namespace.default.NAMESPACES;
      var types = [];
      var typeSuffixRegex = new RegExp(`${(0, _string.classify)(type)}$`);
      namespaces.forEach(namespace => {
        for (var key in namespace) {
          if (!Object.prototype.hasOwnProperty.call(namespace, key)) {
            continue;
          }
          if (typeSuffixRegex.test(key)) {
            var klass = namespace[key];
            if ((0, _utils.typeOf)(klass) === 'class') {
              types.push((0, _string.dasherize)(key.replace(typeSuffixRegex, '')));
            }
          }
        }
      });
      return types;
    }
  }
  _exports.default = ContainerDebugAdapter;
});
define("@ember/debug/data-adapter", ["exports", "@ember/-internals/owner", "@ember/runloop", "@ember/object", "@ember/-internals/string", "@ember/application/namespace", "@ember/array", "@glimmer/validator", "@ember/debug"], function (_exports, _owner, _runloop, _object, _string, _namespace, _array, _validator, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function iterate(arr, fn) {
    if (Symbol.iterator in arr) {
      for (var item of arr) {
        fn(item);
      }
    } else {
      // SAFETY: this cast required to work this way to interop between TS 4.8
      // and 4.9. When we drop support for 4.8, it will narrow correctly via the
      // use of the `in` operator above. (Preferably we will solve this by just
      // switching to require `Symbol.iterator` instead.)
      (0, _debug.assert)('', typeof arr.forEach === 'function');
      arr.forEach(fn);
    }
  }
  class RecordsWatcher {
    getCacheForItem(record) {
      var recordCache = this.recordCaches.get(record);
      if (!recordCache) {
        var hasBeenAdded = false;
        recordCache = (0, _validator.createCache)(() => {
          if (!hasBeenAdded) {
            this.added.push(this.wrapRecord(record));
            hasBeenAdded = true;
          } else {
            this.updated.push(this.wrapRecord(record));
          }
        });
        this.recordCaches.set(record, recordCache);
      }
      return recordCache;
    }
    constructor(records, recordsAdded, recordsUpdated, recordsRemoved, wrapRecord, release) {
      this.wrapRecord = wrapRecord;
      this.release = release;
      this.recordCaches = new Map();
      this.added = [];
      this.updated = [];
      this.removed = [];
      this.recordArrayCache = (0, _validator.createCache)(() => {
        var seen = new Set();
        // Track `[]` for legacy support
        (0, _validator.consumeTag)((0, _validator.tagFor)(records, '[]'));
        iterate(records, record => {
          (0, _validator.getValue)(this.getCacheForItem(record));
          seen.add(record);
        });
        // Untrack this operation because these records are being removed, they
        // should not be polled again in the future
        (0, _validator.untrack)(() => {
          this.recordCaches.forEach((_cache, record) => {
            if (!seen.has(record)) {
              this.removed.push(wrapRecord(record));
              this.recordCaches.delete(record);
            }
          });
        });
        if (this.added.length > 0) {
          recordsAdded(this.added);
          this.added = [];
        }
        if (this.updated.length > 0) {
          recordsUpdated(this.updated);
          this.updated = [];
        }
        if (this.removed.length > 0) {
          recordsRemoved(this.removed);
          this.removed = [];
        }
      });
    }
    revalidate() {
      (0, _validator.getValue)(this.recordArrayCache);
    }
  }
  class TypeWatcher {
    constructor(records, onChange, release) {
      this.release = release;
      var hasBeenAccessed = false;
      this.cache = (0, _validator.createCache)(() => {
        // Empty iteration, we're doing this just
        // to track changes to the records array
        iterate(records, () => {});
        // Also track `[]` for legacy support
        (0, _validator.consumeTag)((0, _validator.tagFor)(records, '[]'));
        if (hasBeenAccessed === true) {
          (0, _runloop.next)(onChange);
        } else {
          hasBeenAccessed = true;
        }
      });
      this.release = release;
    }
    revalidate() {
      (0, _validator.getValue)(this.cache);
    }
  }
  /**
    The `DataAdapter` helps a data persistence library
    interface with tools that debug Ember such
    as the [Ember Inspector](https://github.com/emberjs/ember-inspector)
    for Chrome and Firefox.
  
    This class will be extended by a persistence library
    which will override some of the methods with
    library-specific code.
  
    The methods likely to be overridden are:
  
    * `getFilters`
    * `detect`
    * `columnsForType`
    * `getRecords`
    * `getRecordColumnValues`
    * `getRecordKeywords`
    * `getRecordFilterValues`
    * `getRecordColor`
  
    The adapter will need to be registered
    in the application's container as `dataAdapter:main`.
  
    Example:
  
    ```javascript
    Application.initializer({
      name: "data-adapter",
  
      initialize: function(application) {
        application.register('data-adapter:main', DS.DataAdapter);
      }
    });
    ```
  
    @class DataAdapter
    @extends EmberObject
    @public
  */
  class DataAdapter extends _object.default {
    constructor(owner) {
      super(owner);
      this.releaseMethods = (0, _array.A)();
      this.recordsWatchers = new Map();
      this.typeWatchers = new Map();
      this.flushWatchers = null;
      /**
        The container-debug-adapter which is used
        to list all models.
               @property containerDebugAdapter
        @default undefined
        @since 1.5.0
        @public
      **/
      /**
        The number of attributes to send
        as columns. (Enough to make the record
        identifiable).
               @private
        @property attributeLimit
        @default 3
        @since 1.3.0
      */
      this.attributeLimit = 3;
      /**
         Ember Data > v1.0.0-beta.18
         requires string model names to be passed
         around instead of the actual factories.
                This is a stamp for the Ember Inspector
         to differentiate between the versions
         to be able to support older versions too.
                @public
         @property acceptsModelName
       */
      this.acceptsModelName = true;
      this.containerDebugAdapter = (0, _owner.getOwner)(this).lookup('container-debug-adapter:main');
    }
    /**
       Map from records arrays to RecordsWatcher instances
          @private
       @property recordsWatchers
       @since 3.26.0
     */
    /**
      Map from records arrays to TypeWatcher instances
         @private
      @property typeWatchers
      @since 3.26.0
     */
    /**
      Callback that is currently scheduled on backburner end to flush and check
      all active watchers.
         @private
      @property flushWatchers
      @since 3.26.0
        */
    /**
      Stores all methods that clear observers.
      These methods will be called on destruction.
         @private
      @property releaseMethods
      @since 1.3.0
    */
    /**
      Specifies how records can be filtered.
      Records returned will need to have a `filterValues`
      property with a key for every name in the returned array.
         @public
      @method getFilters
      @return {Array} List of objects defining filters.
       The object should have a `name` and `desc` property.
    */
    getFilters() {
      return (0, _array.A)();
    }
    /**
      Fetch the model types and observe them for changes.
         @public
      @method watchModelTypes
         @param {Function} typesAdded Callback to call to add types.
      Takes an array of objects containing wrapped types (returned from `wrapModelType`).
         @param {Function} typesUpdated Callback to call when a type has changed.
      Takes an array of objects containing wrapped types.
         @return {Function} Method to call to remove all observers
    */
    watchModelTypes(typesAdded, typesUpdated) {
      var modelTypes = this.getModelTypes();
      var releaseMethods = (0, _array.A)();
      var typesToSend;
      typesToSend = modelTypes.map(type => {
        var klass = type.klass;
        var wrapped = this.wrapModelType(klass, type.name);
        releaseMethods.push(this.observeModelType(type.name, typesUpdated));
        return wrapped;
      });
      typesAdded(typesToSend);
      var release = () => {
        releaseMethods.forEach(fn => fn());
        this.releaseMethods.removeObject(release);
      };
      this.releaseMethods.pushObject(release);
      return release;
    }
    _nameToClass(type) {
      if (typeof type === 'string') {
        var owner = (0, _owner.getOwner)(this);
        var Factory = owner.factoryFor(`model:${type}`);
        type = Factory && Factory.class;
      }
      return type;
    }
    /**
      Fetch the records of a given type and observe them for changes.
         @public
      @method watchRecords
         @param {String} modelName The model name.
         @param {Function} recordsAdded Callback to call to add records.
      Takes an array of objects containing wrapped records.
      The object should have the following properties:
        columnValues: {Object} The key and value of a table cell.
        object: {Object} The actual record object.
         @param {Function} recordsUpdated Callback to call when a record has changed.
      Takes an array of objects containing wrapped records.
         @param {Function} recordsRemoved Callback to call when a record has removed.
      Takes an array of objects containing wrapped records.
         @return {Function} Method to call to remove all observers.
    */
    watchRecords(modelName, recordsAdded, recordsUpdated, recordsRemoved) {
      var klass = this._nameToClass(modelName);
      var records = this.getRecords(klass, modelName);
      var {
        recordsWatchers
      } = this;
      var recordsWatcher = recordsWatchers.get(records);
      if (!recordsWatcher) {
        recordsWatcher = new RecordsWatcher(records, recordsAdded, recordsUpdated, recordsRemoved, record => this.wrapRecord(record), () => {
          recordsWatchers.delete(records);
          this.updateFlushWatchers();
        });
        recordsWatchers.set(records, recordsWatcher);
        this.updateFlushWatchers();
        recordsWatcher.revalidate();
      }
      return recordsWatcher.release;
    }
    updateFlushWatchers() {
      if (this.flushWatchers === null) {
        if (this.typeWatchers.size > 0 || this.recordsWatchers.size > 0) {
          this.flushWatchers = () => {
            this.typeWatchers.forEach(watcher => watcher.revalidate());
            this.recordsWatchers.forEach(watcher => watcher.revalidate());
          };
          _runloop._backburner.on('end', this.flushWatchers);
        }
      } else if (this.typeWatchers.size === 0 && this.recordsWatchers.size === 0) {
        _runloop._backburner.off('end', this.flushWatchers);
        this.flushWatchers = null;
      }
    }
    /**
      Clear all observers before destruction
      @private
      @method willDestroy
    */
    willDestroy() {
      this._super(...arguments);
      this.typeWatchers.forEach(watcher => watcher.release());
      this.recordsWatchers.forEach(watcher => watcher.release());
      this.releaseMethods.forEach(fn => fn());
      if (this.flushWatchers) {
        _runloop._backburner.off('end', this.flushWatchers);
      }
    }
    /**
      Detect whether a class is a model.
         Test that against the model class
      of your persistence library.
         @public
      @method detect
      @return boolean Whether the class is a model class or not.
    */
    detect(_klass) {
      return false;
    }
    /**
      Get the columns for a given model type.
         @public
      @method columnsForType
      @return {Array} An array of columns of the following format:
       name: {String} The name of the column.
       desc: {String} Humanized description (what would show in a table column name).
    */
    columnsForType(_klass) {
      return (0, _array.A)();
    }
    /**
      Adds observers to a model type class.
         @private
      @method observeModelType
      @param {String} modelName The model type name.
      @param {Function} typesUpdated Called when a type is modified.
      @return {Function} The function to call to remove observers.
    */
    observeModelType(modelName, typesUpdated) {
      var klass = this._nameToClass(modelName);
      var records = this.getRecords(klass, modelName);
      var onChange = () => {
        typesUpdated([this.wrapModelType(klass, modelName)]);
      };
      var {
        typeWatchers
      } = this;
      var typeWatcher = typeWatchers.get(records);
      if (!typeWatcher) {
        typeWatcher = new TypeWatcher(records, onChange, () => {
          typeWatchers.delete(records);
          this.updateFlushWatchers();
        });
        typeWatchers.set(records, typeWatcher);
        this.updateFlushWatchers();
        typeWatcher.revalidate();
      }
      return typeWatcher.release;
    }
    /**
      Wraps a given model type and observes changes to it.
         @private
      @method wrapModelType
      @param {Class} klass A model class.
      @param {String} modelName Name of the class.
      @return {Object} The wrapped type has the following format:
        name: {String} The name of the type.
        count: {Integer} The number of records available.
        columns: {Columns} An array of columns to describe the record.
        object: {Class} The actual Model type class.
    */
    wrapModelType(klass, name) {
      var records = this.getRecords(klass, name);
      return {
        name,
        count: (0, _object.get)(records, 'length'),
        columns: this.columnsForType(klass),
        object: klass
      };
    }
    /**
      Fetches all models defined in the application.
         @private
      @method getModelTypes
      @return {Array} Array of model types.
    */
    getModelTypes() {
      var containerDebugAdapter = this.containerDebugAdapter;
      var stringTypes = containerDebugAdapter.canCatalogEntriesByType('model') ? containerDebugAdapter.catalogEntriesByType('model') : this._getObjectsOnNamespaces();
      // New adapters return strings instead of classes.
      var klassTypes = stringTypes.map(name => {
        return {
          klass: this._nameToClass(name),
          name
        };
      });
      return klassTypes.filter(type => this.detect(type.klass));
    }
    /**
      Loops over all namespaces and all objects
      attached to them.
         @private
      @method _getObjectsOnNamespaces
      @return {Array} Array of model type strings.
    */
    _getObjectsOnNamespaces() {
      var namespaces = _namespace.default.NAMESPACES;
      var types = [];
      namespaces.forEach(namespace => {
        for (var key in namespace) {
          if (!Object.prototype.hasOwnProperty.call(namespace, key)) {
            continue;
          }
          // Even though we will filter again in `getModelTypes`,
          // we should not call `lookupFactory` on non-models
          if (!this.detect(namespace[key])) {
            continue;
          }
          var name = (0, _string.dasherize)(key);
          types.push(name);
        }
      });
      return types;
    }
    /**
      Fetches all loaded records for a given type.
         @public
      @method getRecords
      @return {Array} An array of records.
       This array will be observed for changes,
       so it should update when new records are added/removed.
    */
    getRecords(_klass, _name) {
      return (0, _array.A)();
    }
    /**
      Wraps a record and observers changes to it.
         @private
      @method wrapRecord
      @param {Object} record The record instance.
      @return {Object} The wrapped record. Format:
      columnValues: {Array}
      searchKeywords: {Array}
    */
    wrapRecord(record) {
      return {
        object: record,
        columnValues: this.getRecordColumnValues(record),
        searchKeywords: this.getRecordKeywords(record),
        filterValues: this.getRecordFilterValues(record),
        color: this.getRecordColor(record)
      };
    }
    /**
      Gets the values for each column.
         @public
      @method getRecordColumnValues
      @return {Object} Keys should match column names defined
      by the model type.
    */
    getRecordColumnValues(_record) {
      return {};
    }
    /**
      Returns keywords to match when searching records.
         @public
      @method getRecordKeywords
      @return {Array} Relevant keywords for search.
    */
    getRecordKeywords(_record) {
      return (0, _array.A)();
    }
    /**
      Returns the values of filters defined by `getFilters`.
         @public
      @method getRecordFilterValues
      @param {Object} record The record instance.
      @return {Object} The filter values.
    */
    getRecordFilterValues(_record) {
      return {};
    }
    /**
      Each record can have a color that represents its state.
         @public
      @method getRecordColor
      @param {Object} record The record instance
      @return {String} The records color.
        Possible options: black, red, blue, green.
    */
    getRecordColor(_record) {
      return null;
    }
  }
  _exports.default = DataAdapter;
});
define("@ember/debug/index", ["exports", "@ember/-internals/browser-environment", "@ember/debug/lib/deprecate", "@ember/debug/lib/testing", "@ember/debug/lib/warn", "@ember/debug/lib/inspect", "@ember/debug/lib/capture-render-tree"], function (_exports, _browserEnvironment, _deprecate2, _testing, _warn2, _inspect, _captureRenderTree) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.assert = _exports._warnIfUsingStrippedFeatureFlags = void 0;
  Object.defineProperty(_exports, "captureRenderTree", {
    enumerable: true,
    get: function () {
      return _captureRenderTree.default;
    }
  });
  _exports.info = _exports.getDebugFunction = _exports.deprecateFunc = _exports.deprecate = _exports.debugSeal = _exports.debugFreeze = _exports.debug = void 0;
  Object.defineProperty(_exports, "inspect", {
    enumerable: true,
    get: function () {
      return _inspect.default;
    }
  });
  Object.defineProperty(_exports, "isTesting", {
    enumerable: true,
    get: function () {
      return _testing.isTesting;
    }
  });
  Object.defineProperty(_exports, "registerDeprecationHandler", {
    enumerable: true,
    get: function () {
      return _deprecate2.registerHandler;
    }
  });
  Object.defineProperty(_exports, "registerWarnHandler", {
    enumerable: true,
    get: function () {
      return _warn2.registerHandler;
    }
  });
  _exports.setDebugFunction = _exports.runInDebug = void 0;
  Object.defineProperty(_exports, "setTesting", {
    enumerable: true,
    get: function () {
      return _testing.setTesting;
    }
  });
  _exports.warn = void 0;
  // These are the default production build versions:
  var noop = () => {};
  var assert = _exports.assert = noop;
  var info = _exports.info = noop;
  var warn = _exports.warn = noop;
  var debug = _exports.debug = noop;
  var deprecate = _exports.deprecate = noop;
  var debugSeal = _exports.debugSeal = noop;
  var debugFreeze = _exports.debugFreeze = noop;
  var runInDebug = _exports.runInDebug = noop;
  var setDebugFunction = _exports.setDebugFunction = noop;
  var getDebugFunction = _exports.getDebugFunction = noop;
  var deprecateFunc = function () {
    return arguments[arguments.length - 1];
  };
  _exports.deprecateFunc = deprecateFunc;
  if (true /* DEBUG */) {
    _exports.setDebugFunction = setDebugFunction = function (type, callback) {
      switch (type) {
        case 'assert':
          return _exports.assert = assert = callback;
        case 'info':
          return _exports.info = info = callback;
        case 'warn':
          return _exports.warn = warn = callback;
        case 'debug':
          return _exports.debug = debug = callback;
        case 'deprecate':
          return _exports.deprecate = deprecate = callback;
        case 'debugSeal':
          return _exports.debugSeal = debugSeal = callback;
        case 'debugFreeze':
          return _exports.debugFreeze = debugFreeze = callback;
        case 'runInDebug':
          return _exports.runInDebug = runInDebug = callback;
        case 'deprecateFunc':
          return _exports.deprecateFunc = deprecateFunc = callback;
      }
    };
    _exports.getDebugFunction = getDebugFunction = function (type) {
      switch (type) {
        case 'assert':
          return assert;
        case 'info':
          return info;
        case 'warn':
          return warn;
        case 'debug':
          return debug;
        case 'deprecate':
          return deprecate;
        case 'debugSeal':
          return debugSeal;
        case 'debugFreeze':
          return debugFreeze;
        case 'runInDebug':
          return runInDebug;
        case 'deprecateFunc':
          return deprecateFunc;
      }
    };
  }
  /**
  @module @ember/debug
  */
  if (true /* DEBUG */) {
    /**
      Verify that a certain expectation is met, or throw a exception otherwise.
         This is useful for communicating assumptions in the code to other human
      readers as well as catching bugs that accidentally violates these
      expectations.
         Assertions are removed from production builds, so they can be freely added
      for documentation and debugging purposes without worries of incuring any
      performance penalty. However, because of that, they should not be used for
      checks that could reasonably fail during normal usage. Furthermore, care
      should be taken to avoid accidentally relying on side-effects produced from
      evaluating the condition itself, since the code will not run in production.
         ```javascript
      import { assert } from '@ember/debug';
         // Test for truthiness
      assert('Must pass a string', typeof str === 'string');
         // Fail unconditionally
      assert('This code path should never be run');
      ```
         @method assert
      @static
      @for @ember/debug
      @param {String} description Describes the expectation. This will become the
        text of the Error thrown if the assertion fails.
      @param {any} condition Must be truthy for the assertion to pass. If
        falsy, an exception will be thrown.
      @public
      @since 1.0.0
    */
    setDebugFunction('assert', function assert(desc, test) {
      if (!test) {
        throw new Error(`Assertion Failed: ${desc}`);
      }
    });
    /**
      Display a debug notice.
         Calls to this function are not invoked in production builds.
         ```javascript
      import { debug } from '@ember/debug';
         debug('I\'m a debug notice!');
      ```
         @method debug
      @for @ember/debug
      @static
      @param {String} message A debug message to display.
      @public
    */
    setDebugFunction('debug', function debug(message) {
      console.debug(`DEBUG: ${message}`); /* eslint-disable-line no-console */
    });
    /**
      Display an info notice.
         Calls to this function are removed from production builds, so they can be
      freely added for documentation and debugging purposes without worries of
      incuring any performance penalty.
         @method info
      @private
    */
    setDebugFunction('info', function info() {
      console.info(...arguments); /* eslint-disable-line no-console */
    });
    /**
     @module @ember/debug
     @public
    */
    /**
      Alias an old, deprecated method with its new counterpart.
         Display a deprecation warning with the provided message and a stack trace
      (Chrome and Firefox only) when the assigned method is called.
         Calls to this function are removed from production builds, so they can be
      freely added for documentation and debugging purposes without worries of
      incuring any performance penalty.
         ```javascript
      import { deprecateFunc } from '@ember/debug';
         Ember.oldMethod = deprecateFunc('Please use the new, updated method', options, Ember.newMethod);
      ```
         @method deprecateFunc
      @static
      @for @ember/debug
      @param {String} message A description of the deprecation.
      @param {Object} [options] The options object for `deprecate`.
      @param {Function} func The new function called to replace its deprecated counterpart.
      @return {Function} A new function that wraps the original function with a deprecation warning
      @private
    */
    setDebugFunction('deprecateFunc', function deprecateFunc(...args) {
      if (args.length === 3) {
        var [message, options, func] = args;
        return function (...args) {
          deprecate(message, false, options);
          return func.apply(this, args);
        };
      } else {
        var [_message, _func] = args;
        return function () {
          deprecate(_message);
          return _func.apply(this, arguments);
        };
      }
    });
    /**
     @module @ember/debug
     @public
    */
    /**
      Run a function meant for debugging.
         Calls to this function are removed from production builds, so they can be
      freely added for documentation and debugging purposes without worries of
      incuring any performance penalty.
         ```javascript
      import Component from '@ember/component';
      import { runInDebug } from '@ember/debug';
         runInDebug(() => {
        Component.reopen({
          didInsertElement() {
            console.log("I'm happy");
          }
        });
      });
      ```
         @method runInDebug
      @for @ember/debug
      @static
      @param {Function} func The function to be executed.
      @since 1.5.0
      @public
    */
    setDebugFunction('runInDebug', function runInDebug(func) {
      func();
    });
    setDebugFunction('debugSeal', function debugSeal(obj) {
      Object.seal(obj);
    });
    setDebugFunction('debugFreeze', function debugFreeze(obj) {
      // re-freezing an already frozen object introduces a significant
      // performance penalty on Chrome (tested through 59).
      //
      // See: https://bugs.chromium.org/p/v8/issues/detail?id=6450
      if (!Object.isFrozen(obj)) {
        Object.freeze(obj);
      }
    });
    setDebugFunction('deprecate', _deprecate2.default);
    setDebugFunction('warn', _warn2.default);
  }
  var _warnIfUsingStrippedFeatureFlags;
  if (true /* DEBUG */ && !(0, _testing.isTesting)()) {
    if (typeof window !== 'undefined' && (_browserEnvironment.isFirefox || _browserEnvironment.isChrome) && window.addEventListener) {
      window.addEventListener('load', () => {
        if (document.documentElement && document.documentElement.dataset && !document.documentElement.dataset['emberExtension']) {
          var downloadURL;
          if (_browserEnvironment.isChrome) {
            downloadURL = 'https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi';
          } else if (_browserEnvironment.isFirefox) {
            downloadURL = 'https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/';
          }
          debug(`For more advanced debugging, install the Ember Inspector from ${downloadURL}`);
        }
      }, false);
    }
  }
});
define("@ember/debug/lib/capture-render-tree", ["exports", "@glimmer/util"], function (_exports, _util) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = captureRenderTree;
  /**
    @module @ember/debug
  */
  /**
    Ember Inspector calls this function to capture the current render tree.
  
    In production mode, this requires turning on `ENV._DEBUG_RENDER_TREE`
    before loading Ember.
  
    @private
    @static
    @method captureRenderTree
    @for @ember/debug
    @param app {ApplicationInstance} An `ApplicationInstance`.
    @since 3.14.0
  */
  function captureRenderTree(app) {
    // SAFETY: Ideally we'd assert here but that causes awkward circular requires since this is also in @ember/debug.
    // This is only for debug stuff so not very risky.
    var renderer = (0, _util.expect)(app.lookup('renderer:-dom'), `BUG: owner is missing renderer`);
    return renderer.debugRenderTree.capture();
  }
});
define("@ember/debug/lib/deprecate", ["exports", "@ember/-internals/environment", "@ember/debug/index", "@ember/debug/lib/handlers"], function (_exports, _environment, _index, _handlers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.registerHandler = _exports.missingOptionsIdDeprecation = _exports.missingOptionsDeprecation = _exports.missingOptionDeprecation = _exports.default = void 0;
  /**
   @module @ember/debug
   @public
  */
  /**
    Allows for runtime registration of handler functions that override the default deprecation behavior.
    Deprecations are invoked by calls to [@ember/debug/deprecate](/ember/release/classes/@ember%2Fdebug/methods/deprecate?anchor=deprecate).
    The following example demonstrates its usage by registering a handler that throws an error if the
    message contains the word "should", otherwise defers to the default handler.
  
    ```javascript
    import { registerDeprecationHandler } from '@ember/debug';
  
    registerDeprecationHandler((message, options, next) => {
      if (message.indexOf('should') !== -1) {
        throw new Error(`Deprecation message with should: ${message}`);
      } else {
        // defer to whatever handler was registered before this one
        next(message, options);
      }
    });
    ```
  
    The handler function takes the following arguments:
  
    <ul>
      <li> <code>message</code> - The message received from the deprecation call.</li>
      <li> <code>options</code> - An object passed in with the deprecation call containing additional information including:</li>
        <ul>
          <li> <code>id</code> - An id of the deprecation in the form of <code>package-name.specific-deprecation</code>.</li>
          <li> <code>until</code> - The Ember version number the feature and deprecation will be removed in.</li>
        </ul>
      <li> <code>next</code> - A function that calls into the previously registered handler.</li>
    </ul>
  
    @public
    @static
    @method registerDeprecationHandler
    @for @ember/debug
    @param handler {Function} A function to handle deprecation calls.
    @since 2.1.0
  */
  var registerHandler = () => {};
  _exports.registerHandler = registerHandler;
  var missingOptionsDeprecation;
  var missingOptionsIdDeprecation;
  var missingOptionDeprecation = () => '';
  _exports.missingOptionDeprecation = missingOptionDeprecation;
  var deprecate = () => {};
  if (true /* DEBUG */) {
    _exports.registerHandler = registerHandler = function registerHandler(handler) {
      (0, _handlers.registerHandler)('deprecate', handler);
    };
    var formatMessage = function formatMessage(_message, options) {
      var message = _message;
      if (options === null || options === void 0 ? void 0 : options.id) {
        message = message + ` [deprecation id: ${options.id}]`;
      }
      if (options === null || options === void 0 ? void 0 : options.until) {
        message = message + ` This will be removed in ${options.for} ${options.until}.`;
      }
      if (options === null || options === void 0 ? void 0 : options.url) {
        message += ` See ${options.url} for more details.`;
      }
      return message;
    };
    registerHandler(function logDeprecationToConsole(message, options) {
      var updatedMessage = formatMessage(message, options);
      console.warn(`DEPRECATION: ${updatedMessage}`); // eslint-disable-line no-console
    });
    var captureErrorForStack;
    if (new Error().stack) {
      captureErrorForStack = () => new Error();
    } else {
      captureErrorForStack = () => {
        try {
          __fail__.fail();
        } catch (e) {
          return e;
        }
      };
    }
    registerHandler(function logDeprecationStackTrace(message, options, next) {
      if (_environment.ENV.LOG_STACKTRACE_ON_DEPRECATION) {
        var stackStr = '';
        var error = captureErrorForStack();
        var stack;
        if (error instanceof Error) {
          if (error.stack) {
            if (error['arguments']) {
              // Chrome
              stack = error.stack.replace(/^\s+at\s+/gm, '').replace(/^([^(]+?)([\n$])/gm, '{anonymous}($1)$2').replace(/^Object.<anonymous>\s*\(([^)]+)\)/gm, '{anonymous}($1)').split('\n');
              stack.shift();
            } else {
              // Firefox
              stack = error.stack.replace(/(?:\n@:0)?\s+$/m, '').replace(/^\(/gm, '{anonymous}(').split('\n');
            }
            stackStr = `\n    ${stack.slice(2).join('\n    ')}`;
          }
        }
        var updatedMessage = formatMessage(message, options);
        console.warn(`DEPRECATION: ${updatedMessage}${stackStr}`); // eslint-disable-line no-console
      } else {
        next(message, options);
      }
    });
    registerHandler(function raiseOnDeprecation(message, options, next) {
      if (_environment.ENV.RAISE_ON_DEPRECATION) {
        var updatedMessage = formatMessage(message);
        throw new Error(updatedMessage);
      } else {
        next(message, options);
      }
    });
    _exports.missingOptionsDeprecation = missingOptionsDeprecation = 'When calling `deprecate` you ' + 'must provide an `options` hash as the third parameter.  ' + '`options` should include `id` and `until` properties.';
    _exports.missingOptionsIdDeprecation = missingOptionsIdDeprecation = 'When calling `deprecate` you must provide `id` in options.';
    _exports.missingOptionDeprecation = missingOptionDeprecation = (id, missingOption) => {
      return `When calling \`deprecate\` you must provide \`${missingOption}\` in options. Missing options.${missingOption} in "${id}" deprecation`;
    };
    /**
     @module @ember/debug
     @public
     */
    /**
      Display a deprecation warning with the provided message and a stack trace
      (Chrome and Firefox only).
         Ember itself leverages [Semantic Versioning](https://semver.org) to aid
      projects in keeping up with changes to the framework. Before any
      functionality or API is removed, it first flows linearly through a
      deprecation staging process. The staging process currently contains two
      stages: available and enabled.
         Deprecations are initially released into the 'available' stage.
      Deprecations will stay in this stage until the replacement API has been
      marked as a recommended practice via the RFC process and the addon
      ecosystem has generally adopted the change.
         Once a deprecation meets the above criteria, it will move into the
      'enabled' stage where it will remain until the functionality or API is
      eventually removed.
         For application and addon developers, "available" deprecations are not
      urgent and "enabled" deprecations require action.
         * In a production build, this method is defined as an empty function (NOP).
      Uses of this method in Ember itself are stripped from the ember.prod.js build.
         ```javascript
      import { deprecate } from '@ember/debug';
         deprecate(
        'Use of `assign` has been deprecated. Please use `Object.assign` or the spread operator instead.',
        false,
        {
          id: 'ember-polyfills.deprecate-assign',
          until: '5.0.0',
          url: 'https://deprecations.emberjs.com/v4.x/#toc_ember-polyfills-deprecate-assign',
          for: 'ember-source',
          since: {
            available: '4.0.0',
            enabled: '4.0.0',
          },
        }
      );
      ```
         @method deprecate
      @for @ember/debug
      @param {String} message A description of the deprecation.
      @param {Boolean} test A boolean. If falsy, the deprecation will be displayed.
      @param {Object} options
      @param {String} options.id A unique id for this deprecation. The id can be
        used by Ember debugging tools to change the behavior (raise, log or silence)
        for that specific deprecation. The id should be namespaced by dots, e.g.
        "view.helper.select".
      @param {string} options.until The version of Ember when this deprecation
        warning will be removed.
      @param {String} options.for A namespace for the deprecation, usually the package name
      @param {Object} options.since Describes when the deprecation became available and enabled.
      @param {String} [options.url] An optional url to the transition guide on the
            emberjs.com website.
      @static
      @public
      @since 1.0.0
    */
    deprecate = function deprecate(message, test, options) {
      (0, _index.assert)(missingOptionsDeprecation, Boolean(options && (options.id || options.until)));
      (0, _index.assert)(missingOptionsIdDeprecation, Boolean(options.id));
      (0, _index.assert)(missingOptionDeprecation(options.id, 'until'), Boolean(options.until));
      (0, _index.assert)(missingOptionDeprecation(options.id, 'for'), Boolean(options.for));
      (0, _index.assert)(missingOptionDeprecation(options.id, 'since'), Boolean(options.since));
      (0, _handlers.invoke)('deprecate', message, test, options);
    };
  }
  var _default = _exports.default = deprecate;
});
define("@ember/debug/lib/handlers", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.registerHandler = _exports.invoke = _exports.HANDLERS = void 0;
  var HANDLERS = _exports.HANDLERS = {};
  var registerHandler = _exports.registerHandler = function registerHandler(_type, _callback) {};
  var invoke = () => {};
  _exports.invoke = invoke;
  if (true /* DEBUG */) {
    _exports.registerHandler = registerHandler = function registerHandler(type, callback) {
      var nextHandler = HANDLERS[type] || (() => {});
      HANDLERS[type] = (message, options) => {
        callback(message, options, nextHandler);
      };
    };
    _exports.invoke = invoke = function invoke(type, message, test, options) {
      if (test) {
        return;
      }
      var handlerForType = HANDLERS[type];
      if (handlerForType) {
        handlerForType(message, options);
      }
    };
  }
});
define("@ember/debug/lib/inspect", ["exports", "@glimmer/util", "@ember/debug"], function (_exports, _util, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = inspect;
  var {
    toString: objectToString
  } = Object.prototype;
  var {
    toString: functionToString
  } = Function.prototype;
  var {
    isArray
  } = Array;
  var {
    keys: objectKeys
  } = Object;
  var {
    stringify
  } = JSON;
  var LIST_LIMIT = 100;
  var DEPTH_LIMIT = 4;
  var SAFE_KEY = /^[\w$]+$/;
  /**
   @module @ember/debug
  */
  /**
    Convenience method to inspect an object. This method will attempt to
    convert the object into a useful string description.
  
    It is a pretty simple implementation. If you want something more robust,
    use something like JSDump: https://github.com/NV/jsDump
  
    @method inspect
    @static
    @param {Object} obj The object you want to inspect.
    @return {String} A description of the object
    @since 1.4.0
    @private
  */
  function inspect(obj) {
    // detect Node util.inspect call inspect(depth: number, opts: object)
    if (typeof obj === 'number' && arguments.length === 2) {
      return this;
    }
    return inspectValue(obj, 0);
  }
  function inspectValue(value, depth, seen) {
    var valueIsArray = false;
    switch (typeof value) {
      case 'undefined':
        return 'undefined';
      case 'object':
        if (value === null) return 'null';
        if (isArray(value)) {
          valueIsArray = true;
          break;
        }
        // is toString Object.prototype.toString or undefined then traverse
        if (value.toString === objectToString || value.toString === undefined) {
          break;
        }
        // custom toString
        return value.toString();
      case 'function':
        return value.toString === functionToString ? value.name ? `[Function:${value.name}]` : `[Function]` : value.toString();
      case 'string':
        return stringify(value);
      case 'symbol':
      case 'boolean':
      case 'number':
      default:
        return value.toString();
    }
    if (seen === undefined) {
      seen = new _util._WeakSet();
    } else {
      if (seen.has(value)) return `[Circular]`;
    }
    seen.add(value);
    return valueIsArray ? inspectArray(value, depth + 1, seen) : inspectObject(value, depth + 1, seen);
  }
  function inspectKey(key) {
    return SAFE_KEY.test(key) ? key : stringify(key);
  }
  function inspectObject(obj, depth, seen) {
    if (depth > DEPTH_LIMIT) {
      return '[Object]';
    }
    var s = '{';
    var keys = objectKeys(obj);
    for (var i = 0; i < keys.length; i++) {
      s += i === 0 ? ' ' : ', ';
      if (i >= LIST_LIMIT) {
        s += `... ${keys.length - LIST_LIMIT} more keys`;
        break;
      }
      var key = keys[i];
      (true && !(key) && (0, _debug.assert)('has key', key)); // Looping over array
      s += `${inspectKey(String(key))}: ${inspectValue(obj[key], depth, seen)}`;
    }
    s += ' }';
    return s;
  }
  function inspectArray(arr, depth, seen) {
    if (depth > DEPTH_LIMIT) {
      return '[Array]';
    }
    var s = '[';
    for (var i = 0; i < arr.length; i++) {
      s += i === 0 ? ' ' : ', ';
      if (i >= LIST_LIMIT) {
        s += `... ${arr.length - LIST_LIMIT} more items`;
        break;
      }
      s += inspectValue(arr[i], depth, seen);
    }
    s += ' ]';
    return s;
  }
});
define("@ember/debug/lib/testing", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isTesting = isTesting;
  _exports.setTesting = setTesting;
  var testing = false;
  function isTesting() {
    return testing;
  }
  function setTesting(value) {
    testing = Boolean(value);
  }
});
define("@ember/debug/lib/warn", ["exports", "@ember/debug/index", "@ember/debug/lib/handlers"], function (_exports, _index, _handlers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.registerHandler = _exports.missingOptionsIdDeprecation = _exports.missingOptionsDeprecation = _exports.default = void 0;
  var registerHandler = () => {};
  _exports.registerHandler = registerHandler;
  var warn = () => {};
  var missingOptionsDeprecation;
  var missingOptionsIdDeprecation;
  /**
  @module @ember/debug
  */
  if (true /* DEBUG */) {
    /**
      Allows for runtime registration of handler functions that override the default warning behavior.
      Warnings are invoked by calls made to [@ember/debug/warn](/ember/release/classes/@ember%2Fdebug/methods/warn?anchor=warn).
      The following example demonstrates its usage by registering a handler that does nothing overriding Ember's
      default warning behavior.
         ```javascript
      import { registerWarnHandler } from '@ember/debug';
         // next is not called, so no warnings get the default behavior
      registerWarnHandler(() => {});
      ```
         The handler function takes the following arguments:
         <ul>
        <li> <code>message</code> - The message received from the warn call. </li>
        <li> <code>options</code> - An object passed in with the warn call containing additional information including:</li>
          <ul>
            <li> <code>id</code> - An id of the warning in the form of <code>package-name.specific-warning</code>.</li>
          </ul>
        <li> <code>next</code> - A function that calls into the previously registered handler.</li>
      </ul>
         @public
      @static
      @method registerWarnHandler
      @for @ember/debug
      @param handler {Function} A function to handle warnings.
      @since 2.1.0
    */
    _exports.registerHandler = registerHandler = function registerHandler(handler) {
      (0, _handlers.registerHandler)('warn', handler);
    };
    registerHandler(function logWarning(message) {
      /* eslint-disable no-console */
      console.warn(`WARNING: ${message}`);
      /* eslint-enable no-console */
    });
    _exports.missingOptionsDeprecation = missingOptionsDeprecation = 'When calling `warn` you ' + 'must provide an `options` hash as the third parameter.  ' + '`options` should include an `id` property.';
    _exports.missingOptionsIdDeprecation = missingOptionsIdDeprecation = 'When calling `warn` you must provide `id` in options.';
    /**
      Display a warning with the provided message.
         * In a production build, this method is defined as an empty function (NOP).
      Uses of this method in Ember itself are stripped from the ember.prod.js build.
         ```javascript
      import { warn } from '@ember/debug';
      import tomsterCount from './tomster-counter'; // a module in my project
         // Log a warning if we have more than 3 tomsters
      warn('Too many tomsters!', tomsterCount <= 3, {
        id: 'ember-debug.too-many-tomsters'
      });
      ```
         @method warn
      @for @ember/debug
      @static
      @param {String} message A warning to display.
      @param {Boolean} test An optional boolean. If falsy, the warning
        will be displayed.
      @param {Object} options An object that can be used to pass a unique
        `id` for this warning.  The `id` can be used by Ember debugging tools
        to change the behavior (raise, log, or silence) for that specific warning.
        The `id` should be namespaced by dots, e.g. "ember-debug.feature-flag-with-features-stripped"
      @public
      @since 1.0.0
    */
    warn = function warn(message, test, options) {
      if (arguments.length === 2 && typeof test === 'object') {
        options = test;
        test = false;
      }
      (0, _index.assert)(missingOptionsDeprecation, Boolean(options));
      (0, _index.assert)(missingOptionsIdDeprecation, Boolean(options && options.id));
      (0, _handlers.invoke)('warn', message, test, options);
    };
  }
  var _default = _exports.default = warn;
});
define("@ember/deprecated-features/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ASSIGN = void 0;
  /* eslint-disable no-implicit-coercion */
  // These versions should be the version that the deprecation was _introduced_,
  // not the version that the feature will be removed.
  var ASSIGN = _exports.ASSIGN = !!'4.0.0-beta.1';
});
define("@ember/destroyable/index", ["exports", "@glimmer/destroyable"], function (_exports, _destroyable) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "assertDestroyablesDestroyed", {
    enumerable: true,
    get: function () {
      return _destroyable.assertDestroyablesDestroyed;
    }
  });
  Object.defineProperty(_exports, "associateDestroyableChild", {
    enumerable: true,
    get: function () {
      return _destroyable.associateDestroyableChild;
    }
  });
  Object.defineProperty(_exports, "destroy", {
    enumerable: true,
    get: function () {
      return _destroyable.destroy;
    }
  });
  Object.defineProperty(_exports, "enableDestroyableTracking", {
    enumerable: true,
    get: function () {
      return _destroyable.enableDestroyableTracking;
    }
  });
  Object.defineProperty(_exports, "isDestroyed", {
    enumerable: true,
    get: function () {
      return _destroyable.isDestroyed;
    }
  });
  Object.defineProperty(_exports, "isDestroying", {
    enumerable: true,
    get: function () {
      return _destroyable.isDestroying;
    }
  });
  _exports.registerDestructor = registerDestructor;
  _exports.unregisterDestructor = unregisterDestructor;
  /**
    Ember manages the lifecycles and lifetimes of many built in constructs, such
    as components, and does so in a hierarchical way - when a parent component is
    destroyed, all of its children are destroyed as well.
  
    This destroyables API exposes the basic building blocks for destruction:
  
    * registering a function to be ran when an object is destroyed
    * checking if an object is in a destroying state
    * associate an object as a child of another so that the child object will be destroyed
      when the associated parent object is destroyed.
  
    @module @ember/destroyable
    @public
  */
  /**
    This function is used to associate a destroyable object with a parent. When the parent
    is destroyed, all registered children will also be destroyed.
  
    ```js
    class CustomSelect extends Component {
      constructor(...args) {
        super(...args);
  
        // obj is now a child of the component. When the component is destroyed,
        // obj will also be destroyed, and have all of its destructors triggered.
        this.obj = associateDestroyableChild(this, {});
      }
    }
    ```
  
    Returns the associated child for convenience.
  
    @method associateDestroyableChild
    @for @ember/destroyable
    @param {Object|Function} parent the destroyable to entangle the child destroyables lifetime with
    @param {Object|Function} child the destroyable to be entangled with the parents lifetime
    @returns {Object|Function} the child argument
    @static
    @public
  */
  /**
   Receives a destroyable, and returns true if the destroyable has begun destroying. Otherwise returns
   false.
  
    ```js
    let obj = {};
    isDestroying(obj); // false
    destroy(obj);
    isDestroying(obj); // true
    // ...sometime later, after scheduled destruction
    isDestroyed(obj); // true
    isDestroying(obj); // true
    ```
  
    @method isDestroying
    @for @ember/destroyable
    @param {Object|Function} destroyable the object to check
    @returns {Boolean}
    @static
    @public
  */
  /**
    Receives a destroyable, and returns true if the destroyable has finished destroying. Otherwise
    returns false.
  
    ```js
    let obj = {};
  
    isDestroyed(obj); // false
    destroy(obj);
  
    // ...sometime later, after scheduled destruction
  
    isDestroyed(obj); // true
    ```
  
    @method isDestroyed
    @for @ember/destroyable
    @param {Object|Function} destroyable the object to check
    @returns {Boolean}
    @static
    @public
  */
  /**
    Initiates the destruction of a destroyable object. It runs all associated destructors, and then
    destroys all children recursively.
  
    ```js
    let obj = {};
  
    registerDestructor(obj, () => console.log('destroyed!'));
  
    destroy(obj); // this will schedule the destructor to be called
  
    // ...some time later, during scheduled destruction
  
    // destroyed!
    ```
  
    Destruction via `destroy()` follows these steps:
  
    1, Mark the destroyable such that `isDestroying(destroyable)` returns `true`
    2, Call `destroy()` on each of the destroyable's associated children
    3, Schedule calling the destroyable's destructors
    4, Schedule setting destroyable such that `isDestroyed(destroyable)` returns `true`
  
    This results in the entire tree of destroyables being first marked as destroying,
    then having all of their destructors called, and finally all being marked as isDestroyed.
    There won't be any in between states where some items are marked as `isDestroying` while
    destroying, while others are not.
  
    @method destroy
    @for @ember/destroyable
    @param {Object|Function} destroyable the object to destroy
    @static
    @public
  */
  /**
    This function asserts that all objects which have associated destructors or associated children
    have been destroyed at the time it is called. It is meant to be a low level hook that testing
    frameworks can use to hook into and validate that all destroyables have in fact been destroyed.
  
    This function requires that `enableDestroyableTracking` was called previously, and is only
    available in non-production builds.
  
    @method assertDestroyablesDestroyed
    @for @ember/destroyable
    @static
    @public
  */
  /**
    This function instructs the destroyable system to keep track of all destroyables (their
    children, destructors, etc). This enables a future usage of `assertDestroyablesDestroyed`
    to be used to ensure that all destroyable tasks (registered destructors and associated children)
    have completed when `assertDestroyablesDestroyed` is called.
  
    @method enableDestroyableTracking
    @for @ember/destroyable
    @static
    @public
  */
  /**
    Receives a destroyable object and a destructor function, and associates the
    function with it. When the destroyable is destroyed with destroy, or when its
    parent is destroyed, the destructor function will be called.
  
    ```js
    import Component from '@glimmer/component';
    import { registerDestructor } from '@ember/destroyable';
  
    class Modal extends Component {
      @service resize;
  
      constructor(...args) {
        super(...args);
  
        this.resize.register(this, this.layout);
  
        registerDestructor(this, () => this.resize.unregister(this));
      }
    }
    ```
  
    Multiple destructors can be associated with a given destroyable, and they can be
    associated over time, allowing libraries to dynamically add destructors as needed.
    `registerDestructor` also returns the associated destructor function, for convenience.
  
    The destructor function is passed a single argument, which is the destroyable itself.
    This allows the function to be reused multiple times for many destroyables, rather
    than creating a closure function per destroyable.
  
    ```js
    import Component from '@glimmer/component';
    import { registerDestructor } from '@ember/destroyable';
  
    function unregisterResize(instance) {
      instance.resize.unregister(instance);
    }
  
    class Modal extends Component {
      @service resize;
  
      constructor(...args) {
        super(...args);
  
        this.resize.register(this, this.layout);
  
        registerDestructor(this, unregisterResize);
      }
    }
    ```
  
    @method registerDestructor
    @for @ember/destroyable
    @param {Object|Function} destroyable the destroyable to register the destructor function with
    @param {Function} destructor the destructor to run when the destroyable object is destroyed
    @static
    @public
  */
  function registerDestructor(destroyable, destructor) {
    return (0, _destroyable.registerDestructor)(destroyable, destructor);
  }
  /**
    Receives a destroyable and a destructor function, and de-associates the destructor
    from the destroyable.
  
    ```js
    import Component from '@glimmer/component';
    import { registerDestructor, unregisterDestructor } from '@ember/destroyable';
  
    class Modal extends Component {
      @service modals;
  
      constructor(...args) {
        super(...args);
  
        this.modals.add(this);
  
        this.modalDestructor = registerDestructor(this, () => this.modals.remove(this));
      }
  
      @action pinModal() {
        unregisterDestructor(this, this.modalDestructor);
      }
    }
    ```
  
    @method unregisterDestructor
    @for @ember/destroyable
    @param {Object|Function} destroyable the destroyable to unregister the destructor function from
    @param {Function} destructor the destructor to remove from the destroyable
    @static
    @public
  */
  function unregisterDestructor(destroyable, destructor) {
    return (0, _destroyable.unregisterDestructor)(destroyable, destructor);
  }
});
define("@ember/engine/index", ["exports", "@ember/engine/lib/engine-parent", "@ember/-internals/utils", "@ember/controller", "@ember/application/namespace", "@ember/-internals/container", "dag-map", "@ember/debug", "@ember/debug/container-debug-adapter", "@ember/object", "@ember/engine/instance", "@ember/routing/-internals", "@ember/-internals/views", "@ember/-internals/glimmer", "@ember/-internals/runtime"], function (_exports, _engineParent, _utils, _controller, _namespace, _container, _dagMap, _debug, _containerDebugAdapter, _object, _instance, _internals, _views, _glimmer, _runtime) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.buildInitializerMethod = buildInitializerMethod;
  _exports.default = void 0;
  Object.defineProperty(_exports, "getEngineParent", {
    enumerable: true,
    get: function () {
      return _engineParent.getEngineParent;
    }
  });
  Object.defineProperty(_exports, "setEngineParent", {
    enumerable: true,
    get: function () {
      return _engineParent.setEngineParent;
    }
  });
  function props(obj) {
    var properties = [];
    for (var key in obj) {
      properties.push(key);
    }
    return properties;
  }
  class Engine extends _namespace.default.extend(_runtime.RegistryProxyMixin) {
    constructor() {
      super(...arguments);
      /**
        A private flag indicating whether an engine's initializers have run yet.
               @private
        @property _initializersRan
      */
      this._initializersRan = false;
    }
    /**
      This creates a registry with the default Ember naming conventions.
         It also configures the registry:
         * registered views are created every time they are looked up (they are
        not singletons)
      * registered templates are not factories; the registered value is
        returned directly.
      * the router receives the application as its `namespace` property
      * all controllers receive the router as their `target` and `controllers`
        properties
      * all controllers receive the application as their `namespace` property
      * the application view receives the application controller as its
        `controller` property
      * the application view receives the application template as its
        `defaultTemplate` property
         @method buildRegistry
      @static
      @param {Application} namespace the application for which to
        build the registry
      @return {Ember.Registry} the built registry
      @private
    */
    static buildRegistry(namespace) {
      var registry = new _container.Registry({
        resolver: resolverFor(namespace)
      });
      registry.set = _object.set;
      registry.register('application:main', namespace, {
        instantiate: false
      });
      commonSetupRegistry(registry);
      (0, _glimmer.setupEngineRegistry)(registry);
      return registry;
    }
    init(properties) {
      super.init(properties);
      this.buildRegistry();
    }
    /**
      Ensure that initializers are run once, and only once, per engine.
         @private
      @method ensureInitializers
    */
    ensureInitializers() {
      if (!this._initializersRan) {
        this.runInitializers();
        this._initializersRan = true;
      }
    }
    /**
      Create an EngineInstance for this engine.
         @public
      @method buildInstance
      @return {EngineInstance} the engine instance
    */
    buildInstance(options = {}) {
      this.ensureInitializers();
      return _instance.default.create(Object.assign(Object.assign({}, options), {
        base: this
      }));
    }
    /**
      Build and configure the registry for the current engine.
         @private
      @method buildRegistry
      @return {Ember.Registry} the configured registry
    */
    buildRegistry() {
      var registry = this.__registry__ = this.constructor.buildRegistry(this);
      return registry;
    }
    /**
      @private
      @method initializer
    */
    initializer(initializer) {
      this.constructor.initializer(initializer);
    }
    /**
      @private
      @method instanceInitializer
    */
    instanceInitializer(initializer) {
      this.constructor.instanceInitializer(initializer);
    }
    /**
      @private
      @method runInitializers
    */
    runInitializers() {
      this._runInitializer('initializers', (name, initializer) => {
        (true && !(initializer) && (0, _debug.assert)(`No application initializer named '${name}'`, initializer));
        initializer.initialize(this);
      });
    }
    /**
      @private
      @since 1.12.0
      @method runInstanceInitializers
    */
    runInstanceInitializers(instance) {
      this._runInitializer('instanceInitializers', (name, initializer) => {
        (true && !(initializer) && (0, _debug.assert)(`No instance initializer named '${name}'`, initializer));
        initializer.initialize(instance);
      });
    }
    _runInitializer(bucketName, cb) {
      var initializersByName = (0, _object.get)(this.constructor, bucketName);
      var initializers = props(initializersByName);
      var graph = new _dagMap.default();
      var initializer;
      for (var name of initializers) {
        initializer = initializersByName[name];
        (true && !(initializer) && (0, _debug.assert)(`missing ${bucketName}: ${name}`, initializer));
        graph.add(initializer.name, initializer, initializer.before, initializer.after);
      }
      graph.topsort(cb);
    }
  }
  Engine.initializers = Object.create(null);
  Engine.instanceInitializers = Object.create(null);
  /**
    The goal of initializers should be to register dependencies and injections.
    This phase runs once. Because these initializers may load code, they are
    allowed to defer application readiness and advance it. If you need to access
    the container or store you should use an InstanceInitializer that will be run
    after all initializers and therefore after all code is loaded and the app is
    ready.
  
    Initializer receives an object which has the following attributes:
    `name`, `before`, `after`, `initialize`. The only required attribute is
    `initialize`, all others are optional.
  
    * `name` allows you to specify under which name the initializer is registered.
    This must be a unique name, as trying to register two initializers with the
    same name will result in an error.
  
    ```app/initializer/named-initializer.js
    import { debug } from '@ember/debug';
  
    export function initialize() {
      debug('Running namedInitializer!');
    }
  
    export default {
      name: 'named-initializer',
      initialize
    };
    ```
  
    * `before` and `after` are used to ensure that this initializer is ran prior
    or after the one identified by the value. This value can be a single string
    or an array of strings, referencing the `name` of other initializers.
  
    An example of ordering initializers, we create an initializer named `first`:
  
    ```app/initializer/first.js
    import { debug } from '@ember/debug';
  
    export function initialize() {
      debug('First initializer!');
    }
  
    export default {
      name: 'first',
      initialize
    };
    ```
  
    ```bash
    // DEBUG: First initializer!
    ```
  
    We add another initializer named `second`, specifying that it should run
    after the initializer named `first`:
  
    ```app/initializer/second.js
    import { debug } from '@ember/debug';
  
    export function initialize() {
      debug('Second initializer!');
    }
  
    export default {
      name: 'second',
      after: 'first',
      initialize
    };
    ```
  
    ```
    // DEBUG: First initializer!
    // DEBUG: Second initializer!
    ```
  
    Afterwards we add a further initializer named `pre`, this time specifying
    that it should run before the initializer named `first`:
  
    ```app/initializer/pre.js
    import { debug } from '@ember/debug';
  
    export function initialize() {
      debug('Pre initializer!');
    }
  
    export default {
      name: 'pre',
      before: 'first',
      initialize
    };
    ```
  
    ```bash
    // DEBUG: Pre initializer!
    // DEBUG: First initializer!
    // DEBUG: Second initializer!
    ```
  
    Finally we add an initializer named `post`, specifying it should run after
    both the `first` and the `second` initializers:
  
    ```app/initializer/post.js
    import { debug } from '@ember/debug';
  
    export function initialize() {
      debug('Post initializer!');
    }
  
    export default {
      name: 'post',
      after: ['first', 'second'],
      initialize
    };
    ```
  
    ```bash
    // DEBUG: Pre initializer!
    // DEBUG: First initializer!
    // DEBUG: Second initializer!
    // DEBUG: Post initializer!
    ```
  
    * `initialize` is a callback function that receives one argument,
      `application`, on which you can operate.
  
    Example of using `application` to register an adapter:
  
    ```app/initializer/api-adapter.js
    import ApiAdapter from '../utils/api-adapter';
  
    export function initialize(application) {
      application.register('api-adapter:main', ApiAdapter);
    }
  
    export default {
      name: 'post',
      after: ['first', 'second'],
      initialize
    };
    ```
  
    @method initializer
    @param initializer {Object}
    @public
  */
  Engine.initializer = buildInitializerMethod('initializers', 'initializer');
  /**
    Instance initializers run after all initializers have run. Because
    instance initializers run after the app is fully set up. We have access
    to the store, container, and other items. However, these initializers run
    after code has loaded and are not allowed to defer readiness.
  
    Instance initializer receives an object which has the following attributes:
    `name`, `before`, `after`, `initialize`. The only required attribute is
    `initialize`, all others are optional.
  
    * `name` allows you to specify under which name the instanceInitializer is
    registered. This must be a unique name, as trying to register two
    instanceInitializer with the same name will result in an error.
  
    ```app/initializer/named-instance-initializer.js
    import { debug } from '@ember/debug';
  
    export function initialize() {
      debug('Running named-instance-initializer!');
    }
  
    export default {
      name: 'named-instance-initializer',
      initialize
    };
    ```
  
    * `before` and `after` are used to ensure that this initializer is ran prior
    or after the one identified by the value. This value can be a single string
    or an array of strings, referencing the `name` of other initializers.
  
    * See Application.initializer for discussion on the usage of before
    and after.
  
    Example instanceInitializer to preload data into the store.
  
    ```app/initializer/preload-data.js
  
    export function initialize(application) {
        var userConfig, userConfigEncoded, store;
        // We have a HTML escaped JSON representation of the user's basic
        // configuration generated server side and stored in the DOM of the main
        // index.html file. This allows the app to have access to a set of data
        // without making any additional remote calls. Good for basic data that is
        // needed for immediate rendering of the page. Keep in mind, this data,
        // like all local models and data can be manipulated by the user, so it
        // should not be relied upon for security or authorization.
  
        // Grab the encoded data from the meta tag
        userConfigEncoded = document.querySelector('head meta[name=app-user-config]').attr('content');
  
        // Unescape the text, then parse the resulting JSON into a real object
        userConfig = JSON.parse(unescape(userConfigEncoded));
  
        // Lookup the store
        store = application.lookup('service:store');
  
        // Push the encoded JSON into the store
        store.pushPayload(userConfig);
    }
  
    export default {
      name: 'named-instance-initializer',
      initialize
    };
    ```
  
    @method instanceInitializer
    @param instanceInitializer
    @public
  */
  Engine.instanceInitializer = buildInitializerMethod('instanceInitializers', 'instance initializer');
  /**
    This function defines the default lookup rules for container lookups:
  
    * templates are looked up on `Ember.TEMPLATES`
    * other names are looked up on the application after classifying the name.
      For example, `controller:post` looks up `App.PostController` by default.
    * if the default lookup fails, look for registered classes on the container
  
    This allows the application to register default injections in the container
    that could be overridden by the normal naming convention.
  
    @private
    @method resolverFor
    @param {Ember.Enginer} namespace the namespace to look for classes
    @return {*} the resolved value for a given lookup
  */
  function resolverFor(namespace) {
    var ResolverClass = namespace.Resolver;
    var props = {
      namespace
    };
    return ResolverClass.create(props);
  }
  /** @internal */
  function buildInitializerMethod(bucketName, humanName) {
    return function (initializer) {
      // If this is the first initializer being added to a subclass, we are going to reopen the class
      // to make sure we have a new `initializers` object, which extends from the parent class' using
      // prototypal inheritance. Without this, attempting to add initializers to the subclass would
      // pollute the parent class as well as other subclasses.
      // SAFETY: The superclass may be an Engine, we don't call unless we confirmed it was ok.
      var superclass = this.superclass;
      if (superclass[bucketName] !== undefined && superclass[bucketName] === this[bucketName]) {
        var attrs = {
          [bucketName]: Object.create(this[bucketName])
        };
        this.reopenClass(attrs);
      }
      (true && !(!this[bucketName][initializer.name]) && (0, _debug.assert)(`The ${humanName} '${initializer.name}' has already been registered`, !this[bucketName][initializer.name]));
      (true && !((0, _utils.canInvoke)(initializer, 'initialize')) && (0, _debug.assert)(`An ${humanName} cannot be registered without an initialize function`, (0, _utils.canInvoke)(initializer, 'initialize')));
      (true && !(initializer.name !== undefined) && (0, _debug.assert)(`An ${humanName} cannot be registered without a name property`, initializer.name !== undefined));
      var initializers = this[bucketName];
      initializers[initializer.name] = initializer;
    };
  }
  function commonSetupRegistry(registry) {
    registry.optionsForType('component', {
      singleton: false
    });
    registry.optionsForType('view', {
      singleton: false
    });
    registry.register('controller:basic', _controller.default, {
      instantiate: false
    });
    // Register the routing service...
    registry.register('service:-routing', _internals.RoutingService);
    // DEBUGGING
    registry.register('resolver-for-debugging:main', registry.resolver, {
      instantiate: false
    });
    registry.register('container-debug-adapter:main', _containerDebugAdapter.default);
    registry.register('component-lookup:main', _views.ComponentLookup);
  }
  var _default = _exports.default = Engine;
});
define("@ember/engine/instance", ["exports", "@ember/object", "@ember/-internals/runtime", "@ember/debug", "@ember/-internals/container", "@ember/-internals/utils", "@ember/engine/lib/engine-parent", "@ember/-internals/owner", "@ember/engine"], function (_exports, _object, _runtime, _debug, _container, _utils, _engineParent, _owner, _engine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/engine
  */

  class EngineInstance extends _object.default.extend(_runtime.RegistryProxyMixin, _runtime.ContainerProxyMixin) {
    constructor() {
      super(...arguments);
      this._booted = false;
      this._bootPromise = null;
    }
    /**
     @private
     @method setupRegistry
     @param {Registry} registry
     @param {BootOptions} options
     */
    // This is effectively an "abstract" method: it defines the contract a
    // subclass (e.g. `ApplicationInstance`) must follow to implement this
    // behavior, but an `EngineInstance` has no behavior of its own here.
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    static setupRegistry(_registry, _options) {}
    init(properties) {
      var _a;
      super.init(properties);
      // Ensure the guid gets setup for this instance
      (0, _utils.guidFor)(this);
      (_a = this.base) !== null && _a !== void 0 ? _a : this.base = this.application;
      // Create a per-instance registry that will use the application's registry
      // as a fallback for resolving registrations.
      var registry = this.__registry__ = new _container.Registry({
        fallback: this.base.__registry__
      });
      // Create a per-instance container from the instance's registry
      this.__container__ = registry.container({
        owner: this
      });
      this._booted = false;
    }
    /**
      Initialize the `EngineInstance` and return a promise that resolves
      with the instance itself when the boot process is complete.
         The primary task here is to run any registered instance initializers.
         See the documentation on `BootOptions` for the options it takes.
         @public
      @method boot
      @param options {Object}
      @return {Promise<EngineInstance,Error>}
    */
    boot(options) {
      if (this._bootPromise) {
        return this._bootPromise;
      }
      this._bootPromise = new _runtime.RSVP.Promise(resolve => {
        resolve(this._bootSync(options));
      });
      return this._bootPromise;
    }
    /**
      Unfortunately, a lot of existing code assumes booting an instance is
      synchronous – specifically, a lot of tests assume the last call to
      `app.advanceReadiness()` or `app.reset()` will result in a new instance
      being fully-booted when the current runloop completes.
         We would like new code (like the `visit` API) to stop making this
      assumption, so we created the asynchronous version above that returns a
      promise. But until we have migrated all the code, we would have to expose
      this method for use *internally* in places where we need to boot an instance
      synchronously.
         @private
    */
    _bootSync(options) {
      if (this._booted) {
        return this;
      }
      (true && !((0, _engineParent.getEngineParent)(this)) && (0, _debug.assert)("An engine instance's parent must be set via `setEngineParent(engine, parent)` prior to calling `engine.boot()`.", (0, _engineParent.getEngineParent)(this)));
      this.cloneParentDependencies();
      this.setupRegistry(options);
      this.base.runInstanceInitializers(this);
      this._booted = true;
      return this;
    }
    setupRegistry(options = this.__container__.lookup('-environment:main')) {
      this.constructor.setupRegistry(this.__registry__, options);
    }
    /**
     Unregister a factory.
        Overrides `RegistryProxy#unregister` in order to clear any cached instances
     of the unregistered factory.
        @public
     @method unregister
     @param {String} fullName
     */
    unregister(fullName) {
      this.__container__.reset(fullName);
      // We overwrote this method from RegistryProxyMixin.
      this.__registry__.unregister(fullName);
    }
    /**
      Build a new `EngineInstance` that's a child of this instance.
         Engines must be registered by name with their parent engine
      (or application).
         @private
      @method buildChildEngineInstance
      @param name {String} the registered name of the engine.
      @param options {Object} options provided to the engine instance.
      @return {EngineInstance,Error}
    */
    buildChildEngineInstance(name, options = {}) {
      var ChildEngine = this.lookup(`engine:${name}`);
      if (!ChildEngine) {
        throw new Error(`You attempted to mount the engine '${name}', but it is not registered with its parent.`);
      }
      (true && !(ChildEngine instanceof _engine.default) && (0, _debug.assert)('expected an Engine', ChildEngine instanceof _engine.default));
      var engineInstance = ChildEngine.buildInstance(options);
      (0, _engineParent.setEngineParent)(engineInstance, this);
      return engineInstance;
    }
    /**
      Clone dependencies shared between an engine instance and its parent.
         @private
      @method cloneParentDependencies
    */
    cloneParentDependencies() {
      var parent = (0, _engineParent.getEngineParent)(this);
      (true && !(parent) && (0, _debug.assert)('expected parent', parent));
      var registrations = ['route:basic', 'service:-routing'];
      registrations.forEach(key => {
        var registration = parent.resolveRegistration(key);
        (true && !((0, _owner.isFactory)(registration)) && (0, _debug.assert)('expected registration to be a factory', (0, _owner.isFactory)(registration)));
        this.register(key, registration);
      });
      var env = parent.lookup('-environment:main');
      this.register('-environment:main', env, {
        instantiate: false
      });
      // The type annotation forces TS to (a) validate that these match and (b)
      // *notice* that they match, e.g. below on the `singletons.push()`.
      var singletons = ['router:main', (0, _container.privatize)`-bucket-cache:main`, '-view-registry:main', `renderer:-dom`, 'service:-document'];
      if (env['isInteractive']) {
        singletons.push('event_dispatcher:main');
      }
      singletons.forEach(key => {
        // SAFETY: We already expect this to be a singleton
        var singleton = parent.lookup(key);
        this.register(key, singleton, {
          instantiate: false
        });
      });
    }
  }
  var _default = _exports.default = EngineInstance;
});
define("@ember/engine/lib/engine-parent", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ENGINE_PARENT = void 0;
  _exports.getEngineParent = getEngineParent;
  _exports.setEngineParent = setEngineParent;
  var ENGINE_PARENT = _exports.ENGINE_PARENT = Symbol('ENGINE_PARENT');
  /**
    `getEngineParent` retrieves an engine instance's parent instance.
  
    @method getEngineParent
    @param {EngineInstance} engine An engine instance.
    @return {EngineInstance} The parent engine instance.
    @for @ember/engine
    @static
    @private
  */
  function getEngineParent(engine) {
    return engine[ENGINE_PARENT];
  }
  /**
    `setEngineParent` sets an engine instance's parent instance.
  
    @method setEngineParent
    @param {EngineInstance} engine An engine instance.
    @param {EngineInstance} parent The parent engine instance.
    @private
  */
  function setEngineParent(engine, parent) {
    engine[ENGINE_PARENT] = parent;
  }
});
define("@ember/enumerable/index", ["exports", "@ember/object/mixin"], function (_exports, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var Enumerable = _mixin.default.create();
  var _default = _exports.default = Enumerable;
});
define("@ember/enumerable/mutable", ["exports", "@ember/enumerable", "@ember/object/mixin"], function (_exports, _enumerable, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var MutableEnumerable = _mixin.default.create(_enumerable.default);
  var _default = _exports.default = MutableEnumerable;
});
define("@ember/error/index", ["exports", "@ember/debug"], function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    The JavaScript Error object used by Ember.assert.
  
    @class Error
    @namespace Ember
    @extends Error
    @constructor
    @public
    @deprecated
  */
  var EmberError;
  if (true /* DEBUG */) {
    // eslint-disable-next-line no-inner-declarations
    function EmberDebugConstructor(message) {
      (true && !(false) && (0, _debug.deprecate)('The @ember/error package merely re-exported the native Error and is deprecated. Please use a native Error directly instead.', false, {
        id: 'deprecate-ember-error',
        until: '5.0.0',
        url: 'https://deprecations.emberjs.com/v4.x/#toc_deprecate-ember-error',
        for: 'ember-source',
        since: {
          available: '4.10.0',
          enabled: '4.10.0'
        }
      }));
      return new Error(message);
    }
    EmberDebugConstructor.prototype = Error.prototype;
    // SAFETY: We need this cast since our EmberDebugConstructor doesn't define a type for `new` even though it will work with `new`.
    EmberError = EmberDebugConstructor;
  } else {
    EmberError = Error;
  }
  var _default = _exports.default = EmberError;
});
define("@ember/helper/index", ["exports", "@glimmer/manager", "@glimmer/runtime"], function (_exports, _manager, _runtime) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "array", {
    enumerable: true,
    get: function () {
      return _runtime.array;
    }
  });
  Object.defineProperty(_exports, "capabilities", {
    enumerable: true,
    get: function () {
      return _manager.helperCapabilities;
    }
  });
  Object.defineProperty(_exports, "concat", {
    enumerable: true,
    get: function () {
      return _runtime.concat;
    }
  });
  Object.defineProperty(_exports, "fn", {
    enumerable: true,
    get: function () {
      return _runtime.fn;
    }
  });
  Object.defineProperty(_exports, "get", {
    enumerable: true,
    get: function () {
      return _runtime.get;
    }
  });
  Object.defineProperty(_exports, "hash", {
    enumerable: true,
    get: function () {
      return _runtime.hash;
    }
  });
  Object.defineProperty(_exports, "invokeHelper", {
    enumerable: true,
    get: function () {
      return _runtime.invokeHelper;
    }
  });
  Object.defineProperty(_exports, "setHelperManager", {
    enumerable: true,
    get: function () {
      return _manager.setHelperManager;
    }
  });
});
define("@ember/instrumentation/index", ["exports", "@ember/-internals/environment", "@ember/debug"], function (_exports, _environment, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports._instrumentStart = _instrumentStart;
  _exports.flaggedInstrument = flaggedInstrument;
  _exports.instrument = instrument;
  _exports.reset = reset;
  _exports.subscribe = subscribe;
  _exports.subscribers = void 0;
  _exports.unsubscribe = unsubscribe;
  /* eslint no-console:off */
  /* global console */

  /**
  @module @ember/instrumentation
  @private
  */
  /**
    The purpose of the Ember Instrumentation module is
    to provide efficient, general-purpose instrumentation
    for Ember.
  
    Subscribe to a listener by using `subscribe`:
  
    ```javascript
    import { subscribe } from '@ember/instrumentation';
  
    subscribe("render", {
      before(name, timestamp, payload) {
  
      },
  
      after(name, timestamp, payload) {
  
      }
    });
    ```
  
    If you return a value from the `before` callback, that same
    value will be passed as a fourth parameter to the `after`
    callback.
  
    Instrument a block of code by using `instrument`:
  
    ```javascript
    import { instrument } from '@ember/instrumentation';
  
    instrument("render.handlebars", payload, function() {
      // rendering logic
    }, binding);
    ```
  
    Event names passed to `instrument` are namespaced
    by periods, from more general to more specific. Subscribers
    can listen for events by whatever level of granularity they
    are interested in.
  
    In the above example, the event is `render.handlebars`,
    and the subscriber listened for all events beginning with
    `render`. It would receive callbacks for events named
    `render`, `render.handlebars`, `render.container`, or
    even `render.handlebars.layout`.
  
    @class Instrumentation
    @static
    @private
  */
  var subscribers = _exports.subscribers = [];
  var cache = {};
  function populateListeners(name) {
    var listeners = [];
    for (var subscriber of subscribers) {
      if (subscriber.regex.test(name)) {
        listeners.push(subscriber.object);
      }
    }
    cache[name] = listeners;
    return listeners;
  }
  var time = (() => {
    var perf = 'undefined' !== typeof window ? window.performance || {} : {};
    var fn = perf.now || perf.mozNow || perf.webkitNow || perf.msNow || perf.oNow;
    return fn ? fn.bind(perf) : Date.now;
  })();
  function isCallback(value) {
    return typeof value === 'function';
  }
  function instrument(name, p1, p2, p3) {
    var _payload;
    var callback;
    var binding;
    if (arguments.length <= 3 && isCallback(p1)) {
      callback = p1;
      binding = p2;
    } else {
      _payload = p1;
      callback = p2;
      binding = p3;
    }
    // fast path
    if (subscribers.length === 0) {
      return callback.call(binding);
    }
    // avoid allocating the payload in fast path
    var payload = _payload || {};
    var finalizer = _instrumentStart(name, () => payload);
    if (finalizer === NOOP) {
      return callback.call(binding);
    } else {
      return withFinalizer(callback, finalizer, payload, binding);
    }
  }
  function flaggedInstrument(_name, _payload, callback) {
    return callback();
  }
  function withFinalizer(callback, finalizer, payload, binding) {
    try {
      return callback.call(binding);
    } catch (e) {
      payload.exception = e;
      throw e;
    } finally {
      finalizer();
    }
  }
  function NOOP() {}
  function _instrumentStart(name, payloadFunc, payloadArg) {
    if (subscribers.length === 0) {
      return NOOP;
    }
    var listeners = cache[name];
    if (!listeners) {
      listeners = populateListeners(name);
    }
    if (listeners.length === 0) {
      return NOOP;
    }
    var payload = payloadFunc(payloadArg);
    var STRUCTURED_PROFILE = _environment.ENV.STRUCTURED_PROFILE;
    var timeName;
    if (STRUCTURED_PROFILE) {
      timeName = `${name}: ${payload.object}`;
      console.time(timeName);
    }
    var beforeValues = [];
    var timestamp = time();
    for (var listener of listeners) {
      beforeValues.push(listener.before(name, timestamp, payload));
    }
    var constListeners = listeners;
    return function _instrumentEnd() {
      var timestamp = time();
      for (var i = 0; i < constListeners.length; i++) {
        var _listener = constListeners[i];
        (true && !(_listener) && (0, _debug.assert)('has listener', _listener)); // Iterating over values
        if (typeof _listener.after === 'function') {
          _listener.after(name, timestamp, payload, beforeValues[i]);
        }
      }
      if (STRUCTURED_PROFILE) {
        console.timeEnd(timeName);
      }
    };
  }
  /**
    Subscribes to a particular event or instrumented block of code.
  
    @method subscribe
    @for @ember/instrumentation
    @static
  
    @param {String} [pattern] Namespaced event name.
    @param {Object} [object] Before and After hooks.
  
    @return {Subscriber}
    @private
  */
  function subscribe(pattern, object) {
    var paths = pattern.split('.');
    var regexes = [];
    for (var path of paths) {
      if (path === '*') {
        regexes.push('[^\\.]*');
      } else {
        regexes.push(path);
      }
    }
    var regex = regexes.join('\\.');
    regex = `${regex}(\\..*)?`;
    var subscriber = {
      pattern,
      regex: new RegExp(`^${regex}$`),
      object
    };
    subscribers.push(subscriber);
    cache = {};
    return subscriber;
  }
  /**
    Unsubscribes from a particular event or instrumented block of code.
  
    @method unsubscribe
    @for @ember/instrumentation
    @static
  
    @param {Object} [subscriber]
    @private
  */
  function unsubscribe(subscriber) {
    var index = 0;
    for (var i = 0; i < subscribers.length; i++) {
      if (subscribers[i] === subscriber) {
        index = i;
      }
    }
    subscribers.splice(index, 1);
    cache = {};
  }
  /**
    Resets `Instrumentation` by flushing list of subscribers.
  
    @method reset
    @for @ember/instrumentation
    @static
    @private
  */
  function reset() {
    subscribers.length = 0;
    cache = {};
  }
});
define("@ember/modifier/index", ["exports", "@glimmer/manager", "@ember/-internals/glimmer", "@glimmer/runtime"], function (_exports, _manager, _glimmer, _runtime) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "capabilities", {
    enumerable: true,
    get: function () {
      return _glimmer.modifierCapabilities;
    }
  });
  Object.defineProperty(_exports, "on", {
    enumerable: true,
    get: function () {
      return _runtime.on;
    }
  });
  Object.defineProperty(_exports, "setModifierManager", {
    enumerable: true,
    get: function () {
      return _manager.setModifierManager;
    }
  });
});
define("@ember/object/-internals", ["exports", "@ember/-internals/metal", "@ember/-internals/utils", "@ember/debug", "@ember/object"], function (_exports, _metal, _utils, _debug, _object) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.FrameworkObject = void 0;
  Object.defineProperty(_exports, "cacheFor", {
    enumerable: true,
    get: function () {
      return _metal.getCachedValueFor;
    }
  });
  Object.defineProperty(_exports, "guidFor", {
    enumerable: true,
    get: function () {
      return _utils.guidFor;
    }
  });
  var _a;
  var FrameworkObject = _exports.FrameworkObject = class FrameworkObject extends _object.default {};
  if (true /* DEBUG */) {
    var INIT_WAS_CALLED = Symbol('INIT_WAS_CALLED');
    var ASSERT_INIT_WAS_CALLED = (0, _utils.symbol)('ASSERT_INIT_WAS_CALLED');
    _exports.FrameworkObject = FrameworkObject = class DebugFrameworkObject extends _object.default {
      constructor() {
        super(...arguments);
        this[_a] = false;
      }
      init(properties) {
        super.init(properties);
        this[INIT_WAS_CALLED] = true;
      }
      [(_a = INIT_WAS_CALLED, ASSERT_INIT_WAS_CALLED)]() {
        (true && !(this[INIT_WAS_CALLED]) && (0, _debug.assert)(`You must call \`super.init(...arguments);\` or \`this._super(...arguments)\` when overriding \`init\` on a framework object. Please update ${this} to call \`super.init(...arguments);\` from \`init\` when using native classes or \`this._super(...arguments)\` when using \`EmberObject.extend()\`.`, this[INIT_WAS_CALLED]));
      }
    };
    (0, _metal.addListener)(FrameworkObject.prototype, 'init', null, ASSERT_INIT_WAS_CALLED);
  }
});
define("@ember/object/compat", ["exports", "@ember/-internals/metal", "@ember/debug", "@glimmer/validator"], function (_exports, _metal, _debug, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.dependentKeyCompat = dependentKeyCompat;
  var wrapGetterSetter = function (target, key, desc) {
    var {
      get: originalGet
    } = desc;
    (true && !((0, _metal.descriptorForProperty)(target, key) === undefined) && (0, _debug.assert)('You attempted to use @dependentKeyCompat on a property that already has been decorated with either @computed or @tracked. @dependentKeyCompat is only necessary for native getters that are not decorated with @computed.', (0, _metal.descriptorForProperty)(target, key) === undefined));
    if (originalGet !== undefined) {
      desc.get = function () {
        var propertyTag = (0, _validator.tagFor)(this, key);
        var ret;
        var tag = (0, _validator.track)(() => {
          ret = originalGet.call(this);
        });
        (0, _validator.updateTag)(propertyTag, tag);
        (0, _validator.consumeTag)(tag);
        return ret;
      };
    }
    return desc;
  };
  function dependentKeyCompat(...args) {
    if ((0, _metal.isElementDescriptor)(args)) {
      var [target, key, desc] = args;
      (true && !(desc != null && (typeof desc.get === 'function' || typeof desc.set === 'function')) && (0, _debug.assert)('The @dependentKeyCompat decorator must be applied to getters/setters when used in native classes', desc != null && (typeof desc.get === 'function' || typeof desc.set === 'function')));
      return wrapGetterSetter(target, key, desc);
    } else {
      var _desc2 = args[0];
      (true && !((value => {
        if (value && typeof value === 'object') {
          var cast = value;
          return (cast.configurable === undefined || cast.configurable === false || cast.configurable === true) && (cast.enumerable === undefined || cast.enumerable === false || cast.enumerable === true) && (cast.writable === undefined || cast.writable === false || cast.writable === true) && (cast.get === undefined || typeof cast.get === 'function') && (cast.set === undefined || typeof cast.set === 'function');
        }
        return false;
      })(_desc2)) && (0, _debug.assert)('expected valid PropertyDescriptor', (value => {
        if (value && typeof value === 'object') {
          var cast = value;
          return (cast.configurable === undefined || cast.configurable === false || cast.configurable === true) && (cast.enumerable === undefined || cast.enumerable === false || cast.enumerable === true) && (cast.writable === undefined || cast.writable === false || cast.writable === true) && (cast.get === undefined || typeof cast.get === 'function') && (cast.set === undefined || typeof cast.set === 'function');
        }
        return false;
      })(_desc2)));
      var decorator = function (target, key, _desc, _meta, isClassicDecorator) {
        (true && !(isClassicDecorator) && (0, _debug.assert)('The @dependentKeyCompat decorator may only be passed a method when used in classic classes. You should decorate getters/setters directly in native classes', isClassicDecorator));
        (true && !(typeof _desc2.get === 'function' || typeof _desc2.set === 'function') && (0, _debug.assert)('The dependentKeyCompat() decorator must be passed a getter or setter when used in classic classes', typeof _desc2.get === 'function' || typeof _desc2.set === 'function'));
        return wrapGetterSetter(target, key, _desc2);
      };
      (0, _metal.setClassicDecorator)(decorator);
      return decorator;
    }
  }
  (0, _metal.setClassicDecorator)(dependentKeyCompat);
});
define("@ember/object/computed", ["exports", "@ember/-internals/metal", "@ember/object/lib/computed/computed_macros", "@ember/object/lib/computed/reduce_computed_macros"], function (_exports, _metal, _computed_macros, _reduce_computed_macros) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "alias", {
    enumerable: true,
    get: function () {
      return _metal.alias;
    }
  });
  Object.defineProperty(_exports, "and", {
    enumerable: true,
    get: function () {
      return _computed_macros.and;
    }
  });
  Object.defineProperty(_exports, "bool", {
    enumerable: true,
    get: function () {
      return _computed_macros.bool;
    }
  });
  Object.defineProperty(_exports, "collect", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.collect;
    }
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _metal.ComputedProperty;
    }
  });
  Object.defineProperty(_exports, "deprecatingAlias", {
    enumerable: true,
    get: function () {
      return _computed_macros.deprecatingAlias;
    }
  });
  Object.defineProperty(_exports, "empty", {
    enumerable: true,
    get: function () {
      return _computed_macros.empty;
    }
  });
  Object.defineProperty(_exports, "equal", {
    enumerable: true,
    get: function () {
      return _computed_macros.equal;
    }
  });
  Object.defineProperty(_exports, "expandProperties", {
    enumerable: true,
    get: function () {
      return _metal.expandProperties;
    }
  });
  Object.defineProperty(_exports, "filter", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.filter;
    }
  });
  Object.defineProperty(_exports, "filterBy", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.filterBy;
    }
  });
  Object.defineProperty(_exports, "gt", {
    enumerable: true,
    get: function () {
      return _computed_macros.gt;
    }
  });
  Object.defineProperty(_exports, "gte", {
    enumerable: true,
    get: function () {
      return _computed_macros.gte;
    }
  });
  Object.defineProperty(_exports, "intersect", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.intersect;
    }
  });
  Object.defineProperty(_exports, "lt", {
    enumerable: true,
    get: function () {
      return _computed_macros.lt;
    }
  });
  Object.defineProperty(_exports, "lte", {
    enumerable: true,
    get: function () {
      return _computed_macros.lte;
    }
  });
  Object.defineProperty(_exports, "map", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.map;
    }
  });
  Object.defineProperty(_exports, "mapBy", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.mapBy;
    }
  });
  Object.defineProperty(_exports, "match", {
    enumerable: true,
    get: function () {
      return _computed_macros.match;
    }
  });
  Object.defineProperty(_exports, "max", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.max;
    }
  });
  Object.defineProperty(_exports, "min", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.min;
    }
  });
  Object.defineProperty(_exports, "none", {
    enumerable: true,
    get: function () {
      return _computed_macros.none;
    }
  });
  Object.defineProperty(_exports, "not", {
    enumerable: true,
    get: function () {
      return _computed_macros.not;
    }
  });
  Object.defineProperty(_exports, "notEmpty", {
    enumerable: true,
    get: function () {
      return _computed_macros.notEmpty;
    }
  });
  Object.defineProperty(_exports, "oneWay", {
    enumerable: true,
    get: function () {
      return _computed_macros.oneWay;
    }
  });
  Object.defineProperty(_exports, "or", {
    enumerable: true,
    get: function () {
      return _computed_macros.or;
    }
  });
  Object.defineProperty(_exports, "readOnly", {
    enumerable: true,
    get: function () {
      return _computed_macros.readOnly;
    }
  });
  Object.defineProperty(_exports, "reads", {
    enumerable: true,
    get: function () {
      return _computed_macros.oneWay;
    }
  });
  Object.defineProperty(_exports, "setDiff", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.setDiff;
    }
  });
  Object.defineProperty(_exports, "sort", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.sort;
    }
  });
  Object.defineProperty(_exports, "sum", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.sum;
    }
  });
  Object.defineProperty(_exports, "union", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.union;
    }
  });
  Object.defineProperty(_exports, "uniq", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.uniq;
    }
  });
  Object.defineProperty(_exports, "uniqBy", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.uniqBy;
    }
  });
});
define("@ember/object/core", ["exports", "@ember/-internals/container", "@ember/-internals/owner", "@ember/-internals/utils", "@ember/-internals/meta", "@ember/-internals/metal", "@ember/object/mixin", "@ember/-internals/runtime", "@ember/array", "@ember/debug", "@glimmer/util", "@glimmer/destroyable", "@glimmer/owner"], function (_exports, _container, _owner, _utils, _meta2, _metal, _mixin, _runtime, _array, _debug, _util, _destroyable, _owner2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    @module @ember/object/core
  */

  function hasSetUnknownProperty(val) {
    return typeof val === 'object' && val !== null && typeof val.setUnknownProperty === 'function';
  }
  function hasToStringExtension(val) {
    return typeof val === 'object' && val !== null && typeof val.toStringExtension === 'function';
  }
  var reopen = _mixin.default.prototype.reopen;
  var wasApplied = new _util._WeakSet();
  var prototypeMixinMap = new WeakMap();
  var initCalled = true /* DEBUG */ ? new _util._WeakSet() : undefined; // only used in debug builds to enable the proxy trap
  var destroyCalled = new Set();
  function ensureDestroyCalled(instance) {
    if (!destroyCalled.has(instance)) {
      instance.destroy();
    }
  }
  function initialize(obj, properties) {
    var m = (0, _meta2.meta)(obj);
    if (properties !== undefined) {
      (true && !(typeof properties === 'object' && properties !== null) && (0, _debug.assert)('EmberObject.create only accepts objects.', typeof properties === 'object' && properties !== null));
      (true && !(!(properties instanceof _mixin.default)) && (0, _debug.assert)('EmberObject.create no longer supports mixing in other ' + 'definitions, use .extend & .create separately instead.', !(properties instanceof _mixin.default)));
      var concatenatedProperties = obj.concatenatedProperties;
      var mergedProperties = obj.mergedProperties;
      var keyNames = Object.keys(properties);
      for (var keyName of keyNames) {
        var value = properties[keyName];
        (true && !(!(0, _metal.isClassicDecorator)(value)) && (0, _debug.assert)('EmberObject.create no longer supports defining computed ' + 'properties. Define computed properties using extend() or reopen() ' + 'before calling create().', !(0, _metal.isClassicDecorator)(value)));
        (true && !(!(typeof value === 'function' && value.toString().indexOf('._super') !== -1)) && (0, _debug.assert)('EmberObject.create no longer supports defining methods that call _super.', !(typeof value === 'function' && value.toString().indexOf('._super') !== -1)));
        (true && !(!(keyName === 'actions' && _runtime.ActionHandler.detect(obj))) && (0, _debug.assert)('`actions` must be provided at extend time, not at create time, ' + 'when Ember.ActionHandler is used (i.e. views, controllers & routes).', !(keyName === 'actions' && _runtime.ActionHandler.detect(obj))));
        var possibleDesc = (0, _metal.descriptorForProperty)(obj, keyName, m);
        var isDescriptor = possibleDesc !== undefined;
        if (!isDescriptor) {
          if (concatenatedProperties !== undefined && concatenatedProperties.length > 0 && concatenatedProperties.includes(keyName)) {
            var baseValue = obj[keyName];
            if (baseValue) {
              value = (0, _array.makeArray)(baseValue).concat(value);
            } else {
              value = (0, _array.makeArray)(value);
            }
          }
          if (mergedProperties !== undefined && mergedProperties.length > 0 && mergedProperties.includes(keyName)) {
            var _baseValue = obj[keyName];
            value = Object.assign({}, _baseValue, value);
          }
        }
        if (isDescriptor) {
          possibleDesc.set(obj, keyName, value);
        } else if (hasSetUnknownProperty(obj) && !(keyName in obj)) {
          obj.setUnknownProperty(keyName, value);
        } else {
          if (true /* DEBUG */) {
            (0, _metal.defineProperty)(obj, keyName, null, value, m); // setup mandatory setter
          } else {
            obj[keyName] = value;
          }
        }
      }
    }
    // using DEBUG here to avoid the extraneous variable when not needed
    if (true /* DEBUG */) {
      initCalled.add(obj);
    }
    obj.init(properties);
    m.unsetInitializing();
    var observerEvents = m.observerEvents();
    if (observerEvents !== undefined) {
      for (var i = 0; i < observerEvents.length; i++) {
        (0, _metal.activateObserver)(obj, observerEvents[i].event, observerEvents[i].sync);
      }
    }
    (0, _metal.sendEvent)(obj, 'init', undefined, undefined, m);
  }
  class CoreObject {
    constructor(owner) {
      this[_owner2.OWNER] = owner;
      // prepare prototype...
      this.constructor.proto();
      var self;
      if (true /* DEBUG */ && (0, _metal.hasUnknownProperty)(this)) {
        var messageFor = (obj, property) => {
          return `You attempted to access the \`${String(property)}\` property (of ${obj}).\n` + `Since Ember 3.1, this is usually fine as you no longer need to use \`.get()\`\n` + `to access computed properties. However, in this case, the object in question\n` + `is a special kind of Ember object (a proxy). Therefore, it is still necessary\n` + `to use \`.get('${String(property)}')\` in this case.\n\n` + `If you encountered this error because of third-party code that you don't control,\n` + `there is more information at https://github.com/emberjs/ember.js/issues/16148, and\n` + `you can help us improve this error message by telling us more about what happened in\n` + `this situation.`;
        };
        /* globals Proxy Reflect */
        self = new Proxy(this, {
          get(target, property, receiver) {
            if (property === _metal.PROXY_CONTENT) {
              return target;
            } else if (
            // init called will be set on the proxy, not the target, so get with the receiver
            !initCalled.has(receiver) || typeof property === 'symbol' || (0, _utils.isInternalSymbol)(property) || property === 'toJSON' || property === 'toString' || property === 'toStringExtension' || property === 'didDefineProperty' || property === 'willWatchProperty' || property === 'didUnwatchProperty' || property === 'didAddListener' || property === 'didRemoveListener' || property === 'isDescriptor' || property === '_onLookup' || property in target) {
              return Reflect.get(target, property, receiver);
            }
            var value = target.unknownProperty.call(receiver, property);
            if (typeof value !== 'function') {
              (true && !(value === undefined || value === null) && (0, _debug.assert)(messageFor(receiver, property), value === undefined || value === null));
            }
          }
        });
      } else {
        self = this;
      }
      var destroyable = self;
      (0, _destroyable.registerDestructor)(self, ensureDestroyCalled, true);
      (0, _destroyable.registerDestructor)(self, () => destroyable.willDestroy());
      // disable chains
      var m = (0, _meta2.meta)(self);
      m.setInitializing();
      // only return when in debug builds and `self` is the proxy created above
      if (true /* DEBUG */ && self !== this) {
        return self;
      }
    }
    reopen(...args) {
      (0, _mixin.applyMixin)(this, args);
      return this;
    }
    /**
      An overridable method called when objects are instantiated. By default,
      does nothing unless it is overridden during class definition.
         Example:
         ```javascript
      import EmberObject from '@ember/object';
         const Person = EmberObject.extend({
        init() {
          alert(`Name is ${this.get('name')}`);
        }
      });
         let steve = Person.create({
        name: 'Steve'
      });
         // alerts 'Name is Steve'.
      ```
         NOTE: If you do override `init` for a framework class like `Component`
      from `@ember/component`, be sure to call `this._super(...arguments)`
      in your `init` declaration!
      If you don't, Ember may not have an opportunity to
      do important setup work, and you'll see strange behavior in your
      application.
         @method init
      @public
    */
    init(_properties) {}
    /**
      Defines the properties that will be concatenated from the superclass
      (instead of overridden).
         By default, when you extend an Ember class a property defined in
      the subclass overrides a property with the same name that is defined
      in the superclass. However, there are some cases where it is preferable
      to build up a property's value by combining the superclass' property
      value with the subclass' value. An example of this in use within Ember
      is the `classNames` property of `Component` from `@ember/component`.
         Here is some sample code showing the difference between a concatenated
      property and a normal one:
         ```javascript
      import EmberObject from '@ember/object';
         const Bar = EmberObject.extend({
        // Configure which properties to concatenate
        concatenatedProperties: ['concatenatedProperty'],
           someNonConcatenatedProperty: ['bar'],
        concatenatedProperty: ['bar']
      });
         const FooBar = Bar.extend({
        someNonConcatenatedProperty: ['foo'],
        concatenatedProperty: ['foo']
      });
         let fooBar = FooBar.create();
      fooBar.get('someNonConcatenatedProperty'); // ['foo']
      fooBar.get('concatenatedProperty'); // ['bar', 'foo']
      ```
         This behavior extends to object creation as well. Continuing the
      above example:
         ```javascript
      let fooBar = FooBar.create({
        someNonConcatenatedProperty: ['baz'],
        concatenatedProperty: ['baz']
      })
      fooBar.get('someNonConcatenatedProperty'); // ['baz']
      fooBar.get('concatenatedProperty'); // ['bar', 'foo', 'baz']
      ```
         Adding a single property that is not an array will just add it in the array:
         ```javascript
      let fooBar = FooBar.create({
        concatenatedProperty: 'baz'
      })
      view.get('concatenatedProperty'); // ['bar', 'foo', 'baz']
      ```
         Using the `concatenatedProperties` property, we can tell Ember to mix the
      content of the properties.
         In `Component` the `classNames`, `classNameBindings` and
      `attributeBindings` properties are concatenated.
         This feature is available for you to use throughout the Ember object model,
      although typical app developers are likely to use it infrequently. Since
      it changes expectations about behavior of properties, you should properly
      document its usage in each individual concatenated property (to not
      mislead your users to think they can override the property in a subclass).
         @property concatenatedProperties
      @type Array
      @default null
      @public
    */
    /**
      Defines the properties that will be merged from the superclass
      (instead of overridden).
         By default, when you extend an Ember class a property defined in
      the subclass overrides a property with the same name that is defined
      in the superclass. However, there are some cases where it is preferable
      to build up a property's value by merging the superclass property value
      with the subclass property's value. An example of this in use within Ember
      is the `queryParams` property of routes.
         Here is some sample code showing the difference between a merged
      property and a normal one:
         ```javascript
      import EmberObject from '@ember/object';
         const Bar = EmberObject.extend({
        // Configure which properties are to be merged
        mergedProperties: ['mergedProperty'],
           someNonMergedProperty: {
          nonMerged: 'superclass value of nonMerged'
        },
        mergedProperty: {
          page: { replace: false },
          limit: { replace: true }
        }
      });
         const FooBar = Bar.extend({
        someNonMergedProperty: {
          completelyNonMerged: 'subclass value of nonMerged'
        },
        mergedProperty: {
          limit: { replace: false }
        }
      });
         let fooBar = FooBar.create();
         fooBar.get('someNonMergedProperty');
      // => { completelyNonMerged: 'subclass value of nonMerged' }
      //
      // Note the entire object, including the nonMerged property of
      // the superclass object, has been replaced
         fooBar.get('mergedProperty');
      // => {
      //   page: {replace: false},
      //   limit: {replace: false}
      // }
      //
      // Note the page remains from the superclass, and the
      // `limit` property's value of `false` has been merged from
      // the subclass.
      ```
         This behavior is not available during object `create` calls. It is only
      available at `extend` time.
         In `Route` the `queryParams` property is merged.
         This feature is available for you to use throughout the Ember object model,
      although typical app developers are likely to use it infrequently. Since
      it changes expectations about behavior of properties, you should properly
      document its usage in each individual merged property (to not
      mislead your users to think they can override the property in a subclass).
         @property mergedProperties
      @type Array
      @default null
      @public
    */
    /**
      Destroyed object property flag.
         if this property is `true` the observers and bindings were already
      removed by the effect of calling the `destroy()` method.
         @property isDestroyed
      @default false
      @public
    */
    get isDestroyed() {
      return (0, _destroyable.isDestroyed)(this);
    }
    set isDestroyed(_value) {
      (true && !(false) && (0, _debug.assert)(`You cannot set \`${this}.isDestroyed\` directly, please use \`.destroy()\`.`, false));
    }
    /**
      Destruction scheduled flag. The `destroy()` method has been called.
         The object stays intact until the end of the run loop at which point
      the `isDestroyed` flag is set.
         @property isDestroying
      @default false
      @public
    */
    get isDestroying() {
      return (0, _destroyable.isDestroying)(this);
    }
    set isDestroying(_value) {
      (true && !(false) && (0, _debug.assert)(`You cannot set \`${this}.isDestroying\` directly, please use \`.destroy()\`.`, false));
    }
    /**
      Destroys an object by setting the `isDestroyed` flag and removing its
      metadata, which effectively destroys observers and bindings.
         If you try to set a property on a destroyed object, an exception will be
      raised.
         Note that destruction is scheduled for the end of the run loop and does not
      happen immediately.  It will set an isDestroying flag immediately.
         @method destroy
      @return {EmberObject} receiver
      @public
    */
    destroy() {
      // Used to ensure that manually calling `.destroy()` does not immediately call destroy again
      destroyCalled.add(this);
      try {
        (0, _destroyable.destroy)(this);
      } finally {
        destroyCalled.delete(this);
      }
      return this;
    }
    /**
      Override to implement teardown.
         @method willDestroy
      @public
    */
    willDestroy() {}
    /**
      Returns a string representation which attempts to provide more information
      than Javascript's `toString` typically does, in a generic way for all Ember
      objects.
         ```javascript
      import EmberObject from '@ember/object';
         const Person = EmberObject.extend();
      person = Person.create();
      person.toString(); //=> "<Person:ember1024>"
      ```
         If the object's class is not defined on an Ember namespace, it will
      indicate it is a subclass of the registered superclass:
         ```javascript
      const Student = Person.extend();
      let student = Student.create();
      student.toString(); //=> "<(subclass of Person):ember1025>"
      ```
         If the method `toStringExtension` is defined, its return value will be
      included in the output.
         ```javascript
      const Teacher = Person.extend({
        toStringExtension() {
          return this.get('fullName');
        }
      });
      teacher = Teacher.create();
      teacher.toString(); //=> "<Teacher:ember1026:Tom Dale>"
      ```
         @method toString
      @return {String} string representation
      @public
    */
    toString() {
      var extension = hasToStringExtension(this) ? `:${this.toStringExtension()}` : '';
      return `<${(0, _container.getFactoryFor)(this) || '(unknown)'}:${(0, _utils.guidFor)(this)}${extension}>`;
    }
    static extend(...mixins) {
      var Class = class extends this {};
      reopen.apply(Class.PrototypeMixin, mixins);
      return Class;
    }
    static create(...args) {
      var props = args[0];
      var instance;
      if (props !== undefined) {
        instance = new this((0, _owner.getOwner)(props));
        // TODO(SAFETY): at present, we cannot actually rely on this being set,
        // because a number of acceptance tests are (incorrectly? Unclear!)
        // relying on the ability to run through this path with `factory` being
        // `undefined`. It's *possible* that actually means that the type for
        // `setFactoryFor()` should allow `undefined`, but we typed it the other
        // way for good reason! Accordingly, this *casts* `factory`, and the
        // commented-out `assert()` is here in the hope that we can enable it
        // after addressing tests *or* updating the call signature here.
        var factory = (0, _container.getFactoryFor)(props);
        // assert(`missing factory when creating object ${instance}`, factory !== undefined);
        (0, _container.setFactoryFor)(instance, factory);
      } else {
        instance = new this();
      }
      if (args.length <= 1) {
        initialize(instance, props);
      } else {
        initialize(instance, flattenProps.apply(this, args));
      }
      return instance;
    }
    /**
      Augments a constructor's prototype with additional
      properties and functions:
         ```javascript
      import EmberObject from '@ember/object';
         const MyObject = EmberObject.extend({
        name: 'an object'
      });
         o = MyObject.create();
      o.get('name'); // 'an object'
         MyObject.reopen({
        say(msg) {
          console.log(msg);
        }
      });
         o2 = MyObject.create();
      o2.say('hello'); // logs "hello"
         o.say('goodbye'); // logs "goodbye"
      ```
         To add functions and properties to the constructor itself,
      see `reopenClass`
         @method reopen
      @for @ember/object
      @static
      @public
    */
    static reopen(...args) {
      this.willReopen();
      reopen.apply(this.PrototypeMixin, args);
      return this;
    }
    static willReopen() {
      var p = this.prototype;
      if (wasApplied.has(p)) {
        wasApplied.delete(p);
        // If the base mixin already exists and was applied, create a new mixin to
        // make sure that it gets properly applied. Reusing the same mixin after
        // the first `proto` call will cause it to get skipped.
        if (prototypeMixinMap.has(this)) {
          prototypeMixinMap.set(this, _mixin.default.create(this.PrototypeMixin));
        }
      }
    }
    /**
      Augments a constructor's own properties and functions:
         ```javascript
      import EmberObject from '@ember/object';
         const MyObject = EmberObject.extend({
        name: 'an object'
      });
         MyObject.reopenClass({
        canBuild: false
      });
         MyObject.canBuild; // false
      o = MyObject.create();
      ```
         In other words, this creates static properties and functions for the class.
      These are only available on the class and not on any instance of that class.
         ```javascript
      import EmberObject from '@ember/object';
         const Person = EmberObject.extend({
        name: '',
        sayHello() {
          alert(`Hello. My name is ${this.get('name')}`);
        }
      });
         Person.reopenClass({
        species: 'Homo sapiens',
           createPerson(name) {
          return Person.create({ name });
        }
      });
         let tom = Person.create({
        name: 'Tom Dale'
      });
      let yehuda = Person.createPerson('Yehuda Katz');
         tom.sayHello(); // "Hello. My name is Tom Dale"
      yehuda.sayHello(); // "Hello. My name is Yehuda Katz"
      alert(Person.species); // "Homo sapiens"
      ```
         Note that `species` and `createPerson` are *not* valid on the `tom` and `yehuda`
      variables. They are only valid on `Person`.
         To add functions and properties to instances of
      a constructor by extending the constructor's prototype
      see `reopen`
         @method reopenClass
      @for @ember/object
      @static
      @public
    */
    static reopenClass(...mixins) {
      (0, _mixin.applyMixin)(this, mixins);
      return this;
    }
    static detect(obj) {
      if ('function' !== typeof obj) {
        return false;
      }
      while (obj) {
        if (obj === this) {
          return true;
        }
        obj = obj.superclass;
      }
      return false;
    }
    static detectInstance(obj) {
      return obj instanceof this;
    }
    /**
      In some cases, you may want to annotate computed properties with additional
      metadata about how they function or what values they operate on. For
      example, computed property functions may close over variables that are then
      no longer available for introspection.
         You can pass a hash of these values to a computed property like this:
         ```javascript
      import { computed } from '@ember/object';
         person: computed(function() {
        let personId = this.get('personId');
        return Person.create({ id: personId });
      }).meta({ type: Person })
      ```
         Once you've done this, you can retrieve the values saved to the computed
      property from your class like this:
         ```javascript
      MyClass.metaForProperty('person');
      ```
         This will return the original hash that was passed to `meta()`.
         @static
      @method metaForProperty
      @param key {String} property name
      @private
    */
    static metaForProperty(key) {
      var proto = this.proto(); // ensure prototype is initialized
      var possibleDesc = (0, _metal.descriptorForProperty)(proto, key);
      (true && !(possibleDesc !== undefined) && (0, _debug.assert)(`metaForProperty() could not find a computed property with key '${key}'.`, possibleDesc !== undefined));
      return possibleDesc._meta || {};
    }
    /**
      Iterate over each computed property for the class, passing its name
      and any associated metadata (see `metaForProperty`) to the callback.
         @static
      @method eachComputedProperty
      @param {Function} callback
      @param {Object} binding
      @private
    */
    static eachComputedProperty(callback, binding = this) {
      this.proto(); // ensure prototype is initialized
      var empty = {};
      (0, _meta2.meta)(this.prototype).forEachDescriptors((name, descriptor) => {
        if (descriptor.enumerable) {
          var _meta = descriptor._meta || empty;
          callback.call(binding, name, _meta);
        }
      });
    }
    static get PrototypeMixin() {
      var prototypeMixin = prototypeMixinMap.get(this);
      if (prototypeMixin === undefined) {
        prototypeMixin = _mixin.default.create();
        prototypeMixin.ownerConstructor = this;
        prototypeMixinMap.set(this, prototypeMixin);
      }
      return prototypeMixin;
    }
    static get superclass() {
      var c = Object.getPrototypeOf(this);
      return c !== Function.prototype ? c : undefined;
    }
    static proto() {
      var p = this.prototype;
      if (!wasApplied.has(p)) {
        wasApplied.add(p);
        var parent = this.superclass;
        if (parent) {
          parent.proto();
        }
        // If the prototype mixin exists, apply it. In the case of native classes,
        // it will not exist (unless the class has been reopened).
        if (prototypeMixinMap.has(this)) {
          this.PrototypeMixin.apply(p);
        }
      }
      return p;
    }
    static toString() {
      return `<${(0, _container.getFactoryFor)(this) || '(unknown)'}:constructor>`;
    }
  }
  CoreObject.isClass = true;
  CoreObject.isMethod = false;
  function flattenProps(...props) {
    var initProperties = {};
    for (var properties of props) {
      (true && !(!(properties instanceof _mixin.default)) && (0, _debug.assert)('EmberObject.create no longer supports mixing in other ' + 'definitions, use .extend & .create separately instead.', !(properties instanceof _mixin.default)));
      var keyNames = Object.keys(properties);
      for (var j = 0, k = keyNames.length; j < k; j++) {
        var keyName = keyNames[j];
        var value = properties[keyName];
        initProperties[keyName] = value;
      }
    }
    return initProperties;
  }
  if (true /* DEBUG */) {
    /**
      Provides lookup-time type validation for injected properties.
         @private
      @method _onLookup
    */
    CoreObject._onLookup = function injectedPropertyAssertion(debugContainerKey) {
      var [type] = debugContainerKey.split(':');
      var proto = this.proto();
      for (var key in proto) {
        var desc = (0, _metal.descriptorForProperty)(proto, key);
        if (desc && _metal.DEBUG_INJECTION_FUNCTIONS.has(desc._getter)) {
          (true && !(type === 'controller' || _metal.DEBUG_INJECTION_FUNCTIONS.get(desc._getter).type !== 'controller') && (0, _debug.assert)(`Defining \`${key}\` as an injected controller property on a non-controller (\`${debugContainerKey}\`) is not allowed.`, type === 'controller' || _metal.DEBUG_INJECTION_FUNCTIONS.get(desc._getter).type !== 'controller'));
        }
      }
    };
    /**
      Returns a hash of property names and container names that injected
      properties will lookup on the container lazily.
         @method _lazyInjections
      @return {Object} Hash of all lazy injected property keys to container names
      @private
    */
    CoreObject._lazyInjections = function () {
      var injections = {};
      var proto = this.proto();
      var key;
      var desc;
      for (key in proto) {
        desc = (0, _metal.descriptorForProperty)(proto, key);
        if (desc && _metal.DEBUG_INJECTION_FUNCTIONS.has(desc._getter)) {
          var {
            namespace,
            source,
            type,
            name
          } = _metal.DEBUG_INJECTION_FUNCTIONS.get(desc._getter);
          injections[key] = {
            namespace,
            source,
            specifier: `${type}:${name || key}`
          };
        }
      }
      return injections;
    };
  }
  var _default = _exports.default = CoreObject;
});
define("@ember/object/evented", ["exports", "@ember/-internals/metal", "@ember/object/mixin"], function (_exports, _metal, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  Object.defineProperty(_exports, "on", {
    enumerable: true,
    get: function () {
      return _metal.on;
    }
  });
  var Evented = _mixin.default.create({
    on(name, target, method) {
      (0, _metal.addListener)(this, name, target, method);
      return this;
    },
    one(name, target, method) {
      (0, _metal.addListener)(this, name, target, method, true);
      return this;
    },
    trigger(name, ...args) {
      (0, _metal.sendEvent)(this, name, args);
    },
    off(name, target, method) {
      (0, _metal.removeListener)(this, name, target, method);
      return this;
    },
    has(name) {
      return (0, _metal.hasListeners)(this, name);
    }
  });
  var _default = _exports.default = Evented;
});
define("@ember/object/events", ["exports", "@ember/-internals/metal"], function (_exports, _metal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "addListener", {
    enumerable: true,
    get: function () {
      return _metal.addListener;
    }
  });
  Object.defineProperty(_exports, "removeListener", {
    enumerable: true,
    get: function () {
      return _metal.removeListener;
    }
  });
  Object.defineProperty(_exports, "sendEvent", {
    enumerable: true,
    get: function () {
      return _metal.sendEvent;
    }
  });
});
define("@ember/object/index", ["exports", "@ember/debug", "@ember/-internals/environment", "@ember/-internals/metal", "@ember/-internals/container", "@ember/-internals/utils", "@ember/object/core", "@ember/object/observable"], function (_exports, _debug, _environment, _metal, _container, _utils, _core, _observable) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.action = action;
  Object.defineProperty(_exports, "computed", {
    enumerable: true,
    get: function () {
      return _metal.computed;
    }
  });
  _exports.default = void 0;
  Object.defineProperty(_exports, "defineProperty", {
    enumerable: true,
    get: function () {
      return _metal.defineProperty;
    }
  });
  Object.defineProperty(_exports, "get", {
    enumerable: true,
    get: function () {
      return _metal.get;
    }
  });
  Object.defineProperty(_exports, "getProperties", {
    enumerable: true,
    get: function () {
      return _metal.getProperties;
    }
  });
  Object.defineProperty(_exports, "notifyPropertyChange", {
    enumerable: true,
    get: function () {
      return _metal.notifyPropertyChange;
    }
  });
  _exports.observer = observer;
  Object.defineProperty(_exports, "set", {
    enumerable: true,
    get: function () {
      return _metal.set;
    }
  });
  Object.defineProperty(_exports, "setProperties", {
    enumerable: true,
    get: function () {
      return _metal.setProperties;
    }
  });
  Object.defineProperty(_exports, "trySet", {
    enumerable: true,
    get: function () {
      return _metal.trySet;
    }
  });
  class EmberObject extends _core.default.extend(_observable.default) {
    get _debugContainerKey() {
      var factory = (0, _container.getFactoryFor)(this);
      return factory !== undefined && factory.fullName;
    }
  }
  var _default = _exports.default = EmberObject;
  /**
    Decorator that turns the target function into an Action which can be accessed
    directly by reference.
  
    ```js
    import Component from '@ember/component';
    import { action, set } from '@ember/object';
  
    export default class Tooltip extends Component {
      @action
      toggleShowing() {
        set(this, 'isShowing', !this.isShowing);
      }
    }
    ```
    ```hbs
    <!-- template.hbs -->
    <button {{action this.toggleShowing}}>Show tooltip</button>
  
    {{#if isShowing}}
      <div class="tooltip">
        I'm a tooltip!
      </div>
    {{/if}}
    ```
  
    Decorated actions also interop with the string style template actions:
  
    ```hbs
    <!-- template.hbs -->
    <button {{action "toggleShowing"}}>Show tooltip</button>
  
    {{#if isShowing}}
      <div class="tooltip">
        I'm a tooltip!
      </div>
    {{/if}}
    ```
  
    It also binds the function directly to the instance, so it can be used in any
    context and will correctly refer to the class it came from:
  
    ```hbs
    <!-- template.hbs -->
    <button
      {{did-insert this.toggleShowing}}
      {{on "click" this.toggleShowing}}
    >
      Show tooltip
    </button>
  
    {{#if isShowing}}
      <div class="tooltip">
        I'm a tooltip!
      </div>
    {{/if}}
    ```
  
    This can also be used in JavaScript code directly:
  
    ```js
    import Component from '@ember/component';
    import { action, set } from '@ember/object';
  
    export default class Tooltip extends Component {
      constructor() {
        super(...arguments);
  
        // this.toggleShowing is still bound correctly when added to
        // the event listener
        document.addEventListener('click', this.toggleShowing);
      }
  
      @action
      toggleShowing() {
        set(this, 'isShowing', !this.isShowing);
      }
    }
    ```
  
    This is considered best practice, since it means that methods will be bound
    correctly no matter where they are used. By contrast, the `{{action}}` helper
    and modifier can also be used to bind context, but it will be required for
    every usage of the method:
  
    ```hbs
    <!-- template.hbs -->
    <button
      {{did-insert (action this.toggleShowing)}}
      {{on "click" (action this.toggleShowing)}}
    >
      Show tooltip
    </button>
  
    {{#if isShowing}}
      <div class="tooltip">
        I'm a tooltip!
      </div>
    {{/if}}
    ```
  
    They also do not have equivalents in JavaScript directly, so they cannot be
    used for other situations where binding would be useful.
  
    @public
    @method action
    @for @ember/object
    @static
    @param {Function|undefined} callback The function to turn into an action,
                                         when used in classic classes
    @return {PropertyDecorator} property decorator instance
  */
  var BINDINGS_MAP = new WeakMap();
  function hasProto(obj) {
    return obj != null && obj.constructor !== undefined && typeof obj.constructor.proto === 'function';
  }
  function setupAction(target, key, actionFn) {
    if (hasProto(target)) {
      target.constructor.proto();
    }
    if (!Object.prototype.hasOwnProperty.call(target, 'actions')) {
      var parentActions = target.actions;
      // we need to assign because of the way mixins copy actions down when inheriting
      target.actions = parentActions ? Object.assign({}, parentActions) : {};
    }
    (true && !(target.actions != null) && (0, _debug.assert)("[BUG] Somehow the target doesn't have actions!", target.actions != null));
    target.actions[key] = actionFn;
    return {
      get() {
        var bindings = BINDINGS_MAP.get(this);
        if (bindings === undefined) {
          bindings = new Map();
          BINDINGS_MAP.set(this, bindings);
        }
        var fn = bindings.get(actionFn);
        if (fn === undefined) {
          fn = actionFn.bind(this);
          bindings.set(actionFn, fn);
        }
        return fn;
      }
    };
  }
  function action(...args) {
    var actionFn;
    if (!(0, _metal.isElementDescriptor)(args)) {
      actionFn = args[0];
      var decorator = function (target, key, _desc, _meta, isClassicDecorator) {
        (true && !(isClassicDecorator) && (0, _debug.assert)('The @action decorator may only be passed a method when used in classic classes. You should decorate methods directly in native classes', isClassicDecorator));
        (true && !(typeof actionFn === 'function') && (0, _debug.assert)('The action() decorator must be passed a method when used in classic classes', typeof actionFn === 'function'));
        return setupAction(target, key, actionFn);
      };
      (0, _metal.setClassicDecorator)(decorator);
      return decorator;
    }
    var [target, key, desc] = args;
    actionFn = desc === null || desc === void 0 ? void 0 : desc.value;
    (true && !(typeof actionFn === 'function') && (0, _debug.assert)('The @action decorator must be applied to methods when used in native classes', typeof actionFn === 'function')); // SAFETY: TS types are weird with decorators. This should work.
    return setupAction(target, key, actionFn);
  }
  // SAFETY: TS types are weird with decorators. This should work.
  (0, _metal.setClassicDecorator)(action);
  /**
    Specify a method that observes property changes.
  
    ```javascript
    import EmberObject from '@ember/object';
    import { observer } from '@ember/object';
  
    export default EmberObject.extend({
      valueObserver: observer('value', function() {
        // Executes whenever the "value" property changes
      })
    });
    ```
  
    Also available as `Function.prototype.observes` if prototype extensions are
    enabled.
  
    @method observer
    @for @ember/object
    @param {String} propertyNames*
    @param {Function} func
    @return func
    @public
    @static
  */
  function observer(...args) {
    var funcOrDef = args.pop();
    (true && !(typeof funcOrDef === 'function' || typeof funcOrDef === 'object' && funcOrDef !== null) && (0, _debug.assert)('observer must be provided a function or an observer definition', typeof funcOrDef === 'function' || typeof funcOrDef === 'object' && funcOrDef !== null));
    var func;
    var dependentKeys;
    var sync;
    if (typeof funcOrDef === 'function') {
      func = funcOrDef;
      dependentKeys = args;
      sync = !_environment.ENV._DEFAULT_ASYNC_OBSERVERS;
    } else {
      func = funcOrDef.fn;
      dependentKeys = funcOrDef.dependentKeys;
      sync = funcOrDef.sync;
    }
    (true && !(typeof func === 'function') && (0, _debug.assert)('observer called without a function', typeof func === 'function'));
    (true && !(Array.isArray(dependentKeys) && dependentKeys.length > 0 && dependentKeys.every(p => typeof p === 'string' && Boolean(p.length))) && (0, _debug.assert)('observer called without valid path', Array.isArray(dependentKeys) && dependentKeys.length > 0 && dependentKeys.every(p => typeof p === 'string' && Boolean(p.length))));
    (true && !(typeof sync === 'boolean') && (0, _debug.assert)('observer called without sync', typeof sync === 'boolean'));
    var paths = [];
    for (var dependentKey of dependentKeys) {
      (0, _metal.expandProperties)(dependentKey, path => paths.push(path));
    }
    (0, _utils.setObservers)(func, {
      paths,
      sync
    });
    return func;
  }
});
define("@ember/object/internals", ["exports", "@ember/object/-internals"], function (_exports, _internals) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "cacheFor", {
    enumerable: true,
    get: function () {
      return _internals.cacheFor;
    }
  });
  Object.defineProperty(_exports, "guidFor", {
    enumerable: true,
    get: function () {
      return _internals.guidFor;
    }
  });
});
define("@ember/object/lib/computed/computed_macros", ["exports", "@ember/-internals/metal", "@ember/object", "@ember/debug", "@ember/utils"], function (_exports, _metal, _object, _debug, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.and = void 0;
  _exports.bool = bool;
  _exports.deprecatingAlias = deprecatingAlias;
  _exports.empty = empty;
  _exports.equal = equal;
  _exports.gt = gt;
  _exports.gte = gte;
  _exports.lt = lt;
  _exports.lte = lte;
  _exports.match = match;
  _exports.none = none;
  _exports.not = not;
  _exports.notEmpty = notEmpty;
  _exports.oneWay = oneWay;
  _exports.or = void 0;
  _exports.readOnly = readOnly;
  /**
  @module @ember/object
  */
  function expandPropertiesToArray(predicateName, properties) {
    var expandedProperties = [];
    function extractProperty(entry) {
      expandedProperties.push(entry);
    }
    for (var property of properties) {
      (true && !(property.indexOf(' ') < 0) && (0, _debug.assert)(`Dependent keys passed to \`${predicateName}\` computed macro can't have spaces.`, property.indexOf(' ') < 0));
      (0, _metal.expandProperties)(property, extractProperty);
    }
    return expandedProperties;
  }
  function generateComputedWithPredicate(name, predicate) {
    return (dependentKey, ...additionalDependentKeys) => {
      var properties = [dependentKey, ...additionalDependentKeys];
      (true && !(!(0, _metal.isElementDescriptor)(properties)) && (0, _debug.assert)(`You attempted to use @${name} as a decorator directly, but it requires at least one dependent key parameter`, !(0, _metal.isElementDescriptor)(properties)));
      var dependentKeys = expandPropertiesToArray(name, properties);
      var computedFunc = (0, _metal.computed)(...dependentKeys, function () {
        var lastIdx = dependentKeys.length - 1;
        for (var i = 0; i < lastIdx; i++) {
          // SAFETY: `i` is derived from the length of `dependentKeys`
          var value = (0, _object.get)(this, dependentKeys[i]);
          if (!predicate(value)) {
            return value;
          }
        }
        // SAFETY: `lastIdx` is derived from the length of `dependentKeys`
        return (0, _object.get)(this, dependentKeys[lastIdx]);
      });
      return computedFunc;
    };
  }
  /**
    A computed property macro that returns true if the value of the dependent
    property is null, an empty string, empty array, or empty function.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { empty } from '@ember/object/computed';
  
    class ToDoList {
      constructor(todos) {
        set(this, 'todos', todos);
      }
  
      @empty('todos') isDone;
    }
  
    let todoList = new ToDoList(
      ['Unit Test', 'Documentation', 'Release']
    );
  
    todoList.isDone; // false
    set(todoList, 'todos', []);
    todoList.isDone; // true
    ```
  
    @since 1.6.0
    @method empty
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which returns true if the value
    of the dependent property is null, an empty string, empty array, or empty
    function and false if the underlying value is not empty.
  
    @public
  */
  function empty(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @empty as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(`${dependentKey}.length`, function () {
      return (0, _utils.isEmpty)((0, _object.get)(this, dependentKey));
    });
  }
  /**
    A computed property that returns true if the value of the dependent property
    is NOT null, an empty string, empty array, or empty function.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { notEmpty } from '@ember/object/computed';
  
    class Hamster {
      constructor(backpack) {
        set(this, 'backpack', backpack);
      }
  
      @notEmpty('backpack') hasStuff
    }
  
    let hamster = new Hamster(
      ['Food', 'Sleeping Bag', 'Tent']
    );
  
    hamster.hasStuff; // true
    set(hamster, 'backpack', []);
    hamster.hasStuff; // false
    ```
  
    @method notEmpty
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which returns true if original
    value for property is not empty.
    @public
  */
  function notEmpty(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @notEmpty as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(`${dependentKey}.length`, function () {
      return !(0, _utils.isEmpty)((0, _object.get)(this, dependentKey));
    });
  }
  /**
    A computed property that returns true if the value of the dependent property
    is null or undefined. This avoids errors from JSLint complaining about use of
    ==, which can be technically confusing.
  
    ```javascript
    import { set } from '@ember/object';
    import { none } from '@ember/object/computed';
  
    class Hamster {
      @none('food') isHungry;
    }
  
    let hamster = new Hamster();
  
    hamster.isHungry; // true
  
    set(hamster, 'food', 'Banana');
    hamster.isHungry; // false
  
    set(hamster, 'food', null);
    hamster.isHungry; // true
    ```
  
    @method none
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which returns true if original
    value for property is null or undefined.
    @public
  */
  function none(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @none as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      return (0, _utils.isNone)((0, _object.get)(this, dependentKey));
    });
  }
  /**
    A computed property that returns the inverse boolean value of the original
    value for the dependent property.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { not } from '@ember/object/computed';
  
    class User {
      loggedIn = false;
  
      @not('loggedIn') isAnonymous;
    }
  
    let user = new User();
  
    user.isAnonymous; // true
    set(user, 'loggedIn', true);
    user.isAnonymous; // false
    ```
  
    @method not
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which returns inverse of the
    original value for property
    @public
  */
  function not(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @not as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      return !(0, _object.get)(this, dependentKey);
    });
  }
  /**
    A computed property that converts the provided dependent property into a
    boolean value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { bool } from '@ember/object/computed';
  
  
    class Hamster {
      @bool('numBananas') hasBananas
    }
  
    let hamster = new Hamster();
  
    hamster.hasBananas; // false
  
    set(hamster, 'numBananas', 0);
    hamster.hasBananas; // false
  
    set(hamster, 'numBananas', 1);
    hamster.hasBananas; // true
  
    set(hamster, 'numBananas', null);
    hamster.hasBananas; // false
    ```
  
    @method bool
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which converts to boolean the
    original value for property
    @public
  */
  function bool(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @bool as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      return Boolean((0, _object.get)(this, dependentKey));
    });
  }
  /**
    A computed property which matches the original value for the dependent
    property against a given RegExp, returning `true` if the value matches the
    RegExp and `false` if it does not.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { match } from '@ember/object/computed';
  
    class User {
      @match('email', /^.+@.+\..+$/) hasValidEmail;
    }
  
    let user = new User();
  
    user.hasValidEmail; // false
  
    set(user, 'email', '');
    user.hasValidEmail; // false
  
    set(user, 'email', 'ember_hamster@example.com');
    user.hasValidEmail; // true
    ```
  
    @method match
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {RegExp} regexp
    @return {ComputedProperty} computed property which match the original value
    for property against a given RegExp
    @public
  */
  function match(dependentKey, regexp) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @match as a decorator directly, but it requires `dependentKey` and `regexp` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      var value = (0, _object.get)(this, dependentKey);
      return regexp.test(value);
    });
  }
  /**
    A computed property that returns true if the provided dependent property is
    equal to the given value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { equal } from '@ember/object/computed';
  
    class Hamster {
      @equal('percentCarrotsEaten', 100) satisfied;
    }
  
    let hamster = new Hamster();
  
    hamster.satisfied; // false
  
    set(hamster, 'percentCarrotsEaten', 100);
    hamster.satisfied; // true
  
    set(hamster, 'percentCarrotsEaten', 50);
    hamster.satisfied; // false
    ```
  
    @method equal
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {String|Number|Object} value
    @return {ComputedProperty} computed property which returns true if the
    original value for property is equal to the given value.
    @public
  */
  function equal(dependentKey, value) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @equal as a decorator directly, but it requires `dependentKey` and `value` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      return (0, _object.get)(this, dependentKey) === value;
    });
  }
  /**
    A computed property that returns true if the provided dependent property is
    greater than the provided value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { gt } from '@ember/object/computed';
  
    class Hamster {
      @gt('numBananas', 10) hasTooManyBananas;
    }
  
    let hamster = new Hamster();
  
    hamster.hasTooManyBananas; // false
  
    set(hamster, 'numBananas', 3);
    hamster.hasTooManyBananas; // false
  
    set(hamster, 'numBananas', 11);
    hamster.hasTooManyBananas; // true
    ```
  
    @method gt
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Number} value
    @return {ComputedProperty} computed property which returns true if the
    original value for property is greater than given value.
    @public
  */
  function gt(dependentKey, value) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @gt as a decorator directly, but it requires `dependentKey` and `value` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      return (0, _object.get)(this, dependentKey) > value;
    });
  }
  /**
    A computed property that returns true if the provided dependent property is
    greater than or equal to the provided value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { gte } from '@ember/object/computed';
  
    class Hamster {
      @gte('numBananas', 10) hasTooManyBananas;
    }
  
    let hamster = new Hamster();
  
    hamster.hasTooManyBananas; // false
  
    set(hamster, 'numBananas', 3);
    hamster.hasTooManyBananas; // false
  
    set(hamster, 'numBananas', 10);
    hamster.hasTooManyBananas; // true
    ```
  
    @method gte
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Number} value
    @return {ComputedProperty} computed property which returns true if the
    original value for property is greater or equal then given value.
    @public
  */
  function gte(dependentKey, value) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @gte as a decorator directly, but it requires `dependentKey` and `value` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      return (0, _object.get)(this, dependentKey) >= value;
    });
  }
  /**
    A computed property that returns true if the provided dependent property is
    less than the provided value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { lt } from '@ember/object/computed';
  
    class Hamster {
      @lt('numBananas', 3) needsMoreBananas;
    }
  
    let hamster = new Hamster();
  
    hamster.needsMoreBananas; // true
  
    set(hamster, 'numBananas', 3);
    hamster.needsMoreBananas; // false
  
    set(hamster, 'numBananas', 2);
    hamster.needsMoreBananas; // true
    ```
  
    @method lt
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Number} value
    @return {ComputedProperty} computed property which returns true if the
    original value for property is less then given value.
    @public
  */
  function lt(dependentKey, value) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @lt as a decorator directly, but it requires `dependentKey` and `value` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      return (0, _object.get)(this, dependentKey) < value;
    });
  }
  /**
    A computed property that returns true if the provided dependent property is
    less than or equal to the provided value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { lte } from '@ember/object/computed';
  
    class Hamster {
      @lte('numBananas', 3) needsMoreBananas;
    }
  
    let hamster = new Hamster();
  
    hamster.needsMoreBananas; // true
  
    set(hamster, 'numBananas', 5);
    hamster.needsMoreBananas; // false
  
    set(hamster, 'numBananas', 3);
    hamster.needsMoreBananas; // true
    ```
  
    @method lte
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Number} value
    @return {ComputedProperty} computed property which returns true if the
    original value for property is less or equal than given value.
    @public
  */
  function lte(dependentKey, value) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @lte as a decorator directly, but it requires `dependentKey` and `value` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      return (0, _object.get)(this, dependentKey) <= value;
    });
  }
  /**
    A computed property that performs a logical `and` on the original values for
    the provided dependent properties.
  
    You may pass in more than two properties and even use property brace
    expansion.  The computed property will return the first falsy value or last
    truthy value just like JavaScript's `&&` operator.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { and } from '@ember/object/computed';
  
    class Hamster {
      @and('hasTent', 'hasBackpack') readyForCamp;
      @and('hasWalkingStick', 'hasBackpack') readyForHike;
    }
  
    let tomster = new Hamster();
  
    tomster.readyForCamp; // false
  
    set(tomster, 'hasTent', true);
    tomster.readyForCamp; // false
  
    set(tomster, 'hasBackpack', true);
    tomster.readyForCamp; // true
  
    set(tomster, 'hasBackpack', 'Yes');
    tomster.readyForCamp; // 'Yes'
  
    set(tomster, 'hasWalkingStick', null);
    tomster.readyForHike; // null
    ```
  
    @method and
    @static
    @for @ember/object/computed
    @param {String} dependentKey*
    @return {ComputedProperty} computed property which performs a logical `and` on
    the values of all the original values for properties.
    @public
  */
  var and = _exports.and = generateComputedWithPredicate('and', value => value);
  /**
    A computed property which performs a logical `or` on the original values for
    the provided dependent properties.
  
    You may pass in more than two properties and even use property brace
    expansion.  The computed property will return the first truthy value or last
    falsy value just like JavaScript's `||` operator.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { or } from '@ember/object/computed';
  
    class Hamster {
      @or('hasJacket', 'hasUmbrella') readyForRain;
      @or('hasSunscreen', 'hasUmbrella') readyForBeach;
    }
  
    let tomster = new Hamster();
  
    tomster.readyForRain; // undefined
  
    set(tomster, 'hasUmbrella', true);
    tomster.readyForRain; // true
  
    set(tomster, 'hasJacket', 'Yes');
    tomster.readyForRain; // 'Yes'
  
    set(tomster, 'hasSunscreen', 'Check');
    tomster.readyForBeach; // 'Check'
    ```
  
    @method or
    @static
    @for @ember/object/computed
    @param {String} dependentKey*
    @return {ComputedProperty} computed property which performs a logical `or` on
    the values of all the original values for properties.
    @public
  */
  var or = _exports.or = generateComputedWithPredicate('or', value => !value);
  /**
    Creates a new property that is an alias for another property on an object.
    Calls to `get` or `set` this property behave as though they were called on the
    original property.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { alias } from '@ember/object/computed';
  
    class Person {
      name = 'Alex Matchneer';
  
      @alias('name') nomen;
    }
  
    let alex = new Person();
  
    alex.nomen; // 'Alex Matchneer'
    alex.name;  // 'Alex Matchneer'
  
    set(alex, 'nomen', '@machty');
    alex.name;  // '@machty'
    ```
  
    @method alias
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which creates an alias to the
    original value for property.
    @public
  */
  /**
    Where the `alias` computed macro aliases `get` and `set`, and allows for
    bidirectional data flow, the `oneWay` computed macro only provides an aliased
    `get`. The `set` will not mutate the upstream property, rather causes the
    current property to become the value set. This causes the downstream property
    to permanently diverge from the upstream property.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { oneWay }from '@ember/object/computed';
  
    class User {
      constructor(firstName, lastName) {
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
  
      @oneWay('firstName') nickName;
    }
  
    let teddy = new User('Teddy', 'Zeenny');
  
    teddy.nickName; // 'Teddy'
  
    set(teddy, 'nickName', 'TeddyBear');
    teddy.firstName; // 'Teddy'
    teddy.nickName; // 'TeddyBear'
    ```
  
    @method oneWay
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which creates a one way computed
    property to the original value for property.
    @public
  */
  function oneWay(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @oneWay as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.alias)(dependentKey).oneWay();
  }
  /**
    This is a more semantically meaningful alias of the `oneWay` computed macro,
    whose name is somewhat ambiguous as to which direction the data flows.
  
    @method reads
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which creates a one way computed
      property to the original value for property.
    @public
   */
  /**
    Where `oneWay` computed macro provides oneWay bindings, the `readOnly`
    computed macro provides a readOnly one way binding. Very often when using
    the `oneWay` macro one does not also want changes to propagate back up, as
    they will replace the value.
  
    This prevents the reverse flow, and also throws an exception when it occurs.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { readOnly } from '@ember/object/computed';
  
    class User {
      constructor(firstName, lastName) {
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
  
      @readOnly('firstName') nickName;
    });
  
    let teddy = new User('Teddy', 'Zeenny');
  
    teddy.nickName; // 'Teddy'
  
    set(teddy, 'nickName', 'TeddyBear'); // throws Exception
    // throw new EmberError('Cannot Set: nickName on: <User:ember27288>' );`
  
    teddy.firstName; // 'Teddy'
    ```
  
    @method readOnly
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which creates a one way computed
    property to the original value for property.
    @since 1.5.0
    @public
  */
  function readOnly(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @readOnly as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.alias)(dependentKey).readOnly();
  }
  /**
    Creates a new property that is an alias for another property on an object.
    Calls to `get` or `set` this property behave as though they were called on the
    original property, but also print a deprecation warning.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { deprecatingAlias } from '@ember/object/computed';
  
    class Hamster {
      @deprecatingAlias('cavendishCount', {
        id: 'hamster.deprecate-banana',
        until: '3.0.0'
      })
      bananaCount;
    }
  
    let hamster = new Hamster();
  
    set(hamster, 'bananaCount', 5); // Prints a deprecation warning.
    hamster.cavendishCount; // 5
    ```
  
    @method deprecatingAlias
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Object} options Options for `deprecate`.
    @return {ComputedProperty} computed property which creates an alias with a
    deprecation to the original value for property.
    @since 1.7.0
    @public
  */
  function deprecatingAlias(dependentKey, options) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @deprecatingAlias as a decorator directly, but it requires `dependentKey` and `options` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, {
      get(key) {
        (true && !(false) && (0, _debug.deprecate)(`Usage of \`${key}\` is deprecated, use \`${dependentKey}\` instead.`, false, options));
        return (0, _object.get)(this, dependentKey);
      },
      set(key, value) {
        (true && !(false) && (0, _debug.deprecate)(`Usage of \`${key}\` is deprecated, use \`${dependentKey}\` instead.`, false, options));
        (0, _object.set)(this, dependentKey, value);
        return value;
      }
    });
  }
});
define("@ember/object/lib/computed/reduce_computed_macros", ["exports", "@ember/debug", "@ember/-internals/metal", "@ember/object", "@ember/utils", "@ember/array"], function (_exports, _debug, _metal, _object, _utils, _array) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.collect = collect;
  _exports.filter = filter;
  _exports.filterBy = filterBy;
  _exports.intersect = intersect;
  _exports.map = map;
  _exports.mapBy = mapBy;
  _exports.max = max;
  _exports.min = min;
  _exports.setDiff = setDiff;
  _exports.sort = sort;
  _exports.sum = sum;
  _exports.union = void 0;
  _exports.uniq = uniq;
  _exports.uniqBy = uniqBy;
  /**
  @module @ember/object
  */

  function isNativeOrEmberArray(obj) {
    return Array.isArray(obj) || _array.default.detect(obj);
  }
  function reduceMacro(dependentKey, callback, initialValue, name) {
    (true && !(!/[[\]{}]/g.test(dependentKey)) && (0, _debug.assert)(`Dependent key passed to \`${name}\` computed macro shouldn't contain brace expanding pattern.`, !/[[\]{}]/g.test(dependentKey)));
    return (0, _object.computed)(`${dependentKey}.[]`, function () {
      var arr = (0, _object.get)(this, dependentKey);
      if (arr === null || typeof arr !== 'object') {
        return initialValue;
      }
      return arr.reduce(callback, initialValue, this);
    }).readOnly();
  }
  function arrayMacro(dependentKey, additionalDependentKeys, callback) {
    // This is a bit ugly
    var propertyName;
    if (/@each/.test(dependentKey)) {
      propertyName = dependentKey.replace(/\.@each.*$/, '');
    } else {
      propertyName = dependentKey;
      dependentKey += '.[]';
    }
    return (0, _object.computed)(dependentKey, ...additionalDependentKeys, function () {
      var value = (0, _object.get)(this, propertyName);
      if (isNativeOrEmberArray(value)) {
        return (0, _array.A)(callback.call(this, value));
      } else {
        return (0, _array.A)();
      }
    }).readOnly();
  }
  function multiArrayMacro(_dependentKeys, callback, name) {
    (true && !(_dependentKeys.every(dependentKey => !/[[\]{}]/g.test(dependentKey))) && (0, _debug.assert)(`Dependent keys passed to \`${name}\` computed macro shouldn't contain brace expanding pattern.`, _dependentKeys.every(dependentKey => !/[[\]{}]/g.test(dependentKey))));
    var dependentKeys = _dependentKeys.map(key => `${key}.[]`);
    return (0, _object.computed)(...dependentKeys, function () {
      return (0, _array.A)(callback.call(this, _dependentKeys));
    }).readOnly();
  }
  /**
    A computed property that returns the sum of the values in the dependent array.
  
    Example:
  
    ```javascript
    import { sum } from '@ember/object/computed';
  
    class Invoice {
      lineItems = [1.00, 2.50, 9.99];
  
      @sum('lineItems') total;
    }
  
    let invoice = new Invoice();
  
    invoice.total; // 13.49
    ```
  
    @method sum
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @return {ComputedProperty} computes the sum of all values in the
    dependentKey's array
    @since 1.4.0
    @public
  */
  function sum(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @sum as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return reduceMacro(dependentKey, (sum, item) => sum + item, 0, 'sum');
  }
  /**
    A computed property that calculates the maximum value in the dependent array.
    This will return `-Infinity` when the dependent array is empty.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { mapBy, max } from '@ember/object/computed';
  
    class Person {
      children = [];
  
      @mapBy('children', 'age') childAges;
      @max('childAges') maxChildAge;
    }
  
    let lordByron = new Person();
  
    lordByron.maxChildAge; // -Infinity
  
    set(lordByron, 'children', [
      {
        name: 'Augusta Ada Byron',
        age: 7
      }
    ]);
    lordByron.maxChildAge; // 7
  
    set(lordByron, 'children', [
      ...lordByron.children,
      {
        name: 'Allegra Byron',
        age: 5
      }, {
        name: 'Elizabeth Medora Leigh',
        age: 8
      }
    ]);
    lordByron.maxChildAge; // 8
    ```
  
    If the types of the arguments are not numbers, they will be converted to
    numbers and the type of the return value will always be `Number`. For example,
    the max of a list of Date objects will be the highest timestamp as a `Number`.
    This behavior is consistent with `Math.max`.
  
    @method max
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @return {ComputedProperty} computes the largest value in the dependentKey's
    array
    @public
  */
  function max(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @max as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return reduceMacro(dependentKey, (max, item) => Math.max(max, item), -Infinity, 'max');
  }
  /**
    A computed property that calculates the minimum value in the dependent array.
    This will return `Infinity` when the dependent array is empty.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { mapBy, min } from '@ember/object/computed';
  
    class Person {
      children = [];
  
      @mapBy('children', 'age') childAges;
      @min('childAges') minChildAge;
    }
  
    let lordByron = Person.create({ children: [] });
  
    lordByron.minChildAge; // Infinity
  
    set(lordByron, 'children', [
      {
        name: 'Augusta Ada Byron',
        age: 7
      }
    ]);
    lordByron.minChildAge; // 7
  
    set(lordByron, 'children', [
      ...lordByron.children,
      {
        name: 'Allegra Byron',
        age: 5
      }, {
        name: 'Elizabeth Medora Leigh',
        age: 8
      }
    ]);
    lordByron.minChildAge; // 5
    ```
  
    If the types of the arguments are not numbers, they will be converted to
    numbers and the type of the return value will always be `Number`. For example,
    the min of a list of Date objects will be the lowest timestamp as a `Number`.
    This behavior is consistent with `Math.min`.
  
    @method min
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @return {ComputedProperty} computes the smallest value in the dependentKey's array
    @public
  */
  function min(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @min as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return reduceMacro(dependentKey, (min, item) => Math.min(min, item), Infinity, 'min');
  }
  function map(dependentKey, additionalDependentKeysOrCallback, callback) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @map as a decorator directly, but it requires atleast `dependentKey` and `callback` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    (true && !(typeof callback === 'function' || callback === undefined && typeof additionalDependentKeysOrCallback === 'function') && (0, _debug.assert)('The final parameter provided to map must be a callback function', typeof callback === 'function' || callback === undefined && typeof additionalDependentKeysOrCallback === 'function'));
    (true && !(Array.isArray(additionalDependentKeysOrCallback) || typeof additionalDependentKeysOrCallback === 'function') && (0, _debug.assert)('The second parameter provided to map must either be the callback or an array of additional dependent keys', Array.isArray(additionalDependentKeysOrCallback) || typeof additionalDependentKeysOrCallback === 'function'));
    var additionalDependentKeys;
    if (typeof additionalDependentKeysOrCallback === 'function') {
      callback = additionalDependentKeysOrCallback;
      additionalDependentKeys = [];
    } else {
      additionalDependentKeys = additionalDependentKeysOrCallback;
    }
    var cCallback = callback;
    (true && !(cCallback) && (0, _debug.assert)('[BUG] Missing callback', cCallback));
    return arrayMacro(dependentKey, additionalDependentKeys, function (value) {
      // This is so dumb...
      return Array.isArray(value) ? value.map(cCallback, this) : value.map(cCallback, this);
    });
  }
  /**
    Returns an array mapped to the specified key.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { mapBy } from '@ember/object/computed';
  
    class Person {
      children = [];
  
      @mapBy('children', 'age') childAges;
    }
  
    let lordByron = new Person();
  
    lordByron.childAges; // []
  
    set(lordByron, 'children', [
      {
        name: 'Augusta Ada Byron',
        age: 7
      }
    ]);
    lordByron.childAges; // [7]
  
    set(lordByron, 'children', [
      ...lordByron.children,
      {
        name: 'Allegra Byron',
        age: 5
      }, {
        name: 'Elizabeth Medora Leigh',
        age: 8
      }
    ]);
    lordByron.childAges; // [7, 5, 8]
    ```
  
    @method mapBy
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @param {String} propertyKey
    @return {ComputedProperty} an array mapped to the specified key
    @public
  */
  function mapBy(dependentKey, propertyKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @mapBy as a decorator directly, but it requires `dependentKey` and `propertyKey` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    (true && !(typeof propertyKey === 'string') && (0, _debug.assert)('`mapBy` computed macro expects a property string for its second argument, ' + 'perhaps you meant to use "map"', typeof propertyKey === 'string'));
    (true && !(!/[[\]{}]/g.test(dependentKey)) && (0, _debug.assert)(`Dependent key passed to \`mapBy\` computed macro shouldn't contain brace expanding pattern.`, !/[[\]{}]/g.test(dependentKey)));
    return map(`${dependentKey}.@each.${propertyKey}`, item => (0, _object.get)(item, propertyKey));
  }
  function filter(dependentKey, additionalDependentKeysOrCallback, callback) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @filter as a decorator directly, but it requires atleast `dependentKey` and `callback` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    (true && !(typeof callback === 'function' || callback === undefined && typeof additionalDependentKeysOrCallback === 'function') && (0, _debug.assert)('The final parameter provided to filter must be a callback function', typeof callback === 'function' || callback === undefined && typeof additionalDependentKeysOrCallback === 'function'));
    (true && !(Array.isArray(additionalDependentKeysOrCallback) || typeof additionalDependentKeysOrCallback === 'function') && (0, _debug.assert)('The second parameter provided to filter must either be the callback or an array of additional dependent keys', Array.isArray(additionalDependentKeysOrCallback) || typeof additionalDependentKeysOrCallback === 'function'));
    var additionalDependentKeys;
    if (typeof additionalDependentKeysOrCallback === 'function') {
      callback = additionalDependentKeysOrCallback;
      additionalDependentKeys = [];
    } else {
      additionalDependentKeys = additionalDependentKeysOrCallback;
    }
    var cCallback = callback;
    return arrayMacro(dependentKey, additionalDependentKeys, function (value) {
      // This is a really silly way to keep TS happy
      return Array.isArray(value) ? value.filter(cCallback, this) : value.filter(cCallback, this);
    });
  }
  /**
    Filters the array by the property and value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { filterBy } from '@ember/object/computed';
  
    class Hamster {
      constructor(chores) {
        set(this, 'chores', chores);
      }
  
      @filterBy('chores', 'done', false) remainingChores;
    }
  
    let hamster = new Hamster([
      { name: 'cook', done: true },
      { name: 'clean', done: true },
      { name: 'write more unit tests', done: false }
    ]);
  
    hamster.remainingChores; // [{ name: 'write more unit tests', done: false }]
    ```
  
    @method filterBy
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @param {String} propertyKey
    @param {*} value
    @return {ComputedProperty} the filtered array
    @public
  */
  function filterBy(dependentKey, propertyKey, value) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @filterBy as a decorator directly, but it requires atleast `dependentKey` and `propertyKey` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    (true && !(!/[[\]{}]/g.test(dependentKey)) && (0, _debug.assert)(`Dependent key passed to \`filterBy\` computed macro shouldn't contain brace expanding pattern.`, !/[[\]{}]/g.test(dependentKey)));
    var callback;
    if (arguments.length === 2) {
      callback = item => (0, _object.get)(item, propertyKey);
    } else {
      callback = item => (0, _object.get)(item, propertyKey) === value;
    }
    return filter(`${dependentKey}.@each.${propertyKey}`, callback);
  }
  /**
    A computed property which returns a new array with all the unique elements
    from one or more dependent arrays.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { uniq } from '@ember/object/computed';
  
    class Hamster {
      constructor(fruits) {
        set(this, 'fruits', fruits);
      }
  
      @uniq('fruits') uniqueFruits;
    }
  
    let hamster = new Hamster([
      'banana',
      'grape',
      'kale',
      'banana'
    ]);
  
    hamster.uniqueFruits; // ['banana', 'grape', 'kale']
    ```
  
    @method uniq
    @for @ember/object/computed
    @static
    @param {String} propertyKey*
    @return {ComputedProperty} computes a new array with all the
    unique elements from the dependent array
    @public
  */
  function uniq(dependentKey, ...additionalDependentKeys) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @uniq/@union as a decorator directly, but it requires atleast one dependent key parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    var args = [dependentKey, ...additionalDependentKeys];
    return multiArrayMacro(args, function (dependentKeys) {
      var uniq = (0, _array.A)();
      var seen = new Set();
      dependentKeys.forEach(dependentKey => {
        var value = (0, _object.get)(this, dependentKey);
        if (isNativeOrEmberArray(value)) {
          value.forEach(item => {
            if (!seen.has(item)) {
              seen.add(item);
              uniq.push(item);
            }
          });
        }
      });
      return uniq;
    }, 'uniq');
  }
  /**
    A computed property which returns a new array with all the unique elements
    from an array, with uniqueness determined by specific key.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { uniqBy } from '@ember/object/computed';
  
    class Hamster {
      constructor(fruits) {
        set(this, 'fruits', fruits);
      }
  
      @uniqBy('fruits', 'id') uniqueFruits;
    }
  
    let hamster = new Hamster([
      { id: 1, 'banana' },
      { id: 2, 'grape' },
      { id: 3, 'peach' },
      { id: 1, 'banana' }
    ]);
  
    hamster.uniqueFruits; // [ { id: 1, 'banana' }, { id: 2, 'grape' }, { id: 3, 'peach' }]
    ```
  
    @method uniqBy
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @param {String} propertyKey
    @return {ComputedProperty} computes a new array with all the
    unique elements from the dependent array
    @public
  */
  function uniqBy(dependentKey, propertyKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @uniqBy as a decorator directly, but it requires `dependentKey` and `propertyKey` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    (true && !(!/[[\]{}]/g.test(dependentKey)) && (0, _debug.assert)(`Dependent key passed to \`uniqBy\` computed macro shouldn't contain brace expanding pattern.`, !/[[\]{}]/g.test(dependentKey)));
    return (0, _object.computed)(`${dependentKey}.[]`, function () {
      var list = (0, _object.get)(this, dependentKey);
      return isNativeOrEmberArray(list) ? (0, _array.uniqBy)(list, propertyKey) : (0, _array.A)();
    }).readOnly();
  }
  /**
    A computed property which returns a new array with all the unique elements
    from one or more dependent arrays.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { union } from '@ember/object/computed';
  
    class Hamster {
      constructor(fruits, vegetables) {
        set(this, 'fruits', fruits);
        set(this, 'vegetables', vegetables);
      }
  
      @union('fruits', 'vegetables') uniqueFruits;
    });
  
    let hamster = new, Hamster(
      [
        'banana',
        'grape',
        'kale',
        'banana',
        'tomato'
      ],
      [
        'tomato',
        'carrot',
        'lettuce'
      ]
    );
  
    hamster.uniqueFruits; // ['banana', 'grape', 'kale', 'tomato', 'carrot', 'lettuce']
    ```
  
    @method union
    @for @ember/object/computed
    @static
    @param {String} propertyKey*
    @return {ComputedProperty} computes a new array with all the unique elements
    from one or more dependent arrays.
    @public
  */
  var union = _exports.union = uniq;
  /**
    A computed property which returns a new array with all the elements
    two or more dependent arrays have in common.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { intersect } from '@ember/object/computed';
  
    class FriendGroups {
      constructor(adaFriends, charlesFriends) {
        set(this, 'adaFriends', adaFriends);
        set(this, 'charlesFriends', charlesFriends);
      }
  
      @intersect('adaFriends', 'charlesFriends') friendsInCommon;
    }
  
    let groups = new FriendGroups(
      ['Charles Babbage', 'John Hobhouse', 'William King', 'Mary Somerville'],
      ['William King', 'Mary Somerville', 'Ada Lovelace', 'George Peacock']
    );
  
    groups.friendsInCommon; // ['William King', 'Mary Somerville']
    ```
  
    @method intersect
    @for @ember/object/computed
    @static
    @param {String} propertyKey*
    @return {ComputedProperty} computes a new array with all the duplicated
    elements from the dependent arrays
    @public
  */
  function intersect(dependentKey, ...additionalDependentKeys) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @intersect as a decorator directly, but it requires atleast one dependent key parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    var args = [dependentKey, ...additionalDependentKeys];
    return multiArrayMacro(args, function (dependentKeys) {
      var arrays = dependentKeys.map(dependentKey => {
        var array = (0, _object.get)(this, dependentKey);
        return Array.isArray(array) ? array : [];
      });
      var firstArray = arrays.pop();
      (true && !(firstArray) && (0, _debug.assert)('Attempted to apply multiArrayMacro for intersect without any dependentKeys', firstArray));
      var results = firstArray.filter(candidate => {
        for (var array of arrays) {
          var found = false;
          for (var item of array) {
            if (item === candidate) {
              found = true;
              break;
            }
          }
          if (found === false) {
            return false;
          }
        }
        return true;
      });
      return (0, _array.A)(results);
    }, 'intersect');
  }
  /**
    A computed property which returns a new array with all the properties from the
    first dependent array that are not in the second dependent array.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { setDiff } from '@ember/object/computed';
  
    class Hamster {
      constructor(likes, fruits) {
        set(this, 'likes', likes);
        set(this, 'fruits', fruits);
      }
  
      @setDiff('likes', 'fruits') wants;
    }
  
    let hamster = new Hamster(
      [
        'banana',
        'grape',
        'kale'
      ],
      [
        'grape',
        'kale',
      ]
    );
  
    hamster.wants; // ['banana']
    ```
  
    @method setDiff
    @for @ember/object/computed
    @static
    @param {String} setAProperty
    @param {String} setBProperty
    @return {ComputedProperty} computes a new array with all the items from the
    first dependent array that are not in the second dependent array
    @public
  */
  function setDiff(setAProperty, setBProperty) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @setDiff as a decorator directly, but it requires atleast one dependent key parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    (true && !(arguments.length === 2) && (0, _debug.assert)('`setDiff` computed macro requires exactly two dependent arrays.', arguments.length === 2));
    (true && !(!/[[\]{}]/g.test(setAProperty) && !/[[\]{}]/g.test(setBProperty)) && (0, _debug.assert)(`Dependent keys passed to \`setDiff\` computed macro shouldn't contain brace expanding pattern.`, !/[[\]{}]/g.test(setAProperty) && !/[[\]{}]/g.test(setBProperty)));
    return (0, _object.computed)(`${setAProperty}.[]`, `${setBProperty}.[]`, function () {
      var setA = (0, _object.get)(this, setAProperty);
      var setB = (0, _object.get)(this, setBProperty);
      if (!isNativeOrEmberArray(setA)) {
        return (0, _array.A)();
      }
      if (!isNativeOrEmberArray(setB)) {
        return setA;
      }
      return setA.filter(x => setB.indexOf(x) === -1);
    }).readOnly();
  }
  /**
    A computed property that returns the array of values for the provided
    dependent properties.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { collect } from '@ember/object/computed';
  
    class Hamster {
      @collect('hat', 'shirt') clothes;
    }
  
    let hamster = new Hamster();
  
    hamster.clothes; // [null, null]
  
    set(hamster, 'hat', 'Camp Hat');
    set(hamster, 'shirt', 'Camp Shirt');
    hamster.clothes; // ['Camp Hat', 'Camp Shirt']
    ```
  
    @method collect
    @for @ember/object/computed
    @static
    @param {String} dependentKey*
    @return {ComputedProperty} computed property which maps values of all passed
    in properties to an array.
    @public
  */
  function collect(dependentKey, ...additionalDependentKeys) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @collect as a decorator directly, but it requires atleast one dependent key parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    var dependentKeys = [dependentKey, ...additionalDependentKeys];
    return multiArrayMacro(dependentKeys, function () {
      var res = dependentKeys.map(key => {
        var val = (0, _object.get)(this, key);
        return val === undefined ? null : val;
      });
      return (0, _array.A)(res);
    }, 'collect');
  }
  function sort(itemsKey, additionalDependentKeysOrDefinition, sortDefinition) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @sort as a decorator directly, but it requires atleast an `itemsKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    if (true /* DEBUG */) {
      var argumentsValid = false;
      if (arguments.length === 2) {
        argumentsValid = typeof itemsKey === 'string' && (typeof additionalDependentKeysOrDefinition === 'string' || typeof additionalDependentKeysOrDefinition === 'function');
      }
      if (arguments.length === 3) {
        argumentsValid = typeof itemsKey === 'string' && Array.isArray(additionalDependentKeysOrDefinition) && typeof sortDefinition === 'function';
      }
      (true && !(argumentsValid) && (0, _debug.assert)('The `sort` computed macro can either be used with an array of sort properties or with a sort function. If used with an array of sort properties, it must receive exactly two arguments: the key of the array to sort, and the key of the array of sort properties. If used with a sort function, it may receive up to three arguments: the key of the array to sort, an optional additional array of dependent keys for the computed property, and the sort function.', argumentsValid));
    }
    var additionalDependentKeys;
    var sortDefinitionOrString;
    if (Array.isArray(additionalDependentKeysOrDefinition)) {
      additionalDependentKeys = additionalDependentKeysOrDefinition;
      sortDefinitionOrString = sortDefinition;
    } else {
      additionalDependentKeys = [];
      sortDefinitionOrString = additionalDependentKeysOrDefinition;
    }
    if (typeof sortDefinitionOrString === 'function') {
      return customSort(itemsKey, additionalDependentKeys, sortDefinitionOrString);
    } else {
      return propertySort(itemsKey, sortDefinitionOrString);
    }
  }
  function customSort(itemsKey, additionalDependentKeys, comparator) {
    return arrayMacro(itemsKey, additionalDependentKeys, function (value) {
      return value.slice().sort((x, y) => comparator.call(this, x, y));
    });
  }
  // This one needs to dynamically set up and tear down observers on the itemsKey
  // depending on the sortProperties
  function propertySort(itemsKey, sortPropertiesKey) {
    var cp = (0, _metal.autoComputed)(function (key) {
      var sortProperties = (0, _object.get)(this, sortPropertiesKey);
      (true && !(function (arr) {
        return isNativeOrEmberArray(arr) && arr.every(s => typeof s === 'string');
      }(sortProperties)) && (0, _debug.assert)(`The sort definition for '${key}' on ${this} must be a function or an array of strings`, function (arr) {
        return isNativeOrEmberArray(arr) && arr.every(s => typeof s === 'string');
      }(sortProperties)));
      var itemsKeyIsAtThis = itemsKey === '@this';
      var normalizedSortProperties = normalizeSortProperties(sortProperties);
      var items = itemsKeyIsAtThis ? this : (0, _object.get)(this, itemsKey);
      if (!isNativeOrEmberArray(items)) {
        return (0, _array.A)();
      }
      if (normalizedSortProperties.length === 0) {
        return (0, _array.A)(items.slice());
      } else {
        return sortByNormalizedSortProperties(items, normalizedSortProperties);
      }
    }).readOnly();
    return cp;
  }
  function normalizeSortProperties(sortProperties) {
    var callback = p => {
      var [prop, direction] = p.split(':');
      direction = direction || 'asc';
      // SAFETY: There will always be at least one value returned by split
      return [prop, direction];
    };
    // This nonsense is necessary since technically the two map implementations diverge.
    return Array.isArray(sortProperties) ? sortProperties.map(callback) : sortProperties.map(callback);
  }
  function sortByNormalizedSortProperties(items, normalizedSortProperties) {
    return (0, _array.A)(items.slice().sort((itemA, itemB) => {
      for (var [prop, direction] of normalizedSortProperties) {
        var result = (0, _utils.compare)((0, _object.get)(itemA, prop), (0, _object.get)(itemB, prop));
        if (result !== 0) {
          return direction === 'desc' ? -1 * result : result;
        }
      }
      return 0;
    }));
  }
});
define("@ember/object/mixin", ["exports", "@ember/-internals/container", "@ember/-internals/meta", "@ember/-internals/utils", "@ember/debug", "@glimmer/util", "@ember/-internals/metal", "@ember/object/events"], function (_exports, _container, _meta, _utils, _debug, _util, _metal, _events) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.applyMixin = applyMixin;
  _exports.default = void 0;
  _exports.mixin = mixin;
  /**
  @module @ember/object/mixin
  */

  var a_concat = Array.prototype.concat;
  var {
    isArray
  } = Array;
  function extractAccessors(properties) {
    if (properties !== undefined) {
      for (var key of Object.keys(properties)) {
        var desc = Object.getOwnPropertyDescriptor(properties, key);
        if (desc.get !== undefined || desc.set !== undefined) {
          Object.defineProperty(properties, key, {
            value: (0, _metal.nativeDescDecorator)(desc)
          });
        }
      }
    }
    return properties;
  }
  function concatenatedMixinProperties(concatProp, props, values, base) {
    // reset before adding each new mixin to pickup concats from previous
    var concats = values[concatProp] || base[concatProp];
    if (props[concatProp]) {
      concats = concats ? a_concat.call(concats, props[concatProp]) : props[concatProp];
    }
    return concats;
  }
  function giveDecoratorSuper(key, decorator, property, descs) {
    if (property === true) {
      return decorator;
    }
    var originalGetter = property._getter;
    if (originalGetter === undefined) {
      return decorator;
    }
    var superDesc = descs[key];
    // Check to see if the super property is a decorator first, if so load its descriptor
    var superProperty = typeof superDesc === 'function' ? (0, _metal.descriptorForDecorator)(superDesc) : superDesc;
    if (superProperty === undefined || superProperty === true) {
      return decorator;
    }
    var superGetter = superProperty._getter;
    if (superGetter === undefined) {
      return decorator;
    }
    var get = (0, _utils.wrap)(originalGetter, superGetter);
    var set;
    var originalSetter = property._setter;
    var superSetter = superProperty._setter;
    if (superSetter !== undefined) {
      if (originalSetter !== undefined) {
        set = (0, _utils.wrap)(originalSetter, superSetter);
      } else {
        // If the super property has a setter, we default to using it no matter what.
        // This is clearly very broken and weird, but it's what was here so we have
        // to keep it until the next major at least.
        //
        // TODO: Add a deprecation here.
        set = superSetter;
      }
    } else {
      set = originalSetter;
    }
    // only create a new CP if we must
    if (get !== originalGetter || set !== originalSetter) {
      // Since multiple mixins may inherit from the same parent, we need
      // to clone the computed property so that other mixins do not receive
      // the wrapped version.
      var dependentKeys = property._dependentKeys || [];
      var newProperty = new _metal.ComputedProperty([...dependentKeys, {
        get,
        set
      }]);
      newProperty._readOnly = property._readOnly;
      newProperty._meta = property._meta;
      newProperty.enumerable = property.enumerable;
      // SAFETY: We passed in the impl for this class
      return (0, _metal.makeComputedDecorator)(newProperty, _metal.ComputedProperty);
    }
    return decorator;
  }
  function giveMethodSuper(key, method, values, descs) {
    // Methods overwrite computed properties, and do not call super to them.
    if (descs[key] !== undefined) {
      return method;
    }
    // Find the original method in a parent mixin
    var superMethod = values[key];
    // Only wrap the new method if the original method was a function
    if (typeof superMethod === 'function') {
      return (0, _utils.wrap)(method, superMethod);
    }
    return method;
  }
  function simpleMakeArray(value) {
    if (!value) {
      return [];
    } else if (!Array.isArray(value)) {
      return [value];
    } else {
      return value;
    }
  }
  function applyConcatenatedProperties(key, value, values) {
    var baseValue = values[key];
    var ret = simpleMakeArray(baseValue).concat(simpleMakeArray(value));
    if (true /* DEBUG */) {
      // it is possible to use concatenatedProperties with strings (which cannot be frozen)
      // only freeze objects...
      if (typeof ret === 'object' && ret !== null) {
        // prevent mutating `concatenatedProperties` array after it is applied
        Object.freeze(ret);
      }
    }
    return ret;
  }
  function applyMergedProperties(key, value, values) {
    var baseValue = values[key];
    (true && !(!isArray(value)) && (0, _debug.assert)(`You passed in \`${JSON.stringify(value)}\` as the value for \`${key}\` but \`${key}\` cannot be an Array`, !isArray(value)));
    if (!baseValue) {
      return value;
    }
    var newBase = Object.assign({}, baseValue);
    var hasFunction = false;
    var props = Object.keys(value);
    for (var prop of props) {
      var propValue = value[prop];
      if (typeof propValue === 'function') {
        hasFunction = true;
        newBase[prop] = giveMethodSuper(prop, propValue, baseValue, {});
      } else {
        newBase[prop] = propValue;
      }
    }
    if (hasFunction) {
      newBase._super = _utils.ROOT;
    }
    return newBase;
  }
  function mergeMixins(mixins, meta, descs, values, base, keys, keysWithSuper) {
    var currentMixin;
    for (var i = 0; i < mixins.length; i++) {
      currentMixin = mixins[i];
      (true && !(typeof currentMixin === 'object' && currentMixin !== null && Object.prototype.toString.call(currentMixin) !== '[object Array]') && (0, _debug.assert)(`Expected hash or Mixin instance, got ${Object.prototype.toString.call(currentMixin)}`, typeof currentMixin === 'object' && currentMixin !== null && Object.prototype.toString.call(currentMixin) !== '[object Array]'));
      if (MIXINS.has(currentMixin)) {
        if (meta.hasMixin(currentMixin)) {
          continue;
        }
        meta.addMixin(currentMixin);
        var {
          properties,
          mixins: _mixins
        } = currentMixin;
        if (properties !== undefined) {
          mergeProps(meta, properties, descs, values, base, keys, keysWithSuper);
        } else if (_mixins !== undefined) {
          mergeMixins(_mixins, meta, descs, values, base, keys, keysWithSuper);
          if (currentMixin instanceof Mixin && currentMixin._without !== undefined) {
            currentMixin._without.forEach(keyName => {
              // deleting the key means we won't process the value
              var index = keys.indexOf(keyName);
              if (index !== -1) {
                keys.splice(index, 1);
              }
            });
          }
        }
      } else {
        mergeProps(meta, currentMixin, descs, values, base, keys, keysWithSuper);
      }
    }
  }
  function mergeProps(meta, props, descs, values, base, keys, keysWithSuper) {
    var concats = concatenatedMixinProperties('concatenatedProperties', props, values, base);
    var mergings = concatenatedMixinProperties('mergedProperties', props, values, base);
    var propKeys = Object.keys(props);
    for (var key of propKeys) {
      var value = props[key];
      if (value === undefined) continue;
      if (keys.indexOf(key) === -1) {
        keys.push(key);
        var desc = meta.peekDescriptors(key);
        if (desc === undefined) {
          // If the value is a classic decorator, we don't want to actually
          // access it, because that will execute the decorator while we're
          // building the class.
          if (!(0, _metal.isClassicDecorator)(value)) {
            // The superclass did not have a CP, which means it may have
            // observers or listeners on that property.
            var prev = values[key] = base[key];
            if (typeof prev === 'function') {
              updateObserversAndListeners(base, key, prev, false);
            }
          }
        } else {
          descs[key] = desc;
          // The super desc will be overwritten on descs, so save off the fact that
          // there was a super so we know to Object.defineProperty when writing
          // the value
          keysWithSuper.push(key);
          desc.teardown(base, key, meta);
        }
      }
      var isFunction = typeof value === 'function';
      if (isFunction) {
        var _desc = (0, _metal.descriptorForDecorator)(value);
        if (_desc !== undefined) {
          // Wrap descriptor function to implement _super() if needed
          descs[key] = giveDecoratorSuper(key, value, _desc, descs);
          values[key] = undefined;
          continue;
        }
      }
      if (concats && concats.indexOf(key) >= 0 || key === 'concatenatedProperties' || key === 'mergedProperties') {
        value = applyConcatenatedProperties(key, value, values);
      } else if (mergings && mergings.indexOf(key) > -1) {
        value = applyMergedProperties(key, value, values);
      } else if (isFunction) {
        value = giveMethodSuper(key, value, values, descs);
      }
      values[key] = value;
      descs[key] = undefined;
    }
  }
  function updateObserversAndListeners(obj, key, fn, add) {
    var meta = (0, _utils.observerListenerMetaFor)(fn);
    if (meta === undefined) return;
    var {
      observers,
      listeners
    } = meta;
    if (observers !== undefined) {
      var updateObserver = add ? _metal.addObserver : _metal.removeObserver;
      for (var path of observers.paths) {
        updateObserver(obj, path, null, key, observers.sync);
      }
    }
    if (listeners !== undefined) {
      var updateListener = add ? _events.addListener : _events.removeListener;
      for (var listener of listeners) {
        updateListener(obj, listener, null, key);
      }
    }
  }
  function applyMixin(obj, mixins, _hideKeys = false) {
    var descs = Object.create(null);
    var values = Object.create(null);
    var meta = (0, _meta.meta)(obj);
    var keys = [];
    var keysWithSuper = [];
    obj._super = _utils.ROOT;
    // Go through all mixins and hashes passed in, and:
    //
    // * Handle concatenated properties
    // * Handle merged properties
    // * Set up _super wrapping if necessary
    // * Set up computed property descriptors
    // * Copying `toString` in broken browsers
    mergeMixins(mixins, meta, descs, values, obj, keys, keysWithSuper);
    for (var key of keys) {
      var value = values[key];
      var desc = descs[key];
      if (value !== undefined) {
        if (typeof value === 'function') {
          updateObserversAndListeners(obj, key, value, true);
        }
        (0, _metal.defineValue)(obj, key, value, keysWithSuper.indexOf(key) !== -1, !_hideKeys);
      } else if (desc !== undefined) {
        (0, _metal.defineDecorator)(obj, key, desc, meta);
      }
    }
    if (!meta.isPrototypeMeta(obj)) {
      (0, _metal.revalidateObservers)(obj);
    }
    return obj;
  }
  /**
    @method mixin
    @param obj
    @param mixins*
    @return obj
    @private
  */
  function mixin(obj, ...args) {
    applyMixin(obj, args);
    return obj;
  }
  var MIXINS = new _util._WeakSet();
  /**
    The `Mixin` class allows you to create mixins, whose properties can be
    added to other classes. For instance,
  
    ```javascript
    import Mixin from '@ember/object/mixin';
  
    const EditableMixin = Mixin.create({
      edit() {
        console.log('starting to edit');
        this.set('isEditing', true);
      },
      isEditing: false
    });
    ```
  
    ```javascript
    import EmberObject from '@ember/object';
    import EditableMixin from '../mixins/editable';
  
    // Mix mixins into classes by passing them as the first arguments to
    // `.extend.`
    const Comment = EmberObject.extend(EditableMixin, {
      post: null
    });
  
    let comment = Comment.create({
      post: somePost
    });
  
    comment.edit(); // outputs 'starting to edit'
    ```
  
    Note that Mixins are created with `Mixin.create`, not
    `Mixin.extend`.
  
    Note that mixins extend a constructor's prototype so arrays and object literals
    defined as properties will be shared amongst objects that implement the mixin.
    If you want to define a property in a mixin that is not shared, you can define
    it either as a computed property or have it be created on initialization of the object.
  
    ```javascript
    // filters array will be shared amongst any object implementing mixin
    import Mixin from '@ember/object/mixin';
    import { A } from '@ember/array';
  
    const FilterableMixin = Mixin.create({
      filters: A()
    });
    ```
  
    ```javascript
    import Mixin from '@ember/object/mixin';
    import { A } from '@ember/array';
    import { computed } from '@ember/object';
  
    // filters will be a separate array for every object implementing the mixin
    const FilterableMixin = Mixin.create({
      filters: computed(function() {
        return A();
      })
    });
    ```
  
    ```javascript
    import Mixin from '@ember/object/mixin';
    import { A } from '@ember/array';
  
    // filters will be created as a separate array during the object's initialization
    const Filterable = Mixin.create({
      filters: null,
  
      init() {
        this._super(...arguments);
        this.set("filters", A());
      }
    });
    ```
  
    @class Mixin
    @public
  */
  class Mixin {
    /** @internal */
    constructor(mixins, properties) {
      MIXINS.add(this);
      this.properties = extractAccessors(properties);
      this.mixins = buildMixinsArray(mixins);
      this.ownerConstructor = undefined;
      this._without = undefined;
      if (true /* DEBUG */) {
        // Eagerly add INIT_FACTORY to avoid issues in DEBUG as a result of Object.seal(mixin)
        this[_container.INIT_FACTORY] = null;
        /*
          In debug builds, we seal mixins to help avoid performance pitfalls.
                 In IE11 there is a quirk that prevents sealed objects from being added
          to a WeakMap. Unfortunately, the mixin system currently relies on
          weak maps in `guidFor`, so we need to prime the guid cache weak map.
        */
        (0, _utils.guidFor)(this);
        if (Mixin._disableDebugSeal !== true) {
          Object.seal(this);
        }
      }
    }
    /**
      @method create
      @for @ember/object/mixin
      @static
      @param arguments*
      @public
    */
    static create(...args) {
      (0, _metal.setUnprocessedMixins)();
      var M = this;
      return new M(args, undefined);
    }
    // returns the mixins currently applied to the specified object
    // TODO: Make `mixin`
    /** @internal */
    static mixins(obj) {
      var meta = (0, _meta.peekMeta)(obj);
      var ret = [];
      if (meta === null) {
        return ret;
      }
      meta.forEachMixins(currentMixin => {
        // skip primitive mixins since these are always anonymous
        if (!currentMixin.properties) {
          ret.push(currentMixin);
        }
      });
      return ret;
    }
    /**
      @method reopen
      @param arguments*
      @private
      @internal
    */
    reopen(...args) {
      if (args.length === 0) {
        return;
      }
      if (this.properties) {
        var currentMixin = new Mixin(undefined, this.properties);
        this.properties = undefined;
        this.mixins = [currentMixin];
      } else if (!this.mixins) {
        this.mixins = [];
      }
      this.mixins = this.mixins.concat(buildMixinsArray(args));
      return this;
    }
    /**
      @method apply
      @param obj
      @return applied object
      @private
      @internal
    */
    apply(obj, _hideKeys = false) {
      // Ember.NativeArray is a normal Ember.Mixin that we mix into `Array.prototype` when prototype extensions are enabled
      // mutating a native object prototype like this should _not_ result in enumerable properties being added (or we have significant
      // issues with things like deep equality checks from test frameworks, or things like jQuery.extend(true, [], [])).
      //
      // _hideKeys disables enumerablity when applying the mixin. This is a hack, and we should stop mutating the array prototype by default 😫
      return applyMixin(obj, [this], _hideKeys);
    }
    /** @internal */
    applyPartial(obj) {
      return applyMixin(obj, [this]);
    }
    /**
      @method detect
      @param obj
      @return {Boolean}
      @private
      @internal
    */
    detect(obj) {
      if (typeof obj !== 'object' || obj === null) {
        return false;
      }
      if (MIXINS.has(obj)) {
        return _detect(obj, this);
      }
      var meta = (0, _meta.peekMeta)(obj);
      if (meta === null) {
        return false;
      }
      return meta.hasMixin(this);
    }
    /** @internal */
    without(...args) {
      var ret = new Mixin([this]);
      ret._without = args;
      return ret;
    }
    /** @internal */
    keys() {
      var keys = _keys(this);
      (true && !(keys) && (0, _debug.assert)('[BUG] Missing keys for mixin!', keys));
      return keys;
    }
    /** @internal */
    toString() {
      return '(unknown mixin)';
    }
  }
  _exports.default = Mixin;
  if (true /* DEBUG */) {
    Object.defineProperty(Mixin, '_disableDebugSeal', {
      configurable: true,
      enumerable: false,
      writable: true,
      value: false
    });
  }
  function buildMixinsArray(mixins) {
    var length = mixins && mixins.length || 0;
    var m = undefined;
    if (length > 0) {
      m = new Array(length);
      for (var i = 0; i < length; i++) {
        var x = mixins[i];
        (true && !(typeof x === 'object' && x !== null && Object.prototype.toString.call(x) !== '[object Array]') && (0, _debug.assert)(`Expected hash or Mixin instance, got ${Object.prototype.toString.call(x)}`, typeof x === 'object' && x !== null && Object.prototype.toString.call(x) !== '[object Array]'));
        if (MIXINS.has(x)) {
          m[i] = x;
        } else {
          m[i] = new Mixin(undefined, x);
        }
      }
    }
    return m;
  }
  if (true /* DEBUG */) {
    Object.seal(Mixin.prototype);
  }
  function _detect(curMixin, targetMixin, seen = new Set()) {
    if (seen.has(curMixin)) {
      return false;
    }
    seen.add(curMixin);
    if (curMixin === targetMixin) {
      return true;
    }
    var mixins = curMixin.mixins;
    if (mixins) {
      return mixins.some(mixin => _detect(mixin, targetMixin, seen));
    }
    return false;
  }
  function _keys(mixin, ret = new Set(), seen = new Set()) {
    if (seen.has(mixin)) {
      return;
    }
    seen.add(mixin);
    if (mixin.properties) {
      var props = Object.keys(mixin.properties);
      for (var prop of props) {
        ret.add(prop);
      }
    } else if (mixin.mixins) {
      mixin.mixins.forEach(x => _keys(x, ret, seen));
    }
    return ret;
  }
});
define("@ember/object/observable", ["exports", "@ember/-internals/meta", "@ember/-internals/metal", "@ember/object", "@ember/object/mixin", "@ember/debug"], function (_exports, _meta, _metal, _object, _mixin, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/object/observable
  */

  var Observable = _mixin.default.create({
    get(keyName) {
      return (0, _object.get)(this, keyName);
    },
    getProperties(...args) {
      return (0, _object.getProperties)(this, ...args);
    },
    set(keyName, value) {
      return (0, _object.set)(this, keyName, value);
    },
    setProperties(hash) {
      return (0, _object.setProperties)(this, hash);
    },
    /**
      Begins a grouping of property changes.
         You can use this method to group property changes so that notifications
      will not be sent until the changes are finished. If you plan to make a
      large number of changes to an object at one time, you should call this
      method at the beginning of the changes to begin deferring change
      notifications. When you are done making changes, call
      `endPropertyChanges()` to deliver the deferred change notifications and end
      deferring.
         @method beginPropertyChanges
      @return {Observable}
      @private
    */
    beginPropertyChanges() {
      (0, _metal.beginPropertyChanges)();
      return this;
    },
    /**
      Ends a grouping of property changes.
         You can use this method to group property changes so that notifications
      will not be sent until the changes are finished. If you plan to make a
      large number of changes to an object at one time, you should call
      `beginPropertyChanges()` at the beginning of the changes to defer change
      notifications. When you are done making changes, call this method to
      deliver the deferred change notifications and end deferring.
         @method endPropertyChanges
      @return {Observable}
      @private
    */
    endPropertyChanges() {
      (0, _metal.endPropertyChanges)();
      return this;
    },
    notifyPropertyChange(keyName) {
      (0, _metal.notifyPropertyChange)(this, keyName);
      return this;
    },
    addObserver(key, target, method, sync) {
      (0, _metal.addObserver)(this, key, target, method, sync);
      return this;
    },
    removeObserver(key, target, method, sync) {
      (0, _metal.removeObserver)(this, key, target, method, sync);
      return this;
    },
    /**
      Returns `true` if the object currently has observers registered for a
      particular key. You can use this method to potentially defer performing
      an expensive action until someone begins observing a particular property
      on the object.
         @method hasObserverFor
      @param {String} key Key to check
      @return {Boolean}
      @private
    */
    hasObserverFor(key) {
      return (0, _metal.hasListeners)(this, `${key}:change`);
    },
    incrementProperty(keyName, increment = 1) {
      (true && !(!isNaN(parseFloat(String(increment))) && isFinite(increment)) && (0, _debug.assert)('Must pass a numeric value to incrementProperty', !isNaN(parseFloat(String(increment))) && isFinite(increment)));
      return (0, _object.set)(this, keyName, (parseFloat((0, _object.get)(this, keyName)) || 0) + increment);
    },
    decrementProperty(keyName, decrement = 1) {
      (true && !((typeof decrement === 'number' || !isNaN(parseFloat(decrement))) && isFinite(decrement)) && (0, _debug.assert)('Must pass a numeric value to decrementProperty', (typeof decrement === 'number' || !isNaN(parseFloat(decrement))) && isFinite(decrement)));
      return (0, _object.set)(this, keyName, ((0, _object.get)(this, keyName) || 0) - decrement);
    },
    toggleProperty(keyName) {
      return (0, _object.set)(this, keyName, !(0, _object.get)(this, keyName));
    },
    cacheFor(keyName) {
      var meta = (0, _meta.peekMeta)(this);
      if (meta !== null) {
        return meta.valueFor(keyName);
      }
    }
  });
  var _default = _exports.default = Observable;
});
define("@ember/object/observers", ["exports", "@ember/-internals/metal"], function (_exports, _metal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "addObserver", {
    enumerable: true,
    get: function () {
      return _metal.addObserver;
    }
  });
  Object.defineProperty(_exports, "removeObserver", {
    enumerable: true,
    get: function () {
      return _metal.removeObserver;
    }
  });
});
define("@ember/object/promise-proxy-mixin", ["exports", "@ember/object", "@ember/object/mixin"], function (_exports, _object, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    @module @ember/object/promise-proxy-mixin
  */
  function tap(proxy, promise) {
    (0, _object.setProperties)(proxy, {
      isFulfilled: false,
      isRejected: false
    });
    return promise.then(value => {
      if (!proxy.isDestroyed && !proxy.isDestroying) {
        (0, _object.setProperties)(proxy, {
          content: value,
          isFulfilled: true
        });
      }
      return value;
    }, reason => {
      if (!proxy.isDestroyed && !proxy.isDestroying) {
        (0, _object.setProperties)(proxy, {
          reason,
          isRejected: true
        });
      }
      throw reason;
    }, 'Ember: PromiseProxy');
  }
  var PromiseProxyMixin = _mixin.default.create({
    reason: null,
    isPending: (0, _object.computed)('isSettled', function () {
      return !(0, _object.get)(this, 'isSettled');
    }).readOnly(),
    isSettled: (0, _object.computed)('isRejected', 'isFulfilled', function () {
      return (0, _object.get)(this, 'isRejected') || (0, _object.get)(this, 'isFulfilled');
    }).readOnly(),
    isRejected: false,
    isFulfilled: false,
    promise: (0, _object.computed)({
      get() {
        throw new Error("PromiseProxy's promise must be set");
      },
      set(_key, promise) {
        return tap(this, promise);
      }
    }),
    then: promiseAlias('then'),
    catch: promiseAlias('catch'),
    finally: promiseAlias('finally')
  });
  function promiseAlias(name) {
    return function (...args) {
      var promise = (0, _object.get)(this, 'promise');
      // We need this cast because `Parameters` is deferred so that it is not
      // possible for TS to see it will always produce the right type. However,
      // since `AnyFn` has a rest type, it is allowed. See discussion on [this
      // issue](https://github.com/microsoft/TypeScript/issues/47615).
      return promise[name](...args);
    };
  }
  var _default = _exports.default = PromiseProxyMixin;
});
define("@ember/object/proxy", ["exports", "@ember/object/-internals", "@ember/-internals/runtime"], function (_exports, _internals, _runtime) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/object/proxy
  */

  class ObjectProxy extends _internals.FrameworkObject {}
  ObjectProxy.PrototypeMixin.reopen(_runtime._ProxyMixin);
  var _default = _exports.default = ObjectProxy;
});
define("@ember/owner/index", ["exports", "@ember/-internals/owner"], function (_exports, _owner) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getOwner = void 0;
  Object.defineProperty(_exports, "setOwner", {
    enumerable: true,
    get: function () {
      return _owner.setOwner;
    }
  });
  /**
    Ember’s dependency injection system is built on the idea of an "owner": an
    object responsible for managing items which can be registered and looked up
    with the system.
  
    This module does not provide any concrete instances of owners. Instead, it
    defines the core type, `Owner`, which specifies the public API contract for an
    owner. The primary concrete implementations of `Owner` are `EngineInstance`,
    from `@ember/engine/instance`, and its `ApplicationInstance` subclass, from
    `@ember/application/instance`.
  
    Along with `Owner` itself, this module provides a number of supporting types
    related to Ember's DI system:
  
    - `Factory`, Ember's primary interface for something which can create class
      instances registered with the DI system.
  
    - `FactoryManager`, an interface for inspecting a `Factory`'s class.
  
    - `Resolver`, an interface defining the contract for the object responsible
      for mapping string names to the corresponding classes. For example, when you
      write `@service('session')`, a resolver is responsible to map that back to
      the `Session` service class in your codebase. Normally, this is handled for
      you automatically with `ember-resolver`, which is the main implementor of
      this interface.
  
    For more details on each, see their per-item docs.
  
    @module @ember/owner
    @public
  */
  // We need to provide a narrower public interface to `getOwner` so that we only
  // expose the `Owner` type, *not* our richer `InternalOwner` type and its
  // various bits of private API.

  // NOTE: this documentation appears here instead of at the definition site so
  // it can appear correctly in both API docs and for TS, while providing a richer
  // internal representation for Ember's own usage.
  /**
    Framework objects in an Ember application (components, services, routes, etc.)
    are created via a factory and dependency injection system. Each of these
    objects is the responsibility of an "owner", which handled its
    instantiation and manages its lifetime.
  
    `getOwner` fetches the owner object responsible for an instance. This can
    be used to lookup or resolve other class instances, or register new factories
    into the owner.
  
    For example, this component dynamically looks up a service based on the
    `audioType` passed as an argument:
  
    ```app/components/play-audio.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';
    import { getOwner } from '@ember/application';
  
    // Usage:
    //
    //   <PlayAudio @audioType={{@model.audioType}} @audioFile={{@model.file}}/>
    //
    export default class extends Component {
      get audioService() {
        return getOwner(this)?.lookup(`service:${this.args.audioType}`);
      }
  
      @action
      onPlay() {
        this.audioService?.play(this.args.audioFile);
      }
    }
    ```
  
    @method getOwner
    @static
    @for @ember/owner
    @param {Object} object An object with an owner.
    @return {Object} An owner object.
    @since 2.3.0
    @public
  */
  // SAFETY: the cast here is necessary, instead of using an assignment, because
  // TS (not incorrectly! Nothing expressly relates them) does not see that the
  // `InternalOwner` and `Owner` do actually have identical constraints on their
  // relations to the `DIRegistry`.
  var getOwner = _exports.getOwner = _owner.getOwner;
});
define("@ember/polyfills/index", ["exports", "@ember/polyfills/lib/assign"], function (_exports, _assign) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "assign", {
    enumerable: true,
    get: function () {
      return _assign.assign;
    }
  });
  _exports.hasPropertyAccessors = void 0;
  var hasPropertyAccessors = _exports.hasPropertyAccessors = true;
});
define("@ember/polyfills/lib/assign", ["exports", "@ember/debug"], function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.assign = assign;
  /**
    Copy properties from a source object to a target object. Source arguments remain unchanged.
  
    ```javascript
    import { assign } from '@ember/polyfills';
  
    var a = { first: 'Yehuda' };
    var b = { last: 'Katz' };
    var c = { company: 'Other Company' };
    var d = { company: 'Tilde Inc.' };
    assign(a, b, c, d); // a === { first: 'Yehuda', last: 'Katz', company: 'Tilde Inc.' };
    ```
  
    @method assign
    @for @ember/polyfills
    @param {Object} target The object to assign into
    @param {Object} ...args The objects to copy properties from
    @return {Object}
    @public
    @static
  */
  function assign(target, ...rest) {
    (true && !(false) && (0, _debug.deprecate)('Use of `assign` has been deprecated. Please use `Object.assign` or the spread operator instead.', false, {
      id: 'ember-polyfills.deprecate-assign',
      until: '5.0.0',
      url: 'https://deprecations.emberjs.com/v4.x/#toc_ember-polyfills-deprecate-assign',
      for: 'ember-source',
      since: {
        available: '4.0.0',
        enabled: '4.0.0'
      }
    }));
    return Object.assign(target, ...rest);
  }
});
define("@ember/renderer/index", ["exports", "@ember/-internals/glimmer"], function (_exports, _glimmer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "renderSettled", {
    enumerable: true,
    get: function () {
      return _glimmer.renderSettled;
    }
  });
});
define("@ember/routing/-internals", ["exports", "@ember/routing/lib/router_state", "@ember/routing/lib/routing-service", "@ember/routing/lib/utils", "@ember/routing/lib/generate_controller", "@ember/routing/lib/cache", "@ember/routing/lib/dsl", "@ember/routing/lib/controller_for"], function (_exports, _router_state, _routingService, _utils, _generate_controller, _cache, _dsl, _controller_for) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "BucketCache", {
    enumerable: true,
    get: function () {
      return _cache.default;
    }
  });
  Object.defineProperty(_exports, "DSL", {
    enumerable: true,
    get: function () {
      return _dsl.default;
    }
  });
  Object.defineProperty(_exports, "RouterState", {
    enumerable: true,
    get: function () {
      return _router_state.default;
    }
  });
  Object.defineProperty(_exports, "RoutingService", {
    enumerable: true,
    get: function () {
      return _routingService.default;
    }
  });
  Object.defineProperty(_exports, "controllerFor", {
    enumerable: true,
    get: function () {
      return _controller_for.default;
    }
  });
  Object.defineProperty(_exports, "deprecateTransitionMethods", {
    enumerable: true,
    get: function () {
      return _utils.deprecateTransitionMethods;
    }
  });
  Object.defineProperty(_exports, "generateController", {
    enumerable: true,
    get: function () {
      return _generate_controller.default;
    }
  });
  Object.defineProperty(_exports, "generateControllerFactory", {
    enumerable: true,
    get: function () {
      return _generate_controller.generateControllerFactory;
    }
  });
  Object.defineProperty(_exports, "prefixRouteNameArg", {
    enumerable: true,
    get: function () {
      return _utils.prefixRouteNameArg;
    }
  });
});
define("@ember/routing/auto-location", ["exports", "@ember/-internals/browser-environment", "@ember/-internals/owner", "@ember/object", "@ember/debug", "@ember/routing/lib/location-utils"], function (_exports, _browserEnvironment, _owner, _object, _debug, _locationUtils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.getHashPath = getHashPath;
  _exports.getHistoryPath = getHistoryPath;
  /**
  @module @ember/routing/auto-location
  */
  /**
    AutoLocation will select the best location option based off browser
    support with the priority order: history, hash, none.
  
    Clean pushState paths accessed by hashchange-only browsers will be redirected
    to the hash-equivalent and vice versa so future transitions are consistent.
  
    Keep in mind that since some of your users will use `HistoryLocation`, your
    server must serve the Ember app at all the routes you define.
  
    Browsers that support the `history` API will use `HistoryLocation`, those that
    do not, but still support the `hashchange` event will use `HashLocation`, and
    in the rare case neither is supported will use `NoneLocation`.
  
    Example:
  
    ```app/router.js
    Router.map(function() {
      this.route('posts', function() {
        this.route('new');
      });
    });
  
    Router.reopen({
      location: 'auto'
    });
    ```
  
    This will result in a posts.new url of `/posts/new` for modern browsers that
    support the `history` api or `/#/posts/new` for older ones, like Internet
    Explorer 9 and below.
  
    When a user visits a link to your application, they will be automatically
    upgraded or downgraded to the appropriate `Location` class, with the URL
    transformed accordingly, if needed.
  
    Keep in mind that since some of your users will use `HistoryLocation`, your
    server must serve the Ember app at all the routes you define.
  
    @class AutoLocation
    @static
    @protected
  */
  class AutoLocation extends _object.default {
    constructor() {
      super(...arguments);
      this.implementation = 'auto';
    }
    /**
     Called by the router to instruct the location to do any feature detection
     necessary. In the case of AutoLocation, we detect whether to use history
     or hash concrete implementations.
        @private
    */
    detect() {
      var rootURL = this.rootURL;
      (true && !(rootURL.charAt(rootURL.length - 1) === '/') && (0, _debug.assert)('rootURL must end with a trailing forward slash e.g. "/app/"', rootURL.charAt(rootURL.length - 1) === '/'));
      var implementation = detectImplementation({
        location: this.location,
        history: this.history,
        userAgent: this.userAgent,
        rootURL,
        documentMode: this.documentMode,
        global: this.global
      });
      if (implementation === false) {
        (0, _object.set)(this, 'cancelRouterSetup', true);
        implementation = 'none';
      }
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('AutoLocation is unexpectedly missing an owner', owner));
      var concrete = owner.lookup(`location:${implementation}`);
      (true && !(concrete !== undefined) && (0, _debug.assert)(`Could not find location '${implementation}'.`, concrete !== undefined));
      (0, _object.set)(concrete, 'rootURL', rootURL);
      (0, _object.set)(this, 'concreteImplementation', concrete);
    }
    willDestroy() {
      var {
        concreteImplementation
      } = this;
      if (concreteImplementation) {
        concreteImplementation.destroy();
      }
    }
  }
  _exports.default = AutoLocation;
  AutoLocation.reopen({
    rootURL: '/',
    initState: delegateToConcreteImplementation('initState'),
    getURL: delegateToConcreteImplementation('getURL'),
    setURL: delegateToConcreteImplementation('setURL'),
    replaceURL: delegateToConcreteImplementation('replaceURL'),
    onUpdateURL: delegateToConcreteImplementation('onUpdateURL'),
    formatURL: delegateToConcreteImplementation('formatURL'),
    location: _browserEnvironment.location,
    history: _browserEnvironment.history,
    global: _browserEnvironment.window,
    userAgent: _browserEnvironment.userAgent,
    cancelRouterSetup: false
  });
  function delegateToConcreteImplementation(methodName) {
    return function (...args) {
      var _a;
      var {
        concreteImplementation
      } = this;
      (true && !(concreteImplementation) && (0, _debug.assert)("AutoLocation's detect() method should be called before calling any other hooks.", concreteImplementation)); // We need this cast because `Parameters` is deferred so that it is not
      // possible for TS to see it will always produce the right type. However,
      // since `AnyFn` has a rest type, it is allowed. See discussion on [this
      // issue](https://github.com/microsoft/TypeScript/issues/47615).
      return (_a = concreteImplementation[methodName]) === null || _a === void 0 ? void 0 : _a.call(concreteImplementation, ...args);
    };
  }
  function detectImplementation(options) {
    var {
      location,
      userAgent,
      history,
      documentMode,
      global,
      rootURL
    } = options;
    var implementation = 'none';
    var cancelRouterSetup = false;
    var currentPath = (0, _locationUtils.getFullPath)(location);
    if ((0, _locationUtils.supportsHistory)(userAgent, history)) {
      var historyPath = getHistoryPath(rootURL, location);
      // If the browser supports history and we have a history path, we can use
      // the history location with no redirects.
      if (currentPath === historyPath) {
        implementation = 'history';
      } else if (currentPath.substring(0, 2) === '/#') {
        history.replaceState({
          path: historyPath
        }, '', historyPath);
        implementation = 'history';
      } else {
        cancelRouterSetup = true;
        (0, _locationUtils.replacePath)(location, historyPath);
      }
    } else if ((0, _locationUtils.supportsHashChange)(documentMode, global)) {
      var hashPath = getHashPath(rootURL, location);
      // Be sure we're using a hashed path, otherwise let's switch over it to so
      // we start off clean and consistent. We'll count an index path with no
      // hash as "good enough" as well.
      if (currentPath === hashPath || currentPath === '/' && hashPath === '/#/') {
        implementation = 'hash';
      } else {
        // Our URL isn't in the expected hash-supported format, so we want to
        // cancel the router setup and replace the URL to start off clean
        cancelRouterSetup = true;
        (0, _locationUtils.replacePath)(location, hashPath);
      }
    }
    if (cancelRouterSetup) {
      return false;
    }
    return implementation;
  }
  /**
    @private
  
    Returns the current path as it should appear for HistoryLocation supported
    browsers. This may very well differ from the real current path (e.g. if it
    starts off as a hashed URL)
  */
  function getHistoryPath(rootURL, location) {
    var path = (0, _locationUtils.getPath)(location);
    var hash = (0, _locationUtils.getHash)(location);
    var query = (0, _locationUtils.getQuery)(location);
    var rootURLIndex = path.indexOf(rootURL);
    var routeHash;
    var hashParts;
    (true && !(rootURLIndex === 0) && (0, _debug.assert)(`Path ${path} does not start with the provided rootURL ${rootURL}`, rootURLIndex === 0)); // By convention, Ember.js routes using HashLocation are required to start
    // with `#/`. Anything else should NOT be considered a route and should
    // be passed straight through, without transformation.
    if (hash.substring(0, 2) === '#/') {
      // There could be extra hash segments after the route
      hashParts = hash.substring(1).split('#');
      // The first one is always the route url
      routeHash = hashParts.shift();
      // If the path already has a trailing slash, remove the one
      // from the hashed route so we don't double up.
      if (path.charAt(path.length - 1) === '/') {
        routeHash = routeHash.substring(1);
      }
      // This is the "expected" final order
      path += routeHash + query;
      if (hashParts.length) {
        path += `#${hashParts.join('#')}`;
      }
    } else {
      path += query + hash;
    }
    return path;
  }
  /**
    @private
  
    Returns the current path as it should appear for HashLocation supported
    browsers. This may very well differ from the real current path.
  
    @method _getHashPath
  */
  function getHashPath(rootURL, location) {
    var path = rootURL;
    var historyPath = getHistoryPath(rootURL, location);
    var routePath = historyPath.substring(rootURL.length);
    if (routePath !== '') {
      if (routePath[0] !== '/') {
        routePath = `/${routePath}`;
      }
      path += `#${routePath}`;
    }
    return path;
  }
});
define("@ember/routing/hash-location", ["exports", "@ember/object", "@ember/runloop", "@ember/routing/lib/location-utils"], function (_exports, _object, _runloop, _locationUtils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/routing/hash-location
  */
  /**
    `HashLocation` implements the location API using the browser's
    hash. At present, it relies on a `hashchange` event existing in the
    browser.
  
    Using `HashLocation` results in URLs with a `#` (hash sign) separating the
    server side URL portion of the URL from the portion that is used by Ember.
  
    Example:
  
    ```app/router.js
    Router.map(function() {
      this.route('posts', function() {
        this.route('new');
      });
    });
  
    Router.reopen({
      location: 'hash'
    });
    ```
  
    This will result in a posts.new url of `/#/posts/new`.
  
    @class HashLocation
    @extends EmberObject
    @protected
  */
  class HashLocation extends _object.default {
    constructor() {
      super(...arguments);
      this.implementation = 'hash';
      this.lastSetURL = null;
    }
    init() {
      (0, _object.set)(this, 'location', this._location || window.location);
      this._hashchangeHandler = undefined;
    }
    /**
      @private
         Returns normalized location.hash
         @since 1.5.1
      @method getHash
    */
    getHash() {
      return (0, _locationUtils.getHash)(this.location);
    }
    /**
      Returns the normalized URL, constructed from `location.hash`.
         e.g. `#/foo` => `/foo` as well as `#/foo#bar` => `/foo#bar`.
         By convention, hashed paths must begin with a forward slash, otherwise they
      are not treated as a path so we can distinguish intent.
         @private
      @method getURL
    */
    getURL() {
      var originalPath = this.getHash().substring(1);
      var outPath = originalPath;
      if (outPath[0] !== '/') {
        outPath = '/';
        // Only add the # if the path isn't empty.
        // We do NOT want `/#` since the ampersand
        // is only included (conventionally) when
        // the location.hash has a value
        if (originalPath) {
          outPath += `#${originalPath}`;
        }
      }
      return outPath;
    }
    /**
      Set the `location.hash` and remembers what was set. This prevents
      `onUpdateURL` callbacks from triggering when the hash was set by
      `HashLocation`.
         @private
      @method setURL
      @param path {String}
    */
    setURL(path) {
      this.location.hash = path;
      (0, _object.set)(this, 'lastSetURL', path);
    }
    /**
      Uses location.replace to update the url without a page reload
      or history modification.
         @private
      @method replaceURL
      @param path {String}
    */
    replaceURL(path) {
      this.location.replace(`#${path}`);
      (0, _object.set)(this, 'lastSetURL', path);
    }
    /**
      Register a callback to be invoked when the hash changes. These
      callbacks will execute when the user presses the back or forward
      button, but not after `setURL` is invoked.
         @private
      @method onUpdateURL
      @param callback {Function}
    */
    onUpdateURL(callback) {
      this._removeEventListener();
      this._hashchangeHandler = (0, _runloop.bind)(this, function (_event) {
        var path = this.getURL();
        if (this.lastSetURL === path) {
          return;
        }
        (0, _object.set)(this, 'lastSetURL', null);
        callback(path);
      });
      window.addEventListener('hashchange', this._hashchangeHandler);
    }
    /**
      Given a URL, formats it to be placed into the page as part
      of an element's `href` attribute.
         This is used, for example, when using the {{action}} helper
      to generate a URL based on an event.
         @private
      @method formatURL
      @param url {String}
    */
    formatURL(url) {
      return `#${url}`;
    }
    /**
      Cleans up the HashLocation event listener.
         @private
      @method willDestroy
    */
    willDestroy() {
      this._removeEventListener();
    }
    _removeEventListener() {
      if (this._hashchangeHandler) {
        window.removeEventListener('hashchange', this._hashchangeHandler);
      }
    }
  }
  _exports.default = HashLocation;
});
define("@ember/routing/history-location", ["exports", "@ember/object", "@ember/routing/lib/location-utils"], function (_exports, _object, _locationUtils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/routing/history-location
  */
  var popstateFired = false;
  function _uuid() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r, v;
      r = Math.random() * 16 | 0;
      v = c === 'x' ? r : r & 3 | 8;
      return v.toString(16);
    });
  }
  /**
    HistoryLocation implements the location API using the browser's
    history.pushState API.
  
    Using `HistoryLocation` results in URLs that are indistinguishable from a
    standard URL. This relies upon the browser's `history` API.
  
    Example:
  
    ```app/router.js
    Router.map(function() {
      this.route('posts', function() {
        this.route('new');
      });
    });
  
    Router.reopen({
      location: 'history'
    });
    ```
  
    This will result in a posts.new url of `/posts/new`.
  
    Keep in mind that your server must serve the Ember app at all the routes you
    define.
  
    Using `HistoryLocation` will also result in location states being recorded by
    the browser `history` API with the following schema:
  
    ```
    window.history.state -> { path: '/', uuid: '3552e730-b4a6-46bd-b8bf-d8c3c1a97e0a' }
    ```
  
    This allows each in-app location state to be tracked uniquely across history
    state changes via the `uuid` field.
  
    @class HistoryLocation
    @extends EmberObject
    @protected
  */
  class HistoryLocation extends _object.default {
    constructor() {
      super(...arguments);
      this.implementation = 'history';
      /**
        Will be pre-pended to path upon state change
               @property rootURL
        @default '/'
        @private
      */
      this.rootURL = '/';
    }
    /**
      @private
         Returns normalized location.hash
         @method getHash
    */
    getHash() {
      return (0, _locationUtils.getHash)(this.location);
    }
    init() {
      var _a;
      this._super(...arguments);
      var base = document.querySelector('base');
      var baseURL = '';
      if (base !== null && base.hasAttribute('href')) {
        baseURL = (_a = base.getAttribute('href')) !== null && _a !== void 0 ? _a : '';
      }
      (0, _object.set)(this, 'baseURL', baseURL);
      (0, _object.set)(this, 'location', this.location || window.location);
      this._popstateHandler = undefined;
    }
    /**
      Used to set state on first call to setURL
         @private
      @method initState
    */
    initState() {
      var history = this.history || window.history;
      (0, _object.set)(this, 'history', history);
      var {
        state
      } = history;
      var path = this.formatURL(this.getURL());
      if (state && state.path === path) {
        // preserve existing state
        // used for webkit workaround, since there will be no initial popstate event
        this._previousURL = this.getURL();
      } else {
        this.replaceState(path);
      }
    }
    /**
      Returns the current `location.pathname` without `rootURL` or `baseURL`
         @private
      @method getURL
      @return url {String}
    */
    getURL() {
      var {
        location,
        rootURL,
        baseURL
      } = this;
      var path = location.pathname;
      // remove trailing slashes if they exists
      rootURL = rootURL.replace(/\/$/, '');
      baseURL = baseURL.replace(/\/$/, '');
      // remove baseURL and rootURL from start of path
      var url = path.replace(new RegExp(`^${baseURL}(?=/|$)`), '').replace(new RegExp(`^${rootURL}(?=/|$)`), '').replace(/\/\//g, '/'); // remove extra slashes
      var search = location.search || '';
      url += search + this.getHash();
      return url;
    }
    /**
      Uses `history.pushState` to update the url without a page reload.
         @private
      @method setURL
      @param path {String}
    */
    setURL(path) {
      var {
        state
      } = this.history;
      path = this.formatURL(path);
      if (!state || state.path !== path) {
        this.pushState(path);
      }
    }
    /**
      Uses `history.replaceState` to update the url without a page reload
      or history modification.
         @private
      @method replaceURL
      @param path {String}
    */
    replaceURL(path) {
      var {
        state
      } = this.history;
      path = this.formatURL(path);
      if (!state || state.path !== path) {
        this.replaceState(path);
      }
    }
    /**
     Pushes a new state.
        @private
     @method pushState
     @param path {String}
    */
    pushState(path) {
      var state = {
        path,
        uuid: _uuid()
      };
      this.history.pushState(state, null, path);
      // used for webkit workaround
      this._previousURL = this.getURL();
    }
    /**
     Replaces the current state.
        @private
     @method replaceState
     @param path {String}
    */
    replaceState(path) {
      var state = {
        path,
        uuid: _uuid()
      };
      this.history.replaceState(state, null, path);
      // used for webkit workaround
      this._previousURL = this.getURL();
    }
    /**
      Register a callback to be invoked whenever the browser
      history changes, including using forward and back buttons.
         @private
      @method onUpdateURL
      @param callback {Function}
    */
    onUpdateURL(callback) {
      this._removeEventListener();
      this._popstateHandler = () => {
        // Ignore initial page load popstate event in Chrome
        if (!popstateFired) {
          popstateFired = true;
          if (this.getURL() === this._previousURL) {
            return;
          }
        }
        callback(this.getURL());
      };
      window.addEventListener('popstate', this._popstateHandler);
    }
    /**
      Used when using `{{action}}` helper.  The url is always appended to the rootURL.
         @private
      @method formatURL
      @param url {String}
      @return formatted url {String}
    */
    formatURL(url) {
      var {
        rootURL,
        baseURL
      } = this;
      if (url !== '') {
        // remove trailing slashes if they exists
        rootURL = rootURL.replace(/\/$/, '');
        baseURL = baseURL.replace(/\/$/, '');
      } else if (baseURL[0] === '/' && rootURL[0] === '/') {
        // if baseURL and rootURL both start with a slash
        // ... remove trailing slash from baseURL if it exists
        baseURL = baseURL.replace(/\/$/, '');
      }
      return baseURL + rootURL + url;
    }
    /**
      Cleans up the HistoryLocation event listener.
         @private
      @method willDestroy
    */
    willDestroy() {
      this._removeEventListener();
    }
    _removeEventListener() {
      if (this._popstateHandler) {
        window.removeEventListener('popstate', this._popstateHandler);
      }
    }
  }
  _exports.default = HistoryLocation;
});
define("@ember/routing/index", ["exports", "@ember/-internals/glimmer"], function (_exports, _glimmer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "LinkTo", {
    enumerable: true,
    get: function () {
      return _glimmer.LinkTo;
    }
  });
});
define("@ember/routing/lib/cache", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    A two-tiered cache with support for fallback values when doing lookups.
    Uses "buckets" and then "keys" to cache values.
  
    @private
    @class BucketCache
  */
  class BucketCache {
    constructor() {
      this.cache = new Map();
    }
    has(bucketKey) {
      return this.cache.has(bucketKey);
    }
    stash(bucketKey, key, value) {
      var bucket = this.cache.get(bucketKey);
      if (bucket === undefined) {
        bucket = new Map();
        this.cache.set(bucketKey, bucket);
      }
      bucket.set(key, value);
    }
    lookup(bucketKey, prop, defaultValue) {
      if (!this.has(bucketKey)) {
        return defaultValue;
      }
      var bucket = this.cache.get(bucketKey);
      if (bucket.has(prop)) {
        return bucket.get(prop);
      } else {
        return defaultValue;
      }
    }
  }
  _exports.default = BucketCache;
});
define("@ember/routing/lib/controller_for", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = controllerFor;
  /**
    @module ember/routing
  */
  /**
    Finds a controller instance.
  
    @for Ember
    @method controllerFor
    @private
  */
  function controllerFor(container, controllerName, lookupOptions) {
    return container.lookup(`controller:${controllerName}`, lookupOptions);
  }
});
define("@ember/routing/lib/dsl", ["exports", "@ember/debug"], function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var uuid = 0;
  function isCallback(value) {
    return typeof value === 'function';
  }
  function isOptions(value) {
    return value !== null && typeof value === 'object';
  }
  class DSLImpl {
    constructor(name = null, options) {
      this.explicitIndex = false;
      this.parent = name;
      this.enableLoadingSubstates = Boolean(options && options.enableLoadingSubstates);
      this.matches = [];
      this.options = options;
    }
    route(name, _options, _callback) {
      var options;
      var callback = null;
      var dummyErrorRoute = `/_unused_dummy_error_path_route_${name}/:error`;
      if (isCallback(_options)) {
        (true && !(arguments.length === 2) && (0, _debug.assert)('Unexpected arguments', arguments.length === 2));
        options = {};
        callback = _options;
      } else if (isCallback(_callback)) {
        (true && !(arguments.length === 3) && (0, _debug.assert)('Unexpected arguments', arguments.length === 3));
        (true && !(isOptions(_options)) && (0, _debug.assert)('Unexpected arguments', isOptions(_options)));
        options = _options;
        callback = _callback;
      } else {
        options = _options || {};
      }
      (true && !((() => {
        if (options.overrideNameAssertion === true) {
          return true;
        }
        return ['basic', 'application'].indexOf(name) === -1;
      })()) && (0, _debug.assert)(`'${name}' cannot be used as a route name.`, (() => {
        if (options.overrideNameAssertion === true) {
          return true;
        }
        return ['basic', 'application'].indexOf(name) === -1;
      })()));
      (true && !(name.indexOf(':') === -1) && (0, _debug.assert)(`'${name}' is not a valid route name. It cannot contain a ':'. You may want to use the 'path' option instead.`, name.indexOf(':') === -1));
      if (this.enableLoadingSubstates) {
        createRoute(this, `${name}_loading`, {
          resetNamespace: options.resetNamespace
        });
        createRoute(this, `${name}_error`, {
          resetNamespace: options.resetNamespace,
          path: dummyErrorRoute
        });
      }
      if (callback) {
        var fullName = getFullName(this, name, options.resetNamespace);
        var dsl = new DSLImpl(fullName, this.options);
        createRoute(dsl, 'loading');
        createRoute(dsl, 'error', {
          path: dummyErrorRoute
        });
        callback.call(dsl);
        createRoute(this, name, options, dsl.generate());
      } else {
        createRoute(this, name, options);
      }
    }
    push(url, name, callback, serialize) {
      var parts = name.split('.');
      if (this.options.engineInfo) {
        var localFullName = name.slice(this.options.engineInfo.fullName.length + 1);
        var routeInfo = Object.assign({
          localFullName
        }, this.options.engineInfo);
        if (serialize) {
          routeInfo.serializeMethod = serialize;
        }
        this.options.addRouteForEngine(name, routeInfo);
      } else if (serialize) {
        throw new Error(`Defining a route serializer on route '${name}' outside an Engine is not allowed.`);
      }
      if (url === '' || url === '/' || parts[parts.length - 1] === 'index') {
        this.explicitIndex = true;
      }
      this.matches.push(url, name, callback);
    }
    generate() {
      var dslMatches = this.matches;
      if (!this.explicitIndex) {
        this.route('index', {
          path: '/'
        });
      }
      return match => {
        for (var i = 0; i < dslMatches.length; i += 3) {
          match(dslMatches[i]).to(dslMatches[i + 1], dslMatches[i + 2]);
        }
      };
    }
    mount(_name, options = {}) {
      var engineRouteMap = this.options.resolveRouteMap(_name);
      var name = _name;
      if (options.as) {
        name = options.as;
      }
      var fullName = getFullName(this, name, options.resetNamespace);
      var engineInfo = {
        name: _name,
        instanceId: uuid++,
        mountPoint: fullName,
        fullName
      };
      var path = options.path;
      if (typeof path !== 'string') {
        path = `/${name}`;
      }
      var callback;
      var dummyErrorRoute = `/_unused_dummy_error_path_route_${name}/:error`;
      if (engineRouteMap) {
        var shouldResetEngineInfo = false;
        var oldEngineInfo = this.options.engineInfo;
        if (oldEngineInfo) {
          shouldResetEngineInfo = true;
          this.options.engineInfo = engineInfo;
        }
        var optionsForChild = Object.assign({
          engineInfo
        }, this.options);
        var childDSL = new DSLImpl(fullName, optionsForChild);
        createRoute(childDSL, 'loading');
        createRoute(childDSL, 'error', {
          path: dummyErrorRoute
        });
        engineRouteMap.class.call(childDSL);
        callback = childDSL.generate();
        if (shouldResetEngineInfo) {
          this.options.engineInfo = oldEngineInfo;
        }
      }
      var localFullName = 'application';
      var routeInfo = Object.assign({
        localFullName
      }, engineInfo);
      if (this.enableLoadingSubstates) {
        // These values are important to register the loading routes under their
        // proper names for the Router and within the Engine's registry.
        var substateName = `${name}_loading`;
        var _localFullName = `application_loading`;
        var _routeInfo = Object.assign({
          localFullName: _localFullName
        }, engineInfo);
        createRoute(this, substateName, {
          resetNamespace: options.resetNamespace
        });
        this.options.addRouteForEngine(substateName, _routeInfo);
        substateName = `${name}_error`;
        _localFullName = `application_error`;
        _routeInfo = Object.assign({
          localFullName: _localFullName
        }, engineInfo);
        createRoute(this, substateName, {
          resetNamespace: options.resetNamespace,
          path: dummyErrorRoute
        });
        this.options.addRouteForEngine(substateName, _routeInfo);
      }
      this.options.addRouteForEngine(fullName, routeInfo);
      this.push(path, fullName, callback);
    }
  }
  _exports.default = DSLImpl;
  function canNest(dsl) {
    return dsl.parent !== 'application';
  }
  function getFullName(dsl, name, resetNamespace) {
    if (canNest(dsl) && resetNamespace !== true) {
      return `${dsl.parent}.${name}`;
    } else {
      return name;
    }
  }
  function createRoute(dsl, name, options = {}, callback) {
    var fullName = getFullName(dsl, name, options.resetNamespace);
    if (typeof options.path !== 'string') {
      options.path = `/${name}`;
    }
    dsl.push(options.path, fullName, callback, options.serialize);
  }
});
define("@ember/routing/lib/engines", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
});
define("@ember/routing/lib/generate_controller", ["exports", "@ember/-internals/metal", "@ember/controller", "@ember/debug"], function (_exports, _metal, _controller, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = generateController;
  _exports.generateControllerFactory = generateControllerFactory;
  /**
   @module ember/routing
  */
  /**
    Generates a controller factory
  
    @for Ember
    @method generateControllerFactory
    @private
  */
  function generateControllerFactory(owner, controllerName) {
    var factoryManager = owner.factoryFor('controller:basic');
    (true && !(factoryManager !== undefined) && (0, _debug.assert)('[BUG] unexpectedly missing a factoryManager for `controller:basic`', factoryManager !== undefined)); // SAFETY: This is *not* safe, and the cast should be removed in favor of the
    // `assert()` below after altering *tests*. It is left in this state for the
    // moment in the interest of keeping type-only changes separate from changes
    // to the runtime behavior of the system, even for tests.
    var Factory = factoryManager.class;
    // assert(
    //   '[BUG] factory for `controller:main` is unexpectedly not a Controller',
    //   ((factory): factory is typeof Controller => factory === Controller)(Factory)
    // );
    Factory = Factory.extend({
      toString() {
        return `(generated ${controllerName} controller)`;
      }
    });
    var fullName = `controller:${controllerName}`;
    owner.register(fullName, Factory);
    return owner.factoryFor(fullName);
  }
  /**
    Generates and instantiates a controller extending from `controller:basic`
    if present, or `Controller` if not.
  
    @for Ember
    @method generateController
    @private
    @since 1.3.0
  */
  function generateController(owner, controllerName) {
    generateControllerFactory(owner, controllerName);
    var fullName = `controller:${controllerName}`;
    var instance = owner.lookup(fullName);
    (true && !(instance instanceof _controller.default) && (0, _debug.assert)('Expected an instance of controller', instance instanceof _controller.default));
    if (true /* DEBUG */) {
      if ((0, _metal.get)(instance, 'namespace.LOG_ACTIVE_GENERATION')) {
        (0, _debug.info)(`generated -> ${fullName}`, {
          fullName
        });
      }
    }
    return instance;
  }
});
define("@ember/routing/lib/location-utils", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getFullPath = getFullPath;
  _exports.getHash = getHash;
  _exports.getOrigin = getOrigin;
  _exports.getPath = getPath;
  _exports.getQuery = getQuery;
  _exports.replacePath = replacePath;
  _exports.supportsHashChange = supportsHashChange;
  _exports.supportsHistory = supportsHistory;
  /**
    @private
  
    Returns the current `location.pathname`, normalized for IE inconsistencies.
  */
  function getPath(location) {
    var pathname = location.pathname;
    // Various versions of IE/Opera don't always return a leading slash
    if (pathname[0] !== '/') {
      pathname = `/${pathname}`;
    }
    return pathname;
  }
  /**
    @private
  
    Returns the current `location.search`.
  */
  function getQuery(location) {
    return location.search;
  }
  /**
    @private
  
    Returns the hash or empty string
  */
  function getHash(location) {
    if (location.hash !== undefined) {
      return location.hash.substring(0);
    }
    return '';
  }
  function getFullPath(location) {
    return getPath(location) + getQuery(location) + getHash(location);
  }
  function getOrigin(location) {
    var origin = location.origin;
    // Older browsers, especially IE, don't have origin
    if (!origin) {
      origin = `${location.protocol}//${location.hostname}`;
      if (location.port) {
        origin += `:${location.port}`;
      }
    }
    return origin;
  }
  /*
    `documentMode` only exist in Internet Explorer, and it's tested because IE8 running in
    IE7 compatibility mode claims to support `onhashchange` but actually does not.
  
    `global` is an object that may have an `onhashchange` property.
  
    @private
    @function supportsHashChange
  */
  function supportsHashChange(documentMode, global) {
    return Boolean(global && 'onhashchange' in global && (documentMode === undefined || documentMode > 7));
  }
  /*
    `userAgent` is a user agent string. We use user agent testing here, because
    the stock Android browser is known to have buggy versions of the History API,
    in some Android versions.
  
    @private
    @function supportsHistory
  */
  function supportsHistory(userAgent, history) {
    // Boosted from Modernizr: https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
    // The stock browser on Android 2.2 & 2.3, and 4.0.x returns positive on history support
    // Unfortunately support is really buggy and there is no clean way to detect
    // these bugs, so we fall back to a user agent sniff :(
    // We only want Android 2 and 4.0, stock browser, and not Chrome which identifies
    // itself as 'Mobile Safari' as well, nor Windows Phone.
    if ((userAgent.indexOf('Android 2.') !== -1 || userAgent.indexOf('Android 4.0') !== -1) && userAgent.indexOf('Mobile Safari') !== -1 && userAgent.indexOf('Chrome') === -1 && userAgent.indexOf('Windows Phone') === -1) {
      return false;
    }
    return Boolean(history && 'pushState' in history);
  }
  /**
    Replaces the current location, making sure we explicitly include the origin
    to prevent redirecting to a different origin.
  
    @private
  */
  function replacePath(location, path) {
    location.replace(getOrigin(location) + path);
  }
});
define("@ember/routing/lib/query_params", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class QueryParams {
    constructor(values = null) {
      this.isQueryParams = true;
      this.values = values;
    }
  }
  _exports.default = QueryParams;
});
define("@ember/routing/lib/route-info", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
});
define("@ember/routing/lib/router_state", ["exports", "@ember/routing/lib/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class RouterState {
    constructor(emberRouter, router, routerJsState) {
      this.emberRouter = emberRouter;
      this.router = router;
      this.routerJsState = routerJsState;
    }
    isActiveIntent(routeName, models, queryParams) {
      var state = this.routerJsState;
      if (!this.router.isActiveIntent(routeName, models, undefined, state)) {
        return false;
      }
      if (queryParams !== undefined && Object.keys(queryParams).length > 0) {
        var visibleQueryParams = Object.assign({}, queryParams);
        this.emberRouter._prepareQueryParams(routeName, models, visibleQueryParams);
        return (0, _utils.shallowEqual)(visibleQueryParams, state.queryParams);
      }
      return true;
    }
  }
  _exports.default = RouterState;
});
define("@ember/routing/lib/routing-service", ["exports", "@ember/-internals/owner", "@ember/debug", "@ember/object/computed", "@ember/service", "@ember/routing/router", "@ember/routing/router-service"], function (_exports, _owner, _debug, _computed, _service, _router2, _routerService) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module ember
  */

  /**
    The Routing service is used by LinkTo, and provides facilities for
    the component/view layer to interact with the router.
  
    This is a private service for internal usage only. For public usage,
    refer to the `Router` service.
  
    @private
    @class RoutingService
  */
  class RoutingService extends _service.default {
    get router() {
      var router = this[_routerService.ROUTER];
      if (router !== undefined) {
        return router;
      }
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('RoutingService is unexpectedly missing an owner', owner));
      var _router = owner.lookup('router:main');
      (true && !(_router instanceof _router2.default) && (0, _debug.assert)('ROUTING SERVICE BUG: Expected router to be an instance of EmberRouter', _router instanceof _router2.default));
      _router.setupRouter();
      return this[_routerService.ROUTER] = _router;
    }
    hasRoute(routeName) {
      return this.router.hasRoute(routeName);
    }
    transitionTo(routeName, models, queryParams, shouldReplace) {
      var transition = this.router._doTransition(routeName, models, queryParams);
      if (shouldReplace) {
        transition.method('replace');
      }
      return transition;
    }
    normalizeQueryParams(routeName, models, queryParams) {
      this.router._prepareQueryParams(routeName, models, queryParams);
    }
    _generateURL(routeName, models, queryParams) {
      var visibleQueryParams = {};
      if (queryParams) {
        Object.assign(visibleQueryParams, queryParams);
        this.normalizeQueryParams(routeName, models, visibleQueryParams);
      }
      return this.router.generate(routeName, ...models, {
        queryParams: visibleQueryParams
      });
    }
    generateURL(routeName, models, queryParams) {
      if (this.router._initialTransitionStarted) {
        return this._generateURL(routeName, models, queryParams);
      } else {
        // Swallow error when transition has not started.
        // When rendering in tests without visit(), we cannot infer the route context which <LinkTo/> needs be aware of
        try {
          return this._generateURL(routeName, models, queryParams);
        } catch (_e) {
          return;
        }
      }
    }
    isActiveForRoute(contexts, queryParams, routeName, routerState) {
      var handlers = this.router._routerMicrolib.recognizer.handlersFor(routeName);
      var leafName = handlers[handlers.length - 1].handler;
      var maximumContexts = numberOfContextsAcceptedByHandler(routeName, handlers);
      // NOTE: any ugliness in the calculation of activeness is largely
      // due to the fact that we support automatic normalizing of
      // `resource` -> `resource.index`, even though there might be
      // dynamic segments / query params defined on `resource.index`
      // which complicates (and makes somewhat ambiguous) the calculation
      // of activeness for links that link to `resource` instead of
      // directly to `resource.index`.
      // if we don't have enough contexts revert back to full route name
      // this is because the leaf route will use one of the contexts
      if (contexts.length > maximumContexts) {
        routeName = leafName;
      }
      return routerState.isActiveIntent(routeName, contexts, queryParams);
    }
  }
  _exports.default = RoutingService;
  RoutingService.reopen({
    targetState: (0, _computed.readOnly)('router.targetState'),
    currentState: (0, _computed.readOnly)('router.currentState'),
    currentRouteName: (0, _computed.readOnly)('router.currentRouteName'),
    currentPath: (0, _computed.readOnly)('router.currentPath')
  });
  function numberOfContextsAcceptedByHandler(handlerName, handlerInfos) {
    var req = 0;
    for (var i = 0; i < handlerInfos.length; i++) {
      req += handlerInfos[i].names.length;
      if (handlerInfos[i].handler === handlerName) {
        break;
      }
    }
    return req;
  }
});
define("@ember/routing/lib/utils", ["exports", "@ember/-internals/metal", "@ember/-internals/owner", "@ember/debug", "@ember/engine/instance", "router_js"], function (_exports, _metal, _owner, _debug, _instance, _router_js) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.calculateCacheKey = calculateCacheKey;
  _exports.deprecateTransitionMethods = deprecateTransitionMethods;
  _exports.extractRouteArgs = extractRouteArgs;
  _exports.getActiveTargetName = getActiveTargetName;
  _exports.normalizeControllerQueryParams = normalizeControllerQueryParams;
  _exports.prefixRouteNameArg = prefixRouteNameArg;
  _exports.resemblesURL = resemblesURL;
  _exports.shallowEqual = shallowEqual;
  _exports.stashParamNames = stashParamNames;
  var ALL_PERIODS_REGEX = /\./g;
  function extractRouteArgs(args) {
    // SAFETY: This should just be the same thing
    args = args.slice();
    var possibleOptions = args[args.length - 1];
    var queryParams;
    if (isRouteOptions(possibleOptions)) {
      args.pop(); // Remove options
      queryParams = possibleOptions.queryParams;
    } else {
      queryParams = {};
    }
    var routeName;
    if (typeof args[0] === 'string') {
      routeName = args.shift();
      // We just checked this!
      (true && !(typeof routeName === 'string') && (0, _debug.assert)('routeName is a string', typeof routeName === 'string'));
    }
    // SAFTEY: We removed the name and options if they existed, only models left.
    var models = args;
    return {
      routeName,
      models,
      queryParams
    };
  }
  function getActiveTargetName(router) {
    var routeInfos = router.activeTransition ? router.activeTransition[_router_js.STATE_SYMBOL].routeInfos : router.state.routeInfos;
    var lastRouteInfo = routeInfos[routeInfos.length - 1];
    (true && !(lastRouteInfo) && (0, _debug.assert)('has last route info', lastRouteInfo));
    return lastRouteInfo.name;
  }
  function stashParamNames(router, routeInfos) {
    if (routeInfos['_namesStashed']) {
      return;
    }
    // This helper exists because router.js/route-recognizer.js awkwardly
    // keeps separate a routeInfo's list of parameter names depending
    // on whether a URL transition or named transition is happening.
    // Hopefully we can remove this in the future.
    var routeInfo = routeInfos[routeInfos.length - 1];
    (true && !(routeInfo) && (0, _debug.assert)('has route info', routeInfo));
    var targetRouteName = routeInfo.name;
    var recogHandlers = router._routerMicrolib.recognizer.handlersFor(targetRouteName);
    var dynamicParent;
    for (var i = 0; i < routeInfos.length; ++i) {
      var _routeInfo = routeInfos[i];
      (true && !(_routeInfo) && (0, _debug.assert)('has route info', _routeInfo));
      var names = recogHandlers[i].names;
      if (names.length) {
        dynamicParent = _routeInfo;
      }
      _routeInfo['_names'] = names;
      var route = _routeInfo.route;
      // SAFETY: This cast should be idential. I don't understand why it is needed.
      route._stashNames(_routeInfo, dynamicParent);
    }
    routeInfos['_namesStashed'] = true;
  }
  function _calculateCacheValuePrefix(prefix, part) {
    // calculates the dot separated sections from prefix that are also
    // at the start of part - which gives us the route name
    // given : prefix = site.article.comments, part = site.article.id
    //      - returns: site.article (use get(values[site.article], 'id') to get the dynamic part - used below)
    // given : prefix = site.article, part = site.article.id
    //      - returns: site.article. (use get(values[site.article], 'id') to get the dynamic part - used below)
    var prefixParts = prefix.split('.');
    var currPrefix = '';
    for (var i = 0; i < prefixParts.length; i++) {
      var currPart = prefixParts.slice(0, i + 1).join('.');
      if (part.indexOf(currPart) !== 0) {
        break;
      }
      currPrefix = currPart;
    }
    return currPrefix;
  }
  /*
    Stolen from Controller
  */
  function calculateCacheKey(prefix, parts = [], values) {
    var suffixes = '';
    for (var part of parts) {
      var cacheValuePrefix = _calculateCacheValuePrefix(prefix, part);
      var value = void 0;
      if (values) {
        if (cacheValuePrefix && cacheValuePrefix in values) {
          var partRemovedPrefix = part.indexOf(cacheValuePrefix) === 0 ? part.substring(cacheValuePrefix.length + 1) : part;
          value = (0, _metal.get)(values[cacheValuePrefix], partRemovedPrefix);
        } else {
          value = (0, _metal.get)(values, part);
        }
      }
      suffixes += `::${part}:${value}`;
    }
    return prefix + suffixes.replace(ALL_PERIODS_REGEX, '-');
  }
  /*
    Controller-defined query parameters can come in three shapes:
  
    Array
      queryParams: ['foo', 'bar']
    Array of simple objects where value is an alias
      queryParams: [
        {
          'foo': 'rename_foo_to_this'
        },
        {
          'bar': 'call_bar_this_instead'
        }
      ]
    Array of fully defined objects
      queryParams: [
        {
          'foo': {
            as: 'rename_foo_to_this'
          },
        }
        {
          'bar': {
            as: 'call_bar_this_instead',
            scope: 'controller'
          }
        }
      ]
  
    This helper normalizes all three possible styles into the
    'Array of fully defined objects' style.
  */
  function normalizeControllerQueryParams(queryParams) {
    var qpMap = {};
    for (var queryParam of queryParams) {
      accumulateQueryParamDescriptors(queryParam, qpMap);
    }
    return qpMap;
  }
  function accumulateQueryParamDescriptors(_desc, accum) {
    var desc = typeof _desc === 'string' ? {
      [_desc]: {
        as: null
      }
    } : _desc;
    for (var key in desc) {
      if (!Object.prototype.hasOwnProperty.call(desc, key)) {
        return;
      }
      var _singleDesc = desc[key];
      var singleDesc = typeof _singleDesc === 'string' ? {
        as: _singleDesc
      } : _singleDesc;
      var partialVal = accum[key] || {
        as: null,
        scope: 'model'
      };
      var val = Object.assign(Object.assign({}, partialVal), singleDesc);
      accum[key] = val;
    }
  }
  /*
    Check if a routeName resembles a url instead
  
    @private
  */
  function resemblesURL(str) {
    return typeof str === 'string' && (str === '' || str[0] === '/');
  }
  /*
    Returns an arguments array where the route name arg is prefixed based on the mount point
  
    @private
  */
  function prefixRouteNameArg(route, args) {
    var routeName;
    var owner = (0, _owner.getOwner)(route);
    (true && !(owner instanceof _instance.default) && (0, _debug.assert)('Expected route to have EngineInstance as owner', owner instanceof _instance.default));
    var prefix = owner.mountPoint;
    // only alter the routeName if it's actually referencing a route.
    if (owner.routable && typeof args[0] === 'string') {
      routeName = args[0];
      if (resemblesURL(routeName)) {
        throw new Error('Programmatic transitions by URL cannot be used within an Engine. Please use the route name instead.');
      } else {
        routeName = `${prefix}.${routeName}`;
        args[0] = routeName;
      }
    }
    return args;
  }
  function shallowEqual(a, b) {
    var aCount = 0;
    var bCount = 0;
    for (var kA in a) {
      if (Object.prototype.hasOwnProperty.call(a, kA)) {
        if (a[kA] !== b[kA]) {
          return false;
        }
        aCount++;
      }
    }
    for (var kB in b) {
      if (Object.prototype.hasOwnProperty.call(b, kB)) {
        bCount++;
      }
    }
    return aCount === bCount;
  }
  function deprecateTransitionMethods(frameworkClass, methodName) {
    (true && !(false) && (0, _debug.deprecate)(`Calling ${methodName} on a ${frameworkClass} is deprecated. Use the RouterService instead.`, false, {
      id: 'routing.transition-methods',
      for: 'ember-source',
      since: {
        available: '3.26.0',
        enabled: '3.26.0'
      },
      until: '5.0.0',
      url: 'https://deprecations.emberjs.com/v3.x/#toc_routing-transition-methods'
    }));
  }
  function isRouteOptions(value) {
    if (value && typeof value === 'object') {
      var qps = value.queryParams;
      if (qps && typeof qps === 'object') {
        return Object.keys(qps).every(k => typeof k === 'string');
      }
    }
    return false;
  }
});
define("@ember/routing/location", ["exports", "@ember/debug"], function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/routing/location
  */
  /**
    Location returns an instance of the correct implementation of
    the `location` API.
  
    ## Implementations
  
    You can pass an implementation name (`hash`, `history`, `none`, `auto`) to force a
    particular implementation to be used in your application.
  
    See [HashLocation](/ember/release/classes/HashLocation).
    See [HistoryLocation](/ember/release/classes/HistoryLocation).
    See [NoneLocation](/ember/release/classes/NoneLocation).
    See [AutoLocation](/ember/release/classes/AutoLocation).
  
    ## Location API
  
    Each location implementation must provide the following methods:
  
    * implementation: returns the string name used to reference the implementation.
    * getURL: returns the current URL.
    * setURL(path): sets the current URL.
    * replaceURL(path): replace the current URL (optional).
    * onUpdateURL(callback): triggers the callback when the URL changes.
    * formatURL(url): formats `url` to be placed into `href` attribute.
    * detect() (optional): instructs the location to do any feature detection
        necessary. If the location needs to redirect to a different URL, it
        can cancel routing by setting the `cancelRouterSetup` property on itself
        to `false`.
  
    Calling setURL or replaceURL will not trigger onUpdateURL callbacks.
  
    ## Custom implementation
  
    Ember scans `app/locations/*` for extending the Location API.
  
    Example:
  
    ```javascript
    import HistoryLocation from '@ember/routing/history-location';
  
    export default class MyHistory {
      implementation = 'my-custom-history';
  
      constructor() {
        this._history = HistoryLocation.create(...arguments);
      }
  
      create() {
        return new this(...arguments);
      }
  
      pushState(path) {
         this._history.pushState(path);
      }
    }
    ```
  
    @class Location
    @private
  */
  var _default = _exports.default = {
    /**
     This is deprecated in favor of using the container to lookup the location
     implementation as desired.
        For example:
        ```javascript
     // Given a location registered as follows:
     container.register('location:history-test', HistoryTestLocation);
        // You could create a new instance via:
     container.lookup('location:history-test');
     ```
         @method create
      @param {Object} options
      @return {Object} an instance of an implementation of the `location` API
      @deprecated Use the container to lookup the location implementation that you
      need.
      @private
    */
    create(options) {
      var implementation = options === null || options === void 0 ? void 0 : options.implementation;
      (true && !(implementation) && (0, _debug.assert)("Location.create: you must specify a 'implementation' option", implementation));
      var implementationClass = this.implementations[implementation];
      (true && !(implementationClass) && (0, _debug.assert)(`Location.create: ${implementation} is not a valid implementation`, implementationClass));
      (true && !(false) && (0, _debug.deprecate)("Calling `create` on Location class is deprecated. Instead, use `container.lookup('location:my-location')` to lookup the location you need.", false, {
        id: 'deprecate-auto-location',
        until: '5.0.0',
        url: 'https://emberjs.com/deprecations/v4.x#toc_deprecate-auto-location',
        for: 'ember-source',
        since: {
          available: '4.1.0',
          enabled: '4.1.0'
        }
      }));
      return implementationClass.create(...arguments);
    },
    implementations: {}
  };
});
define("@ember/routing/none-location", ["exports", "@ember/object", "@ember/debug"], function (_exports, _object, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/routing/none-location
  */
  /**
    NoneLocation does not interact with the browser. It is useful for
    testing, or when you need to manage state with your Router, but temporarily
    don't want it to muck with the URL (for example when you embed your
    application in a larger page).
  
    Using `NoneLocation` causes Ember to not store the applications URL state
    in the actual URL. This is generally used for testing purposes, and is one
    of the changes made when calling `App.setupForTesting()`.
  
    @class NoneLocation
    @extends EmberObject
    @protected
  */
  class NoneLocation extends _object.default {
    constructor() {
      super(...arguments);
      this.implementation = 'none';
    }
    initState() {
      this._super(...arguments);
      var {
        rootURL
      } = this;
      // This assert doesn't have anything to do with state initialization,
      // but we're hijacking this method since it's called after the route has
      // set the rootURL property on its Location instance.
      (true && !(rootURL.charAt(rootURL.length - 1) === '/') && (0, _debug.assert)('rootURL must end with a trailing forward slash e.g. "/app/"', rootURL.charAt(rootURL.length - 1) === '/'));
    }
    /**
      Returns the current path without `rootURL`.
         @private
      @method getURL
      @return {String} path
    */
    getURL() {
      var {
        path,
        rootURL
      } = this;
      // remove trailing slashes if they exists
      rootURL = rootURL.replace(/\/$/, '');
      // remove rootURL from url
      return path.replace(new RegExp(`^${rootURL}(?=/|$)`), '');
    }
    /**
      Set the path and remembers what was set. Using this method
      to change the path will not invoke the `updateURL` callback.
         @private
      @method setURL
      @param path {String}
    */
    setURL(path) {
      (0, _object.set)(this, 'path', path);
    }
    /**
      Register a callback to be invoked when the path changes. These
      callbacks will execute when the user presses the back or forward
      button, but not after `setURL` is invoked.
         @private
      @method onUpdateURL
      @param callback {Function}
    */
    onUpdateURL(callback) {
      this.updateCallback = callback;
    }
    /**
      Sets the path and calls the `updateURL` callback.
         @private
      @method handleURL
      @param url {String}
    */
    handleURL(url) {
      (0, _object.set)(this, 'path', url);
      this.updateCallback(url);
    }
    /**
      Given a URL, formats it to be placed into the page as part
      of an element's `href` attribute.
         This is used, for example, when using the {{action}} helper
      to generate a URL based on an event.
         @private
      @method formatURL
      @param url {String}
      @return {String} url
    */
    formatURL(url) {
      var {
        rootURL
      } = this;
      if (url !== '') {
        // remove trailing slashes if they exists
        rootURL = rootURL.replace(/\/$/, '');
      }
      return rootURL + url;
    }
  }
  _exports.default = NoneLocation;
  NoneLocation.reopen({
    path: '',
    rootURL: '/'
  });
});
define("@ember/routing/route-info", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
});
define("@ember/routing/route", ["exports", "@ember/-internals/container", "@ember/-internals/metal", "@ember/-internals/owner", "@ember/routing/-internals", "@ember/object", "@ember/object/evented", "@ember/array", "@ember/-internals/runtime", "@ember/utils", "@ember/-internals/utils", "@ember/controller", "@ember/debug", "@ember/engine/instance", "@ember/object/compat", "@ember/runloop", "router_js", "@ember/routing/router", "@ember/routing/lib/utils"], function (_exports, _container, _metal, _owner, _internals, _object, _evented, _array, _runtime, _utils, _utils2, _controller2, _debug, _instance, _compat, _runloop, _router_js, _router, _utils3) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.defaultSerialize = _exports.default = _exports.ROUTE_CONNECTIONS = void 0;
  _exports.getFullQueryParams = getFullQueryParams;
  _exports.hasDefaultSerialize = hasDefaultSerialize;
  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var ROUTE_CONNECTIONS = _exports.ROUTE_CONNECTIONS = new WeakMap();
  var RENDER = Symbol('render');
  class Route extends _object.default.extend(_runtime.ActionHandler, _evented.default) {
    constructor(owner) {
      super(owner);
      this.context = {};
      if (owner) {
        var router = owner.lookup('router:main');
        var bucketCache = owner.lookup((0, _container.privatize)`-bucket-cache:main`);
        (true && !(router instanceof _router.default && bucketCache instanceof _internals.BucketCache) && (0, _debug.assert)('ROUTER BUG: Expected route injections to be defined on the route. This is an internal bug, please open an issue on Github if you see this message!', router instanceof _router.default && bucketCache instanceof _internals.BucketCache));
        this._router = router;
        this._bucketCache = bucketCache;
        this._topLevelViewTemplate = owner.lookup('template:-outlet');
        this._environment = owner.lookup('-environment:main');
      }
    }
    /**
      A hook you can implement to convert the route's model into parameters
      for the URL.
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('post', { path: '/posts/:post_id' });
      });
         ```
         ```app/routes/post.js
      import Route from '@ember/routing/route';
         export default class PostRoute extends Route {
        model({ post_id }) {
          // the server returns `{ id: 12 }`
          return fetch(`/posts/${post_id}`;
        }
           serialize(model) {
          // this will make the URL `/posts/12`
          return { post_id: model.id };
        }
      }
      ```
         The default `serialize` method will insert the model's `id` into the
      route's dynamic segment (in this case, `:post_id`) if the segment contains '_id'.
      If the route has multiple dynamic segments or does not contain '_id', `serialize`
      will return `getProperties(model, params)`
         This method is called when `transitionTo` is called with a context
      in order to populate the URL.
         @method serialize
      @param {Object} model the routes model
      @param {Array} params an Array of parameter names for the current
        route (in the example, `['post_id']`.
      @return {Object} the serialized parameters
      @since 1.0.0
      @public
    */
    serialize(model, params) {
      if (params.length < 1 || !model) {
        return;
      }
      var object = {};
      if (params.length === 1) {
        var [name] = params;
        (true && !(name) && (0, _debug.assert)('has name', name));
        if (typeof model === 'object' && name in model) {
          object[name] = (0, _object.get)(model, name);
        } else if (/_id$/.test(name)) {
          object[name] = (0, _object.get)(model, 'id');
        } else if ((0, _utils2.isProxy)(model)) {
          object[name] = (0, _object.get)(model, name);
        }
      } else {
        object = (0, _object.getProperties)(model, params);
      }
      return object;
    }
    /**
      Sets the name for this route, including a fully resolved name for routes
      inside engines.
         @private
      @method _setRouteName
      @param {String} name
    */
    _setRouteName(name) {
      this.routeName = name;
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner instanceof _instance.default) && (0, _debug.assert)('Expected route to have EngineInstance as owner', owner instanceof _instance.default));
      this.fullRouteName = getEngineRouteName(owner, name);
    }
    /**
      @private
         @method _stashNames
    */
    _stashNames(routeInfo, dynamicParent) {
      if (this._names) {
        return;
      }
      var names = this._names = routeInfo['_names'];
      if (!names.length) {
        routeInfo = dynamicParent;
        names = routeInfo && routeInfo['_names'] || [];
      }
      // SAFETY: Since `_qp` is protected we can't infer the type
      var qps = (0, _object.get)(this, '_qp').qps;
      var namePaths = new Array(names.length);
      for (var a = 0; a < names.length; ++a) {
        namePaths[a] = `${routeInfo.name}.${names[a]}`;
      }
      for (var qp of qps) {
        if (qp.scope === 'model') {
          qp.parts = namePaths;
        }
      }
    }
    /**
      @private
         @property _activeQPChanged
    */
    _activeQPChanged(qp, value) {
      this._router._activeQPChanged(qp.scopedPropertyName, value);
    }
    /**
      @private
      @method _updatingQPChanged
    */
    _updatingQPChanged(qp) {
      this._router._updatingQPChanged(qp.urlKey);
    }
    /**
      Returns a hash containing the parameters of an ancestor route.
         You may notice that `this.paramsFor` sometimes works when referring to a
      child route, but this behavior should not be relied upon as only ancestor
      routes are certain to be loaded in time.
         Example
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('member', { path: ':name' }, function() {
          this.route('interest', { path: ':interest' });
        });
      });
      ```
         ```app/routes/member.js
      import Route from '@ember/routing/route';
         export default class MemberRoute extends Route {
        queryParams = {
          memberQp: { refreshModel: true }
        }
      }
      ```
         ```app/routes/member/interest.js
      import Route from '@ember/routing/route';
         export default class MemberInterestRoute extends Route {
        queryParams = {
          interestQp: { refreshModel: true }
        }
           model() {
          return this.paramsFor('member');
        }
      }
      ```
         If we visit `/turing/maths?memberQp=member&interestQp=interest` the model for
      the `member.interest` route is a hash with:
         * `name`: `turing`
      * `memberQp`: `member`
         @method paramsFor
      @param {String} name
      @return {Object} hash containing the parameters of the route `name`
      @since 1.4.0
      @public
    */
    paramsFor(name) {
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Route is unexpectedly missing an owner', owner));
      var route = owner.lookup(`route:${name}`);
      if (route === undefined) {
        return {};
      }
      var transition = this._router._routerMicrolib.activeTransition;
      var state = transition ? transition[_router_js.STATE_SYMBOL] : this._router._routerMicrolib.state;
      var fullName = route.fullRouteName;
      var params = Object.assign({}, state.params[fullName]);
      var queryParams = getQueryParamsFor(route, state);
      return Object.entries(queryParams).reduce((params, [key, value]) => {
        (true && !(!params[key]) && (0, _debug.assert)(`The route '${this.routeName}' has both a dynamic segment and query param with name '${key}'. Please rename one to avoid collisions.`, !params[key]));
        params[key] = value;
        return params;
      }, params);
    }
    /**
      Serializes the query parameter key
         @method serializeQueryParamKey
      @param {String} controllerPropertyName
      @private
    */
    serializeQueryParamKey(controllerPropertyName) {
      return controllerPropertyName;
    }
    /**
      Serializes value of the query parameter based on defaultValueType
         @method serializeQueryParam
      @param {Object} value
      @param {String} urlKey
      @param {String} defaultValueType
      @private
    */
    serializeQueryParam(value, _urlKey, defaultValueType) {
      // urlKey isn't used here, but anyone overriding
      // can use it to provide serialization specific
      // to a certain query param.
      return this._router._serializeQueryParam(value, defaultValueType);
    }
    /**
      Deserializes value of the query parameter based on defaultValueType
         @method deserializeQueryParam
      @param {Object} value
      @param {String} urlKey
      @param {String} defaultValueType
      @private
    */
    deserializeQueryParam(value, _urlKey, defaultValueType) {
      // urlKey isn't used here, but anyone overriding
      // can use it to provide deserialization specific
      // to a certain query param.
      return this._router._deserializeQueryParam(value, defaultValueType);
    }
    /**
      @private
         @property _optionsForQueryParam
    */
    _optionsForQueryParam(qp) {
      var queryParams = (0, _object.get)(this, 'queryParams');
      return (0, _object.get)(queryParams, qp.urlKey) || (0, _object.get)(queryParams, qp.prop) || queryParams[qp.urlKey] || queryParams[qp.prop] || {};
    }
    /**
      A hook you can use to reset controller values either when the model
      changes or the route is exiting.
         ```app/routes/articles.js
      import Route from '@ember/routing/route';
         export default class ArticlesRoute extends Route {
        resetController(controller, isExiting, transition) {
          if (isExiting && transition.targetName !== 'error') {
            controller.set('page', 1);
          }
        }
      }
      ```
         @method resetController
      @param {Controller} controller instance
      @param {Boolean} isExiting
      @param {Object} transition
      @since 1.7.0
      @public
    */
    resetController(_controller, _isExiting, _transition) {
      return this;
    }
    /**
      @private
         @method exit
    */
    exit(transition) {
      this.deactivate(transition);
      this.trigger('deactivate', transition);
      this.teardownViews();
    }
    /**
      @private
         @method _internalReset
      @since 3.6.0
    */
    _internalReset(isExiting, transition) {
      var controller = this.controller;
      // SAFETY: Since `_qp` is protected we can't infer the type
      controller['_qpDelegate'] = (0, _object.get)(this, '_qp').states.inactive;
      this.resetController(controller, isExiting, transition);
    }
    /**
      @private
         @method enter
    */
    enter(transition) {
      ROUTE_CONNECTIONS.set(this, []);
      this.activate(transition);
      this.trigger('activate', transition);
    }
    /**
      This event is triggered when the router enters the route. It is
      not executed when the model for the route changes.
         ```app/routes/application.js
      import { on } from '@ember/object/evented';
      import Route from '@ember/routing/route';
         export default Route.extend({
        collectAnalytics: on('activate', function(){
          collectAnalytics();
        })
      });
      ```
         @event activate
      @since 1.9.0
      @public
    */
    /**
      This event is triggered when the router completely exits this
      route. It is not executed when the model for the route changes.
         ```app/routes/index.js
      import { on } from '@ember/object/evented';
      import Route from '@ember/routing/route';
         export default Route.extend({
        trackPageLeaveAnalytics: on('deactivate', function(){
          trackPageLeaveAnalytics();
        })
      });
      ```
         @event deactivate
      @since 1.9.0
      @public
    */
    /**
      This hook is executed when the router completely exits this route. It is
      not executed when the model for the route changes.
         @method deactivate
      @param {Transition} transition
      @since 1.0.0
      @public
    */
    deactivate(_transition) {}
    /**
      This hook is executed when the router enters the route. It is not executed
      when the model for the route changes.
         @method activate
      @param {Transition} transition
      @since 1.0.0
      @public
    */
    activate(_transition) {}
    /**
      Transition the application into another route. The route may
      be either a single route or route path:
         ```javascript
      this.transitionTo('blogPosts');
      this.transitionTo('blogPosts.recentEntries');
      ```
         Optionally supply a model for the route in question. The model
      will be serialized into the URL using the `serialize` hook of
      the route:
         ```javascript
      this.transitionTo('blogPost', aPost);
      ```
         If a literal is passed (such as a number or a string), it will
      be treated as an identifier instead. In this case, the `model`
      hook of the route will be triggered:
         ```javascript
      this.transitionTo('blogPost', 1);
      ```
         Multiple models will be applied last to first recursively up the
      route tree.
         ```app/routes.js
      // ...
         Router.map(function() {
        this.route('blogPost', { path:':blogPostId' }, function() {
          this.route('blogComment', { path: ':blogCommentId' });
        });
      });
         export default Router;
      ```
         ```javascript
      this.transitionTo('blogComment', aPost, aComment);
      this.transitionTo('blogComment', 1, 13);
      ```
         It is also possible to pass a URL (a string that starts with a
      `/`).
         ```javascript
      this.transitionTo('/');
      this.transitionTo('/blog/post/1/comment/13');
      this.transitionTo('/blog/posts?sort=title');
      ```
         An options hash with a `queryParams` property may be provided as
      the final argument to add query parameters to the destination URL.
         ```javascript
      this.transitionTo('blogPost', 1, {
        queryParams: { showComments: 'true' }
      });
         // if you just want to transition the query parameters without changing the route
      this.transitionTo({ queryParams: { sort: 'date' } });
      ```
         See also [replaceWith](#method_replaceWith).
         Simple Transition Example
         ```app/routes.js
      // ...
         Router.map(function() {
        this.route('index');
        this.route('secret');
        this.route('fourOhFour', { path: '*:' });
      });
         export default Router;
      ```
         ```app/routes/index.js
      import Route from '@ember/routing/route';
      import { action } from '@ember/object';
         export default class IndexRoute extends Route {
        @action
        moveToSecret(context) {
          if (authorized()) {
            this.transitionTo('secret', context);
          } else {
            this.transitionTo('fourOhFour');
          }
        }
      }
      ```
         Transition to a nested route
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('articles', { path: '/articles' }, function() {
          this.route('new');
        });
      });
         export default Router;
      ```
         ```app/routes/index.js
      import Route from '@ember/routing/route';
      import { action } from '@ember/object';
         export default class IndexRoute extends Route {
        @action
        transitionToNewArticle() {
          this.transitionTo('articles.new');
        }
      }
      ```
         Multiple Models Example
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('index');
           this.route('breakfast', { path: ':breakfastId' }, function() {
          this.route('cereal', { path: ':cerealId' });
        });
      });
         export default Router;
      ```
         ```app/routes/index.js
      import Route from '@ember/routing/route';
      import { action } from '@ember/object';
         export default class IndexRoute extends Route {
        @action
        moveToChocolateCereal() {
          let cereal = { cerealId: 'ChocolateYumminess' };
          let breakfast = { breakfastId: 'CerealAndMilk' };
             this.transitionTo('breakfast.cereal', breakfast, cereal);
        }
      }
      ```
         Nested Route with Query String Example
         ```app/routes.js
      // ...
         Router.map(function() {
        this.route('fruits', function() {
          this.route('apples');
        });
      });
         export default Router;
      ```
         ```app/routes/index.js
      import Route from '@ember/routing/route';
         export default class IndexRoute extends Route {
        @action
        transitionToApples() {
          this.transitionTo('fruits.apples', { queryParams: { color: 'red' } });
        }
      }
      ```
         @method transitionTo
      @param {String} [name] the name of the route or a URL.
      @param {...Object} [models] the model(s) or identifier(s) to be used while
        transitioning to the route.
      @param {Object} [options] optional hash with a queryParams property
        containing a mapping of query parameters. May be supplied as the only
        parameter to trigger a query-parameter-only transition.
      @return {Transition} the transition object associated with this
        attempted transition
      @since 1.0.0
      @deprecated Use transitionTo from the Router service instead.
      @public
    */
    transitionTo(...args) {
      (0, _utils3.deprecateTransitionMethods)('route', 'transitionTo');
      return this._router.transitionTo(...(0, _utils3.prefixRouteNameArg)(this, args));
    }
    /**
      Perform a synchronous transition into another route without attempting
      to resolve promises, update the URL, or abort any currently active
      asynchronous transitions (i.e. regular transitions caused by
      `transitionTo` or URL changes).
         This method is handy for performing intermediate transitions on the
      way to a final destination route, and is called internally by the
      default implementations of the `error` and `loading` handlers.
         @method intermediateTransitionTo
      @param {String} name the name of the route
      @param {...Object} models the model(s) to be used while transitioning
      to the route.
      @since 1.2.0
      @public
     */
    intermediateTransitionTo(...args) {
      var [name, ...preparedArgs] = (0, _utils3.prefixRouteNameArg)(this, args);
      this._router.intermediateTransitionTo(name, ...preparedArgs);
    }
    /**
      Refresh the model on this route and any child routes, firing the
      `beforeModel`, `model`, and `afterModel` hooks in a similar fashion
      to how routes are entered when transitioning in from other route.
      The current route params (e.g. `article_id`) will be passed in
      to the respective model hooks, and if a different model is returned,
      `setupController` and associated route hooks will re-fire as well.
         An example usage of this method is re-querying the server for the
      latest information using the same parameters as when the route
      was first entered.
         Note that this will cause `model` hooks to fire even on routes
      that were provided a model object when the route was initially
      entered.
         @method refresh
      @return {Transition} the transition object associated with this
        attempted transition
      @since 1.4.0
      @public
     */
    refresh() {
      return this._router._routerMicrolib.refresh(this);
    }
    /**
      Transition into another route while replacing the current URL, if possible.
      This will replace the current history entry instead of adding a new one.
      Beside that, it is identical to `transitionTo` in all other respects. See
      'transitionTo' for additional information regarding multiple models.
         Example
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('index');
        this.route('secret');
      });
         export default Router;
      ```
         ```app/routes/secret.js
      import Route from '@ember/routing/route';
         export default class SecretRoute Route {
        afterModel() {
          if (!authorized()){
            this.replaceWith('index');
          }
        }
      }
      ```
         @method replaceWith
      @param {String} name the name of the route or a URL
      @param {...Object} models the model(s) or identifier(s) to be used while
        transitioning to the route.
      @param {Object} [options] optional hash with a queryParams property
        containing a mapping of query parameters
      @return {Transition} the transition object associated with this
        attempted transition
      @since 1.0.0
      @deprecated Use replaceWith from the Router service instead.
      @public
    */
    replaceWith(...args) {
      (0, _utils3.deprecateTransitionMethods)('route', 'replaceWith');
      return this._router.replaceWith(...(0, _utils3.prefixRouteNameArg)(this, args));
    }
    /**
      This hook is the entry point for router.js
         @private
      @method setup
    */
    setup(context, transition) {
      var controllerName = this.controllerName || this.routeName;
      var definedController = this.controllerFor(controllerName, true);
      var controller = definedController !== null && definedController !== void 0 ? definedController : this.generateController(controllerName);
      // SAFETY: Since `_qp` is protected we can't infer the type
      var queryParams = (0, _object.get)(this, '_qp');
      // Assign the route's controller so that it can more easily be
      // referenced in action handlers. Side effects. Side effects everywhere.
      if (!this.controller) {
        var propNames = queryParams.propertyNames;
        addQueryParamsObservers(controller, propNames);
        this.controller = controller;
      }
      var states = queryParams.states;
      controller._qpDelegate = states.allowOverrides;
      if (transition) {
        // Update the model dep values used to calculate cache keys.
        (0, _utils3.stashParamNames)(this._router, transition[_router_js.STATE_SYMBOL].routeInfos);
        var cache = this._bucketCache;
        var params = transition[_router_js.PARAMS_SYMBOL];
        var allParams = queryParams.propertyNames;
        allParams.forEach(prop => {
          var aQp = queryParams.map[prop];
          (true && !(aQp) && (0, _debug.assert)('expected aQp', aQp));
          aQp.values = params;
          var cacheKey = (0, _utils3.calculateCacheKey)(aQp.route.fullRouteName, aQp.parts, aQp.values);
          var value = cache.lookup(cacheKey, prop, aQp.undecoratedDefaultValue);
          (0, _object.set)(controller, prop, value);
        });
        var qpValues = getQueryParamsFor(this, transition[_router_js.STATE_SYMBOL]);
        (0, _object.setProperties)(controller, qpValues);
      }
      this.setupController(controller, context, transition);
      if (this._environment.options.shouldRender) {
        this[RENDER]();
      }
      // Setup can cause changes to QPs which need to be propogated immediately in
      // some situations. Eventually, we should work on making these async somehow.
      (0, _metal.flushAsyncObservers)(false);
    }
    /*
      Called when a query parameter for this route changes, regardless of whether the route
      is currently part of the active route hierarchy. This will update the query parameter's
      value in the cache so if this route becomes active, the cache value has been updated.
    */
    _qpChanged(prop, value, qp) {
      if (!qp) {
        return;
      }
      // Update model-dep cache
      var cache = this._bucketCache;
      var cacheKey = (0, _utils3.calculateCacheKey)(qp.route.fullRouteName, qp.parts, qp.values);
      cache.stash(cacheKey, prop, value);
    }
    beforeModel(_transition) {}
    afterModel(_resolvedModel, _transition) {}
    /**
      A hook you can implement to optionally redirect to another route.
         Calling `this.transitionTo` from inside of the `redirect` hook will
      abort the current transition (into the route that has implemented `redirect`).
         `redirect` and `afterModel` behave very similarly and are
      called almost at the same time, but they have an important
      distinction when calling `this.transitionTo` to a child route
      of the current route. From `afterModel`, this new transition
      invalidates the current transition, causing `beforeModel`,
      `model`, and `afterModel` hooks to be called again. But the
      same transition started from `redirect` does _not_ invalidate
      the current transition. In other words, by the time the `redirect`
      hook has been called, both the resolved model and the attempted
      entry into this route are considered fully validated.
         @method redirect
      @param {Object} model the model for this route
      @param {Transition} transition the transition object associated with the current transition
      @since 1.0.0
      @public
    */
    redirect(_model, _transition) {}
    /**
      Called when the context is changed by router.js.
         @private
      @method contextDidChange
    */
    contextDidChange() {
      this.currentModel = this.context;
    }
    /**
      A hook you can implement to convert the URL into the model for
      this route.
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('post', { path: '/posts/:post_id' });
      });
         export default Router;
      ```
         The model for the `post` route is `store.findRecord('post', params.post_id)`.
         By default, if your route has a dynamic segment ending in `_id`:
         * The model class is determined from the segment (`post_id`'s
        class is `App.Post`)
      * The find method is called on the model class with the value of
        the dynamic segment.
         Note that for routes with dynamic segments, this hook is not always
      executed. If the route is entered through a transition (e.g. when
      using the `link-to` Handlebars helper or the `transitionTo` method
      of routes), and a model context is already provided this hook
      is not called.
         A model context does not include a primitive string or number,
      which does cause the model hook to be called.
         Routes without dynamic segments will always execute the model hook.
         ```javascript
      // no dynamic segment, model hook always called
      this.transitionTo('posts');
         // model passed in, so model hook not called
      thePost = store.findRecord('post', 1);
      this.transitionTo('post', thePost);
         // integer passed in, model hook is called
      this.transitionTo('post', 1);
         // model id passed in, model hook is called
      // useful for forcing the hook to execute
      thePost = store.findRecord('post', 1);
      this.transitionTo('post', thePost.id);
      ```
         This hook follows the asynchronous/promise semantics
      described in the documentation for `beforeModel`. In particular,
      if a promise returned from `model` fails, the error will be
      handled by the `error` hook on `Route`.
         Example
         ```app/routes/post.js
      import Route from '@ember/routing/route';
         export default class PostRoute extends Route {
        model(params) {
          return this.store.findRecord('post', params.post_id);
        }
      }
      ```
         @method model
      @param {Object} params the parameters extracted from the URL
      @param {Transition} transition
      @return {any | Promise<any>} the model for this route. If
        a promise is returned, the transition will pause until
        the promise resolves, and the resolved value of the promise
        will be used as the model for this route.
      @since 1.0.0
      @public
    */
    model(params, transition) {
      var name, sawParams, value;
      // SAFETY: Since `_qp` is protected we can't infer the type
      var queryParams = (0, _object.get)(this, '_qp').map;
      for (var prop in params) {
        if (prop === 'queryParams' || queryParams && prop in queryParams) {
          continue;
        }
        var match = prop.match(/^(.*)_id$/);
        if (match !== null) {
          name = match[1];
          value = params[prop];
        }
        sawParams = true;
      }
      if (!name) {
        if (sawParams) {
          // SAFETY: This should be equivalent
          return Object.assign({}, params);
        } else {
          if (transition.resolveIndex < 1) {
            return;
          }
          // SAFETY: This should be correct, but TS is unable to infer this.
          return transition[_router_js.STATE_SYMBOL].routeInfos[transition.resolveIndex - 1].context;
        }
      }
      return this.findModel(name, value);
    }
    /**
      @private
      @method deserialize
      @param {Object} params the parameters extracted from the URL
      @param {Transition} transition
      @return {any | Promise<any>} the model for this route.
         Router.js hook.
     */
    deserialize(_params, transition) {
      return this.model(this._paramsFor(this.routeName, _params), transition);
    }
    /**
         @method findModel
      @param {String} type the model type
      @param {Object} value the value passed to find
      @private
    */
    findModel(...args) {
      return (0, _object.get)(this, 'store').find(...args);
    }
    /**
      A hook you can use to setup the controller for the current route.
         This method is called with the controller for the current route and the
      model supplied by the `model` hook.
         By default, the `setupController` hook sets the `model` property of
      the controller to the specified `model` when it is not `undefined`.
         If you implement the `setupController` hook in your Route, it will
      prevent this default behavior. If you want to preserve that behavior
      when implementing your `setupController` function, make sure to call
      `super`:
         ```app/routes/photos.js
      import Route from '@ember/routing/route';
         export default class PhotosRoute extends Route {
        model() {
          return this.store.findAll('photo');
        }
           setupController(controller, model) {
          super.setupController(controller, model);
             this.controllerFor('application').set('showingPhotos', true);
        }
      }
      ```
         The provided controller will be one resolved based on the name
      of this route.
         If no explicit controller is defined, Ember will automatically create one.
         As an example, consider the router:
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('post', { path: '/posts/:post_id' });
      });
         export default Router;
      ```
         If you have defined a file for the post controller,
      the framework will use it.
      If it is not defined, a basic `Controller` instance would be used.
         @example Behavior of a basic Controller
         ```app/routes/post.js
      import Route from '@ember/routing/route';
         export default class PostRoute extends Route {
        setupController(controller, model) {
          controller.set('model', model);
        }
      });
      ```
         @method setupController
      @param {Controller} controller instance
      @param {Object} model
      @param {Transition} [transition]
      @since 1.0.0
      @public
    */
    setupController(controller, context, _transition) {
      if (controller && context !== undefined) {
        (0, _object.set)(controller, 'model', context);
      }
    }
    controllerFor(name, _skipAssert = false) {
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Route is unexpectedly missing an owner', owner));
      var route = owner.lookup(`route:${name}`);
      if (route && route.controllerName) {
        name = route.controllerName;
      }
      var controller = owner.lookup(`controller:${name}`);
      // NOTE: We're specifically checking that skipAssert is true, because according
      //   to the old API the second parameter was model. We do not want people who
      //   passed a model to skip the assertion.
      (true && !(controller !== undefined || _skipAssert === true) && (0, _debug.assert)(`The controller named '${name}' could not be found. Make sure that this route exists and has already been entered at least once. If you are accessing a controller not associated with a route, make sure the controller class is explicitly defined.`, controller !== undefined || _skipAssert === true));
      (true && !(controller === undefined || controller instanceof _controller2.default) && (0, _debug.assert)(`Expected controller:${name} to be an instance of Controller`, controller === undefined || controller instanceof _controller2.default));
      return controller;
    }
    /**
      Generates a controller for a route.
         Example
         ```app/routes/post.js
      import Route from '@ember/routing/route';
         export default class Post extends Route {
        setupController(controller, post) {
          super.setupController(controller, post);
             this.generateController('posts');
        }
      }
      ```
         @method generateController
      @param {String} name the name of the controller
      @private
    */
    generateController(name) {
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Route is unexpectedly missing an owner', owner));
      return (0, _internals.generateController)(owner, name);
    }
    /**
      Returns the resolved model of a parent (or any ancestor) route
      in a route hierarchy.  During a transition, all routes
      must resolve a model object, and if a route
      needs access to a parent route's model in order to
      resolve a model (or just reuse the model from a parent),
      it can call `this.modelFor(theNameOfParentRoute)` to
      retrieve it. If the ancestor route's model was a promise,
      its resolved result is returned.
         Example
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('post', { path: '/posts/:post_id' }, function() {
          this.route('comments');
        });
      });
         export default Router;
      ```
         ```app/routes/post/comments.js
      import Route from '@ember/routing/route';
         export default class PostCommentsRoute extends Route {
        model() {
          let post = this.modelFor('post');
             return post.comments;
        }
      }
      ```
         @method modelFor
      @param {String} name the name of the route
      @return {Object} the model object
      @since 1.0.0
      @public
    */
    modelFor(_name) {
      var name;
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner instanceof _instance.default) && (0, _debug.assert)('Expected router owner to be an EngineInstance', owner instanceof _instance.default));
      var transition = this._router && this._router._routerMicrolib ? this._router._routerMicrolib.activeTransition : undefined;
      // Only change the route name when there is an active transition.
      // Otherwise, use the passed in route name.
      if (owner.routable && transition !== undefined) {
        name = getEngineRouteName(owner, _name);
      } else {
        name = _name;
      }
      var route = owner.lookup(`route:${name}`);
      // If we are mid-transition, we want to try and look up
      // resolved parent contexts on the current transitionEvent.
      if (transition !== undefined && transition !== null) {
        var modelLookupName = route && route.routeName || name;
        if (Object.prototype.hasOwnProperty.call(transition.resolvedModels, modelLookupName)) {
          return transition.resolvedModels[modelLookupName];
        }
      }
      return route === null || route === void 0 ? void 0 : route.currentModel;
    }
    /**
      `this[RENDER]` is used to render a template into a region of another template
      (indicated by an `{{outlet}}`).
         @method this[RENDER]
      @param {String} name the name of the template to render
      @param {Object} [options] the options
      @param {String} [options.into] the template to render into,
                      referenced by name. Defaults to the parent template
      @param {String} [options.outlet] the outlet inside `options.into` to render into.
                      Defaults to 'main'
      @param {String|Object} [options.controller] the controller to use for this template,
                      referenced by name or as a controller instance. Defaults to the Route's paired controller
      @param {Object} [options.model] the model object to set on `options.controller`.
                      Defaults to the return value of the Route's model hook
      @private
     */
    [RENDER](name, options) {
      var renderOptions = buildRenderOptions(this, name, options);
      ROUTE_CONNECTIONS.get(this).push(renderOptions);
      (0, _runloop.once)(this._router, '_setOutlets');
    }
    willDestroy() {
      this.teardownViews();
    }
    /**
      @private
         @method teardownViews
    */
    teardownViews() {
      var connections = ROUTE_CONNECTIONS.get(this);
      if (connections !== undefined && connections.length > 0) {
        ROUTE_CONNECTIONS.set(this, []);
        (0, _runloop.once)(this._router, '_setOutlets');
      }
    }
    buildRouteInfoMetadata() {}
    _paramsFor(routeName, params) {
      var transition = this._router._routerMicrolib.activeTransition;
      if (transition !== undefined) {
        return this.paramsFor(routeName);
      }
      return params;
    }
    /**
      Store property provides a hook for data persistence libraries to inject themselves.
         By default, this store property provides the exact same functionality previously
      in the model hook.
         Currently, the required interface is:
         `store.find(modelName, findArguments)`
         @property store
      @type {Object}
      @private
    */
    get store() {
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Route is unexpectedly missing an owner', owner));
      var routeName = this.routeName;
      return {
        find(name, value) {
          var modelClass = owner.factoryFor(`model:${name}`);
          (true && !(Boolean(modelClass)) && (0, _debug.assert)(`You used the dynamic segment \`${name}_id\` in your route ` + `\`${routeName}\` for which Ember requires you provide a ` + `data-loading implementation. Commonly, that is done by ` + `adding a model hook implementation on the route ` + `(\`model({${name}_id}) {\`) or by injecting an implemention of ` + `a data store: \`@service store;\`.`, Boolean(modelClass)));
          if (!modelClass) {
            return;
          }
          modelClass = modelClass.class;
          (true && !(typeof modelClass.find === 'function') && (0, _debug.assert)(`You used the dynamic segment \`${name}_id\` in your route ` + `\`${routeName}\` for which Ember requires you provide a ` + `data-loading implementation. Commonly, that is done by ` + `adding a model hook implementation on the route ` + `(\`model({${name}_id}) {\`) or by injecting an implemention of ` + `a data store: \`@service store;\`.\n\n` + `Rarely, applications may attempt to use a legacy behavior where ` + `the model class (in this case \`${name}\`) is resolved and the ` + `\`find\` method on that class is invoked to load data. In this ` + `application, a model of \`${name}\` was found but it did not ` + `provide a \`find\` method. You should not add a \`find\` ` + `method to your model. Instead, please implement an appropriate ` + `\`model\` hook on the \`${routeName}\` route.`, typeof modelClass.find === 'function'));
          return modelClass.find(value);
        }
      };
    }
    set store(value) {
      (0, _metal.defineProperty)(this, 'store', null, value);
    }
    /**
      @private
      @property _qp
      */
    get _qp() {
      var combinedQueryParameterConfiguration = {};
      var controllerName = this.controllerName || this.routeName;
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Route is unexpectedly missing an owner', owner));
      var controller = owner.lookup(`controller:${controllerName}`);
      var queryParameterConfiguraton = (0, _object.get)(this, 'queryParams');
      var hasRouterDefinedQueryParams = Object.keys(queryParameterConfiguraton).length > 0;
      if (controller) {
        (true && !(controller instanceof _controller2.default) && (0, _debug.assert)('Expected an instance of controller', controller instanceof _controller2.default)); // the developer has authored a controller class in their application for
        // this route find its query params and normalize their object shape them
        // merge in the query params for the route. As a mergedProperty,
        // Route#queryParams is always at least `{}`
        var controllerDefinedQueryParameterConfiguration = (0, _object.get)(controller, 'queryParams') || [];
        var normalizedControllerQueryParameterConfiguration = (0, _utils3.normalizeControllerQueryParams)(controllerDefinedQueryParameterConfiguration);
        combinedQueryParameterConfiguration = mergeEachQueryParams(normalizedControllerQueryParameterConfiguration, queryParameterConfiguraton);
      } else if (hasRouterDefinedQueryParams) {
        // the developer has not defined a controller but *has* supplied route query params.
        // Generate a class for them so we can later insert default values
        controller = (0, _internals.generateController)(owner, controllerName);
        combinedQueryParameterConfiguration = queryParameterConfiguraton;
      }
      var qps = [];
      var map = {};
      var propertyNames = [];
      for (var propName in combinedQueryParameterConfiguration) {
        if (!Object.prototype.hasOwnProperty.call(combinedQueryParameterConfiguration, propName)) {
          continue;
        }
        // to support the dubious feature of using unknownProperty
        // on queryParams configuration
        if (propName === 'unknownProperty' || propName === '_super') {
          // possible todo: issue deprecation warning?
          continue;
        }
        var desc = combinedQueryParameterConfiguration[propName];
        (true && !(desc) && (0, _debug.assert)(`[BUG] missing query parameter configuration for ${propName}`, desc));
        var scope = desc.scope || 'model';
        var parts = undefined;
        if (scope === 'controller') {
          parts = [];
        }
        var urlKey = desc.as || this.serializeQueryParamKey(propName);
        var defaultValue = (0, _object.get)(controller, propName);
        defaultValue = copyDefaultValue(defaultValue);
        var type = desc.type || (0, _utils.typeOf)(defaultValue);
        var defaultValueSerialized = this.serializeQueryParam(defaultValue, urlKey, type);
        var scopedPropertyName = `${controllerName}:${propName}`;
        var qp = {
          undecoratedDefaultValue: (0, _object.get)(controller, propName),
          defaultValue,
          serializedDefaultValue: defaultValueSerialized,
          serializedValue: defaultValueSerialized,
          type,
          urlKey,
          prop: propName,
          scopedPropertyName,
          controllerName,
          route: this,
          parts,
          values: null,
          scope
        };
        map[propName] = map[urlKey] = map[scopedPropertyName] = qp;
        qps.push(qp);
        propertyNames.push(propName);
      }
      return {
        qps,
        map,
        propertyNames,
        states: {
          /*
            Called when a query parameter changes in the URL, this route cares
            about that query parameter, but the route is not currently
            in the active route hierarchy.
          */
          inactive: (prop, value) => {
            var qp = map[prop];
            (true && !(qp) && (0, _debug.assert)('expected inactive callback to only be called for registered qps', qp));
            this._qpChanged(prop, value, qp);
          },
          /*
            Called when a query parameter changes in the URL, this route cares
            about that query parameter, and the route is currently
            in the active route hierarchy.
          */
          active: (prop, value) => {
            var qp = map[prop];
            (true && !(qp) && (0, _debug.assert)('expected active callback to only be called for registered qps', qp));
            this._qpChanged(prop, value, qp);
            return this._activeQPChanged(qp, value);
          },
          /*
            Called when a value of a query parameter this route handles changes in a controller
            and the route is currently in the active route hierarchy.
          */
          allowOverrides: (prop, value) => {
            var qp = map[prop];
            (true && !(qp) && (0, _debug.assert)('expected allowOverrides callback to only be called for registered qps', qp));
            this._qpChanged(prop, value, qp);
            return this._updatingQPChanged(qp);
          }
        }
      };
    }
  }
  Route.isRouteFactory = true;
  __decorate([_object.computed], Route.prototype, "store", null);
  __decorate([_object.computed], Route.prototype, "_qp", null);
  function parentRoute(route) {
    var routeInfo = routeInfoFor(route, route._router._routerMicrolib.state.routeInfos, -1);
    return routeInfo && routeInfo.route;
  }
  function routeInfoFor(route, routeInfos, offset = 0) {
    if (!routeInfos) {
      return;
    }
    var current;
    for (var i = 0; i < routeInfos.length; i++) {
      var routeInfo = routeInfos[i];
      (true && !(routeInfo) && (0, _debug.assert)('has current routeInfo', routeInfo));
      current = routeInfo.route;
      if (current === route) {
        return routeInfos[i + offset];
      }
    }
    return;
  }
  function buildRenderOptions(route, nameOrOptions, options) {
    var isDefaultRender = !nameOrOptions && !options;
    var _name;
    if (!isDefaultRender) {
      if (typeof nameOrOptions === 'object' && !options) {
        _name = route.templateName || route.routeName;
        options = nameOrOptions;
      } else {
        (true && !(!(0, _utils.isEmpty)(nameOrOptions)) && (0, _debug.assert)('The name in the given arguments is undefined or empty string', !(0, _utils.isEmpty)(nameOrOptions)));
        _name = nameOrOptions;
      }
    }
    (true && !(isDefaultRender || !(options && 'outlet' in options && options.outlet === undefined)) && (0, _debug.assert)('You passed undefined as the outlet name.', isDefaultRender || !(options && 'outlet' in options && options.outlet === undefined)));
    var owner = (0, _owner.getOwner)(route);
    (true && !(owner) && (0, _debug.assert)('Route is unexpectedly missing an owner', owner));
    var name, templateName, into, outlet, model;
    var controller;
    if (options) {
      into = options.into && options.into.replace(/\//g, '.');
      outlet = options.outlet;
      controller = options.controller;
      model = options.model;
    }
    outlet = outlet || 'main';
    if (isDefaultRender) {
      name = route.routeName;
      templateName = route.templateName || name;
    } else {
      name = _name.replace(/\//g, '.');
      templateName = name;
    }
    if (controller === undefined) {
      if (isDefaultRender) {
        controller = route.controllerName || owner.lookup(`controller:${name}`);
      } else {
        controller = owner.lookup(`controller:${name}`) || route.controllerName || route.routeName;
      }
    }
    if (typeof controller === 'string') {
      var controllerName = controller;
      controller = owner.lookup(`controller:${controllerName}`);
      (true && !(isDefaultRender || controller !== undefined) && (0, _debug.assert)(`You passed \`controller: '${controllerName}'\` into the \`render\` method, but no such controller could be found.`, isDefaultRender || controller !== undefined));
    }
    (true && !(controller instanceof _controller2.default) && (0, _debug.assert)('Expected an instance of controller', controller instanceof _controller2.default));
    if (model === undefined) {
      model = route.currentModel;
    } else {
      controller.set('model', model);
    }
    var template = owner.lookup(`template:${templateName}`);
    (true && !(isDefaultRender || template !== undefined) && (0, _debug.assert)(`Could not find "${templateName}" template, view, or component.`, isDefaultRender || template !== undefined));
    var parent;
    if (into && (parent = parentRoute(route)) && into === parent.routeName) {
      into = undefined;
    }
    var renderOptions = {
      owner,
      into,
      outlet,
      name,
      controller,
      model,
      template: template !== undefined ? template(owner) : route._topLevelViewTemplate(owner)
    };
    if (true /* DEBUG */) {
      var LOG_VIEW_LOOKUPS = (0, _object.get)(route._router, 'namespace.LOG_VIEW_LOOKUPS');
      if (LOG_VIEW_LOOKUPS && !template) {
        (0, _debug.info)(`Could not find "${name}" template. Nothing will be rendered`, {
          fullName: `template:${name}`
        });
      }
    }
    return renderOptions;
  }
  function getFullQueryParams(router, state) {
    if (state.fullQueryParams) {
      return state.fullQueryParams;
    }
    var haveAllRouteInfosResolved = state.routeInfos.every(routeInfo => routeInfo.route);
    var fullQueryParamsState = Object.assign({}, state.queryParams);
    router._deserializeQueryParams(state.routeInfos, fullQueryParamsState);
    // only cache query params state if all routeinfos have resolved; it's possible
    // for lazy routes to not have resolved when `getFullQueryParams` is called, so
    // we wait until all routes have resolved prior to caching query params state
    if (haveAllRouteInfosResolved) {
      state.fullQueryParams = fullQueryParamsState;
    }
    return fullQueryParamsState;
  }
  function getQueryParamsFor(route, state) {
    state.queryParamsFor = state.queryParamsFor || {};
    var name = route.fullRouteName;
    var existing = state.queryParamsFor[name];
    if (existing) {
      return existing;
    }
    var fullQueryParams = getFullQueryParams(route._router, state);
    var params = state.queryParamsFor[name] = {};
    // Copy over all the query params for this route/controller into params hash.
    // SAFETY: Since `_qp` is protected we can't infer the type
    var qps = (0, _object.get)(route, '_qp').qps;
    for (var qp of qps) {
      // Put deserialized qp on params hash.
      var qpValueWasPassedIn = (qp.prop in fullQueryParams);
      params[qp.prop] = qpValueWasPassedIn ? fullQueryParams[qp.prop] : copyDefaultValue(qp.defaultValue);
    }
    return params;
  }
  // FIXME: This should probably actually return a `NativeArray` if the passed in value is an Array.
  function copyDefaultValue(value) {
    if (Array.isArray(value)) {
      // SAFETY: We lost the type data about the array if we don't cast.
      return (0, _array.A)(value.slice());
    }
    return value;
  }
  /*
    Merges all query parameters from a controller with those from
    a route, returning a new object and avoiding any mutations to
    the existing objects.
  */
  function mergeEachQueryParams(controllerQP, routeQP) {
    var qps = {};
    var keysAlreadyMergedOrSkippable = {
      defaultValue: true,
      type: true,
      scope: true,
      as: true
    };
    // first loop over all controller qps, merging them with any matching route qps
    // into a new empty object to avoid mutating.
    for (var cqpName in controllerQP) {
      if (!Object.prototype.hasOwnProperty.call(controllerQP, cqpName)) {
        continue;
      }
      qps[cqpName] = Object.assign(Object.assign({}, controllerQP[cqpName]), routeQP[cqpName]);
      // allows us to skip this QP when we check route QPs.
      keysAlreadyMergedOrSkippable[cqpName] = true;
    }
    // loop over all route qps, skipping those that were merged in the first pass
    // because they also appear in controller qps
    for (var rqpName in routeQP) {
      if (!Object.prototype.hasOwnProperty.call(routeQP, rqpName) || keysAlreadyMergedOrSkippable[rqpName]) {
        continue;
      }
      qps[rqpName] = Object.assign(Object.assign({}, routeQP[rqpName]), controllerQP[rqpName]);
    }
    return qps;
  }
  function addQueryParamsObservers(controller, propNames) {
    propNames.forEach(prop => {
      if ((0, _metal.descriptorForProperty)(controller, prop) === undefined) {
        var desc = (0, _utils2.lookupDescriptor)(controller, prop);
        if (desc !== null && (typeof desc.get === 'function' || typeof desc.set === 'function')) {
          (0, _metal.defineProperty)(controller, prop, (0, _compat.dependentKeyCompat)({
            get: desc.get,
            set: desc.set
          }));
        }
      }
      (0, _metal.addObserver)(controller, `${prop}.[]`, controller, controller._qpChanged, false);
    });
  }
  function getEngineRouteName(engine, routeName) {
    if (engine.routable) {
      var prefix = engine.mountPoint;
      if (routeName === 'application') {
        return prefix;
      } else {
        return `${prefix}.${routeName}`;
      }
    }
    return routeName;
  }
  var defaultSerialize = _exports.defaultSerialize = Route.prototype.serialize;
  function hasDefaultSerialize(route) {
    return route.serialize === defaultSerialize;
  }
  // Set these here so they can be overridden with extend
  Route.reopen({
    mergedProperties: ['queryParams'],
    queryParams: {},
    templateName: null,
    controllerName: null,
    send(...args) {
      (true && !(!this.isDestroying && !this.isDestroyed) && (0, _debug.assert)(`Attempted to call .send() with the action '${args[0]}' on the destroyed route '${this.routeName}'.`, !this.isDestroying && !this.isDestroyed));
      if (this._router && this._router._routerMicrolib || !(0, _debug.isTesting)()) {
        this._router.send(...args);
      } else {
        var name = args.shift();
        var action = this.actions[name];
        if (action) {
          return action.apply(this, args);
        }
      }
    },
    /**
      The controller associated with this route.
         Example
         ```app/routes/form.js
      import Route from '@ember/routing/route';
      import { action } from '@ember/object';
         export default class FormRoute extends Route {
        @action
        willTransition(transition) {
          if (this.controller.get('userHasEnteredData') &&
              !confirm('Are you sure you want to abandon progress?')) {
            transition.abort();
          } else {
            // Bubble the `willTransition` action so that
            // parent routes can decide whether or not to abort.
            return true;
          }
        }
      }
      ```
         @property controller
      @type Controller
      @since 1.6.0
      @public
    */
    actions: {
      /**
      This action is called when one or more query params have changed. Bubbles.
           @method queryParamsDidChange
      @param changed {Object} Keys are names of query params that have changed.
      @param totalPresent {Object} Keys are names of query params that are currently set.
      @param removed {Object} Keys are names of query params that have been removed.
      @returns {boolean}
      @private
      */
      queryParamsDidChange(changed, _totalPresent, removed) {
        // SAFETY: Since `_qp` is protected we can't infer the type
        var qpMap = (0, _object.get)(this, '_qp').map;
        var totalChanged = Object.keys(changed).concat(Object.keys(removed));
        for (var change of totalChanged) {
          var qp = qpMap[change];
          if (qp) {
            var options = this._optionsForQueryParam(qp);
            (true && !(options && typeof options === 'object') && (0, _debug.assert)('options exists', options && typeof options === 'object'));
            if ((0, _object.get)(options, 'refreshModel') && this._router.currentState) {
              this.refresh();
              break;
            }
          }
        }
        return true;
      },
      finalizeQueryParamChange(params, finalParams, transition) {
        if (this.fullRouteName !== 'application') {
          return true;
        }
        // Transition object is absent for intermediate transitions.
        if (!transition) {
          return;
        }
        var routeInfos = transition[_router_js.STATE_SYMBOL].routeInfos;
        var router = this._router;
        var qpMeta = router._queryParamsFor(routeInfos);
        var changes = router._qpUpdates;
        var qpUpdated = false;
        var replaceUrl;
        (0, _utils3.stashParamNames)(router, routeInfos);
        for (var qp of qpMeta.qps) {
          var route = qp.route;
          var controller = route.controller;
          var presentKey = qp.urlKey in params && qp.urlKey;
          // Do a reverse lookup to see if the changed query
          // param URL key corresponds to a QP property on
          // this controller.
          var value = void 0;
          var svalue = void 0;
          if (changes.has(qp.urlKey)) {
            // Value updated in/before setupController
            value = (0, _object.get)(controller, qp.prop);
            svalue = route.serializeQueryParam(value, qp.urlKey, qp.type);
          } else {
            if (presentKey) {
              svalue = params[presentKey];
              if (svalue !== undefined) {
                value = route.deserializeQueryParam(svalue, qp.urlKey, qp.type);
              }
            } else {
              // No QP provided; use default value.
              svalue = qp.serializedDefaultValue;
              value = copyDefaultValue(qp.defaultValue);
            }
          }
          // SAFETY: Since `_qp` is protected we can't infer the type
          controller._qpDelegate = (0, _object.get)(route, '_qp').states.inactive;
          var thisQueryParamChanged = svalue !== qp.serializedValue;
          if (thisQueryParamChanged) {
            if (transition.queryParamsOnly && replaceUrl !== false) {
              var options = route._optionsForQueryParam(qp);
              var replaceConfigValue = (0, _object.get)(options, 'replace');
              if (replaceConfigValue) {
                replaceUrl = true;
              } else if (replaceConfigValue === false) {
                // Explicit pushState wins over any other replaceStates.
                replaceUrl = false;
              }
            }
            (0, _object.set)(controller, qp.prop, value);
            qpUpdated = true;
          }
          // Stash current serialized value of controller.
          qp.serializedValue = svalue;
          var thisQueryParamHasDefaultValue = qp.serializedDefaultValue === svalue;
          if (!thisQueryParamHasDefaultValue) {
            finalParams.push({
              value: svalue,
              visible: true,
              key: presentKey || qp.urlKey
            });
          }
        }
        // Some QPs have been updated, and those changes need to be propogated
        // immediately. Eventually, we should work on making this async somehow.
        if (qpUpdated === true) {
          (0, _metal.flushAsyncObservers)(false);
        }
        if (replaceUrl) {
          transition.method('replace');
        }
        qpMeta.qps.forEach(qp => {
          // SAFETY: Since `_qp` is protected we can't infer the type
          var routeQpMeta = (0, _object.get)(qp.route, '_qp');
          var finalizedController = qp.route.controller;
          finalizedController['_qpDelegate'] = (0, _object.get)(routeQpMeta, 'states.active');
        });
        router._qpUpdates.clear();
        return;
      }
    }
  });
  var _default = _exports.default = Route;
});
define("@ember/routing/router-service", ["exports", "@ember/-internals/owner", "@ember/object/evented", "@ember/debug", "@ember/object/computed", "@ember/service", "@glimmer/validator", "@ember/routing/router", "@ember/routing/lib/utils"], function (_exports, _owner, _evented, _debug, _computed, _service, _validator, _router2, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.ROUTER = void 0;
  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  /**
   * @module @ember/routing/router-service
   */

  var ROUTER = _exports.ROUTER = Symbol('ROUTER');
  function cleanURL(url, rootURL) {
    if (rootURL === '/') {
      return url;
    }
    return url.substring(rootURL.length);
  }
  class RouterService extends _service.default.extend(_evented.default) {
    get _router() {
      var router = this[ROUTER];
      if (router !== undefined) {
        return router;
      }
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('RouterService is unexpectedly missing an owner', owner));
      var _router = owner.lookup('router:main');
      (true && !(_router instanceof _router2.default) && (0, _debug.assert)('ROUTER SERVICE BUG: Expected router to be an instance of EmberRouter', _router instanceof _router2.default));
      return this[ROUTER] = _router;
    }
    willDestroy() {
      super.willDestroy();
      this[ROUTER] = undefined;
    }
    /**
       Transition the application into another route. The route may
       be either a single route or route path:
          Calling `transitionTo` from the Router service will cause default query parameter values to be included in the URL.
       This behavior is different from calling `transitionTo` on a route or `transitionToRoute` on a controller.
       See the [Router Service RFC](https://github.com/emberjs/rfcs/blob/master/text/0095-router-service.md#query-parameter-semantics) for more info.
          In the following example we use the Router service to navigate to a route with a
       specific model from a Component in the first action, and in the second we trigger
       a query-params only transition.
          ```app/components/example.js
       import Component from '@glimmer/component';
       import { action } from '@ember/object';
       import { service } from '@ember/service';
          export default class extends Component {
         @service router;
            @action
         goToComments(post) {
           this.router.transitionTo('comments', post);
         }
            @action
         fetchMoreComments(latestComment) {
           this.router.transitionTo({
             queryParams: { commentsAfter: latestComment }
           });
         }
       }
       ```
          @method transitionTo
       @param {String} [routeNameOrUrl] the name of the route or a URL
       @param {...Object} [models] the model(s) or identifier(s) to be used while
         transitioning to the route.
       @param {Object} [options] optional hash with a queryParams property
         containing a mapping of query parameters. May be supplied as the only
        parameter to trigger a query-parameter-only transition.
       @return {Transition} the transition object associated with this
         attempted transition
       @public
     */
    transitionTo(...args) {
      if ((0, _utils.resemblesURL)(args[0])) {
        // NOTE: this `args[0] as string` cast is safe and TS correctly infers it
        // in 3.6+, so it can be removed when TS is upgraded.
        return this._router._doURLTransition('transitionTo', args[0]);
      }
      var {
        routeName,
        models,
        queryParams
      } = (0, _utils.extractRouteArgs)(args);
      var transition = this._router._doTransition(routeName, models, queryParams, true);
      return transition;
    }
    /**
       Similar to `transitionTo`, but instead of adding the destination to the browser's URL history,
       it replaces the entry for the current route.
       When the user clicks the "back" button in the browser, there will be fewer steps.
       This is most commonly used to manage redirects in a way that does not cause confusing additions
       to the user's browsing history.
          Calling `replaceWith` from the Router service will cause default query parameter values to be included in the URL.
       This behavior is different from calling `replaceWith` on a route.
       See the [Router Service RFC](https://github.com/emberjs/rfcs/blob/master/text/0095-router-service.md#query-parameter-semantics) for more info.
          Usage example:
          ```app/routes/application.js
       import Route from '@ember/routing/route';
          export default class extends Route {
         beforeModel() {
           if (!authorized()){
             this.replaceWith('unauthorized');
           }
         }
       });
       ```
          @method replaceWith
       @param {String} routeNameOrUrl the name of the route or a URL of the desired destination
       @param {...Object} models the model(s) or identifier(s) to be used while
         transitioning to the route i.e. an object of params to pass to the destination route
       @param {Object} [options] optional hash with a queryParams property
         containing a mapping of query parameters
       @return {Transition} the transition object associated with this
         attempted transition
       @public
     */
    replaceWith(...args) {
      return this.transitionTo(...args).method('replace');
    }
    /**
      Generate a URL based on the supplied route name and optionally a model. The
      URL is returned as a string that can be used for any purpose.
         In this example, the URL for the `author.books` route for a given author
      is copied to the clipboard.
         ```app/templates/application.hbs
      <CopyLink @author={{hash id="tomster" name="Tomster"}} />
      ```
         ```app/components/copy-link.js
      import Component from '@glimmer/component';
      import { service } from '@ember/service';
      import { action } from '@ember/object';
         export default class CopyLinkComponent extends Component {
        @service router;
        @service clipboard;
           @action
        copyBooksURL() {
          if (this.author) {
            const url = this.router.urlFor('author.books', this.args.author);
            this.clipboard.set(url);
            // Clipboard now has /author/tomster/books
          }
        }
      }
      ```
         Just like with `transitionTo` and `replaceWith`, `urlFor` can also handle
      query parameters.
         ```app/templates/application.hbs
      <CopyLink @author={{hash id="tomster" name="Tomster"}} />
      ```
         ```app/components/copy-link.js
      import Component from '@glimmer/component';
      import { service } from '@ember/service';
      import { action } from '@ember/object';
         export default class CopyLinkComponent extends Component {
        @service router;
        @service clipboard;
           @action
        copyOnlyEmberBooksURL() {
          if (this.author) {
            const url = this.router.urlFor('author.books', this.author, {
              queryParams: { filter: 'emberjs' }
            });
            this.clipboard.set(url);
            // Clipboard now has /author/tomster/books?filter=emberjs
          }
        }
      }
      ```
          @method urlFor
       @param {String} routeName the name of the route
       @param {...Object} models the model(s) for the route.
       @param {Object} [options] optional hash with a queryParams property
         containing a mapping of query parameters
       @return {String} the string representing the generated URL
       @public
     */
    urlFor(routeName, ...args) {
      this._router.setupRouter();
      return this._router.generate(routeName, ...args);
    }
    /**
       Returns `true` if `routeName/models/queryParams` is the active route, where `models` and `queryParams` are optional.
       See [model](api/ember/release/classes/Route/methods/model?anchor=model) and
       [queryParams](/api/ember/3.7/classes/Route/properties/queryParams?anchor=queryParams) for more information about these arguments.
          In the following example, `isActive` will return `true` if the current route is `/posts`.
          ```app/components/posts.js
       import Component from '@glimmer/component';
       import { service } from '@ember/service';
          export default class extends Component {
         @service router;
            displayComments() {
           return this.router.isActive('posts');
         }
       });
       ```
          The next example includes a dynamic segment, and will return `true` if the current route is `/posts/1`,
       assuming the post has an id of 1:
          ```app/components/posts.js
       import Component from '@glimmer/component';
       import { service } from '@ember/service';
          export default class extends Component {
         @service router;
            displayComments(post) {
           return this.router.isActive('posts', post.id);
         }
       });
       ```
          Where `post.id` is the id of a specific post, which is represented in the route as /posts/[post.id].
       If `post.id` is equal to 1, then isActive will return true if the current route is /posts/1, and false if the route is anything else.
          @method isActive
       @param {String} routeName the name of the route
       @param {...Object} models the model(s) or identifier(s) to be used when determining the active route.
       @param {Object} [options] optional hash with a queryParams property
         containing a mapping of query parameters
       @return {boolean} true if the provided routeName/models/queryParams are active
       @public
     */
    isActive(...args) {
      var {
        routeName,
        models,
        queryParams
      } = (0, _utils.extractRouteArgs)(args);
      var routerMicrolib = this._router._routerMicrolib;
      // When using isActive() in a getter, we want to entagle with the auto-tracking system
      // for example,
      // in
      // get isBarActive() {
      //   return isActive('foo.bar');
      // }
      //
      // you'd expect isBarActive to be dirtied when the route changes.
      //
      // https://github.com/emberjs/ember.js/issues/19004
      (0, _validator.consumeTag)((0, _validator.tagFor)(this._router, 'currentURL'));
      // UNSAFE: casting `routeName as string` here encodes the existing
      // assumption but may be wrong: `extractRouteArgs` correctly returns it as
      // `string | undefined`. There may be bugs if `isActiveIntent` does
      // not correctly account for `undefined` values for `routeName`. Spoilers:
      // it *does not* account for this being `undefined`.
      if (!routerMicrolib.isActiveIntent(routeName, models)) {
        return false;
      }
      var hasQueryParams = Object.keys(queryParams).length > 0;
      if (hasQueryParams) {
        // UNSAFE: casting `routeName as string` here encodes the existing
        // assumption but may be wrong: `extractRouteArgs` correctly returns it
        // as `string | undefined`. There may be bugs if `_prepareQueryParams`
        // does not correctly account for `undefined` values for `routeName`.
        //  Spoilers: under the hood this currently uses router.js APIs which
        // *do not* account for this being `undefined`.
        var targetRouteName = routeName;
        queryParams = Object.assign({}, queryParams);
        this._router._prepareQueryParams(targetRouteName, models, queryParams, true /* fromRouterService */);
        var currentQueryParams = Object.assign({}, routerMicrolib.state.queryParams);
        this._router._prepareQueryParams(targetRouteName, models, currentQueryParams, true /* fromRouterService */);
        return (0, _utils.shallowEqual)(queryParams, currentQueryParams);
      }
      return true;
    }
    /**
       Takes a string URL and returns a `RouteInfo` for the leafmost route represented
       by the URL. Returns `null` if the URL is not recognized. This method expects to
       receive the actual URL as seen by the browser including the app's `rootURL`.
          See [RouteInfo](/ember/release/classes/RouteInfo) for more info.
          In the following example `recognize` is used to verify if a path belongs to our
       application before transitioning to it.
          ```
       import Component from '@ember/component';
       import { service } from '@ember/service';
          export default class extends Component {
         @service router;
         path = '/';
            click() {
           if (this.router.recognize(this.path)) {
             this.router.transitionTo(this.path);
           }
         }
       }
       ```
           @method recognize
        @param {String} url
        @return {RouteInfo | null}
        @public
      */
    recognize(url) {
      (true && !(url.indexOf(this.rootURL) === 0) && (0, _debug.assert)(`You must pass a url that begins with the application's rootURL "${this.rootURL}"`, url.indexOf(this.rootURL) === 0));
      this._router.setupRouter();
      var internalURL = cleanURL(url, this.rootURL);
      return this._router._routerMicrolib.recognize(internalURL);
    }
    /**
      Takes a string URL and returns a promise that resolves to a
      `RouteInfoWithAttributes` for the leafmost route represented by the URL.
      The promise rejects if the URL is not recognized or an unhandled exception
      is encountered. This method expects to receive the actual URL as seen by
      the browser including the app's `rootURL`.
           @method recognizeAndLoad
        @param {String} url
        @return {RouteInfo}
        @public
     */
    recognizeAndLoad(url) {
      (true && !(url.indexOf(this.rootURL) === 0) && (0, _debug.assert)(`You must pass a url that begins with the application's rootURL "${this.rootURL}"`, url.indexOf(this.rootURL) === 0));
      this._router.setupRouter();
      var internalURL = cleanURL(url, this.rootURL);
      return this._router._routerMicrolib.recognizeAndLoad(internalURL);
    }
    /**
      You can register a listener for events emitted by this service with `.on()`:
         ```app/routes/contact-form.js
      import Route from '@ember/routing';
      import { service } from '@ember/service';
         export default class extends Route {
        @service router;
           activate() {
          this.router.on('routeWillChange', (transition) => {
            if (!transition.to.find(route => route.name === this.routeName)) {
              alert("Please save or cancel your changes.");
              transition.abort();
            }
          })
        }
      }
      ```
         @method on
      @param {String} eventName
      @param {Function} callback
      @public
    */
    /**
      You can unregister a listener for events emitted by this service with `.off()`:
         ```app/routes/contact-form.js
      import Route from '@ember/routing';
      import { service } from '@ember/service';
         export default class ContactFormRoute extends Route {
        @service router;
           callback = (transition) => {
          if (!transition.to.find(route => route.name === this.routeName)) {
            alert('Please save or cancel your changes.');
            transition.abort();
          }
        };
           activate() {
          this.router.on('routeWillChange', this.callback);
        }
           deactivate() {
          this.router.off('routeWillChange', this.callback);
        }
      }
      ```
         @method off
      @param {String} eventName
      @param {Function} callback
      @public
    */
    /**
      The `routeWillChange` event is fired at the beginning of any
      attempted transition with a `Transition` object as the sole
      argument. This action can be used for aborting, redirecting,
      or decorating the transition from the currently active routes.
         A good example is preventing navigation when a form is
      half-filled out:
         ```app/routes/contact-form.js
      import Route from '@ember/routing';
      import { service } from '@ember/service';
         export default class extends Route {
        @service router;
           activate() {
          this.router.on('routeWillChange', (transition) => {
            if (!transition.to.find(route => route.name === this.routeName)) {
              alert("Please save or cancel your changes.");
              transition.abort();
            }
          })
        }
      }
      ```
         The `routeWillChange` event fires whenever a new route is chosen as the desired target of a transition. This includes `transitionTo`, `replaceWith`, all redirection for any reason including error handling, and abort. Aborting implies changing the desired target back to where you already were. Once a transition has completed, `routeDidChange` fires.
         @event routeWillChange
      @param {Transition} transition
      @public
    */
    /**
      The `routeDidChange` event only fires once a transition has settled.
      This includes aborts and error substates. Like the `routeWillChange` event
      it receives a Transition as the sole argument.
         A good example is sending some analytics when the route has transitioned:
         ```app/routes/contact-form.js
      import Route from '@ember/routing';
      import { service } from '@ember/service';
         export default class extends Route {
        @service router;
           activate() {
          this.router.on('routeDidChange', (transition) => {
            ga.send('pageView', {
              current: transition.to.name,
              from: transition.from.name
            });
          })
        }
      }
      ```
         `routeDidChange` will be called after any `Route`'s
      [didTransition](/ember/release/classes/Route/events/didTransition?anchor=didTransition)
      action has been fired.
      The updates of properties
      [currentURL](/ember/release/classes/RouterService/properties/currentURL?anchor=currentURL),
      [currentRouteName](/ember/release/classes/RouterService/properties/currentURL?anchor=currentRouteName)
      and
      [currentRoute](/ember/release/classes/RouterService/properties/currentURL?anchor=currentRoute)
      are completed at the time `routeDidChange` is called.
         @event routeDidChange
      @param {Transition} transition
      @public
    */
    /**
     * Refreshes all currently active routes, doing a full transition.
     * If a route name is provided and refers to a currently active route,
     * it will refresh only that route and its descendents.
     * Returns a promise that will be resolved once the refresh is complete.
     * All resetController, beforeModel, model, afterModel, redirect, and setupController
     * hooks will be called again. You will get new data from the model hook.
     *
     * @method refresh
     * @param {String} [routeName] the route to refresh (along with all child routes)
     * @return Transition
     * @public
     */
    refresh(pivotRouteName) {
      if (!pivotRouteName) {
        return this._router._routerMicrolib.refresh();
      }
      (true && !(this._router.hasRoute(pivotRouteName)) && (0, _debug.assert)(`The route "${pivotRouteName}" was not found`, this._router.hasRoute(pivotRouteName)));
      (true && !(this.isActive(pivotRouteName)) && (0, _debug.assert)(`The route "${pivotRouteName}" is currently not active`, this.isActive(pivotRouteName)));
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('RouterService is unexpectedly missing an owner', owner));
      var pivotRoute = owner.lookup(`route:${pivotRouteName}`);
      // R could be instantiated with a different sub-type
      // @ts-ignore
      return this._router._routerMicrolib.refresh(pivotRoute);
    }
  }
  _exports.default = RouterService;
  __decorate([(0, _computed.readOnly)('_router.currentRouteName')], RouterService.prototype, "currentRouteName", void 0);
  __decorate([(0, _computed.readOnly)('_router.currentURL')], RouterService.prototype, "currentURL", void 0);
  __decorate([(0, _computed.readOnly)('_router.location')], RouterService.prototype, "location", void 0);
  __decorate([(0, _computed.readOnly)('_router.rootURL')], RouterService.prototype, "rootURL", void 0);
  __decorate([(0, _computed.readOnly)('_router.currentRoute')], RouterService.prototype, "currentRoute", void 0);
});
define("@ember/routing/router", ["exports", "@ember/-internals/container", "@ember/object", "@ember/owner", "@ember/routing/-internals", "@ember/routing/lib/utils", "@ember/routing/location", "@ember/array", "@ember/utils", "@ember/object/evented", "@ember/debug", "@ember/runloop", "@ember/routing/route", "router_js", "@ember/engine/instance"], function (_exports, _container, _object, _owner, _internals, _utils, _location, _array, _utils2, _evented, _debug, _runloop, _route, _router_js, _instance) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.triggerEvent = triggerEvent;
  /**
  @module @ember/routing/router
  */
  function defaultDidTransition(infos) {
    updatePaths(this);
    this._cancelSlowTransitionTimer();
    this.notifyPropertyChange('url');
    this.set('currentState', this.targetState);
    if (true /* DEBUG */) {
      // @ts-expect-error namespace isn't public
      if (this.namespace.LOG_TRANSITIONS) {
        // eslint-disable-next-line no-console
        console.log(`Transitioned into '${EmberRouter._routePath(infos)}'`);
      }
    }
  }
  function defaultWillTransition(oldInfos, newInfos) {
    if (true /* DEBUG */) {
      // @ts-expect-error namespace isn't public
      if (this.namespace.LOG_TRANSITIONS) {
        // eslint-disable-next-line no-console
        console.log(`Preparing to transition from '${EmberRouter._routePath(oldInfos)}' to '${EmberRouter._routePath(newInfos)}'`);
      }
    }
  }
  var freezeRouteInfo;
  if (true /* DEBUG */) {
    freezeRouteInfo = transition => {
      if (transition.from !== null && !Object.isFrozen(transition.from)) {
        Object.freeze(transition.from);
      }
      if (transition.to !== null && !Object.isFrozen(transition.to)) {
        Object.freeze(transition.to);
      }
    };
  }
  function K() {
    return this;
  }
  var {
    slice
  } = Array.prototype;
  /**
    The `EmberRouter` class manages the application state and URLs. Refer to
    the [routing guide](https://guides.emberjs.com/release/routing/) for documentation.
  
    @class EmberRouter
    @extends EmberObject
    @uses Evented
    @public
  */
  class EmberRouter extends _object.default.extend(_evented.default) {
    /**
      The `Router.map` function allows you to define mappings from URLs to routes
      in your application. These mappings are defined within the
      supplied callback function using `this.route`.
         The first parameter is the name of the route which is used by default as the
      path name as well.
         The second parameter is the optional options hash. Available options are:
           * `path`: allows you to provide your own path as well as mark dynamic
          segments.
        * `resetNamespace`: false by default; when nesting routes, ember will
          combine the route names to form the fully-qualified route name, which is
          used with `{{link-to}}` or manually transitioning to routes. Setting
          `resetNamespace: true` will cause the route not to inherit from its
          parent route's names. This is handy for preventing extremely long route names.
          Keep in mind that the actual URL path behavior is still retained.
         The third parameter is a function, which can be used to nest routes.
      Nested routes, by default, will have the parent route tree's route name and
      path prepended to it's own.
         ```app/router.js
      Router.map(function(){
        this.route('post', { path: '/post/:post_id' }, function() {
          this.route('edit');
          this.route('comments', { resetNamespace: true }, function() {
            this.route('new');
          });
        });
      });
      ```
         @method map
      @param callback
      @public
    */
    static map(callback) {
      if (!this.dslCallbacks) {
        this.dslCallbacks = [];
        // FIXME: Can we remove this?
        this.reopenClass({
          dslCallbacks: this.dslCallbacks
        });
      }
      this.dslCallbacks.push(callback);
      return this;
    }
    static _routePath(routeInfos) {
      var path = [];
      // We have to handle coalescing resource names that
      // are prefixed with their parent's names, e.g.
      // ['foo', 'foo.bar.baz'] => 'foo.bar.baz', not 'foo.foo.bar.baz'
      function intersectionMatches(a1, a2) {
        for (var i = 0; i < a1.length; ++i) {
          if (a1[i] !== a2[i]) {
            return false;
          }
        }
        return true;
      }
      var name, nameParts, oldNameParts;
      for (var i = 1; i < routeInfos.length; i++) {
        var routeInfo = routeInfos[i];
        (true && !(routeInfo) && (0, _debug.assert)('has routeInfo', routeInfo));
        name = routeInfo.name;
        nameParts = name.split('.');
        oldNameParts = slice.call(path);
        while (oldNameParts.length) {
          if (intersectionMatches(oldNameParts, nameParts)) {
            break;
          }
          oldNameParts.shift();
        }
        path.push(...nameParts.slice(oldNameParts.length));
      }
      return path.join('.');
    }
    // Note that owner is actually required in this scenario, but since it is strictly
    // optional in other contexts trying to make it required here confuses TS.
    constructor(owner) {
      super(owner);
      this._didSetupRouter = false;
      this._initialTransitionStarted = false;
      this.currentURL = null;
      this.currentRouteName = null;
      this.currentPath = null;
      this.currentRoute = null;
      this._qpCache = Object.create(null);
      // Set of QueryParam['urlKey']
      this._qpUpdates = new Set();
      this._queuedQPChanges = {};
      this._toplevelView = null;
      this._handledErrors = new Set();
      this._engineInstances = Object.create(null);
      this._engineInfoByRoute = Object.create(null);
      this._slowTransitionTimer = null;
      this.currentState = null;
      this.targetState = null;
      (true && !(owner) && (0, _debug.assert)('BUG: Missing owner', owner));
      this._resetQueuedQueryParameterChanges();
      this.namespace = owner.lookup('application:main');
      var bucketCache = owner.lookup((0, _container.privatize)`-bucket-cache:main`);
      (true && !(bucketCache instanceof _internals.BucketCache) && (0, _debug.assert)('BUG: BucketCache should always be present', bucketCache instanceof _internals.BucketCache));
      this._bucketCache = bucketCache;
      var routerService = owner.lookup('service:router');
      (true && !(routerService !== undefined) && (0, _debug.assert)('BUG: RouterService should always be present', routerService !== undefined));
      this._routerService = routerService;
    }
    _initRouterJs() {
      var location = (0, _object.get)(this, 'location');
      var router = this;
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Router is unexpectedly missing an owner', owner));
      var seen = Object.create(null);
      class PrivateRouter extends _router_js.default {
        getRoute(name) {
          var routeName = name;
          var routeOwner = owner;
          var engineInfo = router._engineInfoByRoute[routeName];
          if (engineInfo) {
            var engineInstance = router._getEngineInstance(engineInfo);
            routeOwner = engineInstance;
            routeName = engineInfo.localFullName;
          }
          var fullRouteName = `route:${routeName}`;
          (true && !(routeOwner) && (0, _debug.assert)('Route is unexpectedly missing an owner', routeOwner));
          var route = routeOwner.lookup(fullRouteName);
          if (seen[name]) {
            (true && !(route) && (0, _debug.assert)('seen routes should exist', route));
            return route;
          }
          seen[name] = true;
          if (!route) {
            // SAFETY: this is configured in `commonSetupRegistry` in the
            // `@ember/application/lib` package.
            var DefaultRoute = routeOwner.factoryFor('route:basic').class;
            routeOwner.register(fullRouteName, DefaultRoute.extend());
            route = routeOwner.lookup(fullRouteName);
            if (true /* DEBUG */) {
              if (router.namespace.LOG_ACTIVE_GENERATION) {
                (0, _debug.info)(`generated -> ${fullRouteName}`, {
                  fullName: fullRouteName
                });
              }
            }
          }
          route._setRouteName(routeName);
          if (engineInfo && !(0, _route.hasDefaultSerialize)(route)) {
            throw new Error('Defining a custom serialize method on an Engine route is not supported.');
          }
          return route;
        }
        getSerializer(name) {
          var engineInfo = router._engineInfoByRoute[name];
          // If this is not an Engine route, we fall back to the handler for serialization
          if (!engineInfo) {
            return;
          }
          return engineInfo.serializeMethod || _route.defaultSerialize;
        }
        updateURL(path) {
          (0, _runloop.once)(() => {
            location.setURL(path);
            (0, _object.set)(router, 'currentURL', path);
          });
        }
        // TODO: merge into routeDidChange
        didTransition(infos) {
          (true && !(router.didTransition === defaultDidTransition) && (0, _debug.assert)('You attempted to override the "didTransition" method which has been deprecated. Please inject the router service and listen to the "routeDidChange" event.', router.didTransition === defaultDidTransition));
          router.didTransition(infos);
        }
        // TODO: merge into routeWillChange
        willTransition(oldInfos, newInfos) {
          (true && !(router.willTransition === defaultWillTransition) && (0, _debug.assert)('You attempted to override the "willTransition" method which has been deprecated. Please inject the router service and listen to the "routeWillChange" event.', router.willTransition === defaultWillTransition));
          router.willTransition(oldInfos, newInfos);
        }
        triggerEvent(routeInfos, ignoreFailure, name, args) {
          return triggerEvent.bind(router)(routeInfos, ignoreFailure, name, args);
        }
        routeWillChange(transition) {
          router.trigger('routeWillChange', transition);
          if (true /* DEBUG */) {
            freezeRouteInfo(transition);
          }
          router._routerService.trigger('routeWillChange', transition);
          // in case of intermediate transition we update the current route
          // to make router.currentRoute.name consistent with router.currentRouteName
          // see https://github.com/emberjs/ember.js/issues/19449
          if (transition.isIntermediate) {
            router.set('currentRoute', transition.to);
          }
        }
        routeDidChange(transition) {
          router.set('currentRoute', transition.to);
          (0, _runloop.once)(() => {
            router.trigger('routeDidChange', transition);
            if (true /* DEBUG */) {
              freezeRouteInfo(transition);
            }
            router._routerService.trigger('routeDidChange', transition);
          });
        }
        transitionDidError(error, transition) {
          if (error.wasAborted || transition.isAborted) {
            // If the error was a transition erorr or the transition aborted
            // log the abort.
            return (0, _router_js.logAbort)(transition);
          } else {
            // Otherwise trigger the "error" event to attempt an intermediate
            // transition into an error substate
            transition.trigger(false, 'error', error.error, transition, error.route);
            if (router._isErrorHandled(error.error)) {
              // If we handled the error with a substate just roll the state back on
              // the transition and send the "routeDidChange" event for landing on
              // the error substate and return the error.
              transition.rollback();
              this.routeDidChange(transition);
              return error.error;
            } else {
              // If it was not handled, abort the transition completely and return
              // the error.
              transition.abort();
              return error.error;
            }
          }
        }
        replaceURL(url) {
          if (location.replaceURL) {
            var doReplaceURL = () => {
              location.replaceURL(url);
              (0, _object.set)(router, 'currentURL', url);
            };
            (0, _runloop.once)(doReplaceURL);
          } else {
            this.updateURL(url);
          }
        }
      }
      var routerMicrolib = this._routerMicrolib = new PrivateRouter();
      var dslCallbacks = this.constructor.dslCallbacks || [K];
      var dsl = this._buildDSL();
      dsl.route('application', {
        path: '/',
        resetNamespace: true,
        overrideNameAssertion: true
      }, function () {
        for (var i = 0; i < dslCallbacks.length; i++) {
          dslCallbacks[i].call(this);
        }
      });
      if (true /* DEBUG */) {
        if (this.namespace.LOG_TRANSITIONS_INTERNAL) {
          routerMicrolib.log = console.log.bind(console); // eslint-disable-line no-console
        }
      }
      routerMicrolib.map(dsl.generate());
    }
    _buildDSL() {
      var enableLoadingSubstates = this._hasModuleBasedResolver();
      var router = this;
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Router is unexpectedly missing an owner', owner));
      var options = {
        enableLoadingSubstates,
        resolveRouteMap(name) {
          return owner.factoryFor(`route-map:${name}`);
        },
        addRouteForEngine(name, engineInfo) {
          if (!router._engineInfoByRoute[name]) {
            router._engineInfoByRoute[name] = engineInfo;
          }
        }
      };
      return new _internals.DSL(null, options);
    }
    /*
      Resets all pending query parameter changes.
      Called after transitioning to a new route
      based on query parameter changes.
    */
    _resetQueuedQueryParameterChanges() {
      this._queuedQPChanges = {};
    }
    _hasModuleBasedResolver() {
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Router is unexpectedly missing an owner', owner));
      var resolver = (0, _object.get)(owner, 'application.__registry__.resolver.moduleBasedResolver');
      return Boolean(resolver);
    }
    /**
      Initializes the current router instance and sets up the change handling
      event listeners used by the instances `location` implementation.
         A property named `initialURL` will be used to determine the initial URL.
      If no value is found `/` will be used.
         @method startRouting
      @private
    */
    startRouting() {
      if (this.setupRouter()) {
        var initialURL = (0, _object.get)(this, 'initialURL');
        if (initialURL === undefined) {
          initialURL = (0, _object.get)(this, 'location').getURL();
        }
        var initialTransition = this.handleURL(initialURL);
        if (initialTransition && initialTransition.error) {
          throw initialTransition.error;
        }
      }
    }
    setupRouter() {
      if (this._didSetupRouter) {
        return false;
      }
      this._didSetupRouter = true;
      this._setupLocation();
      var location = (0, _object.get)(this, 'location');
      // Allow the Location class to cancel the router setup while it refreshes
      // the page
      if ((0, _object.get)(location, 'cancelRouterSetup')) {
        return false;
      }
      this._initRouterJs();
      location.onUpdateURL(url => {
        this.handleURL(url);
      });
      return true;
    }
    _setOutlets() {
      // This is triggered async during Route#willDestroy.
      // If the router is also being destroyed we do not want to
      // to create another this._toplevelView (and leak the renderer)
      if (this.isDestroying || this.isDestroyed) {
        return;
      }
      var routeInfos = this._routerMicrolib.currentRouteInfos;
      if (!routeInfos) {
        return;
      }
      var defaultParentState;
      var liveRoutes = null;
      for (var routeInfo of routeInfos) {
        var route = routeInfo.route;
        var connections = _route.ROUTE_CONNECTIONS.get(route);
        var ownState = void 0;
        if (connections.length === 0) {
          ownState = representEmptyRoute(liveRoutes, defaultParentState, route);
        } else {
          for (var j = 0; j < connections.length; j++) {
            var appended = appendLiveRoute(liveRoutes, defaultParentState, connections[j]);
            liveRoutes = appended.liveRoutes;
            var {
              name,
              outlet
            } = appended.ownState.render;
            if (name === route.routeName || outlet === 'main') {
              ownState = appended.ownState;
            }
          }
        }
        defaultParentState = ownState;
      }
      // when a transitionTo happens after the validation phase
      // during the initial transition _setOutlets is called
      // when no routes are active. However, it will get called
      // again with the correct values during the next turn of
      // the runloop
      if (!liveRoutes) {
        return;
      }
      if (!this._toplevelView) {
        var owner = (0, _owner.getOwner)(this);
        (true && !(owner) && (0, _debug.assert)('Router is unexpectedly missing an owner', owner)); // SAFETY: we don't presently have any type registries internally to make
        // this safe, so in each of these cases we assume that nothing *else* is
        // registered at this `FullName`, and simply check to make sure that
        // *something* is.
        var OutletView = owner.factoryFor('view:-outlet');
        (true && !(OutletView !== undefined) && (0, _debug.assert)('[BUG] unexpectedly missing `view:-outlet`', OutletView !== undefined));
        var application = owner.lookup('application:main');
        (true && !(application !== undefined) && (0, _debug.assert)('[BUG] unexpectedly missing `application:-main`', application !== undefined));
        var environment = owner.lookup('-environment:main');
        (true && !(environment !== undefined) && (0, _debug.assert)('[BUG] unexpectedly missing `-environment:main`', environment !== undefined));
        var template = owner.lookup('template:-outlet');
        (true && !(template !== undefined) && (0, _debug.assert)('[BUG] unexpectedly missing `template:-outlet`', template !== undefined));
        this._toplevelView = OutletView.create({
          environment,
          template,
          application
        });
        this._toplevelView.setOutletState(liveRoutes);
        // TODO(SAFETY): At least one test runs without this set correctly. At a
        // later time, update the test to configure this correctly. The test ID:
        // `Router Service - non application test:  RouterService#transitionTo with basic route`
        var instance = owner.lookup('-application-instance:main');
        // let instance = owner.lookup('-application-instance:main') as ApplicationInstance | undefined;
        // assert('[BUG] unexpectedly missing `-application-instance:main`', instance !== undefined);
        if (instance) {
          // SAFETY: LOL. This is calling a deprecated API with a type that we
          // cannot actually confirm at a type level *is* a `ViewMixin`. Seems:
          // not great on multiple fronts!
          instance.didCreateRootView(this._toplevelView);
        }
      } else {
        this._toplevelView.setOutletState(liveRoutes);
      }
    }
    handleURL(url) {
      // Until we have an ember-idiomatic way of accessing #hashes, we need to
      // remove it because router.js doesn't know how to handle it.
      var _url = url.split(/#(.+)?/)[0];
      return this._doURLTransition('handleURL', _url);
    }
    _doURLTransition(routerJsMethod, url) {
      this._initialTransitionStarted = true;
      var transition = this._routerMicrolib[routerJsMethod](url || '/');
      didBeginTransition(transition, this);
      return transition;
    }
    /**
      Transition the application into another route. The route may
      be either a single route or route path:
         @method transitionTo
      @param {String} [name] the name of the route or a URL
      @param {...Object} models the model(s) or identifier(s) to be used while
        transitioning to the route.
      @param {Object} [options] optional hash with a queryParams property
        containing a mapping of query parameters
      @return {Transition} the transition object associated with this
        attempted transition
      @public
    */
    transitionTo(...args) {
      if ((0, _utils.resemblesURL)(args[0])) {
        (true && !(!this.isDestroying && !this.isDestroyed) && (0, _debug.assert)(`A transition was attempted from '${this.currentRouteName}' to '${args[0]}' but the application instance has already been destroyed.`, !this.isDestroying && !this.isDestroyed));
        return this._doURLTransition('transitionTo', args[0]);
      }
      var {
        routeName,
        models,
        queryParams
      } = (0, _utils.extractRouteArgs)(args);
      (true && !(!this.isDestroying && !this.isDestroyed) && (0, _debug.assert)(`A transition was attempted from '${this.currentRouteName}' to '${routeName}' but the application instance has already been destroyed.`, !this.isDestroying && !this.isDestroyed));
      return this._doTransition(routeName, models, queryParams);
    }
    intermediateTransitionTo(name, ...args) {
      this._routerMicrolib.intermediateTransitionTo(name, ...args);
      updatePaths(this);
      if (true /* DEBUG */) {
        var infos = this._routerMicrolib.currentRouteInfos;
        if (this.namespace.LOG_TRANSITIONS) {
          (true && !(infos) && (0, _debug.assert)('expected infos to be set', infos)); // eslint-disable-next-line no-console
          console.log(`Intermediate-transitioned into '${EmberRouter._routePath(infos)}'`);
        }
      }
    }
    /**
      Similar to `transitionTo`, but instead of adding the destination to the browser's URL history,
      it replaces the entry for the current route.
      When the user clicks the "back" button in the browser, there will be fewer steps.
      This is most commonly used to manage redirects in a way that does not cause confusing additions
      to the user's browsing history.
         @method replaceWith
      @param {String} [name] the name of the route or a URL
      @param {...Object} models the model(s) or identifier(s) to be used while
        transitioning to the route.
      @param {Object} [options] optional hash with a queryParams property
        containing a mapping of query parameters
      @return {Transition} the transition object associated with this
        attempted transition
      @public
    */
    replaceWith(...args) {
      return this.transitionTo(...args).method('replace');
    }
    generate(name, ...args) {
      var url = this._routerMicrolib.generate(name, ...args);
      (true && !(typeof this.location !== 'string') && (0, _debug.assert)('expected non-string location', typeof this.location !== 'string'));
      return this.location.formatURL(url);
    }
    /**
      Determines if the supplied route is currently active.
         @method isActive
      @param routeName
      @return {Boolean}
      @private
    */
    isActive(routeName) {
      return this._routerMicrolib.isActive(routeName);
    }
    /**
      An alternative form of `isActive` that doesn't require
      manual concatenation of the arguments into a single
      array.
         @method isActiveIntent
      @param routeName
      @param models
      @param queryParams
      @return {Boolean}
      @private
      @since 1.7.0
    */
    isActiveIntent(routeName, models, queryParams) {
      return this.currentState.isActiveIntent(routeName, models, queryParams);
    }
    send(name, ...args) {
      /*name, context*/
      this._routerMicrolib.trigger(name, ...args);
    }
    /**
      Does this router instance have the given route.
         @method hasRoute
      @return {Boolean}
      @private
    */
    hasRoute(route) {
      return this._routerMicrolib.hasRoute(route);
    }
    /**
      Resets the state of the router by clearing the current route
      handlers and deactivating them.
         @private
      @method reset
     */
    reset() {
      this._didSetupRouter = false;
      this._initialTransitionStarted = false;
      if (this._routerMicrolib) {
        this._routerMicrolib.reset();
      }
    }
    willDestroy() {
      if (this._toplevelView) {
        this._toplevelView.destroy();
        this._toplevelView = null;
      }
      super.willDestroy();
      this.reset();
      var instances = this._engineInstances;
      for (var name in instances) {
        var instanceMap = instances[name];
        (true && !(instanceMap) && (0, _debug.assert)('has instanceMap', instanceMap));
        for (var id in instanceMap) {
          var instance = instanceMap[id];
          (true && !(instance) && (0, _debug.assert)('has instance', instance));
          (0, _runloop.run)(instance, 'destroy');
        }
      }
    }
    /*
      Called when an active route's query parameter has changed.
      These changes are batched into a runloop run and trigger
      a single transition.
    */
    _activeQPChanged(queryParameterName, newValue) {
      this._queuedQPChanges[queryParameterName] = newValue;
      (0, _runloop.once)(this, this._fireQueryParamTransition);
    }
    // The queryParameterName is QueryParam['urlKey']
    _updatingQPChanged(queryParameterName) {
      this._qpUpdates.add(queryParameterName);
    }
    /*
      Triggers a transition to a route based on query parameter changes.
      This is called once per runloop, to batch changes.
         e.g.
         if these methods are called in succession:
      this._activeQPChanged('foo', '10');
        // results in _queuedQPChanges = { foo: '10' }
      this._activeQPChanged('bar', false);
        // results in _queuedQPChanges = { foo: '10', bar: false }
         _queuedQPChanges will represent both of these changes
      and the transition using `transitionTo` will be triggered
      once.
    */
    _fireQueryParamTransition() {
      this.transitionTo({
        queryParams: this._queuedQPChanges
      });
      this._resetQueuedQueryParameterChanges();
    }
    _setupLocation() {
      var location = this.location;
      var rootURL = this.rootURL;
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Router is unexpectedly missing an owner', owner));
      if ('string' === typeof location) {
        var resolvedLocation = owner.lookup(`location:${location}`);
        if (location === 'auto') {
          (true && !(false) && (0, _debug.deprecate)("Router location 'auto' is deprecated. Most users will want to set `locationType` to 'history' in config/environment.js for no change in behavior. See deprecation docs for details.", false, {
            id: 'deprecate-auto-location',
            until: '5.0.0',
            url: 'https://emberjs.com/deprecations/v4.x#toc_deprecate-auto-location',
            for: 'ember-source',
            since: {
              available: '4.1.0',
              enabled: '4.1.0'
            }
          }));
        }
        if (resolvedLocation !== undefined) {
          location = (0, _object.set)(this, 'location', resolvedLocation);
        } else {
          // Allow for deprecated registration of custom location API's
          var options = {
            implementation: location
          };
          location = (0, _object.set)(this, 'location', _location.default.create(options));
        }
      }
      if (location !== null && typeof location === 'object') {
        if (rootURL) {
          (0, _object.set)(location, 'rootURL', rootURL);
        }
        // Allow the location to do any feature detection, such as AutoLocation
        // detecting history support. This gives it a chance to set its
        // `cancelRouterSetup` property which aborts routing.
        if (typeof location.detect === 'function') {
          if (this.location !== 'auto') {
            (true && !(false) && (0, _debug.deprecate)('The `detect` method on the Location object is deprecated. If you need detection you can run your detection code in app.js, before setting the location type.', false, {
              id: 'deprecate-auto-location',
              until: '5.0.0',
              url: 'https://emberjs.com/deprecations/v4.x#toc_deprecate-auto-location',
              for: 'ember-source',
              since: {
                available: '4.1.0',
                enabled: '4.1.0'
              }
            }));
          }
          location.detect();
        }
        // ensure that initState is called AFTER the rootURL is set on
        // the location instance
        if (typeof location.initState === 'function') {
          location.initState();
        }
      }
    }
    /**
      Serializes the given query params according to their QP meta information.
         @private
      @method _serializeQueryParams
      @param {Arrray<RouteInfo>} routeInfos
      @param {Object} queryParams
      @return {Void}
    */
    _serializeQueryParams(routeInfos, queryParams) {
      forEachQueryParam(this, routeInfos, queryParams, (key, value, qp) => {
        if (qp) {
          delete queryParams[key];
          queryParams[qp.urlKey] = qp.route.serializeQueryParam(value, qp.urlKey, qp.type);
        } else if (value === undefined) {
          return; // We don't serialize undefined values
        } else {
          queryParams[key] = this._serializeQueryParam(value, (0, _utils2.typeOf)(value));
        }
      });
    }
    /**
      Serializes the value of a query parameter based on a type
         @private
      @method _serializeQueryParam
      @param {Object} value
      @param {String} type
    */
    _serializeQueryParam(value, type) {
      if (value === null || value === undefined) {
        return value;
      } else if (type === 'array') {
        return JSON.stringify(value);
      }
      return `${value}`;
    }
    /**
      Deserializes the given query params according to their QP meta information.
         @private
      @method _deserializeQueryParams
      @param {Array<RouteInfo>} routeInfos
      @param {Object} queryParams
      @return {Void}
    */
    _deserializeQueryParams(routeInfos, queryParams) {
      forEachQueryParam(this, routeInfos, queryParams, (key, value, qp) => {
        // If we don't have QP meta info for a given key, then we do nothing
        // because all values will be treated as strings
        if (qp) {
          delete queryParams[key];
          queryParams[qp.prop] = qp.route.deserializeQueryParam(value, qp.urlKey, qp.type);
        }
      });
    }
    /**
      Deserializes the value of a query parameter based on a default type
         @private
      @method _deserializeQueryParam
      @param {Object} value
      @param {String} defaultType
    */
    _deserializeQueryParam(value, defaultType) {
      if (value === null || value === undefined) {
        return value;
      } else if (defaultType === 'boolean') {
        return value === 'true';
      } else if (defaultType === 'number') {
        return Number(value).valueOf();
      } else if (defaultType === 'array') {
        return (0, _array.A)(JSON.parse(value));
      }
      return value;
    }
    /**
      Removes (prunes) any query params with default values from the given QP
      object. Default values are determined from the QP meta information per key.
         @private
      @method _pruneDefaultQueryParamValues
      @param {Array<RouteInfo>} routeInfos
      @param {Object} queryParams
      @return {Void}
    */
    _pruneDefaultQueryParamValues(routeInfos, queryParams) {
      var qps = this._queryParamsFor(routeInfos);
      for (var key in queryParams) {
        var qp = qps.map[key];
        if (qp && qp.serializedDefaultValue === queryParams[key]) {
          delete queryParams[key];
        }
      }
    }
    _doTransition(_targetRouteName, models, _queryParams, _fromRouterService) {
      var targetRouteName = _targetRouteName || (0, _utils.getActiveTargetName)(this._routerMicrolib);
      (true && !(Boolean(targetRouteName) && this._routerMicrolib.hasRoute(targetRouteName)) && (0, _debug.assert)(`The route ${targetRouteName} was not found`, Boolean(targetRouteName) && this._routerMicrolib.hasRoute(targetRouteName)));
      this._initialTransitionStarted = true;
      var queryParams = {};
      this._processActiveTransitionQueryParams(targetRouteName, models, queryParams, _queryParams);
      Object.assign(queryParams, _queryParams);
      this._prepareQueryParams(targetRouteName, models, queryParams, Boolean(_fromRouterService));
      var transition = this._routerMicrolib.transitionTo(targetRouteName, ...models, {
        queryParams
      });
      didBeginTransition(transition, this);
      return transition;
    }
    _processActiveTransitionQueryParams(targetRouteName, models, queryParams, _queryParams) {
      // merge in any queryParams from the active transition which could include
      // queryParams from the url on initial load.
      if (!this._routerMicrolib.activeTransition) {
        return;
      }
      var unchangedQPs = {};
      var qpUpdates = this._qpUpdates;
      var params = (0, _route.getFullQueryParams)(this, this._routerMicrolib.activeTransition[_router_js.STATE_SYMBOL]);
      for (var key in params) {
        if (!qpUpdates.has(key)) {
          unchangedQPs[key] = params[key];
        }
      }
      // We need to fully scope queryParams so that we can create one object
      // that represents both passed-in queryParams and ones that aren't changed
      // from the active transition.
      this._fullyScopeQueryParams(targetRouteName, models, _queryParams);
      this._fullyScopeQueryParams(targetRouteName, models, unchangedQPs);
      Object.assign(queryParams, unchangedQPs);
    }
    /**
      Prepares the query params for a URL or Transition. Restores any undefined QP
      keys/values, serializes all values, and then prunes any default values.
         @private
      @method _prepareQueryParams
      @param {String} targetRouteName
      @param {Array<Object>} models
      @param {Object} queryParams
      @param {boolean} keepDefaultQueryParamValues
      @return {Void}
    */
    _prepareQueryParams(targetRouteName, models, queryParams, _fromRouterService) {
      var state = calculatePostTransitionState(this, targetRouteName, models);
      this._hydrateUnsuppliedQueryParams(state, queryParams, Boolean(_fromRouterService));
      this._serializeQueryParams(state.routeInfos, queryParams);
      if (!_fromRouterService) {
        this._pruneDefaultQueryParamValues(state.routeInfos, queryParams);
      }
    }
    /**
      Returns the meta information for the query params of a given route. This
      will be overridden to allow support for lazy routes.
         @private
      @method _getQPMeta
      @param {RouteInfo} routeInfo
      @return {Object}
    */
    _getQPMeta(routeInfo) {
      var route = routeInfo.route;
      return route && (0, _object.get)(route, '_qp');
    }
    /**
      Returns a merged query params meta object for a given set of routeInfos.
      Useful for knowing what query params are available for a given route hierarchy.
         @private
      @method _queryParamsFor
      @param {Array<RouteInfo>} routeInfos
      @return {Object}
     */
    _queryParamsFor(routeInfos) {
      var routeInfoLength = routeInfos.length;
      var leafRouteName = routeInfos[routeInfoLength - 1].name;
      var cached = this._qpCache[leafRouteName];
      if (cached !== undefined) {
        return cached;
      }
      var shouldCache = true;
      var map = {};
      var qps = [];
      var qpsByUrlKey = true /* DEBUG */ ? {} : null;
      var qpMeta;
      var urlKey;
      var qpOther;
      for (var routeInfo of routeInfos) {
        qpMeta = this._getQPMeta(routeInfo);
        if (!qpMeta) {
          shouldCache = false;
          continue;
        }
        // Loop over each QP to make sure we don't have any collisions by urlKey
        for (var qp of qpMeta.qps) {
          if (true /* DEBUG */) {
            urlKey = qp.urlKey;
            qpOther = qpsByUrlKey[urlKey];
            if (qpOther && qpOther.controllerName !== qp.controllerName) {
              (true && !(false) && (0, _debug.assert)(`You're not allowed to have more than one controller property map to the same query param key, but both \`${qpOther.scopedPropertyName}\` and \`${qp.scopedPropertyName}\` map to \`${urlKey}\`. You can fix this by mapping one of the controller properties to a different query param key via the \`as\` config option, e.g. \`${qpOther.prop}: { as: 'other-${qpOther.prop}' }\``, false));
            }
            qpsByUrlKey[urlKey] = qp;
          }
          qps.push(qp);
        }
        Object.assign(map, qpMeta.map);
      }
      var finalQPMeta = {
        qps,
        map
      };
      if (shouldCache) {
        this._qpCache[leafRouteName] = finalQPMeta;
      }
      return finalQPMeta;
    }
    /**
      Maps all query param keys to their fully scoped property name of the form
      `controllerName:propName`.
         @private
      @method _fullyScopeQueryParams
      @param {String} leafRouteName
      @param {Array<Object>} contexts
      @param {Object} queryParams
      @return {Void}
    */
    _fullyScopeQueryParams(leafRouteName, contexts, queryParams) {
      var state = calculatePostTransitionState(this, leafRouteName, contexts);
      var routeInfos = state.routeInfos;
      var qpMeta;
      for (var routeInfo of routeInfos) {
        qpMeta = this._getQPMeta(routeInfo);
        if (!qpMeta) {
          continue;
        }
        for (var qp of qpMeta.qps) {
          var presentProp = qp.prop in queryParams && qp.prop || qp.scopedPropertyName in queryParams && qp.scopedPropertyName || qp.urlKey in queryParams && qp.urlKey;
          if (presentProp) {
            if (presentProp !== qp.scopedPropertyName) {
              queryParams[qp.scopedPropertyName] = queryParams[presentProp];
              delete queryParams[presentProp];
            }
          }
        }
      }
    }
    /**
      Hydrates (adds/restores) any query params that have pre-existing values into
      the given queryParams hash. This is what allows query params to be "sticky"
      and restore their last known values for their scope.
         @private
      @method _hydrateUnsuppliedQueryParams
      @param {TransitionState} state
      @param {Object} queryParams
      @return {Void}
    */
    _hydrateUnsuppliedQueryParams(state, queryParams, _fromRouterService) {
      var routeInfos = state.routeInfos;
      var appCache = this._bucketCache;
      var qpMeta;
      var qp;
      var presentProp;
      for (var routeInfo of routeInfos) {
        qpMeta = this._getQPMeta(routeInfo);
        if (!qpMeta) {
          continue;
        }
        // Needs to stay for index loop to avoid throwIfClosureRequired
        for (var j = 0, qpLen = qpMeta.qps.length; j < qpLen; ++j) {
          qp = qpMeta.qps[j];
          (true && !(qp) && (0, _debug.assert)('expected qp', qp));
          presentProp = qp.prop in queryParams && qp.prop || qp.scopedPropertyName in queryParams && qp.scopedPropertyName || qp.urlKey in queryParams && qp.urlKey;
          (true && !(function () {
            if (qp.urlKey === presentProp || qp.scopedPropertyName === presentProp) {
              return true;
            }
            if (_fromRouterService && presentProp !== false && qp.urlKey !== qp.prop) {
              // assumptions (mainly from current transitionTo_test):
              // - this is only supposed to be run when there is an alias to a query param and the alias is used to set the param
              // - when there is no alias: qp.urlKey == qp.prop
              return false;
            }
            return true;
          }()) && (0, _debug.assert)(`You passed the \`${presentProp}\` query parameter during a transition into ${qp.route.routeName}, please update to ${qp.urlKey}`, function () {
            if (qp.urlKey === presentProp || qp.scopedPropertyName === presentProp) {
              return true;
            }
            if (_fromRouterService && presentProp !== false && qp.urlKey !== qp.prop) {
              return false;
            }
            return true;
          }()));
          if (presentProp) {
            if (presentProp !== qp.scopedPropertyName) {
              queryParams[qp.scopedPropertyName] = queryParams[presentProp];
              delete queryParams[presentProp];
            }
          } else {
            var cacheKey = (0, _utils.calculateCacheKey)(qp.route.fullRouteName, qp.parts, state.params);
            (true && !(appCache) && (0, _debug.assert)('ROUTER BUG: expected appCache to be defined. This is an internal bug, please open an issue on Github if you see this message!', appCache));
            queryParams[qp.scopedPropertyName] = appCache.lookup(cacheKey, qp.prop, qp.defaultValue);
          }
        }
      }
    }
    _scheduleLoadingEvent(transition, originRoute) {
      this._cancelSlowTransitionTimer();
      this._slowTransitionTimer = (0, _runloop.scheduleOnce)('routerTransitions', this, this._handleSlowTransition, transition, originRoute);
    }
    _handleSlowTransition(transition, originRoute) {
      if (!this._routerMicrolib.activeTransition) {
        // Don't fire an event if we've since moved on from
        // the transition that put us in a loading state.
        return;
      }
      var targetState = new _internals.RouterState(this, this._routerMicrolib, this._routerMicrolib.activeTransition[_router_js.STATE_SYMBOL]);
      this.set('targetState', targetState);
      transition.trigger(true, 'loading', transition, originRoute);
    }
    _cancelSlowTransitionTimer() {
      if (this._slowTransitionTimer) {
        (0, _runloop.cancel)(this._slowTransitionTimer);
      }
      this._slowTransitionTimer = null;
    }
    // These three helper functions are used to ensure errors aren't
    // re-raised if they're handled in a route's error action.
    _markErrorAsHandled(error) {
      this._handledErrors.add(error);
    }
    _isErrorHandled(error) {
      return this._handledErrors.has(error);
    }
    _clearHandledError(error) {
      this._handledErrors.delete(error);
    }
    _getEngineInstance({
      name,
      instanceId,
      mountPoint
    }) {
      var engineInstances = this._engineInstances;
      var namedInstances = engineInstances[name];
      if (!namedInstances) {
        namedInstances = Object.create(null);
        engineInstances[name] = namedInstances;
      }
      // We just set these!
      (true && !(namedInstances) && (0, _debug.assert)('has namedInstances', namedInstances));
      var engineInstance = namedInstances[instanceId];
      if (!engineInstance) {
        var owner = (0, _owner.getOwner)(this);
        (true && !(owner instanceof _instance.default) && (0, _debug.assert)('Expected router to have EngineInstance as owner', owner instanceof _instance.default));
        (true && !(owner.hasRegistration(`engine:${name}`)) && (0, _debug.assert)(`You attempted to mount the engine '${name}' in your router map, but the engine can not be found.`, owner.hasRegistration(`engine:${name}`)));
        engineInstance = owner.buildChildEngineInstance(name, {
          routable: true,
          mountPoint
        });
        engineInstance.boot();
        namedInstances[instanceId] = engineInstance;
      }
      return engineInstance;
    }
  }
  /*
    Helper function for iterating over routes in a set of routeInfos that are
    at or above the given origin route. Example: if `originRoute` === 'foo.bar'
    and the routeInfos given were for 'foo.bar.baz', then the given callback
    will be invoked with the routes for 'foo.bar', 'foo', and 'application'
    individually.
  
    If the callback returns anything other than `true`, then iteration will stop.
  
    @private
    @param {Route} originRoute
    @param {Array<RouteInfo>} routeInfos
    @param {Function} callback
    @return {Void}
   */
  function forEachRouteAbove(routeInfos, callback) {
    for (var i = routeInfos.length - 1; i >= 0; --i) {
      var routeInfo = routeInfos[i];
      (true && !(routeInfo) && (0, _debug.assert)('has routeInfo', routeInfo));
      var route = routeInfo.route;
      // routeInfo.handler being `undefined` generally means either:
      //
      // 1. an error occurred during creation of the route in question
      // 2. the route is across an async boundary (e.g. within an engine)
      //
      // In both of these cases, we cannot invoke the callback on that specific
      // route, because it just doesn't exist...
      if (route === undefined) {
        continue;
      }
      if (callback(route, routeInfo) !== true) {
        return;
      }
    }
  }
  // These get invoked when an action bubbles above ApplicationRoute
  // and are not meant to be overridable.
  var defaultActionHandlers = {
    willResolveModel(_routeInfos, transition, originRoute) {
      this._scheduleLoadingEvent(transition, originRoute);
    },
    // Attempt to find an appropriate error route or substate to enter.
    error(routeInfos, error, transition) {
      var router = this;
      var routeInfoWithError = routeInfos[routeInfos.length - 1];
      forEachRouteAbove(routeInfos, (route, routeInfo) => {
        // We don't check the leaf most routeInfo since that would
        // technically be below where we're at in the route hierarchy.
        if (routeInfo !== routeInfoWithError) {
          // Check for the existence of an 'error' route.
          var errorRouteName = findRouteStateName(route, 'error');
          if (errorRouteName) {
            router._markErrorAsHandled(error);
            router.intermediateTransitionTo(errorRouteName, error);
            return false;
          }
        }
        // Check for an 'error' substate route
        var errorSubstateName = findRouteSubstateName(route, 'error');
        if (errorSubstateName) {
          router._markErrorAsHandled(error);
          router.intermediateTransitionTo(errorSubstateName, error);
          return false;
        }
        return true;
      });
      logError(error, `Error while processing route: ${transition.targetName}`);
    },
    // Attempt to find an appropriate loading route or substate to enter.
    loading(routeInfos, transition) {
      var router = this;
      var routeInfoWithSlowLoading = routeInfos[routeInfos.length - 1];
      forEachRouteAbove(routeInfos, (route, routeInfo) => {
        // We don't check the leaf most routeInfos since that would
        // technically be below where we're at in the route hierarchy.
        if (routeInfo !== routeInfoWithSlowLoading) {
          // Check for the existence of a 'loading' route.
          var loadingRouteName = findRouteStateName(route, 'loading');
          if (loadingRouteName) {
            router.intermediateTransitionTo(loadingRouteName);
            return false;
          }
        }
        // Check for loading substate
        var loadingSubstateName = findRouteSubstateName(route, 'loading');
        if (loadingSubstateName) {
          router.intermediateTransitionTo(loadingSubstateName);
          return false;
        }
        // Don't bubble above pivot route.
        return transition.pivotHandler !== route;
      });
    }
  };
  function logError(_error, initialMessage) {
    var errorArgs = [];
    var error;
    if (_error && typeof _error === 'object' && typeof _error.errorThrown === 'object') {
      error = _error.errorThrown;
    } else {
      error = _error;
    }
    if (initialMessage) {
      errorArgs.push(initialMessage);
    }
    if (error) {
      if (error.message) {
        errorArgs.push(error.message);
      }
      if (error.stack) {
        errorArgs.push(error.stack);
      }
      if (typeof error === 'string') {
        errorArgs.push(error);
      }
    }
    console.error(...errorArgs); //eslint-disable-line no-console
  }
  /**
    Finds the name of the substate route if it exists for the given route. A
    substate route is of the form `route_state`, such as `foo_loading`.
  
    @private
    @param {Route} route
    @param {String} state
    @return {String}
  */
  function findRouteSubstateName(route, state) {
    var owner = (0, _owner.getOwner)(route);
    (true && !(owner) && (0, _debug.assert)('Route is unexpectedly missing an owner', owner));
    var {
      routeName,
      fullRouteName,
      _router: router
    } = route;
    var substateName = `${routeName}_${state}`;
    var substateNameFull = `${fullRouteName}_${state}`;
    return routeHasBeenDefined(owner, router, substateName, substateNameFull) ? substateNameFull : '';
  }
  /**
    Finds the name of the state route if it exists for the given route. A state
    route is of the form `route.state`, such as `foo.loading`. Properly Handles
    `application` named routes.
  
    @private
    @param {Route} route
    @param {String} state
    @return {String}
  */
  function findRouteStateName(route, state) {
    var owner = (0, _owner.getOwner)(route);
    (true && !(owner) && (0, _debug.assert)('Route is unexpectedly missing an owner', owner));
    var {
      routeName,
      fullRouteName,
      _router: router
    } = route;
    var stateName = routeName === 'application' ? state : `${routeName}.${state}`;
    var stateNameFull = fullRouteName === 'application' ? state : `${fullRouteName}.${state}`;
    return routeHasBeenDefined(owner, router, stateName, stateNameFull) ? stateNameFull : '';
  }
  /**
    Determines whether or not a route has been defined by checking that the route
    is in the Router's map and the owner has a registration for that route.
  
    @private
    @param {Owner} owner
    @param {Router} router
    @param {String} localName
    @param {String} fullName
    @return {Boolean}
  */
  function routeHasBeenDefined(owner, router, localName, fullName) {
    var routerHasRoute = router.hasRoute(fullName);
    var ownerHasRoute = owner.factoryFor(`template:${localName}`) || owner.factoryFor(`route:${localName}`);
    return routerHasRoute && ownerHasRoute;
  }
  function triggerEvent(routeInfos, ignoreFailure, name, args) {
    if (!routeInfos) {
      if (ignoreFailure) {
        return;
      }
      // TODO: update?
      throw new Error(`Can't trigger action '${name}' because your app hasn't finished transitioning into its first route. To trigger an action on destination routes during a transition, you can call \`.send()\` on the \`Transition\` object passed to the \`model/beforeModel/afterModel\` hooks.`);
    }
    var eventWasHandled = false;
    var routeInfo, handler, actionHandler;
    for (var i = routeInfos.length - 1; i >= 0; i--) {
      routeInfo = routeInfos[i];
      (true && !(routeInfo) && (0, _debug.assert)('[BUG] Missing routeInfo', routeInfo));
      handler = routeInfo.route;
      actionHandler = handler && handler.actions && handler.actions[name];
      if (actionHandler) {
        if (actionHandler.apply(handler, args) === true) {
          eventWasHandled = true;
        } else {
          // Should only hit here if a non-bubbling error action is triggered on a route.
          if (name === 'error') {
            (true && !(handler) && (0, _debug.assert)('[BUG] Missing handler', handler));
            handler._router._markErrorAsHandled(args[0]);
          }
          return;
        }
      }
    }
    var defaultHandler = defaultActionHandlers[name];
    if (defaultHandler) {
      defaultHandler.call(this, routeInfos, ...args);
      return;
    }
    if (!eventWasHandled && !ignoreFailure) {
      throw new Error(`Nothing handled the action '${name}'. If you did handle the action, this error can be caused by returning true from an action handler in a controller, causing the action to bubble.`);
    }
  }
  function calculatePostTransitionState(emberRouter, leafRouteName, contexts) {
    var state = emberRouter._routerMicrolib.applyIntent(leafRouteName, contexts);
    var {
      routeInfos,
      params
    } = state;
    for (var routeInfo of routeInfos) {
      // If the routeInfo is not resolved, we serialize the context into params
      if (!routeInfo.isResolved) {
        params[routeInfo.name] = routeInfo.serialize(routeInfo.context);
      } else {
        params[routeInfo.name] = routeInfo.params;
      }
    }
    return state;
  }
  function updatePaths(router) {
    var infos = router._routerMicrolib.currentRouteInfos;
    if (infos.length === 0) {
      return;
    }
    var path = EmberRouter._routePath(infos);
    var info = infos[infos.length - 1];
    (true && !(info) && (0, _debug.assert)('expected info', info));
    var currentRouteName = info.name;
    var location = router.location;
    (true && !(typeof location !== 'string') && (0, _debug.assert)('expected location to not be a string', typeof location !== 'string'));
    var currentURL = location.getURL();
    (0, _object.set)(router, 'currentPath', path);
    (0, _object.set)(router, 'currentRouteName', currentRouteName);
    (0, _object.set)(router, 'currentURL', currentURL);
  }
  function didBeginTransition(transition, router) {
    var routerState = new _internals.RouterState(router, router._routerMicrolib, transition[_router_js.STATE_SYMBOL]);
    if (!router.currentState) {
      router.set('currentState', routerState);
    }
    router.set('targetState', routerState);
    transition.promise = transition.catch(error => {
      if (router._isErrorHandled(error)) {
        router._clearHandledError(error);
      } else {
        throw error;
      }
    }, 'Transition Error');
  }
  function forEachQueryParam(router, routeInfos, queryParams, callback) {
    var qpCache = router._queryParamsFor(routeInfos);
    for (var key in queryParams) {
      if (!Object.prototype.hasOwnProperty.call(queryParams, key)) {
        continue;
      }
      var value = queryParams[key];
      var qp = qpCache.map[key];
      callback(key, value, qp);
    }
  }
  function findLiveRoute(liveRoutes, name) {
    if (!liveRoutes) {
      return;
    }
    var stack = [liveRoutes];
    while (stack.length > 0) {
      var test = stack.shift();
      if (test.render.name === name) {
        return test;
      }
      var outlets = test.outlets;
      for (var outletName in outlets) {
        stack.push(outlets[outletName]);
      }
    }
    return;
  }
  function appendLiveRoute(liveRoutes, defaultParentState, renderOptions) {
    var ownState = {
      render: renderOptions,
      outlets: Object.create(null),
      wasUsed: false
    };
    var target;
    if (renderOptions.into) {
      target = findLiveRoute(liveRoutes, renderOptions.into);
    } else {
      target = defaultParentState;
    }
    if (target) {
      (0, _object.set)(target.outlets, renderOptions.outlet, ownState);
    } else {
      liveRoutes = ownState;
    }
    return {
      liveRoutes,
      ownState
    };
  }
  function representEmptyRoute(liveRoutes, defaultParentState, {
    routeName
  }) {
    // the route didn't render anything
    var alreadyAppended = findLiveRoute(liveRoutes, routeName);
    if (alreadyAppended) {
      // But some other route has already rendered our default
      // template, so that becomes the default target for any
      // children we may have.
      return alreadyAppended;
    } else {
      // Create an entry to represent our default template name,
      // just so other routes can target it and inherit its place
      // in the outlet hierarchy.
      defaultParentState.outlets['main'] = {
        render: {
          name: routeName,
          outlet: 'main'
        },
        outlets: {}
      };
      return defaultParentState;
    }
  }
  EmberRouter.reopen({
    didTransition: defaultDidTransition,
    willTransition: defaultWillTransition,
    rootURL: '/',
    location: 'hash',
    // FIXME: Does this need to be overrideable via extend?
    url: (0, _object.computed)(function () {
      var location = (0, _object.get)(this, 'location');
      if (typeof location === 'string') {
        return undefined;
      }
      return location.getURL();
    })
  });
  var _default = _exports.default = EmberRouter;
});
define("@ember/routing/transition", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
});
define("@ember/runloop/index", ["exports", "@ember/debug", "@ember/-internals/error-handling", "@ember/-internals/metal", "backburner"], function (_exports, _debug, _errorHandling, _metal, _backburner2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports._backburner = void 0;
  _exports._cancelTimers = _cancelTimers;
  _exports._getCurrentRunLoop = _getCurrentRunLoop;
  _exports._hasScheduledTimers = _hasScheduledTimers;
  _exports._rsvpErrorQueue = _exports._queues = void 0;
  _exports.begin = begin;
  _exports.bind = bind;
  _exports.cancel = cancel;
  _exports.debounce = debounce;
  _exports.end = end;
  _exports.join = join;
  _exports.later = later;
  _exports.next = next;
  _exports.once = once;
  _exports.run = run;
  _exports.schedule = schedule;
  _exports.scheduleOnce = scheduleOnce;
  _exports.throttle = throttle;
  var currentRunLoop = null;
  function _getCurrentRunLoop() {
    return currentRunLoop;
  }
  function onBegin(current) {
    currentRunLoop = current;
  }
  function onEnd(_current, next) {
    currentRunLoop = next;
    (0, _metal.flushAsyncObservers)();
  }
  function flush(queueName, next) {
    if (queueName === 'render' || queueName === _rsvpErrorQueue) {
      (0, _metal.flushAsyncObservers)();
    }
    next();
  }
  var _rsvpErrorQueue = _exports._rsvpErrorQueue = `${Math.random()}${Date.now()}`.replace('.', '');
  /**
    Array of named queues. This array determines the order in which queues
    are flushed at the end of the RunLoop. You can define your own queues by
    simply adding the queue name to this array. Normally you should not need
    to inspect or modify this property.
  
    @property queues
    @type Array
    @default ['actions', 'destroy']
    @private
  */
  var _queues = _exports._queues = ['actions',
  // used in router transitions to prevent unnecessary loading state entry
  // if all context promises resolve on the 'actions' queue first
  'routerTransitions', 'render', 'afterRender', 'destroy',
  // used to re-throw unhandled RSVP rejection errors specifically in this
  // position to avoid breaking anything rendered in the other sections
  _rsvpErrorQueue];
  var _backburner = _exports._backburner = new _backburner2.default(_queues, {
    defaultQueue: 'actions',
    onBegin,
    onEnd,
    onErrorTarget: _errorHandling.onErrorTarget,
    onErrorMethod: 'onerror',
    flush
  });
  function run(...args) {
    // @ts-expect-error TS doesn't like our spread args
    return _backburner.run(...args);
  }
  function join(methodOrTarget, methodOrArg, ...additionalArgs) {
    return _backburner.join(methodOrTarget, methodOrArg, ...additionalArgs);
  }
  function bind(...curried) {
    (true && !(function (methodOrTarget, methodOrArg) {
      // Applies the same logic as backburner parseArgs for detecting if a method
      // is actually being passed.
      var length = arguments.length;
      if (length === 0) {
        return false;
      } else if (length === 1) {
        return typeof methodOrTarget === 'function';
      } else {
        return typeof methodOrArg === 'function' ||
        // second argument is a function
        methodOrTarget !== null && typeof methodOrArg === 'string' && methodOrArg in methodOrTarget ||
        // second argument is the name of a method in first argument
        typeof methodOrTarget === 'function' //first argument is a function
        ;
      }
      // @ts-expect-error TS doesn't like our spread args
    }(...curried)) && (0, _debug.assert)('could not find a suitable method to bind', function (methodOrTarget, methodOrArg) {
      var length = arguments.length;
      if (length === 0) {
        return false;
      } else if (length === 1) {
        return typeof methodOrTarget === 'function';
      } else {
        return typeof methodOrArg === 'function' || methodOrTarget !== null && typeof methodOrArg === 'string' && methodOrArg in methodOrTarget || typeof methodOrTarget === 'function';
      }
    }(...curried))); // @ts-expect-error TS doesn't like our spread args
    return (...args) => join(...curried.concat(args));
  }
  /**
    Begins a new RunLoop. Any deferred actions invoked after the begin will
    be buffered until you invoke a matching call to `end()`. This is
    a lower-level way to use a RunLoop instead of using `run()`.
  
    ```javascript
    import { begin, end } from '@ember/runloop';
  
    begin();
    // code to be executed within a RunLoop
    end();
    ```
  
    @method begin
    @static
    @for @ember/runloop
    @return {void}
    @public
  */
  function begin() {
    _backburner.begin();
  }
  /**
    Ends a RunLoop. This must be called sometime after you call
    `begin()` to flush any deferred actions. This is a lower-level way
    to use a RunLoop instead of using `run()`.
  
    ```javascript
    import { begin, end } from '@ember/runloop';
  
    begin();
    // code to be executed within a RunLoop
    end();
    ```
  
    @method end
    @static
    @for @ember/runloop
    @return {void}
    @public
  */
  function end() {
    _backburner.end();
  }
  function schedule(...args) {
    // @ts-expect-error TS doesn't like the rest args here
    return _backburner.schedule(...args);
  }
  // Used by global test teardown
  function _hasScheduledTimers() {
    return _backburner.hasTimers();
  }
  // Used by global test teardown
  function _cancelTimers() {
    _backburner.cancelTimers();
  }
  function later(...args) {
    return _backburner.later(...args);
  }
  function once(...args) {
    // @ts-expect-error TS doesn't like the rest args here
    return _backburner.scheduleOnce('actions', ...args);
  }
  function scheduleOnce(...args) {
    // @ts-expect-error TS doesn't like the rest args here
    return _backburner.scheduleOnce(...args);
  }
  function next(...args) {
    return _backburner.later(...args, 1);
  }
  /**
    Cancels a scheduled item. Must be a value returned by `later()`,
    `once()`, `scheduleOnce()`, `next()`, `debounce()`, or
    `throttle()`.
  
    ```javascript
    import {
      next,
      cancel,
      later,
      scheduleOnce,
      once,
      throttle,
      debounce
    } from '@ember/runloop';
  
    let runNext = next(myContext, function() {
      // will not be executed
    });
  
    cancel(runNext);
  
    let runLater = later(myContext, function() {
      // will not be executed
    }, 500);
  
    cancel(runLater);
  
    let runScheduleOnce = scheduleOnce('afterRender', myContext, function() {
      // will not be executed
    });
  
    cancel(runScheduleOnce);
  
    let runOnce = once(myContext, function() {
      // will not be executed
    });
  
    cancel(runOnce);
  
    let throttle = throttle(myContext, function() {
      // will not be executed
    }, 1, false);
  
    cancel(throttle);
  
    let debounce = debounce(myContext, function() {
      // will not be executed
    }, 1);
  
    cancel(debounce);
  
    let debounceImmediate = debounce(myContext, function() {
      // will be executed since we passed in true (immediate)
    }, 100, true);
  
    // the 100ms delay until this method can be called again will be canceled
    cancel(debounceImmediate);
    ```
  
    @method cancel
    @static
    @for @ember/runloop
    @param {Object} timer Timer object to cancel
    @return {Boolean} true if canceled or false/undefined if it wasn't found
    @public
  */
  function cancel(timer) {
    return _backburner.cancel(timer);
  }
  function debounce(...args) {
    // @ts-expect-error TS doesn't like the rest args here
    return _backburner.debounce(...args);
  }
  function throttle(...args) {
    // @ts-expect-error TS doesn't like the rest args here
    return _backburner.throttle(...args);
  }
});
define("@ember/service/index", ["exports", "@ember/object/-internals", "@ember/-internals/metal"], function (_exports, _internals, _metal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.inject = inject;
  _exports.service = service;
  function inject(...args) {
    return (0, _metal.inject)('service', ...args);
  }
  function service(...args) {
    return (0, _metal.inject)('service', ...args);
  }
  /**
    @class Service
    @extends EmberObject
    @since 1.10.0
    @public
  */
  class Service extends _internals.FrameworkObject {}
  _exports.default = Service;
  Service.isServiceFactory = true;
});
define("@ember/string/index", ["exports", "@ember/string/lib/string_registry", "@ember/-internals/utils", "@ember/debug", "@ember/-internals/glimmer"], function (_exports, _string_registry, _utils, _debug, _glimmer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "_getStrings", {
    enumerable: true,
    get: function () {
      return _string_registry.getStrings;
    }
  });
  Object.defineProperty(_exports, "_setStrings", {
    enumerable: true,
    get: function () {
      return _string_registry.setStrings;
    }
  });
  _exports.camelize = camelize;
  _exports.capitalize = capitalize;
  _exports.classify = classify;
  _exports.dasherize = dasherize;
  _exports.decamelize = decamelize;
  _exports.htmlSafe = htmlSafe;
  _exports.isHTMLSafe = isHTMLSafe;
  _exports.underscore = underscore;
  _exports.w = w;
  /**
  This module is deprecated and should not be used.
  See [the deprecations guide](https://deprecations.emberjs.com/v4.x#toc_ember-string-from-ember-module)
  for more details.
  
  @module @ember/string
  */

  var STRING_DASHERIZE_REGEXP = /[ _]/g;
  var STRING_DASHERIZE_CACHE = new _utils.Cache(1000, key => decamelize(key).replace(STRING_DASHERIZE_REGEXP, '-'));
  var STRING_CAMELIZE_REGEXP_1 = /(-|_|\.|\s)+(.)?/g;
  var STRING_CAMELIZE_REGEXP_2 = /(^|\/)([A-Z])/g;
  var CAMELIZE_CACHE = new _utils.Cache(1000, key => key.replace(STRING_CAMELIZE_REGEXP_1, (_match, _separator, chr) => chr ? chr.toUpperCase() : '').replace(STRING_CAMELIZE_REGEXP_2, (match /*, separator, chr */) => match.toLowerCase()));
  var STRING_CLASSIFY_REGEXP_1 = /^(-|_)+(.)?/;
  var STRING_CLASSIFY_REGEXP_2 = /(.)(-|_|\.|\s)+(.)?/g;
  var STRING_CLASSIFY_REGEXP_3 = /(^|\/|\.)([a-z])/g;
  var CLASSIFY_CACHE = new _utils.Cache(1000, str => {
    var replace1 = (_match, _separator, chr) => chr ? `_${chr.toUpperCase()}` : '';
    var replace2 = (_match, initialChar, _separator, chr) => initialChar + (chr ? chr.toUpperCase() : '');
    var parts = str.split('/');
    for (var i = 0; i < parts.length; i++) {
      parts[i] = parts[i].replace(STRING_CLASSIFY_REGEXP_1, replace1).replace(STRING_CLASSIFY_REGEXP_2, replace2);
    }
    return parts.join('/').replace(STRING_CLASSIFY_REGEXP_3, (match /*, separator, chr */) => match.toUpperCase());
  });
  var STRING_UNDERSCORE_REGEXP_1 = /([a-z\d])([A-Z]+)/g;
  var STRING_UNDERSCORE_REGEXP_2 = /-|\s+/g;
  var UNDERSCORE_CACHE = new _utils.Cache(1000, str => str.replace(STRING_UNDERSCORE_REGEXP_1, '$1_$2').replace(STRING_UNDERSCORE_REGEXP_2, '_').toLowerCase());
  var STRING_CAPITALIZE_REGEXP = /(^|\/)([a-z\u00C0-\u024F])/g;
  var CAPITALIZE_CACHE = new _utils.Cache(1000, str => str.replace(STRING_CAPITALIZE_REGEXP, (match /*, separator, chr */) => match.toUpperCase()));
  var STRING_DECAMELIZE_REGEXP = /([a-z\d])([A-Z])/g;
  var DECAMELIZE_CACHE = new _utils.Cache(1000, str => str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase());
  /**
    Defines string helper methods including string formatting and localization.
  
    @class String
    @public
    @deprecated Add the package `@ember/string` to your project to use in place of this module.
  */
  /**
    Splits a string into separate units separated by spaces, eliminating any
    empty strings in the process.
  
    ```javascript
    import { w } from '@ember/string';
  
    w("alpha beta gamma").forEach(function(key) {
      console.log(key);
    });
  
    // > alpha
    // > beta
    // > gamma
    ```
  
    @method w
    @param {String} str The string to split
    @return {Array} array containing the split strings
    @public
    @deprecated Add `@ember/string` to your package.json
  */
  function w(str) {
    deprecateImportFromInternalString();
    return str.split(/\s+/);
  }
  /**
    Converts a camelized string into all lower case separated by underscores.
  
    ```javascript
    import { decamelize } from '@ember/string';
  
    decamelize('innerHTML');          // 'inner_html'
    decamelize('action_name');        // 'action_name'
    decamelize('css-class-name');     // 'css-class-name'
    decamelize('my favorite items');  // 'my favorite items'
    ```
  
    @method decamelize
    @param {String} str The string to decamelize.
    @return {String} the decamelized string.
    @public
    @deprecated Add `@ember/string` to your package.json
  */
  function decamelize(str) {
    deprecateImportFromInternalString();
    return DECAMELIZE_CACHE.get(str);
  }
  /**
    Replaces underscores, spaces, or camelCase with dashes.
  
    ```javascript
    import { dasherize } from '@ember/string';
  
    dasherize('innerHTML');                // 'inner-html'
    dasherize('action_name');              // 'action-name'
    dasherize('css-class-name');           // 'css-class-name'
    dasherize('my favorite items');        // 'my-favorite-items'
    dasherize('privateDocs/ownerInvoice';  // 'private-docs/owner-invoice'
    ```
  
    @method dasherize
    @param {String} str The string to dasherize.
    @return {String} the dasherized string.
    @public
    @deprecated Add `@ember/string` to your package.json
  */
  function dasherize(str) {
    deprecateImportFromInternalString();
    return STRING_DASHERIZE_CACHE.get(str);
  }
  /**
    Returns the lowerCamelCase form of a string.
  
    ```javascript
    import { camelize } from '@ember/string';
  
    camelize('innerHTML');                   // 'innerHTML'
    camelize('action_name');                 // 'actionName'
    camelize('css-class-name');              // 'cssClassName'
    camelize('my favorite items');           // 'myFavoriteItems'
    camelize('My Favorite Items');           // 'myFavoriteItems'
    camelize('private-docs/owner-invoice');  // 'privateDocs/ownerInvoice'
    ```
  
    @method camelize
    @param {String} str The string to camelize.
    @return {String} the camelized string.
    @public
    @deprecated Add `@ember/string` to your package.json
  */
  function camelize(str) {
    deprecateImportFromInternalString();
    return CAMELIZE_CACHE.get(str);
  }
  /**
    Returns the UpperCamelCase form of a string.
  
    ```javascript
    import { classify } from '@ember/string';
  
    classify('innerHTML');                   // 'InnerHTML'
    classify('action_name');                 // 'ActionName'
    classify('css-class-name');              // 'CssClassName'
    classify('my favorite items');           // 'MyFavoriteItems'
    classify('private-docs/owner-invoice');  // 'PrivateDocs/OwnerInvoice'
    ```
  
    @method classify
    @param {String} str the string to classify
    @return {String} the classified string
    @public
    @deprecated Add `@ember/string` to your package.json
  */
  function classify(str) {
    deprecateImportFromInternalString();
    return CLASSIFY_CACHE.get(str);
  }
  /**
    More general than decamelize. Returns the lower\_case\_and\_underscored
    form of a string.
  
    ```javascript
    import { underscore } from '@ember/string';
  
    underscore('innerHTML');                 // 'inner_html'
    underscore('action_name');               // 'action_name'
    underscore('css-class-name');            // 'css_class_name'
    underscore('my favorite items');         // 'my_favorite_items'
    underscore('privateDocs/ownerInvoice');  // 'private_docs/owner_invoice'
    ```
  
    @method underscore
    @param {String} str The string to underscore.
    @return {String} the underscored string.
    @public
    @deprecated Add `@ember/string` to your package.json
  */
  function underscore(str) {
    deprecateImportFromInternalString();
    return UNDERSCORE_CACHE.get(str);
  }
  /**
    Returns the Capitalized form of a string
  
    ```javascript
    import { capitalize } from '@ember/string';
  
    capitalize('innerHTML')                 // 'InnerHTML'
    capitalize('action_name')               // 'Action_name'
    capitalize('css-class-name')            // 'Css-class-name'
    capitalize('my favorite items')         // 'My favorite items'
    capitalize('privateDocs/ownerInvoice'); // 'PrivateDocs/ownerInvoice'
    ```
  
    @method capitalize
    @param {String} str The string to capitalize.
    @return {String} The capitalized string.
    @public
    @deprecated Add `@ember/string` to your package.json
  */
  function capitalize(str) {
    deprecateImportFromInternalString();
    return CAPITALIZE_CACHE.get(str);
  }
  function deprecateImportFromInternalString() {
    (true && !(false) && (0, _debug.deprecate)('Importing from `@ember/string` without having the `@ember/string` package in your project is deprecated. Please add `@ember/string` to your `package.json', false, {
      id: 'ember-string.add-package',
      for: 'ember-source',
      since: {
        available: '4.10',
        enabled: '4.10'
      },
      until: '5.0.0',
      url: 'https://deprecations.emberjs.com/v4.x/#toc_ember-string-add-package'
    }));
  }
  function deprecateImportFromString(name, message = `Importing ${name} from '@ember/string' is deprecated. Please import ${name} from '@ember/template' instead.`) {
    (true && !(false) && (0, _debug.deprecate)(message, false, {
      id: 'ember-string.htmlsafe-ishtmlsafe',
      for: 'ember-source',
      since: {
        available: '4.10',
        enabled: '4.10'
      },
      until: '5.0.0',
      url: 'https://deprecations.emberjs.com/v3.x/#toc_ember-string-htmlsafe-ishtmlsafe'
    }));
  }
  function htmlSafe(str) {
    deprecateImportFromString('htmlSafe');
    return (0, _glimmer.htmlSafe)(str);
  }
  function isHTMLSafe(str) {
    deprecateImportFromString('isHTMLSafe');
    return (0, _glimmer.isHTMLSafe)(str);
  }
});
define("@ember/string/lib/string_registry", ["exports", "@ember/debug"], function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getStrings = getStrings;
  _exports.setStrings = setStrings;
  // STATE within a module is frowned upon, this exists
  // to support Ember.STRINGS but shield ember internals from this legacy global
  // API.
  var STRINGS = {};
  function setStrings(strings) {
    deprecateEmberStrings();
    STRINGS = strings;
  }
  function getStrings() {
    deprecateEmberStrings();
    return STRINGS;
  }
  function deprecateEmberStrings() {
    (true && !(false) && (0, _debug.deprecate)('Ember.STRINGS is deprecated. It is no longer used by Ember.', false, {
      id: 'ember-strings',
      for: 'ember-source',
      since: {
        available: '4.10',
        enabled: '4.10.'
      },
      until: '5.0.0'
    }));
  }
});
define("@ember/template-compilation/index", ["exports", "ember-template-compiler"], function (_exports, _emberTemplateCompiler) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "compileTemplate", {
    enumerable: true,
    get: function () {
      return _emberTemplateCompiler.compile;
    }
  });
  _exports.precompileTemplate = void 0;
  var precompileTemplate;
  if (true /* DEBUG */) {
    _exports.precompileTemplate = precompileTemplate = () => {
      throw new Error('Attempted to call `precompileTemplate` at runtime, but this API is meant to be used at compile time. You should use `compileTemplate` instead.');
    };
  }
});
define("@ember/template-factory/index", ["exports", "@glimmer/opcode-compiler"], function (_exports, _opcodeCompiler) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "createTemplateFactory", {
    enumerable: true,
    get: function () {
      return _opcodeCompiler.templateFactory;
    }
  });
});
define("@ember/template/index", ["exports", "@ember/-internals/glimmer"], function (_exports, _glimmer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "htmlSafe", {
    enumerable: true,
    get: function () {
      return _glimmer.htmlSafe;
    }
  });
  Object.defineProperty(_exports, "isHTMLSafe", {
    enumerable: true,
    get: function () {
      return _glimmer.isHTMLSafe;
    }
  });
});
define("@ember/test/adapter", ["exports", "ember-testing"], function (_exports, _emberTesting) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = _emberTesting.Adapter;
});
define("@ember/test/index", ["exports", "require"], function (_exports, _require) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.unregisterWaiter = _exports.unregisterHelper = _exports.registerWaiter = _exports.registerHelper = _exports.registerAsyncHelper = void 0;
  var registerAsyncHelper;
  var registerHelper;
  var registerWaiter;
  var unregisterHelper;
  var unregisterWaiter;
  if ((0, _require.has)('ember-testing')) {
    var {
      Test
    } = (0, _require.default)("ember-testing");
    _exports.registerAsyncHelper = registerAsyncHelper = Test.registerAsyncHelper;
    _exports.registerHelper = registerHelper = Test.registerHelper;
    _exports.registerWaiter = registerWaiter = Test.registerWaiter;
    _exports.unregisterHelper = unregisterHelper = Test.unregisterHelper;
    _exports.unregisterWaiter = unregisterWaiter = Test.unregisterWaiter;
  } else {
    var testingNotAvailableMessage = () => {
      throw new Error('Attempted to use test utilities, but `ember-testing` was not included');
    };
    _exports.registerAsyncHelper = registerAsyncHelper = testingNotAvailableMessage;
    _exports.registerHelper = registerHelper = testingNotAvailableMessage;
    _exports.registerWaiter = registerWaiter = testingNotAvailableMessage;
    _exports.unregisterHelper = unregisterHelper = testingNotAvailableMessage;
    _exports.unregisterWaiter = unregisterWaiter = testingNotAvailableMessage;
  }
});
define("@ember/utils/index", ["exports", "@ember/utils/lib/is_none", "@ember/utils/lib/is_blank", "@ember/utils/lib/is_empty", "@ember/utils/lib/is_present", "@ember/utils/lib/is-equal", "@ember/utils/lib/type-of", "@ember/utils/lib/compare"], function (_exports, _is_none, _is_blank, _is_empty, _is_present, _isEqual, _typeOf, _compare) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "compare", {
    enumerable: true,
    get: function () {
      return _compare.default;
    }
  });
  Object.defineProperty(_exports, "isBlank", {
    enumerable: true,
    get: function () {
      return _is_blank.default;
    }
  });
  Object.defineProperty(_exports, "isEmpty", {
    enumerable: true,
    get: function () {
      return _is_empty.default;
    }
  });
  Object.defineProperty(_exports, "isEqual", {
    enumerable: true,
    get: function () {
      return _isEqual.default;
    }
  });
  Object.defineProperty(_exports, "isNone", {
    enumerable: true,
    get: function () {
      return _is_none.default;
    }
  });
  Object.defineProperty(_exports, "isPresent", {
    enumerable: true,
    get: function () {
      return _is_present.default;
    }
  });
  Object.defineProperty(_exports, "typeOf", {
    enumerable: true,
    get: function () {
      return _typeOf.default;
    }
  });
});
define("@ember/utils/lib/compare", ["exports", "@ember/utils/lib/type-of", "@ember/-internals/runtime", "@ember/debug"], function (_exports, _typeOf, _runtime, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = compare;
  var TYPE_ORDER = {
    undefined: 0,
    null: 1,
    boolean: 2,
    number: 3,
    string: 4,
    array: 5,
    object: 6,
    instance: 7,
    function: 8,
    class: 9,
    date: 10,
    regexp: 11,
    filelist: 12,
    error: 13
  };
  //
  // the spaceship operator
  //
  //                      `. ___
  //                     __,' __`.                _..----....____
  //         __...--.'``;.   ,.   ;``--..__     .'    ,-._    _.-'
  //   _..-''-------'   `'   `'   `'     O ``-''._   (,;') _,'
  // ,'________________                          \`-._`-','
  //  `._              ```````````------...___   '-.._'-:
  //     ```--.._      ,.                     ````--...__\-.
  //             `.--. `-` "INFINITY IS LESS     ____    |  |`
  //               `. `.   THAN BEYOND"        ,'`````.  ;  ;`
  //                 `._`.        __________   `.      \'__/`
  //                    `-:._____/______/___/____`.     \  `
  //                                |       `._    `.    \
  //                                `._________`-.   `.   `.___
  //                                              SSt  `------'`
  function spaceship(a, b) {
    // SAFETY: `Math.sign` always returns `-1` for negative, `0` for zero, and `1`
    // for positive numbers. (The extra precision is useful for the way we use
    // this in the context of `compare`.)
    return Math.sign(a - b);
  }
  /**
   @module @ember/utils
  */
  /**
   Compares two javascript values and returns:
  
    - -1 if the first is smaller than the second,
    - 0 if both are equal,
    - 1 if the first is greater than the second.
  
    ```javascript
    import { compare } from '@ember/utils';
  
    compare('hello', 'hello');  // 0
    compare('abc', 'dfg');      // -1
    compare(2, 1);              // 1
    ```
  
   If the types of the two objects are different precedence occurs in the
   following order, with types earlier in the list considered `<` types
   later in the list:
  
    - undefined
    - null
    - boolean
    - number
    - string
    - array
    - object
    - instance
    - function
    - class
    - date
  
    ```javascript
    import { compare } from '@ember/utils';
  
    compare('hello', 50);       // 1
    compare(50, 'hello');       // -1
    ```
  
   @method compare
   @for @ember/utils
   @static
   @param {Object} v First value to compare
   @param {Object} w Second value to compare
   @return {Number} -1 if v < w, 0 if v = w and 1 if v > w.
   @public
  */
  function compare(v, w) {
    if (v === w) {
      return 0;
    }
    var type1 = (0, _typeOf.default)(v);
    var type2 = (0, _typeOf.default)(w);
    if (type1 === 'instance' && isComparable(v) && v.constructor.compare) {
      return v.constructor.compare(v, w);
    }
    if (type2 === 'instance' && isComparable(w) && w.constructor.compare) {
      // SAFETY: Multiplying by a negative just changes the sign
      return w.constructor.compare(w, v) * -1;
    }
    var res = spaceship(TYPE_ORDER[type1], TYPE_ORDER[type2]);
    if (res !== 0) {
      return res;
    }
    // types are equal - so we have to check values now
    switch (type1) {
      case 'boolean':
        (true && !(typeof v === 'boolean' && typeof w === 'boolean') && (0, _debug.assert)('both are boolean', typeof v === 'boolean' && typeof w === 'boolean'));
        return spaceship(Number(v), Number(w));
      case 'number':
        (true && !(typeof v === 'number' && typeof w === 'number') && (0, _debug.assert)('both are numbers', typeof v === 'number' && typeof w === 'number'));
        return spaceship(v, w);
      case 'string':
        (true && !(typeof v === 'string' && typeof w === 'string') && (0, _debug.assert)('both are strings', typeof v === 'string' && typeof w === 'string'));
        return spaceship(v.localeCompare(w), 0);
      case 'array':
        {
          (true && !(Array.isArray(v) && Array.isArray(w)) && (0, _debug.assert)('both are arrays', Array.isArray(v) && Array.isArray(w)));
          var vLen = v.length;
          var wLen = w.length;
          var len = Math.min(vLen, wLen);
          for (var i = 0; i < len; i++) {
            var r = compare(v[i], w[i]);
            if (r !== 0) {
              return r;
            }
          }
          // all elements are equal now
          // shorter array should be ordered first
          return spaceship(vLen, wLen);
        }
      case 'instance':
        if (isComparable(v) && v.compare) {
          return v.compare(v, w);
        }
        return 0;
      case 'date':
        (true && !(v instanceof Date && w instanceof Date) && (0, _debug.assert)('both are dates', v instanceof Date && w instanceof Date));
        return spaceship(v.getTime(), w.getTime());
      default:
        return 0;
    }
  }
  function isComparable(value) {
    return _runtime.Comparable.detect(value);
  }
});
define("@ember/utils/lib/is-equal", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isEqual;
  /**
   @module @ember/utils
  */
  /**
    Compares two objects, returning true if they are equal.
  
    ```javascript
    import { isEqual } from '@ember/utils';
  
    isEqual('hello', 'hello');                   // true
    isEqual(1, 2);                               // false
    ```
  
    `isEqual` is a more specific comparison than a triple equal comparison.
    It will call the `isEqual` instance method on the objects being
    compared, allowing finer control over when objects should be considered
    equal to each other.
  
    ```javascript
    import { isEqual } from '@ember/utils';
    import EmberObject from '@ember/object';
  
    let Person = EmberObject.extend({
      isEqual(other) { return this.ssn == other.ssn; }
    });
  
    let personA = Person.create({name: 'Muhammad Ali', ssn: '123-45-6789'});
    let personB = Person.create({name: 'Cassius Clay', ssn: '123-45-6789'});
  
    isEqual(personA, personB); // true
    ```
  
    Due to the expense of array comparisons, collections will never be equal to
    each other even if each of their items are equal to each other.
  
    ```javascript
    import { isEqual } from '@ember/utils';
  
    isEqual([4, 2], [4, 2]);                     // false
    ```
  
    @method isEqual
    @for @ember/utils
    @static
    @param {Object} a first object to compare
    @param {Object} b second object to compare
    @return {Boolean}
    @public
  */
  function isEqual(a, b) {
    if (a && typeof a.isEqual === 'function') {
      return a.isEqual(b);
    }
    if (a instanceof Date && b instanceof Date) {
      return a.getTime() === b.getTime();
    }
    return a === b;
  }
});
define("@ember/utils/lib/is_blank", ["exports", "@ember/utils/lib/is_empty"], function (_exports, _is_empty) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isBlank;
  /**
   @module @ember/utils
  */
  /**
    A value is blank if it is empty or a whitespace string.
  
    ```javascript
    import { isBlank } from '@ember/utils';
  
    isBlank(null);            // true
    isBlank(undefined);       // true
    isBlank('');              // true
    isBlank([]);              // true
    isBlank('\n\t');          // true
    isBlank('  ');            // true
    isBlank({});              // false
    isBlank('\n\t Hello');    // false
    isBlank('Hello world');   // false
    isBlank([1,2,3]);         // false
    ```
  
    @method isBlank
    @static
    @for @ember/utils
    @param {Object} obj Value to test
    @return {Boolean}
    @since 1.5.0
    @public
  */
  function isBlank(obj) {
    return (0, _is_empty.default)(obj) || typeof obj === 'string' && /\S/.test(obj) === false;
  }
});
define("@ember/utils/lib/is_empty", ["exports", "@ember/object", "@ember/-internals/metal"], function (_exports, _object, _metal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isEmpty;
  /**
   @module @ember/utils
  */
  /**
    Verifies that a value is `null` or `undefined`, an empty string, or an empty
    array.
  
    Constrains the rules on `isNone` by returning true for empty strings and
    empty arrays.
  
    If the value is an object with a `size` property of type number, it is used
    to check emptiness.
  
    ```javascript
    isEmpty(null);             // true
    isEmpty(undefined);        // true
    isEmpty('');               // true
    isEmpty([]);               // true
    isEmpty({ size: 0});       // true
    isEmpty({});               // false
    isEmpty('Adam Hawkins');   // false
    isEmpty([0,1,2]);          // false
    isEmpty('\n\t');           // false
    isEmpty('  ');             // false
    isEmpty({ size: 1 })       // false
    isEmpty({ size: () => 0 }) // false
    ```
  
    @method isEmpty
    @static
    @for @ember/utils
    @param {Object} obj Value to test
    @return {Boolean}
    @public
  */
  function isEmpty(obj) {
    if (obj === null || obj === undefined) {
      return true;
    }
    if (!(0, _metal.hasUnknownProperty)(obj) && typeof obj.size === 'number') {
      return !obj.size;
    }
    if (typeof obj === 'object') {
      var size = (0, _object.get)(obj, 'size');
      if (typeof size === 'number') {
        return !size;
      }
      var length = (0, _object.get)(obj, 'length');
      if (typeof length === 'number') {
        return !length;
      }
    }
    if (typeof obj.length === 'number' && typeof obj !== 'function') {
      return !obj.length;
    }
    return false;
  }
});
define("@ember/utils/lib/is_none", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isNone;
  /**
   @module @ember/utils
  */
  /**
    Returns true if the passed value is null or undefined. This avoids errors
    from JSLint complaining about use of ==, which can be technically
    confusing.
  
    ```javascript
    isNone(null);          // true
    isNone(undefined);     // true
    isNone('');            // false
    isNone([]);            // false
    isNone(function() {}); // false
    ```
  
    @method isNone
    @static
    @for @ember/utils
    @param {Object} obj Value to test
    @return {Boolean}
    @public
  */
  function isNone(obj) {
    return obj === null || obj === undefined;
  }
});
define("@ember/utils/lib/is_present", ["exports", "@ember/utils/lib/is_blank"], function (_exports, _is_blank) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isPresent;
  /**
   @module @ember/utils
  */
  /**
    A value is present if it not `isBlank`.
  
    ```javascript
    isPresent(null);            // false
    isPresent(undefined);       // false
    isPresent('');              // false
    isPresent('  ');            // false
    isPresent('\n\t');          // false
    isPresent([]);              // false
    isPresent({ length: 0 });   // false
    isPresent(false);           // true
    isPresent(true);            // true
    isPresent('string');        // true
    isPresent(0);               // true
    isPresent(function() {});   // true
    isPresent({});              // true
    isPresent('\n\t Hello');    // true
    isPresent([1, 2, 3]);       // true
    ```
  
    @method isPresent
    @static
    @for @ember/utils
    @param {Object} obj Value to test
    @return {Boolean}
    @since 1.8.0
    @public
  */
  function isPresent(obj) {
    return !(0, _is_blank.default)(obj);
  }
});
define("@ember/utils/lib/type-of", ["exports", "@ember/object/core"], function (_exports, _core) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = typeOf;
  // ........................................
  // TYPING & ARRAY MESSAGING
  //
  var TYPE_MAP = {
    '[object Boolean]': 'boolean',
    '[object Number]': 'number',
    '[object String]': 'string',
    '[object Function]': 'function',
    '[object AsyncFunction]': 'function',
    '[object Array]': 'array',
    '[object Date]': 'date',
    '[object RegExp]': 'regexp',
    '[object Object]': 'object',
    '[object FileList]': 'filelist'
  };
  var {
    toString
  } = Object.prototype;
  /**
   @module @ember/utils
  */
  /**
    Returns a consistent type for the passed object.
  
    Use this instead of the built-in `typeof` to get the type of an item.
    It will return the same result across all browsers and includes a bit
    more detail. Here is what will be returned:
  
        | Return Value  | Meaning                                              |
        |---------------|------------------------------------------------------|
        | 'string'      | String primitive or String object.                   |
        | 'number'      | Number primitive or Number object.                   |
        | 'boolean'     | Boolean primitive or Boolean object.                 |
        | 'null'        | Null value                                           |
        | 'undefined'   | Undefined value                                      |
        | 'function'    | A function                                           |
        | 'array'       | An instance of Array                                 |
        | 'regexp'      | An instance of RegExp                                |
        | 'date'        | An instance of Date                                  |
        | 'filelist'    | An instance of FileList                              |
        | 'class'       | An Ember class (created using EmberObject.extend())  |
        | 'instance'    | An Ember object instance                             |
        | 'error'       | An instance of the Error object                      |
        | 'object'      | A JavaScript object not inheriting from EmberObject  |
  
    Examples:
  
    ```javascript
    import { A } from '@ember/array';
    import { typeOf } from '@ember/utils';
    import EmberObject from '@ember/object';
  
    typeOf();                       // 'undefined'
    typeOf(null);                   // 'null'
    typeOf(undefined);              // 'undefined'
    typeOf('michael');              // 'string'
    typeOf(new String('michael'));  // 'string'
    typeOf(101);                    // 'number'
    typeOf(new Number(101));        // 'number'
    typeOf(true);                   // 'boolean'
    typeOf(new Boolean(true));      // 'boolean'
    typeOf(A);                      // 'function'
    typeOf(A());                    // 'array'
    typeOf([1, 2, 90]);             // 'array'
    typeOf(/abc/);                  // 'regexp'
    typeOf(new Date());             // 'date'
    typeOf(event.target.files);     // 'filelist'
    typeOf(EmberObject.extend());   // 'class'
    typeOf(EmberObject.create());   // 'instance'
    typeOf(new Error('teamocil'));  // 'error'
  
    // 'normal' JavaScript object
    typeOf({ a: 'b' });             // 'object'
    ```
  
    @method typeOf
    @for @ember/utils
    @param item the item to check
    @return {String} the type
    @public
    @static
  */
  function typeOf(item) {
    if (item === null) {
      return 'null';
    }
    if (item === undefined) {
      return 'undefined';
    }
    var ret = TYPE_MAP[toString.call(item)] || 'object';
    if (ret === 'function') {
      if (_core.default.detect(item)) {
        ret = 'class';
      }
    } else if (ret === 'object') {
      if (item instanceof Error) {
        ret = 'error';
      } else if (item instanceof _core.default) {
        ret = 'instance';
      } else if (item instanceof Date) {
        ret = 'date';
      }
    }
    return ret;
  }
});
define("@ember/version/index", ["exports", "ember/version"], function (_exports, _version) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "VERSION", {
    enumerable: true,
    get: function () {
      return _version.default;
    }
  });
});
define("@glimmer/destroyable", ["exports", "@glimmer/util", "@glimmer/global-context"], function (_exports, _util, _globalContext) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports._hasDestroyableChildren = _hasDestroyableChildren;
  _exports.assertDestroyablesDestroyed = void 0;
  _exports.associateDestroyableChild = associateDestroyableChild;
  _exports.destroy = destroy;
  _exports.destroyChildren = destroyChildren;
  _exports.enableDestroyableTracking = void 0;
  _exports.isDestroyed = isDestroyed;
  _exports.isDestroying = isDestroying;
  _exports.registerDestructor = registerDestructor;
  _exports.unregisterDestructor = unregisterDestructor;
  var DESTROYABLE_META = new WeakMap();
  function push(collection, newItem) {
    if (collection === null) {
      return newItem;
    } else if (Array.isArray(collection)) {
      collection.push(newItem);
      return collection;
    } else {
      return [collection, newItem];
    }
  }
  function iterate(collection, fn) {
    if (Array.isArray(collection)) {
      for (var i = 0; i < collection.length; i++) {
        fn(collection[i]);
      }
    } else if (collection !== null) {
      fn(collection);
    }
  }
  function remove(collection, item, message) {
    if (true /* DEBUG */) {
      var collectionIsItem = collection === item;
      var collectionContainsItem = Array.isArray(collection) && collection.indexOf(item) !== -1;
      if (!collectionIsItem && !collectionContainsItem) {
        throw new Error(String(message));
      }
    }
    if (Array.isArray(collection) && collection.length > 1) {
      var index = collection.indexOf(item);
      collection.splice(index, 1);
      return collection;
    } else {
      return null;
    }
  }
  function getDestroyableMeta(destroyable) {
    var meta = DESTROYABLE_META.get(destroyable);
    if (meta === undefined) {
      meta = {
        parents: null,
        children: null,
        eagerDestructors: null,
        destructors: null,
        state: 0
        /* Live */
      };
      if (true /* DEBUG */) {
        meta.source = destroyable;
      }
      DESTROYABLE_META.set(destroyable, meta);
    }
    return meta;
  }
  function associateDestroyableChild(parent, child) {
    if (true /* DEBUG */ && isDestroying(parent)) {
      throw new Error('Attempted to associate a destroyable child with an object that is already destroying or destroyed');
    }
    var parentMeta = getDestroyableMeta(parent);
    var childMeta = getDestroyableMeta(child);
    parentMeta.children = push(parentMeta.children, child);
    childMeta.parents = push(childMeta.parents, parent);
    return child;
  }
  function registerDestructor(destroyable, destructor, eager = false) {
    if (true /* DEBUG */ && isDestroying(destroyable)) {
      throw new Error('Attempted to register a destructor with an object that is already destroying or destroyed');
    }
    var meta = getDestroyableMeta(destroyable);
    var destructorsKey = eager === true ? 'eagerDestructors' : 'destructors';
    meta[destructorsKey] = push(meta[destructorsKey], destructor);
    return destructor;
  }
  function unregisterDestructor(destroyable, destructor, eager = false) {
    if (true /* DEBUG */ && isDestroying(destroyable)) {
      throw new Error('Attempted to unregister a destructor with an object that is already destroying or destroyed');
    }
    var meta = getDestroyableMeta(destroyable);
    var destructorsKey = eager === true ? 'eagerDestructors' : 'destructors';
    meta[destructorsKey] = remove(meta[destructorsKey], destructor, true /* DEBUG */ && 'attempted to remove a destructor that was not registered with the destroyable');
  } ////////////

  function destroy(destroyable) {
    var meta = getDestroyableMeta(destroyable);
    if (meta.state >= 1
    /* Destroying */) return;
    var {
      parents,
      children,
      eagerDestructors,
      destructors
    } = meta;
    meta.state = 1
    /* Destroying */;
    iterate(children, destroy);
    iterate(eagerDestructors, destructor => destructor(destroyable));
    iterate(destructors, destructor => (0, _globalContext.scheduleDestroy)(destroyable, destructor));
    (0, _globalContext.scheduleDestroyed)(() => {
      iterate(parents, parent => removeChildFromParent(destroyable, parent));
      meta.state = 2
      /* Destroyed */;
    });
  }
  function removeChildFromParent(child, parent) {
    var parentMeta = getDestroyableMeta(parent);
    if (parentMeta.state === 0
    /* Live */) {
      parentMeta.children = remove(parentMeta.children, child, true /* DEBUG */ && "attempted to remove child from parent, but the parent's children did not contain the child. This is likely a bug with destructors.");
    }
  }
  function destroyChildren(destroyable) {
    var {
      children
    } = getDestroyableMeta(destroyable);
    iterate(children, destroy);
  }
  function _hasDestroyableChildren(destroyable) {
    var meta = DESTROYABLE_META.get(destroyable);
    return meta === undefined ? false : meta.children !== null;
  }
  function isDestroying(destroyable) {
    var meta = DESTROYABLE_META.get(destroyable);
    return meta === undefined ? false : meta.state >= 1
    /* Destroying */;
  }
  function isDestroyed(destroyable) {
    var meta = DESTROYABLE_META.get(destroyable);
    return meta === undefined ? false : meta.state >= 2
    /* Destroyed */;
  } ////////////

  var enableDestroyableTracking;
  var assertDestroyablesDestroyed;
  if (true /* DEBUG */) {
    var isTesting = false;
    _exports.enableDestroyableTracking = enableDestroyableTracking = () => {
      if (isTesting) {
        // Reset destroyable meta just in case, before throwing the error
        DESTROYABLE_META = new WeakMap();
        throw new Error('Attempted to start destroyable testing, but you did not end the previous destroyable test. Did you forget to call `assertDestroyablesDestroyed()`');
      }
      isTesting = true;
      DESTROYABLE_META = new Map();
    };
    _exports.assertDestroyablesDestroyed = assertDestroyablesDestroyed = () => {
      if (!isTesting) {
        throw new Error('Attempted to assert destroyables destroyed, but you did not start a destroyable test. Did you forget to call `enableDestroyableTracking()`');
      }
      isTesting = false;
      var map = DESTROYABLE_META;
      DESTROYABLE_META = new WeakMap();
      var undestroyed = [];
      map.forEach(meta => {
        if (meta.state !== 2
        /* Destroyed */) {
          undestroyed.push(meta.source);
        }
      });
      if (undestroyed.length > 0) {
        var objectsToString = undestroyed.map(_util.debugToString).join('\n    ');
        var error = new Error(`Some destroyables were not destroyed during this test:\n    ${objectsToString}`);
        error.destroyables = undestroyed;
        throw error;
      }
    };
  }
});
define("@glimmer/encoder", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.InstructionEncoderImpl = void 0;
  class InstructionEncoderImpl {
    constructor(buffer) {
      this.buffer = buffer;
      this.size = 0;
    }
    encode(type, machine) {
      if (type > 255
      /* TYPE_SIZE */) {
        throw new Error(`Opcode type over 8-bits. Got ${type}.`);
      }
      var first = type | machine | arguments.length - 2 << 8
      /* ARG_SHIFT */;
      this.buffer.push(first);
      for (var i = 2; i < arguments.length; i++) {
        var op = arguments[i];
        if (true /* DEBUG */ && typeof op === 'number' && op > 2147483647
        /* MAX_SIZE */) {
          throw new Error(`Operand over 32-bits. Got ${op}.`);
        }
        this.buffer.push(op);
      }
      this.size = this.buffer.length;
    }
    patch(position, target) {
      if (this.buffer[position + 1] === -1) {
        this.buffer[position + 1] = target;
      } else {
        throw new Error('Trying to patch operand in populated slot instead of a reserved slot.');
      }
    }
  }
  _exports.InstructionEncoderImpl = InstructionEncoderImpl;
});
define("@glimmer/env", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.DEBUG = _exports.CI = void 0;
  var DEBUG = _exports.DEBUG = false;
  var CI = _exports.CI = false;
});
define("@glimmer/global-context", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.warnIfStyleNotTrusted = _exports.toIterator = _exports.toBool = _exports.testOverrideGlobalContext = _exports.setProp = _exports.setPath = _exports.scheduleRevalidate = _exports.scheduleDestroyed = _exports.scheduleDestroy = _exports.getProp = _exports.getPath = _exports.deprecate = _exports.default = _exports.assertGlobalContextWasSet = _exports.assert = _exports.FEATURE_DEFAULT_HELPER_MANAGER = void 0;
  /**
   * This package contains global context functions for Glimmer. These functions
   * are set by the embedding environment and must be set before initial render.
   *
   * These functions should meet the following criteria:
   *
   * - Must be provided by the embedder, due to having framework specific
   *   behaviors (e.g. interop with classic Ember behaviors that should not be
   *   upstreamed) or to being out of scope for the VM (e.g. scheduling a
   *   revalidation)
   * - Never differ between render roots
   * - Never change over time
   *
   */

  var FEATURE_DEFAULT_HELPER_MANAGER = _exports.FEATURE_DEFAULT_HELPER_MANAGER = true; //////////

  /**
   * Schedules a VM revalidation.
   *
   * Note: this has a default value so that tags can warm themselves when first loaded.
   */

  var scheduleRevalidate = () => {};
  /**
   * Schedules a destructor to run
   *
   * @param destroyable The destroyable being destroyed
   * @param destructor The destructor being scheduled
   */
  _exports.scheduleRevalidate = scheduleRevalidate;
  var scheduleDestroy;
  /**
   * Finalizes destruction
   *
   * @param finalizer finalizer function
   */

  var scheduleDestroyed;
  /**
   * Hook to provide iterators for `{{each}}` loops
   *
   * @param value The value to create an iterator for
   */

  var toIterator;
  /**
   * Hook to specify truthiness within Glimmer templates
   *
   * @param value The value to convert to a boolean
   */

  var toBool;
  /**
   * Hook for specifying how Glimmer should access properties in cases where it
   * needs to. For instance, accessing an object's values in templates.
   *
   * @param obj The object provided to get a value from
   * @param path The path to get the value from
   */

  var getProp;
  /**
   * Hook for specifying how Glimmer should update props in cases where it needs
   * to. For instance, when updating a template reference (e.g. 2-way-binding)
   *
   * @param obj The object provided to get a value from
   * @param prop The prop to set the value at
   * @param value The value to set the value to
   */

  var setProp;
  /**
   * Hook for specifying how Glimmer should access paths in cases where it needs
   * to. For instance, the `key` value of `{{each}}` loops.
   *
   * @param obj The object provided to get a value from
   * @param path The path to get the value from
   */

  var getPath;
  /**
   * Hook for specifying how Glimmer should update paths in cases where it needs
   * to. For instance, when updating a template reference (e.g. 2-way-binding)
   *
   * @param obj The object provided to get a value from
   * @param path The path to get the value from
   */

  var setPath;
  /**
   * Hook to warn if a style binding string or value was not marked as trusted
   * (e.g. HTMLSafe)
   */

  var warnIfStyleNotTrusted;
  /**
   * Hook to customize assertion messages in the VM. Usages can be stripped out
   * by using the @glimmer/vm-babel-plugins package.
   */

  var assert;
  /**
   * Hook to customize deprecation messages in the VM. Usages can be stripped out
   * by using the @glimmer/vm-babel-plugins package.
   */

  var deprecate;
  var globalContextWasSet = false;
  function setGlobalContext(context) {
    var _a;
    if (true /* DEBUG */) {
      if (globalContextWasSet) {
        throw new Error('Attempted to set the global context twice. This should only be set once.');
      }
      globalContextWasSet = true;
    }
    _exports.scheduleRevalidate = scheduleRevalidate = context.scheduleRevalidate;
    _exports.scheduleDestroy = scheduleDestroy = context.scheduleDestroy;
    _exports.scheduleDestroyed = scheduleDestroyed = context.scheduleDestroyed;
    _exports.toIterator = toIterator = context.toIterator;
    _exports.toBool = toBool = context.toBool;
    _exports.getProp = getProp = context.getProp;
    _exports.setProp = setProp = context.setProp;
    _exports.getPath = getPath = context.getPath;
    _exports.setPath = setPath = context.setPath;
    _exports.warnIfStyleNotTrusted = warnIfStyleNotTrusted = context.warnIfStyleNotTrusted;
    _exports.assert = assert = context.assert;
    _exports.deprecate = deprecate = context.deprecate;
    if (typeof ((_a = context.FEATURES) === null || _a === void 0 ? void 0 : _a.DEFAULT_HELPER_MANAGER) === 'boolean') {
      _exports.FEATURE_DEFAULT_HELPER_MANAGER = FEATURE_DEFAULT_HELPER_MANAGER = context.FEATURES.DEFAULT_HELPER_MANAGER;
    }
  }
  var assertGlobalContextWasSet;
  var testOverrideGlobalContext;
  if (true /* DEBUG */) {
    _exports.assertGlobalContextWasSet = assertGlobalContextWasSet = () => {
      if (globalContextWasSet === false) {
        throw new Error('The global context for Glimmer VM was not set. You must set these global context functions to let Glimmer VM know how to accomplish certain operations. You can do this by importing `setGlobalContext` from `@glimmer/global-context`');
      }
    };
    _exports.testOverrideGlobalContext = testOverrideGlobalContext = context => {
      var originalGlobalContext = globalContextWasSet ? {
        scheduleRevalidate,
        scheduleDestroy,
        scheduleDestroyed,
        toIterator,
        toBool,
        getProp,
        setProp,
        getPath,
        setPath,
        warnIfStyleNotTrusted,
        assert,
        deprecate
      } : null;
      if (context === null) {
        globalContextWasSet = false;
      } else {
        globalContextWasSet = true;
      } // We use `undefined as any` here to unset the values when resetting the
      // context at the end of a test.

      _exports.scheduleRevalidate = scheduleRevalidate = (context === null || context === void 0 ? void 0 : context.scheduleRevalidate) || undefined;
      _exports.scheduleDestroy = scheduleDestroy = (context === null || context === void 0 ? void 0 : context.scheduleDestroy) || undefined;
      _exports.scheduleDestroyed = scheduleDestroyed = (context === null || context === void 0 ? void 0 : context.scheduleDestroyed) || undefined;
      _exports.toIterator = toIterator = (context === null || context === void 0 ? void 0 : context.toIterator) || undefined;
      _exports.toBool = toBool = (context === null || context === void 0 ? void 0 : context.toBool) || undefined;
      _exports.getProp = getProp = (context === null || context === void 0 ? void 0 : context.getProp) || undefined;
      _exports.setProp = setProp = (context === null || context === void 0 ? void 0 : context.setProp) || undefined;
      _exports.getPath = getPath = (context === null || context === void 0 ? void 0 : context.getPath) || undefined;
      _exports.setPath = setPath = (context === null || context === void 0 ? void 0 : context.setPath) || undefined;
      _exports.warnIfStyleNotTrusted = warnIfStyleNotTrusted = (context === null || context === void 0 ? void 0 : context.warnIfStyleNotTrusted) || undefined;
      _exports.assert = assert = (context === null || context === void 0 ? void 0 : context.assert) || undefined;
      _exports.deprecate = deprecate = (context === null || context === void 0 ? void 0 : context.deprecate) || undefined;
      return originalGlobalContext;
    };
  }
  var _default = _exports.default = setGlobalContext;
});
define("@glimmer/low-level", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Storage = _exports.Stack = void 0;
  class Storage {
    constructor() {
      this.array = [];
      this.next = 0;
    }
    add(element) {
      var {
        next: slot,
        array
      } = this;
      if (slot === array.length) {
        this.next++;
      } else {
        var prev = array[slot];
        this.next = prev;
      }
      this.array[slot] = element;
      return slot;
    }
    deref(pointer) {
      return this.array[pointer];
    }
    drop(pointer) {
      this.array[pointer] = this.next;
      this.next = pointer;
    }
  }
  _exports.Storage = Storage;
  class Stack {
    constructor(vec = []) {
      this.vec = vec;
    }
    clone() {
      return new Stack(this.vec.slice());
    }
    sliceFrom(start) {
      return new Stack(this.vec.slice(start));
    }
    slice(start, end) {
      return new Stack(this.vec.slice(start, end));
    }
    copy(from, to) {
      this.vec[to] = this.vec[from];
    } // TODO: how to model u64 argument?

    writeRaw(pos, value) {
      // TODO: Grow?
      this.vec[pos] = value;
    } // TODO: partially decoded enum?

    getRaw(pos) {
      return this.vec[pos];
    }
    reset() {
      this.vec.length = 0;
    }
    len() {
      return this.vec.length;
    }
  }
  _exports.Stack = Stack;
});
define("@glimmer/manager", ["exports", "@glimmer/util", "@glimmer/reference", "@glimmer/validator", "@glimmer/destroyable", "@glimmer/global-context"], function (_exports, _util, _reference, _validator, _destroyable, _globalContext) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CustomModifierManager = _exports.CustomHelperManager = _exports.CustomComponentManager = void 0;
  _exports.capabilityFlagsFrom = capabilityFlagsFrom;
  _exports.componentCapabilities = componentCapabilities;
  _exports.getComponentTemplate = getComponentTemplate;
  _exports.getCustomTagFor = getCustomTagFor;
  _exports.getInternalComponentManager = getInternalComponentManager;
  _exports.getInternalHelperManager = getInternalHelperManager;
  _exports.getInternalModifierManager = getInternalModifierManager;
  _exports.hasCapability = hasCapability;
  _exports.hasDestroyable = hasDestroyable;
  _exports.hasInternalComponentManager = hasInternalComponentManager;
  _exports.hasInternalHelperManager = hasInternalHelperManager;
  _exports.hasInternalModifierManager = hasInternalModifierManager;
  _exports.hasValue = hasValue;
  _exports.helperCapabilities = helperCapabilities;
  _exports.managerHasCapability = managerHasCapability;
  _exports.modifierCapabilities = modifierCapabilities;
  _exports.setComponentManager = setComponentManager;
  _exports.setComponentTemplate = setComponentTemplate;
  _exports.setCustomTagFor = setCustomTagFor;
  _exports.setHelperManager = setHelperManager;
  _exports.setInternalComponentManager = setInternalComponentManager;
  _exports.setInternalHelperManager = setInternalHelperManager;
  _exports.setInternalModifierManager = setInternalModifierManager;
  _exports.setModifierManager = setModifierManager;
  var FROM_CAPABILITIES = true /* DEBUG */ ? new _util._WeakSet() : undefined;
  function buildCapabilities(capabilities) {
    if (true /* DEBUG */) {
      FROM_CAPABILITIES.add(capabilities);
      Object.freeze(capabilities);
    }
    return capabilities;
  }
  /**
   * Converts a ComponentCapabilities object into a 32-bit integer representation.
   */

  function capabilityFlagsFrom(capabilities) {
    return 0 | (capabilities.dynamicLayout ? 1
    /* DynamicLayout */ : 0) | (capabilities.dynamicTag ? 2
    /* DynamicTag */ : 0) | (capabilities.prepareArgs ? 4
    /* PrepareArgs */ : 0) | (capabilities.createArgs ? 8
    /* CreateArgs */ : 0) | (capabilities.attributeHook ? 16
    /* AttributeHook */ : 0) | (capabilities.elementHook ? 32
    /* ElementHook */ : 0) | (capabilities.dynamicScope ? 64
    /* DynamicScope */ : 0) | (capabilities.createCaller ? 128
    /* CreateCaller */ : 0) | (capabilities.updateHook ? 256
    /* UpdateHook */ : 0) | (capabilities.createInstance ? 512
    /* CreateInstance */ : 0) | (capabilities.wrapped ? 1024
    /* Wrapped */ : 0) | (capabilities.willDestroy ? 2048
    /* WillDestroy */ : 0) | (capabilities.hasSubOwner ? 4096
    /* HasSubOwner */ : 0);
  }
  function managerHasCapability(_manager, capabilities, capability) {
    return !!(capabilities & capability);
  }
  function hasCapability(capabilities, capability) {
    return !!(capabilities & capability);
  }
  var CUSTOM_TAG_FOR = new WeakMap();
  function getCustomTagFor(obj) {
    return CUSTOM_TAG_FOR.get(obj);
  }
  function setCustomTagFor(obj, customTagFn) {
    CUSTOM_TAG_FOR.set(obj, customTagFn);
  }
  function convertToInt(prop) {
    if (typeof prop === 'symbol') return null;
    var num = Number(prop);
    if (isNaN(num)) return null;
    return num % 1 === 0 ? num : null;
  }
  function tagForNamedArg(namedArgs, key) {
    return (0, _validator.track)(() => {
      if (key in namedArgs) {
        (0, _reference.valueForRef)(namedArgs[key]);
      }
    });
  }
  function tagForPositionalArg(positionalArgs, key) {
    return (0, _validator.track)(() => {
      if (key === '[]') {
        // consume all of the tags in the positional array
        positionalArgs.forEach(_reference.valueForRef);
      }
      var parsed = convertToInt(key);
      if (parsed !== null && parsed < positionalArgs.length) {
        // consume the tag of the referenced index
        (0, _reference.valueForRef)(positionalArgs[parsed]);
      }
    });
  }
  var argsProxyFor;
  class NamedArgsProxy {
    constructor(named) {
      this.named = named;
    }
    get(_target, prop) {
      var ref = this.named[prop];
      if (ref !== undefined) {
        return (0, _reference.valueForRef)(ref);
      }
    }
    has(_target, prop) {
      return prop in this.named;
    }
    ownKeys() {
      return Object.keys(this.named);
    }
    isExtensible() {
      return false;
    }
    getOwnPropertyDescriptor(_target, prop) {
      if (true /* DEBUG */ && !(prop in this.named)) {
        throw new Error(`args proxies do not have real property descriptors, so you should never need to call getOwnPropertyDescriptor yourself. This code exists for enumerability, such as in for-in loops and Object.keys(). Attempted to get the descriptor for \`${String(prop)}\``);
      }
      return {
        enumerable: true,
        configurable: true
      };
    }
  }
  class PositionalArgsProxy {
    constructor(positional) {
      this.positional = positional;
    }
    get(target, prop) {
      var {
        positional
      } = this;
      if (prop === 'length') {
        return positional.length;
      }
      var parsed = convertToInt(prop);
      if (parsed !== null && parsed < positional.length) {
        return (0, _reference.valueForRef)(positional[parsed]);
      }
      return target[prop];
    }
    isExtensible() {
      return false;
    }
    has(_target, prop) {
      var parsed = convertToInt(prop);
      return parsed !== null && parsed < this.positional.length;
    }
  }
  if (_util.HAS_NATIVE_PROXY) {
    argsProxyFor = (capturedArgs, type) => {
      var {
        named,
        positional
      } = capturedArgs;
      var getNamedTag = (_obj, key) => tagForNamedArg(named, key);
      var getPositionalTag = (_obj, key) => tagForPositionalArg(positional, key);
      var namedHandler = new NamedArgsProxy(named);
      var positionalHandler = new PositionalArgsProxy(positional);
      var namedTarget = Object.create(null);
      var positionalTarget = [];
      if (true /* DEBUG */) {
        var setHandler = function (_target, prop) {
          throw new Error(`You attempted to set ${String(prop)} on the arguments of a component, helper, or modifier. Arguments are immutable and cannot be updated directly; they always represent the values that are passed down. If you want to set default values, you should use a getter and local tracked state instead.`);
        };
        var forInDebugHandler = () => {
          throw new Error(`Object.keys() was called on the positional arguments array for a ${type}, which is not supported. This function is a low-level function that should not need to be called for positional argument arrays. You may be attempting to iterate over the array using for...in instead of for...of.`);
        };
        namedHandler.set = setHandler;
        positionalHandler.set = setHandler;
        positionalHandler.ownKeys = forInDebugHandler;
      }
      var namedProxy = new Proxy(namedTarget, namedHandler);
      var positionalProxy = new Proxy(positionalTarget, positionalHandler);
      setCustomTagFor(namedProxy, getNamedTag);
      setCustomTagFor(positionalProxy, getPositionalTag);
      return {
        named: namedProxy,
        positional: positionalProxy
      };
    };
  } else {
    argsProxyFor = (capturedArgs, _type) => {
      var {
        named,
        positional
      } = capturedArgs;
      var getNamedTag = (_obj, key) => tagForNamedArg(named, key);
      var getPositionalTag = (_obj, key) => tagForPositionalArg(positional, key);
      var namedProxy = {};
      var positionalProxy = [];
      setCustomTagFor(namedProxy, getNamedTag);
      setCustomTagFor(positionalProxy, getPositionalTag);
      Object.keys(named).forEach(name => {
        Object.defineProperty(namedProxy, name, {
          enumerable: true,
          configurable: true,
          get() {
            return (0, _reference.valueForRef)(named[name]);
          }
        });
      });
      positional.forEach((ref, index) => {
        Object.defineProperty(positionalProxy, index, {
          enumerable: true,
          configurable: true,
          get() {
            return (0, _reference.valueForRef)(ref);
          }
        });
      });
      if (true /* DEBUG */) {
        // Prevent mutations in development mode. This will not prevent the
        // proxy from updating, but will prevent assigning new values or pushing
        // for instance.
        Object.freeze(namedProxy);
        Object.freeze(positionalProxy);
      }
      return {
        named: namedProxy,
        positional: positionalProxy
      };
    };
  }
  function helperCapabilities(managerAPI, options = {}) {
    if (true /* DEBUG */ && managerAPI !== '3.23') {
      throw new Error('Invalid helper manager compatibility specified');
    }
    if (true /* DEBUG */ && (!(options.hasValue || options.hasScheduledEffect) || options.hasValue && options.hasScheduledEffect)) {
      throw new Error('You must pass either the `hasValue` OR the `hasScheduledEffect` capability when defining a helper manager. Passing neither, or both, is not permitted.');
    }
    if (true /* DEBUG */ && options.hasScheduledEffect) {
      throw new Error('The `hasScheduledEffect` capability has not yet been implemented for helper managers. Please pass `hasValue` instead');
    }
    return buildCapabilities({
      hasValue: Boolean(options.hasValue),
      hasDestroyable: Boolean(options.hasDestroyable),
      hasScheduledEffect: Boolean(options.hasScheduledEffect)
    });
  } ////////////

  function hasValue(manager) {
    return manager.capabilities.hasValue;
  }
  function hasDestroyable(manager) {
    return manager.capabilities.hasDestroyable;
  } ////////////

  class CustomHelperManager {
    constructor(factory) {
      this.factory = factory;
      this.helperManagerDelegates = new WeakMap();
      this.undefinedDelegate = null;
    }
    getDelegateForOwner(owner) {
      var delegate = this.helperManagerDelegates.get(owner);
      if (delegate === undefined) {
        var {
          factory
        } = this;
        delegate = factory(owner);
        if (true /* DEBUG */ && !FROM_CAPABILITIES.has(delegate.capabilities)) {
          // TODO: This error message should make sense in both Ember and Glimmer https://github.com/glimmerjs/glimmer-vm/issues/1200
          throw new Error(`Custom helper managers must have a \`capabilities\` property that is the result of calling the \`capabilities('3.23')\` (imported via \`import { capabilities } from '@ember/helper';\`). Received: \`${JSON.stringify(delegate.capabilities)}\` for: \`${delegate}\``);
        }
        this.helperManagerDelegates.set(owner, delegate);
      }
      return delegate;
    }
    getDelegateFor(owner) {
      if (owner === undefined) {
        var {
          undefinedDelegate
        } = this;
        if (undefinedDelegate === null) {
          var {
            factory
          } = this;
          this.undefinedDelegate = undefinedDelegate = factory(undefined);
        }
        return undefinedDelegate;
      } else {
        return this.getDelegateForOwner(owner);
      }
    }
    getHelper(definition) {
      return (capturedArgs, owner) => {
        var _a, _b;
        var manager = this.getDelegateFor(owner);
        var args = argsProxyFor(capturedArgs, 'helper');
        var bucket = manager.createHelper(definition, args);
        if (hasValue(manager)) {
          var cache = (0, _reference.createComputeRef)(() => manager.getValue(bucket), null, true /* DEBUG */ && manager.getDebugName && manager.getDebugName(definition));
          if (hasDestroyable(manager)) {
            (0, _destroyable.associateDestroyableChild)(cache, manager.getDestroyable(bucket));
          }
          return cache;
        } else if (hasDestroyable(manager)) {
          var ref = (0, _reference.createConstRef)(undefined, true /* DEBUG */ && ((_b = (_a = manager.getDebugName) === null || _a === void 0 ? void 0 : _a.call(manager, definition)) !== null && _b !== void 0 ? _b : 'unknown helper'));
          (0, _destroyable.associateDestroyableChild)(ref, manager.getDestroyable(bucket));
          return ref;
        } else {
          return _reference.UNDEFINED_REFERENCE;
        }
      };
    }
  }
  _exports.CustomHelperManager = CustomHelperManager;
  class FunctionHelperManager {
    constructor() {
      this.capabilities = buildCapabilities({
        hasValue: true,
        hasDestroyable: false,
        hasScheduledEffect: false
      });
    }
    createHelper(fn, args) {
      return {
        fn,
        args
      };
    }
    getValue({
      fn,
      args
    }) {
      if (Object.keys(args.named).length > 0) {
        var argsForFn = [...args.positional, args.named];
        return fn(...argsForFn);
      }
      return fn(...args.positional);
    }
    getDebugName(fn) {
      if (fn.name) {
        return `(helper function ${fn.name})`;
      }
      return '(anonymous helper function)';
    }
  }
  var COMPONENT_MANAGERS = new WeakMap();
  var MODIFIER_MANAGERS = new WeakMap();
  var HELPER_MANAGERS = new WeakMap(); ///////////

  var getPrototypeOf = Object.getPrototypeOf;
  function setManager(map, manager, obj) {
    if (true /* DEBUG */ && (typeof obj !== 'object' || obj === null) && typeof obj !== 'function') {
      throw new Error(`Attempted to set a manager on a non-object value. Managers can only be associated with objects or functions. Value was ${(0, _util.debugToString)(obj)}`);
    }
    if (true /* DEBUG */ && map.has(obj)) {
      throw new Error(`Attempted to set the same type of manager multiple times on a value. You can only associate one manager of each type with a given value. Value was ${(0, _util.debugToString)(obj)}`);
    }
    map.set(obj, manager);
    return obj;
  }
  function getManager(map, obj) {
    var pointer = obj;
    while (pointer !== undefined && pointer !== null) {
      var manager = map.get(pointer);
      if (manager !== undefined) {
        return manager;
      }
      pointer = getPrototypeOf(pointer);
    }
    return undefined;
  } ///////////

  function setInternalModifierManager(manager, definition) {
    return setManager(MODIFIER_MANAGERS, manager, definition);
  }
  function getInternalModifierManager(definition, isOptional) {
    if (true /* DEBUG */ && typeof definition !== 'function' && (typeof definition !== 'object' || definition === null)) {
      throw new Error(`Attempted to use a value as a modifier, but it was not an object or function. Modifier definitions must be objects or functions with an associated modifier manager. The value was: ${definition}`);
    }
    var manager = getManager(MODIFIER_MANAGERS, definition);
    if (manager === undefined) {
      if (isOptional === true) {
        return null;
      } else if (true /* DEBUG */) {
        throw new Error(`Attempted to load a modifier, but there wasn't a modifier manager associated with the definition. The definition was: ${(0, _util.debugToString)(definition)}`);
      }
    }
    return manager;
  }
  function setInternalHelperManager(manager, definition) {
    return setManager(HELPER_MANAGERS, manager, definition);
  }
  var DEFAULT_MANAGER = new CustomHelperManager(() => new FunctionHelperManager());
  function getInternalHelperManager(definition, isOptional) {
    if (true /* DEBUG */ && typeof definition !== 'function' && (typeof definition !== 'object' || definition === null)) {
      throw new Error(`Attempted to use a value as a helper, but it was not an object or function. Helper definitions must be objects or functions with an associated helper manager. The value was: ${definition}`);
    }
    var manager = getManager(HELPER_MANAGERS, definition);
    if (_globalContext.FEATURE_DEFAULT_HELPER_MANAGER) {
      // Functions are special-cased because functions are defined
      // as the "default" helper, per: https://github.com/emberjs/rfcs/pull/756
      if (manager === undefined && typeof definition === 'function') {
        manager = DEFAULT_MANAGER;
      }
    }
    if (manager) {
      return manager;
    } else if (isOptional === true) {
      return null;
    } else if (true /* DEBUG */) {
      throw new Error(`Attempted to load a helper, but there wasn't a helper manager associated with the definition. The definition was: ${(0, _util.debugToString)(definition)}`);
    }
    return null;
  }
  function setInternalComponentManager(factory, obj) {
    return setManager(COMPONENT_MANAGERS, factory, obj);
  }
  function getInternalComponentManager(definition, isOptional) {
    if (true /* DEBUG */ && typeof definition !== 'function' && (typeof definition !== 'object' || definition === null)) {
      throw new Error(`Attempted to use a value as a component, but it was not an object or function. Component definitions must be objects or functions with an associated component manager. The value was: ${definition}`);
    }
    var manager = getManager(COMPONENT_MANAGERS, definition);
    if (manager === undefined) {
      if (isOptional === true) {
        return null;
      } else if (true /* DEBUG */) {
        throw new Error(`Attempted to load a component, but there wasn't a component manager associated with the definition. The definition was: ${(0, _util.debugToString)(definition)}`);
      }
    }
    return manager;
  } ///////////

  function hasInternalComponentManager(definition) {
    return hasDefaultComponentManager(definition) || getManager(COMPONENT_MANAGERS, definition) !== undefined;
  }
  function hasInternalHelperManager(definition) {
    return hasDefaultHelperManager(definition) || getManager(HELPER_MANAGERS, definition) !== undefined;
  }
  function hasInternalModifierManager(definition) {
    return hasDefaultModifierManager(definition) || getManager(MODIFIER_MANAGERS, definition) !== undefined;
  }
  function hasDefaultComponentManager(_definition) {
    return false;
  }
  function hasDefaultHelperManager(definition) {
    if (_globalContext.FEATURE_DEFAULT_HELPER_MANAGER) {
      return typeof definition === 'function';
    }
    return false;
  }
  function hasDefaultModifierManager(_definition) {
    return false;
  }
  var CAPABILITIES = {
    dynamicLayout: false,
    dynamicTag: false,
    prepareArgs: false,
    createArgs: true,
    attributeHook: false,
    elementHook: false,
    createCaller: false,
    dynamicScope: true,
    updateHook: true,
    createInstance: true,
    wrapped: false,
    willDestroy: false,
    hasSubOwner: false
  };
  function componentCapabilities(managerAPI, options = {}) {
    if (true /* DEBUG */ && managerAPI !== '3.13') {
      throw new Error('Invalid component manager compatibility specified');
    }
    var updateHook = Boolean(options.updateHook);
    return buildCapabilities({
      asyncLifeCycleCallbacks: Boolean(options.asyncLifecycleCallbacks),
      destructor: Boolean(options.destructor),
      updateHook
    });
  }
  function hasAsyncLifeCycleCallbacks(delegate) {
    return delegate.capabilities.asyncLifeCycleCallbacks;
  }
  function hasUpdateHook(delegate) {
    return delegate.capabilities.updateHook;
  }
  function hasAsyncUpdateHook(delegate) {
    return hasAsyncLifeCycleCallbacks(delegate) && hasUpdateHook(delegate);
  }
  function hasDestructors(delegate) {
    return delegate.capabilities.destructor;
  }
  /**
    The CustomComponentManager allows addons to provide custom component
    implementations that integrate seamlessly into Ember. This is accomplished
    through a delegate, registered with the custom component manager, which
    implements a set of hooks that determine component behavior.
  
    To create a custom component manager, instantiate a new CustomComponentManager
    class and pass the delegate as the first argument:
  
    ```js
    let manager = new CustomComponentManager({
      // ...delegate implementation...
    });
    ```
  
    ## Delegate Hooks
  
    Throughout the lifecycle of a component, the component manager will invoke
    delegate hooks that are responsible for surfacing those lifecycle changes to
    the end developer.
  
    * `create()` - invoked when a new instance of a component should be created
    * `update()` - invoked when the arguments passed to a component change
    * `getContext()` - returns the object that should be
  */

  class CustomComponentManager {
    constructor(factory) {
      this.factory = factory;
      this.componentManagerDelegates = new WeakMap();
    }
    getDelegateFor(owner) {
      var {
        componentManagerDelegates
      } = this;
      var delegate = componentManagerDelegates.get(owner);
      if (delegate === undefined) {
        var {
          factory
        } = this;
        delegate = factory(owner);
        if (true /* DEBUG */ && !FROM_CAPABILITIES.has(delegate.capabilities)) {
          // TODO: This error message should make sense in both Ember and Glimmer https://github.com/glimmerjs/glimmer-vm/issues/1200
          throw new Error(`Custom component managers must have a \`capabilities\` property that is the result of calling the \`capabilities('3.13')\` (imported via \`import { capabilities } from '@ember/component';\`). Received: \`${JSON.stringify(delegate.capabilities)}\` for: \`${delegate}\``);
        }
        componentManagerDelegates.set(owner, delegate);
      }
      return delegate;
    }
    create(owner, definition, vmArgs) {
      var delegate = this.getDelegateFor(owner);
      var args = argsProxyFor(vmArgs.capture(), 'component');
      var component = delegate.createComponent(definition, args);
      return new CustomComponentState(component, delegate, args);
    }
    getDebugName(definition) {
      return typeof definition === 'function' ? definition.name : definition.toString();
    }
    update(bucket) {
      var {
        delegate
      } = bucket;
      if (hasUpdateHook(delegate)) {
        var {
          component,
          args
        } = bucket;
        delegate.updateComponent(component, args);
      }
    }
    didCreate({
      component,
      delegate
    }) {
      if (hasAsyncLifeCycleCallbacks(delegate)) {
        delegate.didCreateComponent(component);
      }
    }
    didUpdate({
      component,
      delegate
    }) {
      if (hasAsyncUpdateHook(delegate)) {
        delegate.didUpdateComponent(component);
      }
    }
    didRenderLayout() {}
    didUpdateLayout() {}
    getSelf({
      component,
      delegate
    }) {
      return (0, _reference.createConstRef)(delegate.getContext(component), 'this');
    }
    getDestroyable(bucket) {
      var {
        delegate
      } = bucket;
      if (hasDestructors(delegate)) {
        var {
          component
        } = bucket;
        (0, _destroyable.registerDestructor)(bucket, () => delegate.destroyComponent(component));
        return bucket;
      }
      return null;
    }
    getCapabilities() {
      return CAPABILITIES;
    }
  }
  /**
   * Stores internal state about a component instance after it's been created.
   */
  _exports.CustomComponentManager = CustomComponentManager;
  class CustomComponentState {
    constructor(component, delegate, args) {
      this.component = component;
      this.delegate = delegate;
      this.args = args;
    }
  }
  function modifierCapabilities(managerAPI, optionalFeatures = {}) {
    if (true /* DEBUG */ && managerAPI !== '3.22') {
      throw new Error('Invalid modifier manager compatibility specified');
    }
    return buildCapabilities({
      disableAutoTracking: Boolean(optionalFeatures.disableAutoTracking)
    });
  }
  /**
    The CustomModifierManager allows addons to provide custom modifier
    implementations that integrate seamlessly into Ember. This is accomplished
    through a delegate, registered with the custom modifier manager, which
    implements a set of hooks that determine modifier behavior.
    To create a custom modifier manager, instantiate a new CustomModifierManager
    class and pass the delegate as the first argument:
  
    ```js
    let manager = new CustomModifierManager({
      // ...delegate implementation...
    });
    ```
  
    ## Delegate Hooks
  
    Throughout the lifecycle of a modifier, the modifier manager will invoke
    delegate hooks that are responsible for surfacing those lifecycle changes to
    the end developer.
    * `createModifier()` - invoked when a new instance of a modifier should be created
    * `installModifier()` - invoked when the modifier is installed on the element
    * `updateModifier()` - invoked when the arguments passed to a modifier change
    * `destroyModifier()` - invoked when the modifier is about to be destroyed
  */

  class CustomModifierManager {
    constructor(factory) {
      this.factory = factory;
      this.componentManagerDelegates = new WeakMap();
    }
    getDelegateFor(owner) {
      var {
        componentManagerDelegates
      } = this;
      var delegate = componentManagerDelegates.get(owner);
      if (delegate === undefined) {
        var {
          factory
        } = this;
        delegate = factory(owner);
        if (true /* DEBUG */ && !FROM_CAPABILITIES.has(delegate.capabilities)) {
          // TODO: This error message should make sense in both Ember and Glimmer https://github.com/glimmerjs/glimmer-vm/issues/1200
          throw new Error(`Custom modifier managers must have a \`capabilities\` property that is the result of calling the \`capabilities('3.22')\` (imported via \`import { capabilities } from '@ember/modifier';\`). Received: \`${JSON.stringify(delegate.capabilities)}\` for: \`${delegate}\``);
        }
        componentManagerDelegates.set(owner, delegate);
      }
      return delegate;
    }
    create(owner, element, definition, capturedArgs) {
      var delegate = this.getDelegateFor(owner);
      var args = argsProxyFor(capturedArgs, 'modifier');
      var instance = delegate.createModifier(definition, args);
      var tag = (0, _validator.createUpdatableTag)();
      var state;
      state = {
        tag,
        element,
        delegate,
        args,
        modifier: instance
      };
      if (true /* DEBUG */) {
        state.debugName = typeof definition === 'function' ? definition.name : definition.toString();
      }
      (0, _destroyable.registerDestructor)(state, () => delegate.destroyModifier(instance, args));
      return state;
    }
    getDebugName({
      debugName
    }) {
      return debugName;
    }
    getTag({
      tag
    }) {
      return tag;
    }
    install({
      element,
      args,
      modifier,
      delegate
    }) {
      var {
        capabilities
      } = delegate;
      if (capabilities.disableAutoTracking === true) {
        (0, _validator.untrack)(() => delegate.installModifier(modifier, element, args));
      } else {
        delegate.installModifier(modifier, element, args);
      }
    }
    update({
      args,
      modifier,
      delegate
    }) {
      var {
        capabilities
      } = delegate;
      if (capabilities.disableAutoTracking === true) {
        (0, _validator.untrack)(() => delegate.updateModifier(modifier, args));
      } else {
        delegate.updateModifier(modifier, args);
      }
    }
    getDestroyable(state) {
      return state;
    }
  }
  _exports.CustomModifierManager = CustomModifierManager;
  function setComponentManager(factory, obj) {
    return setInternalComponentManager(new CustomComponentManager(factory), obj);
  }
  function setModifierManager(factory, obj) {
    return setInternalModifierManager(new CustomModifierManager(factory), obj);
  }
  function setHelperManager(factory, obj) {
    return setInternalHelperManager(new CustomHelperManager(factory), obj);
  }
  var TEMPLATES = new WeakMap();
  var getPrototypeOf$1 = Object.getPrototypeOf;
  function setComponentTemplate(factory, obj) {
    if (true /* DEBUG */ && !(obj !== null && (typeof obj === 'object' || typeof obj === 'function'))) {
      throw new Error(`Cannot call \`setComponentTemplate\` on \`${(0, _util.debugToString)(obj)}\``);
    }
    if (true /* DEBUG */ && TEMPLATES.has(obj)) {
      throw new Error(`Cannot call \`setComponentTemplate\` multiple times on the same class (\`${(0, _util.debugToString)(obj)}\`)`);
    }
    TEMPLATES.set(obj, factory);
    return obj;
  }
  function getComponentTemplate(obj) {
    var pointer = obj;
    while (pointer !== null) {
      var template = TEMPLATES.get(pointer);
      if (template !== undefined) {
        return template;
      }
      pointer = getPrototypeOf$1(pointer);
    }
    return undefined;
  }
});
define("@glimmer/node", ["exports", "@glimmer/runtime", "@simple-dom/document"], function (_exports, _runtime, _document) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.NodeDOMTreeConstruction = void 0;
  _exports.serializeBuilder = serializeBuilder;
  class NodeDOMTreeConstruction extends _runtime.DOMTreeConstruction {
    constructor(doc) {
      super(doc || (0, _document.default)());
    } // override to prevent usage of `this.document` until after the constructor

    setupUselessElement() {}
    insertHTMLBefore(parent, reference, html) {
      var raw = this.document.createRawHTMLSection(html);
      parent.insertBefore(raw, reference);
      return new _runtime.ConcreteBounds(parent, raw, raw);
    } // override to avoid SVG detection/work when in node (this is not needed in SSR)

    createElement(tag) {
      return this.document.createElement(tag);
    } // override to avoid namespace shenanigans when in node (this is not needed in SSR)

    setAttribute(element, name, value) {
      element.setAttribute(name, value);
    }
  }
  _exports.NodeDOMTreeConstruction = NodeDOMTreeConstruction;
  var TEXT_NODE = 3;
  var NEEDS_EXTRA_CLOSE = new WeakMap();
  function currentNode(cursor) {
    var {
      element,
      nextSibling
    } = cursor;
    if (nextSibling === null) {
      return element.lastChild;
    } else {
      return nextSibling.previousSibling;
    }
  }
  class SerializeBuilder extends _runtime.NewElementBuilder {
    constructor() {
      super(...arguments);
      this.serializeBlockDepth = 0;
    }
    __openBlock() {
      var {
        tagName
      } = this.element;
      if (tagName !== 'TITLE' && tagName !== 'SCRIPT' && tagName !== 'STYLE') {
        var depth = this.serializeBlockDepth++;
        this.__appendComment(`%+b:${depth}%`);
      }
      super.__openBlock();
    }
    __closeBlock() {
      var {
        tagName
      } = this.element;
      super.__closeBlock();
      if (tagName !== 'TITLE' && tagName !== 'SCRIPT' && tagName !== 'STYLE') {
        var depth = --this.serializeBlockDepth;
        this.__appendComment(`%-b:${depth}%`);
      }
    }
    __appendHTML(html) {
      var {
        tagName
      } = this.element;
      if (tagName === 'TITLE' || tagName === 'SCRIPT' || tagName === 'STYLE') {
        return super.__appendHTML(html);
      } // Do we need to run the html tokenizer here?

      var first = this.__appendComment('%glmr%');
      if (tagName === 'TABLE') {
        var openIndex = html.indexOf('<');
        if (openIndex > -1) {
          var tr = html.slice(openIndex + 1, openIndex + 3);
          if (tr === 'tr') {
            html = `<tbody>${html}</tbody>`;
          }
        }
      }
      if (html === '') {
        this.__appendComment('% %');
      } else {
        super.__appendHTML(html);
      }
      var last = this.__appendComment('%glmr%');
      return new _runtime.ConcreteBounds(this.element, first, last);
    }
    __appendText(string) {
      var {
        tagName
      } = this.element;
      var current = currentNode(this);
      if (tagName === 'TITLE' || tagName === 'SCRIPT' || tagName === 'STYLE') {
        return super.__appendText(string);
      } else if (string === '') {
        return this.__appendComment('% %');
      } else if (current && current.nodeType === TEXT_NODE) {
        this.__appendComment('%|%');
      }
      return super.__appendText(string);
    }
    closeElement() {
      if (NEEDS_EXTRA_CLOSE.has(this.element)) {
        NEEDS_EXTRA_CLOSE.delete(this.element);
        super.closeElement();
      }
      return super.closeElement();
    }
    openElement(tag) {
      if (tag === 'tr') {
        if (this.element.tagName !== 'TBODY' && this.element.tagName !== 'THEAD' && this.element.tagName !== 'TFOOT') {
          this.openElement('tbody'); // This prevents the closeBlock comment from being re-parented
          // under the auto inserted tbody. Rehydration builder needs to
          // account for the insertion since it is injected here and not
          // really in the template.

          NEEDS_EXTRA_CLOSE.set(this.constructing, true);
          this.flushElement(null);
        }
      }
      return super.openElement(tag);
    }
    pushRemoteElement(element, cursorId, insertBefore = null) {
      var {
        dom
      } = this;
      var script = dom.createElement('script');
      script.setAttribute('glmr', cursorId);
      dom.insertBefore(element, script, insertBefore);
      return super.pushRemoteElement(element, cursorId, insertBefore);
    }
  }
  function serializeBuilder(env, cursor) {
    return SerializeBuilder.forInitialRender(env, cursor);
  }
});
define("@glimmer/opcode-compiler", ["exports", "@glimmer/util", "@glimmer/vm", "@glimmer/global-context", "@glimmer/manager", "@glimmer/encoder"], function (_exports, _util, _vm, _globalContext, _manager, _encoder) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.WrappedBuilder = _exports.StdLib = _exports.MINIMAL_CAPABILITIES = _exports.EMPTY_BLOCKS = _exports.DEFAULT_CAPABILITIES = _exports.CompileTimeCompilationContextImpl = void 0;
  _exports.compilable = compilable;
  _exports.compileStatements = compileStatements;
  _exports.compileStd = compileStd;
  _exports.debugCompiler = void 0;
  _exports.invokeStaticBlock = InvokeStaticBlock;
  _exports.invokeStaticBlockWithStack = InvokeStaticBlockWithStack;
  _exports.meta = meta;
  _exports.programCompilationContext = programCompilationContext;
  _exports.templateCacheCounters = void 0;
  _exports.templateCompilationContext = templateCompilationContext;
  _exports.templateFactory = templateFactory;
  class NamedBlocksImpl {
    constructor(blocks) {
      this.blocks = blocks;
      this.names = blocks ? Object.keys(blocks) : [];
    }
    get(name) {
      if (!this.blocks) return null;
      return this.blocks[name] || null;
    }
    has(name) {
      var {
        blocks
      } = this;
      return blocks !== null && name in blocks;
    }
    with(name, block) {
      var {
        blocks
      } = this;
      if (blocks) {
        return new NamedBlocksImpl((0, _util.assign)({}, blocks, {
          [name]: block
        }));
      } else {
        return new NamedBlocksImpl({
          [name]: block
        });
      }
    }
    get hasAny() {
      return this.blocks !== null;
    }
  }
  var EMPTY_BLOCKS = _exports.EMPTY_BLOCKS = new NamedBlocksImpl(null);
  function namedBlocks(blocks) {
    if (blocks === null) {
      return EMPTY_BLOCKS;
    }
    var out = (0, _util.dict)();
    var [keys, values] = blocks;
    for (var i = 0; i < keys.length; i++) {
      out[keys[i]] = values[i];
    }
    return new NamedBlocksImpl(out);
  }
  function labelOperand(value) {
    return {
      type: 1
      /* Label */,

      value
    };
  }
  function evalSymbolsOperand() {
    return {
      type: 3
      /* EvalSymbols */,

      value: undefined
    };
  }
  function isStrictMode() {
    return {
      type: 2
      /* IsStrictMode */,

      value: undefined
    };
  }
  function blockOperand(value) {
    return {
      type: 4
      /* Block */,

      value
    };
  }
  function stdlibOperand(value) {
    return {
      type: 5
      /* StdLib */,

      value
    };
  }
  function nonSmallIntOperand(value) {
    return {
      type: 6
      /* NonSmallInt */,

      value
    };
  }
  function symbolTableOperand(value) {
    return {
      type: 7
      /* SymbolTable */,

      value
    };
  }
  function layoutOperand(value) {
    return {
      type: 8
      /* Layout */,

      value
    };
  }
  function isGetLikeTuple(opcode) {
    return Array.isArray(opcode) && opcode.length === 2;
  }
  function makeResolutionTypeVerifier(typeToVerify) {
    return opcode => {
      if (!isGetLikeTuple(opcode)) return false;
      var type = opcode[0];
      return type === 31
      /* GetStrictFree */ || type === 32
      /* GetTemplateSymbol */ || type === typeToVerify;
    };
  }
  var isGetFreeComponent = makeResolutionTypeVerifier(39
  /* GetFreeAsComponentHead */);
  var isGetFreeModifier = makeResolutionTypeVerifier(38
  /* GetFreeAsModifierHead */);
  var isGetFreeHelper = makeResolutionTypeVerifier(37
  /* GetFreeAsHelperHead */);
  var isGetFreeComponentOrHelper = makeResolutionTypeVerifier(35
  /* GetFreeAsComponentOrHelperHead */);
  var isGetFreeOptionalComponentOrHelper = makeResolutionTypeVerifier(34
  /* GetFreeAsComponentOrHelperHeadOrThisFallback */);
  function assertResolverInvariants(meta) {
    if (true /* DEBUG */) {
      if (!meta.upvars) {
        throw new Error('Attempted to resolve a component, helper, or modifier, but no free vars were found');
      }
      if (!meta.owner) {
        throw new Error('Attempted to resolve a component, helper, or modifier, but no owner was associated with the template it was being resolved from');
      }
    }
    return meta;
  }
  /**
   * <Foo/>
   * <Foo></Foo>
   * <Foo @arg={{true}} />
   */

  function resolveComponent(resolver, constants, meta, [, expr, then]) {
    var type = expr[0];
    if (true /* DEBUG */ && expr[0] === 31
    /* GetStrictFree */) {
      throw new Error(`Attempted to resolve a component in a strict mode template, but that value was not in scope: ${meta.upvars[expr[1]]}`);
    }
    if (type === 32
    /* GetTemplateSymbol */) {
      var {
        scopeValues,
        owner
      } = meta;
      var definition = scopeValues[expr[1]];
      then(constants.component(definition, owner));
    } else {
      var {
        upvars,
        owner: _owner
      } = assertResolverInvariants(meta);
      var name = upvars[expr[1]];
      var _definition = resolver.lookupComponent(name, _owner);
      if (true /* DEBUG */ && (typeof _definition !== 'object' || _definition === null)) {
        throw new Error(`Attempted to resolve \`${name}\`, which was expected to be a component, but nothing was found.`);
      }
      then(constants.resolvedComponent(_definition, name));
    }
  }
  /**
   * (helper)
   * (helper arg)
   */

  function resolveHelper(resolver, constants, meta, [, expr, then]) {
    var type = expr[0];
    if (type === 32
    /* GetTemplateSymbol */) {
      var {
        scopeValues
      } = meta;
      var definition = scopeValues[expr[1]];
      then(constants.helper(definition));
    } else if (type === 31
    /* GetStrictFree */) {
      then(lookupBuiltInHelper(expr, resolver, meta, constants, 'helper'));
    } else {
      var {
        upvars,
        owner
      } = assertResolverInvariants(meta);
      var name = upvars[expr[1]];
      var helper = resolver.lookupHelper(name, owner);
      if (true /* DEBUG */ && helper === null) {
        throw new Error(`Attempted to resolve \`${name}\`, which was expected to be a helper, but nothing was found.`);
      }
      then(constants.helper(helper, name));
    }
  }
  /**
   * <div {{modifier}}/>
   * <div {{modifier arg}}/>
   * <Foo {{modifier}}/>
   */

  function resolveModifier(resolver, constants, meta, [, expr, then]) {
    var type = expr[0];
    if (type === 32
    /* GetTemplateSymbol */) {
      var {
        scopeValues
      } = meta;
      var definition = scopeValues[expr[1]];
      then(constants.modifier(definition));
    } else if (type === 31
    /* GetStrictFree */) {
      var {
        upvars
      } = assertResolverInvariants(meta);
      var name = upvars[expr[1]];
      var modifier = resolver.lookupBuiltInModifier(name);
      if (true /* DEBUG */ && modifier === null) {
        throw new Error(`Attempted to resolve a modifier in a strict mode template, but it was not in scope: ${name}`);
      }
      then(constants.modifier(modifier, name));
    } else {
      var {
        upvars: _upvars,
        owner
      } = assertResolverInvariants(meta);
      var _name2 = _upvars[expr[1]];
      var _modifier = resolver.lookupModifier(_name2, owner);
      if (true /* DEBUG */ && _modifier === null) {
        throw new Error(`Attempted to resolve \`${_name2}\`, which was expected to be a modifier, but nothing was found.`);
      }
      then(constants.modifier(_modifier, _name2));
    }
  }
  /**
   * {{component-or-helper arg}}
   */

  function resolveComponentOrHelper(resolver, constants, meta, [, expr, {
    ifComponent,
    ifHelper
  }]) {
    var type = expr[0];
    if (type === 32
    /* GetTemplateSymbol */) {
      var {
        scopeValues,
        owner
      } = meta;
      var definition = scopeValues[expr[1]];
      var component = constants.component(definition, owner, true);
      if (component !== null) {
        ifComponent(component);
        return;
      }
      var helper = constants.helper(definition, null, true);
      if (true /* DEBUG */ && helper === null) {
        throw new Error(`Attempted to use a value as either a component or helper, but it did not have a component manager or helper manager associated with it. The value was: ${(0, _util.debugToString)(definition)}`);
      }
      ifHelper(helper);
    } else if (type === 31
    /* GetStrictFree */) {
      ifHelper(lookupBuiltInHelper(expr, resolver, meta, constants, 'component or helper'));
    } else {
      var {
        upvars,
        owner: _owner2
      } = assertResolverInvariants(meta);
      var name = upvars[expr[1]];
      var _definition2 = resolver.lookupComponent(name, _owner2);
      if (_definition2 !== null) {
        ifComponent(constants.resolvedComponent(_definition2, name));
      } else {
        var _helper = resolver.lookupHelper(name, _owner2);
        if (true /* DEBUG */ && _helper === null) {
          throw new Error(`Attempted to resolve \`${name}\`, which was expected to be a component or helper, but nothing was found.`);
        }
        ifHelper(constants.helper(_helper, name));
      }
    }
  }
  /**
   * <Foo @arg={{helper}}>
   */

  function resolveOptionalHelper(resolver, constants, meta, [, expr, {
    ifHelper
  }]) {
    var {
      upvars,
      owner
    } = assertResolverInvariants(meta);
    var name = upvars[expr[1]];
    var helper = resolver.lookupHelper(name, owner);
    if (helper) {
      ifHelper(constants.helper(helper, name), name, meta.moduleName);
    }
  }
  /**
   * {{maybeHelperOrComponent}}
   */

  function resolveOptionalComponentOrHelper(resolver, constants, meta, [, expr, {
    ifComponent,
    ifHelper,
    ifValue
  }]) {
    var type = expr[0];
    if (type === 32
    /* GetTemplateSymbol */) {
      var {
        scopeValues,
        owner
      } = meta;
      var definition = scopeValues[expr[1]];
      if (typeof definition !== 'function' && (typeof definition !== 'object' || definition === null)) {
        // The value is not an object, so it can't be a component or helper.
        ifValue(constants.value(definition));
        return;
      }
      var component = constants.component(definition, owner, true);
      if (component !== null) {
        ifComponent(component);
        return;
      }
      var helper = constants.helper(definition, null, true);
      if (helper !== null) {
        ifHelper(helper);
        return;
      }
      ifValue(constants.value(definition));
    } else if (type === 31
    /* GetStrictFree */) {
      ifHelper(lookupBuiltInHelper(expr, resolver, meta, constants, 'value'));
    } else {
      var {
        upvars,
        owner: _owner3
      } = assertResolverInvariants(meta);
      var name = upvars[expr[1]];
      var _definition3 = resolver.lookupComponent(name, _owner3);
      if (_definition3 !== null) {
        ifComponent(constants.resolvedComponent(_definition3, name));
        return;
      }
      var _helper2 = resolver.lookupHelper(name, _owner3);
      if (_helper2 !== null) {
        ifHelper(constants.helper(_helper2, name));
      }
    }
  }
  function lookupBuiltInHelper(expr, resolver, meta, constants, type) {
    var {
      upvars
    } = assertResolverInvariants(meta);
    var name = upvars[expr[1]];
    var helper = resolver.lookupBuiltInHelper(name);
    if (true /* DEBUG */ && helper === null) {
      // Keyword helper did not exist, which means that we're attempting to use a
      // value of some kind that is not in scope
      throw new Error(`Attempted to resolve a ${type} in a strict mode template, but that value was not in scope: ${meta.upvars[expr[1]]}`);
    }
    return constants.helper(helper, name);
  }
  class Compilers {
    constructor() {
      this.names = {};
      this.funcs = [];
    }
    add(name, func) {
      this.names[name] = this.funcs.push(func) - 1;
    }
    compile(op, sexp) {
      var name = sexp[0];
      var index = this.names[name];
      var func = this.funcs[index];
      func(op, sexp);
    }
  }
  var EXPRESSIONS = new Compilers();
  EXPRESSIONS.add(29
  /* Concat */, (op, [, parts]) => {
    for (var part of parts) {
      expr(op, part);
    }
    op(27
    /* Concat */, parts.length);
  });
  EXPRESSIONS.add(28
  /* Call */, (op, [, expression, positional, named]) => {
    if (isGetFreeHelper(expression)) {
      op(1005
      /* ResolveHelper */, expression, handle => {
        Call(op, handle, positional, named);
      });
    } else {
      expr(op, expression);
      CallDynamic(op, positional, named);
    }
  });
  EXPRESSIONS.add(50
  /* Curry */, (op, [, expr$$1, type, positional, named]) => {
    Curry(op, type, expr$$1, positional, named);
  });
  EXPRESSIONS.add(30
  /* GetSymbol */, (op, [, sym, path]) => {
    op(21
    /* GetVariable */, sym);
    withPath(op, path);
  });
  EXPRESSIONS.add(32
  /* GetTemplateSymbol */, (op, [, sym, path]) => {
    op(1011
    /* ResolveTemplateLocal */, sym, handle => {
      op(29
      /* ConstantReference */, handle);
      withPath(op, path);
    });
  });
  EXPRESSIONS.add(31
  /* GetStrictFree */, (op, [, sym, _path]) => {
    op(1009
    /* ResolveFree */, sym, _handle => {// TODO: Implement in strict mode
    });
  });
  EXPRESSIONS.add(34
  /* GetFreeAsComponentOrHelperHeadOrThisFallback */, () => {
    // TODO: The logic for this opcode currently exists in STATEMENTS.Append, since
    // we want different wrapping logic depending on if we are invoking a component,
    // helper, or {{this}} fallback. Eventually we fix the opcodes so that we can
    // traverse the subexpression tree like normal in this location.
    throw new Error('unimplemented opcode');
  });
  EXPRESSIONS.add(36
  /* GetFreeAsHelperHeadOrThisFallback */, (op, expr$$1) => {
    // <div id={{baz}}>
    op(1010
    /* ResolveLocal */, expr$$1[1], _name => {
      op(1006
      /* ResolveOptionalHelper */, expr$$1, {
        ifHelper: handle => {
          Call(op, handle, null, null);
        }
      });
    });
  });
  EXPRESSIONS.add(99
  /* GetFreeAsDeprecatedHelperHeadOrThisFallback */, (op, expr$$1) => {
    // <Foo @bar={{baz}}>
    op(1010
    /* ResolveLocal */, expr$$1[1], _name => {
      op(1006
      /* ResolveOptionalHelper */, expr$$1, {
        ifHelper: (handle, name, moduleName) => {
          (true && (0, _globalContext.assert)(expr$$1[2] && expr$$1[2].length === 1, '[BUG] Missing argument name'));
          var arg = expr$$1[2][0];
          (true && !(false) && (0, _globalContext.deprecate)(`The \`${name}\` helper was used in the \`${moduleName}\` template as \`${arg}={{${name}}}\`. ` + `This is ambigious between wanting the \`${arg}\` argument to be the \`${name}\` helper itself, ` + `or the result of invoking the \`${name}\` helper (current behavior). ` + `This implicit invocation behavior has been deprecated.\n\n` + `Instead, please explicitly invoke the helper with parenthesis, i.e. \`${arg}={{(${name})}}\`.\n\n` + `Note: the parenthesis are only required in this exact scenario where an ambiguity is present – where ` + `\`${name}\` referes to a global helper (as opposed to a local variable), AND ` + `the \`${name}\` helper invocation does not take any arguments, AND ` + `this occurs in a named argument position of a component invocation.\n\n` + `We expect this combination to be quite rare, as most helpers require at least one argument. ` + `There is no need to refactor helper invocations in cases where this deprecation was not triggered.`, false, {
            id: 'argument-less-helper-paren-less-invocation'
          }));
          Call(op, handle, null, null);
        }
      });
    });
  });
  function withPath(op, path) {
    if (path === undefined || path.length === 0) return;
    for (var i = 0; i < path.length; i++) {
      op(22
      /* GetProperty */, path[i]);
    }
  }
  EXPRESSIONS.add(27
  /* Undefined */, op => PushPrimitiveReference(op, undefined));
  EXPRESSIONS.add(48
  /* HasBlock */, (op, [, block]) => {
    expr(op, block);
    op(25
    /* HasBlock */);
  });
  EXPRESSIONS.add(49
  /* HasBlockParams */, (op, [, block]) => {
    expr(op, block);
    op(24
    /* SpreadBlock */);
    op(61
    /* CompileBlock */);
    op(26
    /* HasBlockParams */);
  });
  EXPRESSIONS.add(52
  /* IfInline */, (op, [, condition, truthy, falsy]) => {
    // Push in reverse order
    expr(op, falsy);
    expr(op, truthy);
    expr(op, condition);
    op(109
    /* IfInline */);
  });
  EXPRESSIONS.add(51
  /* Not */, (op, [, value]) => {
    expr(op, value);
    op(110
    /* Not */);
  });
  EXPRESSIONS.add(53
  /* GetDynamicVar */, (op, [, expression]) => {
    expr(op, expression);
    op(111
    /* GetDynamicVar */);
  });
  EXPRESSIONS.add(54
  /* Log */, (op, [, positional]) => {
    op(0
    /* PushFrame */);
    SimpleArgs(op, positional, null, false);
    op(112
    /* Log */);
    op(1
    /* PopFrame */);
    op(36
    /* Fetch */, _vm.$v0);
  });
  function expr(op, expression) {
    if (Array.isArray(expression)) {
      EXPRESSIONS.compile(op, expression);
    } else {
      PushPrimitive(op, expression);
      op(31
      /* PrimitiveReference */);
    }
  }

  /**
   * Compile arguments, pushing an Arguments object onto the stack.
   *
   * @param args.params
   * @param args.hash
   * @param args.blocks
   * @param args.atNames
   */

  function CompileArgs(op, positional, named, blocks, atNames) {
    var blockNames = blocks.names;
    for (var i = 0; i < blockNames.length; i++) {
      PushYieldableBlock(op, blocks.get(blockNames[i]));
    }
    var count = CompilePositional(op, positional);
    var flags = count << 4;
    if (atNames) flags |= 0b1000;
    if (blocks) {
      flags |= 0b111;
    }
    var names = _util.EMPTY_ARRAY;
    if (named) {
      names = named[0];
      var val = named[1];
      for (var _i = 0; _i < val.length; _i++) {
        expr(op, val[_i]);
      }
    }
    op(82
    /* PushArgs */, names, blockNames, flags);
  }
  function SimpleArgs(op, positional, named, atNames) {
    if (positional === null && named === null) {
      op(83
      /* PushEmptyArgs */);
      return;
    }
    var count = CompilePositional(op, positional);
    var flags = count << 4;
    if (atNames) flags |= 0b1000;
    var names = _util.EMPTY_STRING_ARRAY;
    if (named) {
      names = named[0];
      var val = named[1];
      for (var i = 0; i < val.length; i++) {
        expr(op, val[i]);
      }
    }
    op(82
    /* PushArgs */, names, _util.EMPTY_STRING_ARRAY, flags);
  }
  /**
   * Compile an optional list of positional arguments, which pushes each argument
   * onto the stack and returns the number of parameters compiled
   *
   * @param positional an optional list of positional arguments
   */

  function CompilePositional(op, positional) {
    if (positional === null) return 0;
    for (var i = 0; i < positional.length; i++) {
      expr(op, positional[i]);
    }
    return positional.length;
  }
  function meta(layout) {
    var _a, _b;
    var [, symbols,, upvars] = layout.block;
    return {
      evalSymbols: evalSymbols(layout),
      upvars: upvars,
      scopeValues: (_b = (_a = layout.scope) === null || _a === void 0 ? void 0 : _a.call(layout)) !== null && _b !== void 0 ? _b : null,
      isStrictMode: layout.isStrictMode,
      moduleName: layout.moduleName,
      owner: layout.owner,
      size: symbols.length
    };
  }
  function evalSymbols(layout) {
    var {
      block
    } = layout;
    var [, symbols, hasEval] = block;
    return hasEval ? symbols : null;
  }

  /**
   * Push a reference onto the stack corresponding to a statically known primitive
   * @param value A JavaScript primitive (undefined, null, boolean, number or string)
   */

  function PushPrimitiveReference(op, value) {
    PushPrimitive(op, value);
    op(31
    /* PrimitiveReference */);
  }
  /**
   * Push an encoded representation of a JavaScript primitive on the stack
   *
   * @param value A JavaScript primitive (undefined, null, boolean, number or string)
   */

  function PushPrimitive(op, primitive) {
    var p = primitive;
    if (typeof p === 'number') {
      p = (0, _util.isSmallInt)(p) ? (0, _util.encodeImmediate)(p) : nonSmallIntOperand(p);
    }
    op(30
    /* Primitive */, p);
  }
  /**
   * Invoke a foreign function (a "helper") based on a statically known handle
   *
   * @param op The op creation function
   * @param handle A handle
   * @param positional An optional list of expressions to compile
   * @param named An optional list of named arguments (name + expression) to compile
   */

  function Call(op, handle, positional, named) {
    op(0
    /* PushFrame */);
    SimpleArgs(op, positional, named, false);
    op(16
    /* Helper */, handle);
    op(1
    /* PopFrame */);
    op(36
    /* Fetch */, _vm.$v0);
  }
  /**
   * Invoke a foreign function (a "helper") based on a dynamically loaded definition
   *
   * @param op The op creation function
   * @param positional An optional list of expressions to compile
   * @param named An optional list of named arguments (name + expression) to compile
   */

  function CallDynamic(op, positional, named, append) {
    op(0
    /* PushFrame */);
    SimpleArgs(op, positional, named, false);
    op(33
    /* Dup */, _vm.$fp, 1);
    op(107
    /* DynamicHelper */);
    if (append) {
      op(36
      /* Fetch */, _vm.$v0);
      append();
      op(1
      /* PopFrame */);
      op(34
      /* Pop */, 1);
    } else {
      op(1
      /* PopFrame */);
      op(34
      /* Pop */, 1);
      op(36
      /* Fetch */, _vm.$v0);
    }
  }
  /**
   * Evaluate statements in the context of new dynamic scope entries. Move entries from the
   * stack into named entries in the dynamic scope, then evaluate the statements, then pop
   * the dynamic scope
   *
   * @param names a list of dynamic scope names
   * @param block a function that returns a list of statements to evaluate
   */

  function DynamicScope(op, names, block) {
    op(59
    /* PushDynamicScope */);
    op(58
    /* BindDynamicScope */, names);
    block();
    op(60
    /* PopDynamicScope */);
  }
  function Curry(op, type, definition, positional, named) {
    op(0
    /* PushFrame */);
    SimpleArgs(op, positional, named, false);
    op(86
    /* CaptureArgs */);
    expr(op, definition);
    op(77
    /* Curry */, type, isStrictMode());
    op(1
    /* PopFrame */);
    op(36
    /* Fetch */, _vm.$v0);
  }

  /**
   * Yield to a block located at a particular symbol location.
   *
   * @param to the symbol containing the block to yield to
   * @param params optional block parameters to yield to the block
   */

  function YieldBlock(op, to, positional) {
    SimpleArgs(op, positional, null, true);
    op(23
    /* GetBlock */, to);
    op(24
    /* SpreadBlock */);
    op(61
    /* CompileBlock */);
    op(64
    /* InvokeYield */);
    op(40
    /* PopScope */);
    op(1
    /* PopFrame */);
  }
  /**
   * Push an (optional) yieldable block onto the stack. The yieldable block must be known
   * statically at compile time.
   *
   * @param block An optional Compilable block
   */

  function PushYieldableBlock(op, block) {
    PushSymbolTable(op, block && block[1]);
    op(62
    /* PushBlockScope */);
    PushCompilable(op, block);
  }
  /**
   * Invoke a block that is known statically at compile time.
   *
   * @param block a Compilable block
   */

  function InvokeStaticBlock(op, block) {
    op(0
    /* PushFrame */);
    PushCompilable(op, block);
    op(61
    /* CompileBlock */);
    op(2
    /* InvokeVirtual */);
    op(1
    /* PopFrame */);
  }
  /**
   * Invoke a static block, preserving some number of stack entries for use in
   * updating.
   *
   * @param block A compilable block
   * @param callerCount A number of stack entries to preserve
   */

  function InvokeStaticBlockWithStack(op, block, callerCount) {
    var parameters = block[1];
    var calleeCount = parameters.length;
    var count = Math.min(callerCount, calleeCount);
    if (count === 0) {
      InvokeStaticBlock(op, block);
      return;
    }
    op(0
    /* PushFrame */);
    if (count) {
      op(39
      /* ChildScope */);
      for (var i = 0; i < count; i++) {
        op(33
        /* Dup */, _vm.$fp, callerCount - i);
        op(19
        /* SetVariable */, parameters[i]);
      }
    }
    PushCompilable(op, block);
    op(61
    /* CompileBlock */);
    op(2
    /* InvokeVirtual */);
    if (count) {
      op(40
      /* PopScope */);
    }
    op(1
    /* PopFrame */);
  }
  function PushSymbolTable(op, parameters) {
    if (parameters !== null) {
      op(63
      /* PushSymbolTable */, symbolTableOperand({
        parameters
      }));
    } else {
      PushPrimitive(op, null);
    }
  }
  function PushCompilable(op, _block) {
    if (_block === null) {
      PushPrimitive(op, null);
    } else {
      op(28
      /* Constant */, blockOperand(_block));
    }
  }
  function SwitchCases(op, bootstrap, callback) {
    // Setup the switch DSL
    var clauses = [];
    var count = 0;
    function when(match, callback) {
      clauses.push({
        match,
        callback,
        label: `CLAUSE${count++}`
      });
    } // Call the callback

    callback(when); // Emit the opcodes for the switch

    op(69
    /* Enter */, 1);
    bootstrap();
    op(1001
    /* StartLabels */); // First, emit the jump opcodes. We don't need a jump for the last
    // opcode, since it bleeds directly into its clause.

    for (var clause of clauses.slice(0, -1)) {
      op(67
      /* JumpEq */, labelOperand(clause.label), clause.match);
    } // Enumerate the clauses in reverse order. Earlier matches will
    // require fewer checks.

    for (var i = clauses.length - 1; i >= 0; i--) {
      var _clause = clauses[i];
      op(1000
      /* Label */, _clause.label);
      op(34
      /* Pop */, 1);
      _clause.callback(); // The first match is special: it is placed directly before the END
      // label, so no additional jump is needed at the end of it.

      if (i !== 0) {
        op(4
        /* Jump */, labelOperand('END'));
      }
    }
    op(1000
    /* Label */, 'END');
    op(1002
    /* StopLabels */);
    op(70
    /* Exit */);
  }
  /**
   * A convenience for pushing some arguments on the stack and
   * running some code if the code needs to be re-executed during
   * updating execution if some of the arguments have changed.
   *
   * # Initial Execution
   *
   * The `args` function should push zero or more arguments onto
   * the stack and return the number of arguments pushed.
   *
   * The `body` function provides the instructions to execute both
   * during initial execution and during updating execution.
   *
   * Internally, this function starts by pushing a new frame, so
   * that the body can return and sets the return point ($ra) to
   * the ENDINITIAL label.
   *
   * It then executes the `args` function, which adds instructions
   * responsible for pushing the arguments for the block to the
   * stack. These arguments will be restored to the stack before
   * updating execution.
   *
   * Next, it adds the Enter opcode, which marks the current position
   * in the DOM, and remembers the current $pc (the next instruction)
   * as the first instruction to execute during updating execution.
   *
   * Next, it runs `body`, which adds the opcodes that should
   * execute both during initial execution and during updating execution.
   * If the `body` wishes to finish early, it should Jump to the
   * `FINALLY` label.
   *
   * Next, it adds the FINALLY label, followed by:
   *
   * - the Exit opcode, which finalizes the marked DOM started by the
   *   Enter opcode.
   * - the Return opcode, which returns to the current return point
   *   ($ra).
   *
   * Finally, it adds the ENDINITIAL label followed by the PopFrame
   * instruction, which restores $fp, $sp and $ra.
   *
   * # Updating Execution
   *
   * Updating execution for this `replayable` occurs if the `body` added an
   * assertion, via one of the `JumpIf`, `JumpUnless` or `AssertSame` opcodes.
   *
   * If, during updating executon, the assertion fails, the initial VM is
   * restored, and the stored arguments are pushed onto the stack. The DOM
   * between the starting and ending markers is cleared, and the VM's cursor
   * is set to the area just cleared.
   *
   * The return point ($ra) is set to -1, the exit instruction.
   *
   * Finally, the $pc is set to to the instruction saved off by the
   * Enter opcode during initial execution, and execution proceeds as
   * usual.
   *
   * The only difference is that when a `Return` instruction is
   * encountered, the program jumps to -1 rather than the END label,
   * and the PopFrame opcode is not needed.
   */

  function Replayable(op, args, body) {
    // Start a new label frame, to give END and RETURN
    // a unique meaning.
    op(1001
    /* StartLabels */);
    op(0
    /* PushFrame */); // If the body invokes a block, its return will return to
    // END. Otherwise, the return in RETURN will return to END.

    op(6
    /* ReturnTo */, labelOperand('ENDINITIAL')); // Push the arguments onto the stack. The args() function
    // tells us how many stack elements to retain for re-execution
    // when updating.

    var count = args(); // Start a new updating closure, remembering `count` elements
    // from the stack. Everything after this point, and before END,
    // will execute both initially and to update the block.
    //
    // The enter and exit opcodes also track the area of the DOM
    // associated with this block. If an assertion inside the block
    // fails (for example, the test value changes from true to false
    // in an #if), the DOM is cleared and the program is re-executed,
    // restoring `count` elements to the stack and executing the
    // instructions between the enter and exit.

    op(69
    /* Enter */, count); // Evaluate the body of the block. The body of the block may
    // return, which will jump execution to END during initial
    // execution, and exit the updating routine.

    body(); // All execution paths in the body should run the FINALLY once
    // they are done. It is executed both during initial execution
    // and during updating execution.

    op(1000
    /* Label */, 'FINALLY'); // Finalize the DOM.

    op(70
    /* Exit */); // In initial execution, this is a noop: it returns to the
    // immediately following opcode. In updating execution, this
    // exits the updating routine.

    op(5
    /* Return */); // Cleanup code for the block. Runs on initial execution
    // but not on updating.

    op(1000
    /* Label */, 'ENDINITIAL');
    op(1
    /* PopFrame */);
    op(1002
    /* StopLabels */);
  }
  /**
   * A specialized version of the `replayable` convenience that allows the
   * caller to provide different code based upon whether the item at
   * the top of the stack is true or false.
   *
   * As in `replayable`, the `ifTrue` and `ifFalse` code can invoke `return`.
   *
   * During the initial execution, a `return` will continue execution
   * in the cleanup code, which finalizes the current DOM block and pops
   * the current frame.
   *
   * During the updating execution, a `return` will exit the updating
   * routine, as it can reuse the DOM block and is always only a single
   * frame deep.
   */

  function ReplayableIf(op, args, ifTrue, ifFalse) {
    return Replayable(op, args, () => {
      // If the conditional is false, jump to the ELSE label.
      op(66
      /* JumpUnless */, labelOperand('ELSE')); // Otherwise, execute the code associated with the true branch.

      ifTrue(); // We're done, so return. In the initial execution, this runs
      // the cleanup code. In the updating VM, it exits the updating
      // routine.

      op(4
      /* Jump */, labelOperand('FINALLY'));
      op(1000
      /* Label */, 'ELSE'); // If the conditional is false, and code associatied ith the
      // false branch was provided, execute it. If there was no code
      // associated with the false branch, jumping to the else statement
      // has no other behavior.

      if (ifFalse !== undefined) {
        ifFalse();
      }
    });
  }
  var ATTRS_BLOCK = '&attrs';
  function InvokeComponent(op, component, _elementBlock, positional, named, _blocks) {
    var {
      compilable,
      capabilities,
      handle
    } = component;
    var elementBlock = _elementBlock ? [_elementBlock, []] : null;
    var blocks = Array.isArray(_blocks) || _blocks === null ? namedBlocks(_blocks) : _blocks;
    if (compilable) {
      op(78
      /* PushComponentDefinition */, handle);
      InvokeStaticComponent(op, {
        capabilities: capabilities,
        layout: compilable,
        elementBlock,
        positional,
        named,
        blocks
      });
    } else {
      op(78
      /* PushComponentDefinition */, handle);
      InvokeNonStaticComponent(op, {
        capabilities: capabilities,
        elementBlock,
        positional,
        named,
        atNames: true,
        blocks
      });
    }
  }
  function InvokeDynamicComponent(op, definition, _elementBlock, positional, named, _blocks, atNames, curried) {
    var elementBlock = _elementBlock ? [_elementBlock, []] : null;
    var blocks = Array.isArray(_blocks) || _blocks === null ? namedBlocks(_blocks) : _blocks;
    Replayable(op, () => {
      expr(op, definition);
      op(33
      /* Dup */, _vm.$sp, 0);
      return 2;
    }, () => {
      op(66
      /* JumpUnless */, labelOperand('ELSE'));
      if (curried) {
        op(81
        /* ResolveCurriedComponent */);
      } else {
        op(80
        /* ResolveDynamicComponent */, isStrictMode());
      }
      op(79
      /* PushDynamicComponentInstance */);
      InvokeNonStaticComponent(op, {
        capabilities: true,
        elementBlock,
        positional,
        named,
        atNames,
        blocks
      });
      op(1000
      /* Label */, 'ELSE');
    });
  }
  function InvokeStaticComponent(op, {
    capabilities,
    layout,
    elementBlock,
    positional,
    named,
    blocks
  }) {
    var {
      symbolTable
    } = layout;
    var bailOut = symbolTable.hasEval || (0, _manager.hasCapability)(capabilities, 4
    /* PrepareArgs */);
    if (bailOut) {
      InvokeNonStaticComponent(op, {
        capabilities,
        elementBlock,
        positional,
        named,
        atNames: true,
        blocks,
        layout
      });
      return;
    }
    op(36
    /* Fetch */, _vm.$s0);
    op(33
    /* Dup */, _vm.$sp, 1);
    op(35
    /* Load */, _vm.$s0);
    op(0
    /* PushFrame */); // Setup arguments

    var {
      symbols
    } = symbolTable; // As we push values onto the stack, we store the symbols associated  with them
    // so that we can set them on the scope later on with SetVariable and SetBlock

    var blockSymbols = [];
    var argSymbols = [];
    var argNames = []; // First we push the blocks onto the stack

    var blockNames = blocks.names; // Starting with the attrs block, if it exists and is referenced in the component

    if (elementBlock !== null) {
      var symbol = symbols.indexOf(ATTRS_BLOCK);
      if (symbol !== -1) {
        PushYieldableBlock(op, elementBlock);
        blockSymbols.push(symbol);
      }
    } // Followed by the other blocks, if they exist and are referenced in the component.
    // Also store the index of the associated symbol.

    for (var i = 0; i < blockNames.length; i++) {
      var name = blockNames[i];
      var _symbol = symbols.indexOf(`&${name}`);
      if (_symbol !== -1) {
        PushYieldableBlock(op, blocks.get(name));
        blockSymbols.push(_symbol);
      }
    } // Next up we have arguments. If the component has the `createArgs` capability,
    // then it wants access to the arguments in JavaScript. We can't know whether
    // or not an argument is used, so we have to give access to all of them.

    if ((0, _manager.hasCapability)(capabilities, 8
    /* CreateArgs */)) {
      // First we push positional arguments
      var count = CompilePositional(op, positional); // setup the flags with the count of positionals, and to indicate that atNames
      // are used

      var flags = count << 4;
      flags |= 0b1000;
      var names = _util.EMPTY_STRING_ARRAY; // Next, if named args exist, push them all. If they have an associated symbol
      // in the invoked component (e.g. they are used within its template), we push
      // that symbol. If not, we still push the expression as it may be used, and
      // we store the symbol as -1 (this is used later).

      if (named !== null) {
        names = named[0];
        var val = named[1];
        for (var _i2 = 0; _i2 < val.length; _i2++) {
          var _symbol2 = symbols.indexOf(names[_i2]);
          expr(op, val[_i2]);
          argSymbols.push(_symbol2);
        }
      } // Finally, push the VM arguments themselves. These args won't need access
      // to blocks (they aren't accessible from userland anyways), so we push an
      // empty array instead of the actual block names.

      op(82
      /* PushArgs */, names, _util.EMPTY_STRING_ARRAY, flags); // And push an extra pop operation to remove the args before we begin setting
      // variables on the local context

      argSymbols.push(-1);
    } else if (named !== null) {
      // If the component does not have the `createArgs` capability, then the only
      // expressions we need to push onto the stack are those that are actually
      // referenced in the template of the invoked component (e.g. have symbols).
      var _names = named[0];
      var _val = named[1];
      for (var _i3 = 0; _i3 < _val.length; _i3++) {
        var _name3 = _names[_i3];
        var _symbol3 = symbols.indexOf(_name3);
        if (_symbol3 !== -1) {
          expr(op, _val[_i3]);
          argSymbols.push(_symbol3);
          argNames.push(_name3);
        }
      }
    }
    op(97
    /* BeginComponentTransaction */, _vm.$s0);
    if ((0, _manager.hasCapability)(capabilities, 64
    /* DynamicScope */)) {
      op(59
      /* PushDynamicScope */);
    }
    if ((0, _manager.hasCapability)(capabilities, 512
    /* CreateInstance */)) {
      op(87
      /* CreateComponent */, blocks.has('default') | 0, _vm.$s0);
    }
    op(88
    /* RegisterComponentDestructor */, _vm.$s0);
    if ((0, _manager.hasCapability)(capabilities, 8
    /* CreateArgs */)) {
      op(90
      /* GetComponentSelf */, _vm.$s0);
    } else {
      op(90
      /* GetComponentSelf */, _vm.$s0, argNames);
    } // Setup the new root scope for the component

    op(37
    /* RootScope */, symbols.length + 1, Object.keys(blocks).length > 0 ? 1 : 0); // Pop the self reference off the stack and set it to the symbol for `this`
    // in the new scope. This is why all subsequent symbols are increased by one.

    op(19
    /* SetVariable */, 0); // Going in reverse, now we pop the args/blocks off the stack, starting with
    // arguments, and assign them to their symbols in the new scope.

    for (var _i4 = argSymbols.length - 1; _i4 >= 0; _i4--) {
      var _symbol4 = argSymbols[_i4];
      if (_symbol4 === -1) {
        // The expression was not bound to a local symbol, it was only pushed to be
        // used with VM args in the javascript side
        op(34
        /* Pop */, 1);
      } else {
        op(19
        /* SetVariable */, _symbol4 + 1);
      }
    } // if any positional params exist, pop them off the stack as well

    if (positional !== null) {
      op(34
      /* Pop */, positional.length);
    } // Finish up by popping off and assigning blocks

    for (var _i5 = blockSymbols.length - 1; _i5 >= 0; _i5--) {
      var _symbol5 = blockSymbols[_i5];
      op(20
      /* SetBlock */, _symbol5 + 1);
    }
    op(28
    /* Constant */, layoutOperand(layout));
    op(61
    /* CompileBlock */);
    op(2
    /* InvokeVirtual */);
    op(100
    /* DidRenderLayout */, _vm.$s0);
    op(1
    /* PopFrame */);
    op(40
    /* PopScope */);
    if ((0, _manager.hasCapability)(capabilities, 64
    /* DynamicScope */)) {
      op(60
      /* PopDynamicScope */);
    }
    op(98
    /* CommitComponentTransaction */);
    op(35
    /* Load */, _vm.$s0);
  }
  function InvokeNonStaticComponent(op, {
    capabilities,
    elementBlock,
    positional,
    named,
    atNames,
    blocks: namedBlocks$$1,
    layout
  }) {
    var bindableBlocks = !!namedBlocks$$1;
    var bindableAtNames = capabilities === true || (0, _manager.hasCapability)(capabilities, 4
    /* PrepareArgs */) || !!(named && named[0].length !== 0);
    var blocks = namedBlocks$$1.with('attrs', elementBlock);
    op(36
    /* Fetch */, _vm.$s0);
    op(33
    /* Dup */, _vm.$sp, 1);
    op(35
    /* Load */, _vm.$s0);
    op(0
    /* PushFrame */);
    CompileArgs(op, positional, named, blocks, atNames);
    op(85
    /* PrepareArgs */, _vm.$s0);
    invokePreparedComponent(op, blocks.has('default'), bindableBlocks, bindableAtNames, () => {
      if (layout) {
        op(63
        /* PushSymbolTable */, symbolTableOperand(layout.symbolTable));
        op(28
        /* Constant */, layoutOperand(layout));
        op(61
        /* CompileBlock */);
      } else {
        op(92
        /* GetComponentLayout */, _vm.$s0);
      }
      op(95
      /* PopulateLayout */, _vm.$s0);
    });
    op(35
    /* Load */, _vm.$s0);
  }
  function WrappedComponent(op, layout, attrsBlockNumber) {
    op(1001
    /* StartLabels */);
    WithSavedRegister(op, _vm.$s1, () => {
      op(91
      /* GetComponentTagName */, _vm.$s0);
      op(31
      /* PrimitiveReference */);
      op(33
      /* Dup */, _vm.$sp, 0);
    });
    op(66
    /* JumpUnless */, labelOperand('BODY'));
    op(36
    /* Fetch */, _vm.$s1);
    op(89
    /* PutComponentOperations */);
    op(49
    /* OpenDynamicElement */);
    op(99
    /* DidCreateElement */, _vm.$s0);
    YieldBlock(op, attrsBlockNumber, null);
    op(54
    /* FlushElement */);
    op(1000
    /* Label */, 'BODY');
    InvokeStaticBlock(op, [layout.block[0], []]);
    op(36
    /* Fetch */, _vm.$s1);
    op(66
    /* JumpUnless */, labelOperand('END'));
    op(55
    /* CloseElement */);
    op(1000
    /* Label */, 'END');
    op(35
    /* Load */, _vm.$s1);
    op(1002
    /* StopLabels */);
  }
  function invokePreparedComponent(op, hasBlock, bindableBlocks, bindableAtNames, populateLayout = null) {
    op(97
    /* BeginComponentTransaction */, _vm.$s0);
    op(59
    /* PushDynamicScope */);
    op(87
    /* CreateComponent */, hasBlock | 0, _vm.$s0); // this has to run after createComponent to allow
    // for late-bound layouts, but a caller is free
    // to populate the layout earlier if it wants to
    // and do nothing here.

    if (populateLayout) {
      populateLayout();
    }
    op(88
    /* RegisterComponentDestructor */, _vm.$s0);
    op(90
    /* GetComponentSelf */, _vm.$s0);
    op(38
    /* VirtualRootScope */, _vm.$s0);
    op(19
    /* SetVariable */, 0);
    op(94
    /* SetupForEval */, _vm.$s0);
    if (bindableAtNames) op(17
    /* SetNamedVariables */, _vm.$s0);
    if (bindableBlocks) op(18
    /* SetBlocks */, _vm.$s0);
    op(34
    /* Pop */, 1);
    op(96
    /* InvokeComponentLayout */, _vm.$s0);
    op(100
    /* DidRenderLayout */, _vm.$s0);
    op(1
    /* PopFrame */);
    op(40
    /* PopScope */);
    op(60
    /* PopDynamicScope */);
    op(98
    /* CommitComponentTransaction */);
  }
  function InvokeBareComponent(op) {
    op(36
    /* Fetch */, _vm.$s0);
    op(33
    /* Dup */, _vm.$sp, 1);
    op(35
    /* Load */, _vm.$s0);
    op(0
    /* PushFrame */);
    op(83
    /* PushEmptyArgs */);
    op(85
    /* PrepareArgs */, _vm.$s0);
    invokePreparedComponent(op, false, false, true, () => {
      op(92
      /* GetComponentLayout */, _vm.$s0);
      op(95
      /* PopulateLayout */, _vm.$s0);
    });
    op(35
    /* Load */, _vm.$s0);
  }
  function WithSavedRegister(op, register, block) {
    op(36
    /* Fetch */, register);
    block();
    op(35
    /* Load */, register);
  }
  class StdLib {
    constructor(main, trustingGuardedAppend, cautiousGuardedAppend, trustingNonDynamicAppend, cautiousNonDynamicAppend) {
      this.main = main;
      this.trustingGuardedAppend = trustingGuardedAppend;
      this.cautiousGuardedAppend = cautiousGuardedAppend;
      this.trustingNonDynamicAppend = trustingNonDynamicAppend;
      this.cautiousNonDynamicAppend = cautiousNonDynamicAppend;
    }
    get 'trusting-append'() {
      return this.trustingGuardedAppend;
    }
    get 'cautious-append'() {
      return this.cautiousGuardedAppend;
    }
    get 'trusting-non-dynamic-append'() {
      return this.trustingNonDynamicAppend;
    }
    get 'cautious-non-dynamic-append'() {
      return this.cautiousNonDynamicAppend;
    }
    getAppend(trusting) {
      return trusting ? this.trustingGuardedAppend : this.cautiousGuardedAppend;
    }
  }
  _exports.StdLib = StdLib;
  function programCompilationContext(artifacts, resolver) {
    return new CompileTimeCompilationContextImpl(artifacts, resolver);
  }
  function templateCompilationContext(program, meta) {
    var encoder = new EncoderImpl(program.heap, meta, program.stdlib);
    return {
      program,
      encoder,
      meta
    };
  }
  var debugCompiler;
  var STATEMENTS = new Compilers();
  var INFLATE_ATTR_TABLE = ['class', 'id', 'value', 'name', 'type', 'style', 'href'];
  var INFLATE_TAG_TABLE = ['div', 'span', 'p', 'a'];
  function inflateTagName(tagName) {
    return typeof tagName === 'string' ? tagName : INFLATE_TAG_TABLE[tagName];
  }
  function inflateAttrName(attrName) {
    return typeof attrName === 'string' ? attrName : INFLATE_ATTR_TABLE[attrName];
  }
  STATEMENTS.add(3
  /* Comment */, (op, sexp) => op(42
  /* Comment */, sexp[1]));
  STATEMENTS.add(13
  /* CloseElement */, op => op(55
  /* CloseElement */));
  STATEMENTS.add(12
  /* FlushElement */, op => op(54
  /* FlushElement */));
  STATEMENTS.add(4
  /* Modifier */, (op, [, expression, positional, named]) => {
    if (isGetFreeModifier(expression)) {
      op(1003
      /* ResolveModifier */, expression, handle => {
        op(0
        /* PushFrame */);
        SimpleArgs(op, positional, named, false);
        op(57
        /* Modifier */, handle);
        op(1
        /* PopFrame */);
      });
    } else {
      expr(op, expression);
      op(0
      /* PushFrame */);
      SimpleArgs(op, positional, named, false);
      op(33
      /* Dup */, _vm.$fp, 1);
      op(108
      /* DynamicModifier */);
      op(1
      /* PopFrame */);
    }
  });
  STATEMENTS.add(14
  /* StaticAttr */, (op, [, name, value, namespace]) => {
    op(51
    /* StaticAttr */, inflateAttrName(name), value, namespace !== null && namespace !== void 0 ? namespace : null);
  });
  STATEMENTS.add(24
  /* StaticComponentAttr */, (op, [, name, value, namespace]) => {
    op(105
    /* StaticComponentAttr */, inflateAttrName(name), value, namespace !== null && namespace !== void 0 ? namespace : null);
  });
  STATEMENTS.add(15
  /* DynamicAttr */, (op, [, name, value, namespace]) => {
    expr(op, value);
    op(52
    /* DynamicAttr */, inflateAttrName(name), false, namespace !== null && namespace !== void 0 ? namespace : null);
  });
  STATEMENTS.add(22
  /* TrustingDynamicAttr */, (op, [, name, value, namespace]) => {
    expr(op, value);
    op(52
    /* DynamicAttr */, inflateAttrName(name), true, namespace !== null && namespace !== void 0 ? namespace : null);
  });
  STATEMENTS.add(16
  /* ComponentAttr */, (op, [, name, value, namespace]) => {
    expr(op, value);
    op(53
    /* ComponentAttr */, inflateAttrName(name), false, namespace !== null && namespace !== void 0 ? namespace : null);
  });
  STATEMENTS.add(23
  /* TrustingComponentAttr */, (op, [, name, value, namespace]) => {
    expr(op, value);
    op(53
    /* ComponentAttr */, inflateAttrName(name), true, namespace !== null && namespace !== void 0 ? namespace : null);
  });
  STATEMENTS.add(10
  /* OpenElement */, (op, [, tag]) => {
    op(48
    /* OpenElement */, inflateTagName(tag));
  });
  STATEMENTS.add(11
  /* OpenElementWithSplat */, (op, [, tag]) => {
    op(89
    /* PutComponentOperations */);
    op(48
    /* OpenElement */, inflateTagName(tag));
  });
  STATEMENTS.add(8
  /* Component */, (op, [, expr$$1, elementBlock, named, blocks]) => {
    if (isGetFreeComponent(expr$$1)) {
      op(1004
      /* ResolveComponent */, expr$$1, component => {
        InvokeComponent(op, component, elementBlock, null, named, blocks);
      });
    } else {
      // otherwise, the component name was an expression, so resolve the expression
      // and invoke it as a dynamic component
      InvokeDynamicComponent(op, expr$$1, elementBlock, null, named, blocks, true, true);
    }
  });
  STATEMENTS.add(18
  /* Yield */, (op, [, to, params]) => YieldBlock(op, to, params));
  STATEMENTS.add(17
  /* AttrSplat */, (op, [, to]) => YieldBlock(op, to, null));
  STATEMENTS.add(26
  /* Debugger */, (op, [, evalInfo]) => op(103
  /* Debugger */, evalSymbolsOperand(), evalInfo));
  STATEMENTS.add(1
  /* Append */, (op, [, value]) => {
    // Special case for static values
    if (!Array.isArray(value)) {
      op(41
      /* Text */, value === null || value === undefined ? '' : String(value));
    } else if (isGetFreeOptionalComponentOrHelper(value)) {
      op(1008
      /* ResolveOptionalComponentOrHelper */, value, {
        ifComponent(component) {
          InvokeComponent(op, component, null, null, null, null);
        },
        ifHelper(handle) {
          op(0
          /* PushFrame */);
          Call(op, handle, null, null);
          op(3
          /* InvokeStatic */, stdlibOperand('cautious-non-dynamic-append'));
          op(1
          /* PopFrame */);
        },
        ifValue(handle) {
          op(0
          /* PushFrame */);
          op(29
          /* ConstantReference */, handle);
          op(3
          /* InvokeStatic */, stdlibOperand('cautious-non-dynamic-append'));
          op(1
          /* PopFrame */);
        }
      });
    } else if (value[0] === 28
    /* Call */) {
      var [, expression, positional, named] = value;
      if (isGetFreeComponentOrHelper(expression)) {
        op(1007
        /* ResolveComponentOrHelper */, expression, {
          ifComponent(component) {
            InvokeComponent(op, component, null, positional, hashToArgs(named), null);
          },
          ifHelper(handle) {
            op(0
            /* PushFrame */);
            Call(op, handle, positional, named);
            op(3
            /* InvokeStatic */, stdlibOperand('cautious-non-dynamic-append'));
            op(1
            /* PopFrame */);
          }
        });
      } else {
        SwitchCases(op, () => {
          expr(op, expression);
          op(106
          /* DynamicContentType */);
        }, when => {
          when(0
          /* Component */, () => {
            op(81
            /* ResolveCurriedComponent */);
            op(79
            /* PushDynamicComponentInstance */);
            InvokeNonStaticComponent(op, {
              capabilities: true,
              elementBlock: null,
              positional,
              named,
              atNames: false,
              blocks: namedBlocks(null)
            });
          });
          when(1
          /* Helper */, () => {
            CallDynamic(op, positional, named, () => {
              op(3
              /* InvokeStatic */, stdlibOperand('cautious-non-dynamic-append'));
            });
          });
        });
      }
    } else {
      op(0
      /* PushFrame */);
      expr(op, value);
      op(3
      /* InvokeStatic */, stdlibOperand('cautious-append'));
      op(1
      /* PopFrame */);
    }
  });
  STATEMENTS.add(2
  /* TrustingAppend */, (op, [, value]) => {
    if (!Array.isArray(value)) {
      op(41
      /* Text */, value === null || value === undefined ? '' : String(value));
    } else {
      op(0
      /* PushFrame */);
      expr(op, value);
      op(3
      /* InvokeStatic */, stdlibOperand('trusting-append'));
      op(1
      /* PopFrame */);
    }
  });
  STATEMENTS.add(6
  /* Block */, (op, [, expr$$1, positional, named, blocks]) => {
    if (isGetFreeComponent(expr$$1)) {
      op(1004
      /* ResolveComponent */, expr$$1, component => {
        InvokeComponent(op, component, null, positional, hashToArgs(named), blocks);
      });
    } else {
      InvokeDynamicComponent(op, expr$$1, null, positional, named, blocks, false, false);
    }
  });
  STATEMENTS.add(40
  /* InElement */, (op, [, block, guid, destination, insertBefore]) => {
    ReplayableIf(op, () => {
      expr(op, guid);
      if (insertBefore === undefined) {
        PushPrimitiveReference(op, undefined);
      } else {
        expr(op, insertBefore);
      }
      expr(op, destination);
      op(33
      /* Dup */, _vm.$sp, 0);
      return 4;
    }, () => {
      op(50
      /* PushRemoteElement */);
      InvokeStaticBlock(op, block);
      op(56
      /* PopRemoteElement */);
    });
  });
  STATEMENTS.add(41
  /* If */, (op, [, condition, block, inverse]) => ReplayableIf(op, () => {
    expr(op, condition);
    op(71
    /* ToBoolean */);
    return 1;
  }, () => {
    InvokeStaticBlock(op, block);
  }, inverse ? () => {
    InvokeStaticBlock(op, inverse);
  } : undefined));
  STATEMENTS.add(42
  /* Each */, (op, [, value, key, block, inverse]) => Replayable(op, () => {
    if (key) {
      expr(op, key);
    } else {
      PushPrimitiveReference(op, null);
    }
    expr(op, value);
    return 2;
  }, () => {
    op(72
    /* EnterList */, labelOperand('BODY'), labelOperand('ELSE'));
    op(0
    /* PushFrame */);
    op(33
    /* Dup */, _vm.$fp, 1);
    op(6
    /* ReturnTo */, labelOperand('ITER'));
    op(1000
    /* Label */, 'ITER');
    op(74
    /* Iterate */, labelOperand('BREAK'));
    op(1000
    /* Label */, 'BODY');
    InvokeStaticBlockWithStack(op, block, 2);
    op(34
    /* Pop */, 2);
    op(4
    /* Jump */, labelOperand('FINALLY'));
    op(1000
    /* Label */, 'BREAK');
    op(1
    /* PopFrame */);
    op(73
    /* ExitList */);
    op(4
    /* Jump */, labelOperand('FINALLY'));
    op(1000
    /* Label */, 'ELSE');
    if (inverse) {
      InvokeStaticBlock(op, inverse);
    }
  }));
  STATEMENTS.add(43
  /* With */, (op, [, value, block, inverse]) => {
    ReplayableIf(op, () => {
      expr(op, value);
      op(33
      /* Dup */, _vm.$sp, 0);
      op(71
      /* ToBoolean */);
      return 2;
    }, () => {
      InvokeStaticBlockWithStack(op, block, 1);
    }, () => {
      if (inverse) {
        InvokeStaticBlock(op, inverse);
      }
    });
  });
  STATEMENTS.add(44
  /* Let */, (op, [, positional, block]) => {
    var count = CompilePositional(op, positional);
    InvokeStaticBlockWithStack(op, block, count);
  });
  STATEMENTS.add(45
  /* WithDynamicVars */, (op, [, named, block]) => {
    if (named) {
      var [names, expressions] = named;
      CompilePositional(op, expressions);
      DynamicScope(op, names, () => {
        InvokeStaticBlock(op, block);
      });
    } else {
      InvokeStaticBlock(op, block);
    }
  });
  STATEMENTS.add(46
  /* InvokeComponent */, (op, [, expr$$1, positional, named, blocks]) => {
    if (isGetFreeComponent(expr$$1)) {
      op(1004
      /* ResolveComponent */, expr$$1, component => {
        InvokeComponent(op, component, null, positional, hashToArgs(named), blocks);
      });
    } else {
      InvokeDynamicComponent(op, expr$$1, null, positional, named, blocks, false, false);
    }
  });
  function hashToArgs(hash) {
    if (hash === null) return null;
    var names = hash[0].map(key => `@${key}`);
    return [names, hash[1]];
  }
  var PLACEHOLDER_HANDLE = -1;
  class CompilableTemplateImpl {
    constructor(statements, meta$$1,
    // Part of CompilableTemplate
    symbolTable,
    // Used for debugging
    moduleName = 'plain block') {
      this.statements = statements;
      this.meta = meta$$1;
      this.symbolTable = symbolTable;
      this.moduleName = moduleName;
      this.compiled = null;
    } // Part of CompilableTemplate

    compile(context) {
      return maybeCompile(this, context);
    }
  }
  function compilable(layout, moduleName) {
    var [statements, symbols, hasEval] = layout.block;
    return new CompilableTemplateImpl(statements, meta(layout), {
      symbols,
      hasEval
    }, moduleName);
  }
  function maybeCompile(compilable, context) {
    if (compilable.compiled !== null) return compilable.compiled;
    compilable.compiled = PLACEHOLDER_HANDLE;
    var {
      statements,
      meta: meta$$1
    } = compilable;
    var result = compileStatements(statements, meta$$1, context);
    compilable.compiled = result;
    return result;
  }
  function compileStatements(statements, meta$$1, syntaxContext) {
    var sCompiler = STATEMENTS;
    var context = templateCompilationContext(syntaxContext, meta$$1);
    var {
      encoder,
      program: {
        constants,
        resolver
      }
    } = context;
    function pushOp(...op) {
      encodeOp(encoder, constants, resolver, meta$$1, op);
    }
    for (var i = 0; i < statements.length; i++) {
      sCompiler.compile(pushOp, statements[i]);
    }
    var handle = context.encoder.commit(meta$$1.size);
    return handle;
  }
  function compilableBlock(block, containing) {
    return new CompilableTemplateImpl(block[0], containing, {
      parameters: block[1] || _util.EMPTY_ARRAY
    });
  }
  class Labels {
    constructor() {
      this.labels = (0, _util.dict)();
      this.targets = [];
    }
    label(name, index) {
      this.labels[name] = index;
    }
    target(at, target) {
      this.targets.push({
        at,
        target
      });
    }
    patch(heap) {
      var {
        targets,
        labels
      } = this;
      for (var i = 0; i < targets.length; i++) {
        var {
          at,
          target
        } = targets[i];
        var address = labels[target] - at;
        heap.setbyaddr(at, address);
      }
    }
  }
  function encodeOp(encoder, constants, resolver, meta, op) {
    if (isBuilderOpcode(op[0])) {
      var [type, ...operands] = op;
      encoder.push(constants, type, ...operands);
    } else {
      switch (op[0]) {
        case 1000
        /* Label */:
          return encoder.label(op[1]);
        case 1001
        /* StartLabels */:
          return encoder.startLabels();
        case 1002
        /* StopLabels */:
          return encoder.stopLabels();
        case 1004
        /* ResolveComponent */:
          return resolveComponent(resolver, constants, meta, op);
        case 1003
        /* ResolveModifier */:
          return resolveModifier(resolver, constants, meta, op);
        case 1005
        /* ResolveHelper */:
          return resolveHelper(resolver, constants, meta, op);
        case 1007
        /* ResolveComponentOrHelper */:
          return resolveComponentOrHelper(resolver, constants, meta, op);
        case 1006
        /* ResolveOptionalHelper */:
          return resolveOptionalHelper(resolver, constants, meta, op);
        case 1008
        /* ResolveOptionalComponentOrHelper */:
          return resolveOptionalComponentOrHelper(resolver, constants, meta, op);
        case 1010
        /* ResolveLocal */:
          var freeVar = op[1];
          var name = meta.upvars[freeVar];
          var andThen = op[2];
          andThen(name, meta.moduleName);
          break;
        case 1011
        /* ResolveTemplateLocal */:
          var [, valueIndex, then] = op;
          var value = meta.scopeValues[valueIndex];
          then(constants.value(value));
          break;
        case 1009
        /* ResolveFree */:
          if (true /* DEBUG */) {
            var [, upvarIndex] = op;
            var freeName = meta.upvars[upvarIndex];
            throw new Error(`Attempted to resolve a value in a strict mode template, but that value was not in scope: ${freeName}`);
          }
          break;
        default:
          throw new Error(`Unexpected high level opcode ${op[0]}`);
      }
    }
  }
  class EncoderImpl {
    constructor(heap, meta, stdlib) {
      this.heap = heap;
      this.meta = meta;
      this.stdlib = stdlib;
      this.labelsStack = new _util.Stack();
      this.encoder = new _encoder.InstructionEncoderImpl([]);
      this.errors = [];
      this.handle = heap.malloc();
    }
    error(error) {
      this.encoder.encode(30
      /* Primitive */, 0);
      this.errors.push(error);
    }
    commit(size) {
      var handle = this.handle;
      this.heap.push(5
      /* Return */ | 1024
      /* MACHINE_MASK */);
      this.heap.finishMalloc(handle, size);
      if (this.errors.length) {
        return {
          errors: this.errors,
          handle
        };
      } else {
        return handle;
      }
    }
    push(constants, type, ...args) {
      var {
        heap
      } = this;
      if (true /* DEBUG */ && type > 255
      /* TYPE_SIZE */) {
        throw new Error(`Opcode type over 8-bits. Got ${type}.`);
      }
      var machine = (0, _vm.isMachineOp)(type) ? 1024
      /* MACHINE_MASK */ : 0;
      var first = type | machine | args.length << 8
      /* ARG_SHIFT */;
      heap.push(first);
      for (var i = 0; i < args.length; i++) {
        var op = args[i];
        heap.push(this.operand(constants, op));
      }
    }
    operand(constants, operand) {
      if (typeof operand === 'number') {
        return operand;
      }
      if (typeof operand === 'object' && operand !== null) {
        if (Array.isArray(operand)) {
          return (0, _util.encodeHandle)(constants.array(operand));
        } else {
          switch (operand.type) {
            case 1
            /* Label */:
              this.currentLabels.target(this.heap.offset, operand.value);
              return -1;
            case 2
            /* IsStrictMode */:
              return (0, _util.encodeHandle)(constants.value(this.meta.isStrictMode));
            case 3
            /* EvalSymbols */:
              return (0, _util.encodeHandle)(constants.array(this.meta.evalSymbols || _util.EMPTY_STRING_ARRAY));
            case 4
            /* Block */:
              return (0, _util.encodeHandle)(constants.value(compilableBlock(operand.value, this.meta)));
            case 5
            /* StdLib */:
              return this.stdlib[operand.value];
            case 6
            /* NonSmallInt */:
            case 7
            /* SymbolTable */:
            case 8
            /* Layout */:
              return constants.value(operand.value);
          }
        }
      }
      return (0, _util.encodeHandle)(constants.value(operand));
    }
    get currentLabels() {
      return this.labelsStack.current;
    }
    label(name) {
      this.currentLabels.label(name, this.heap.offset + 1);
    }
    startLabels() {
      this.labelsStack.push(new Labels());
    }
    stopLabels() {
      var label = this.labelsStack.pop();
      label.patch(this.heap);
    }
  }
  function isBuilderOpcode(op) {
    return op < 1000
    /* Start */;
  }
  function main(op) {
    op(75
    /* Main */, _vm.$s0);
    invokePreparedComponent(op, false, false, true);
  }
  /**
   * Append content to the DOM. This standard function triages content and does the
   * right thing based upon whether it's a string, safe string, component, fragment
   * or node.
   *
   * @param trusting whether to interpolate a string as raw HTML (corresponds to
   * triple curlies)
   */

  function StdAppend(op, trusting, nonDynamicAppend) {
    SwitchCases(op, () => op(76
    /* ContentType */), when => {
      when(2
      /* String */, () => {
        if (trusting) {
          op(68
          /* AssertSame */);
          op(43
          /* AppendHTML */);
        } else {
          op(47
          /* AppendText */);
        }
      });
      if (typeof nonDynamicAppend === 'number') {
        when(0
        /* Component */, () => {
          op(81
          /* ResolveCurriedComponent */);
          op(79
          /* PushDynamicComponentInstance */);
          InvokeBareComponent(op);
        });
        when(1
        /* Helper */, () => {
          CallDynamic(op, null, null, () => {
            op(3
            /* InvokeStatic */, nonDynamicAppend);
          });
        });
      } else {
        // when non-dynamic, we can no longer call the value (potentially because we've already called it)
        // this prevents infinite loops. We instead coerce the value, whatever it is, into the DOM.
        when(0
        /* Component */, () => {
          op(47
          /* AppendText */);
        });
        when(1
        /* Helper */, () => {
          op(47
          /* AppendText */);
        });
      }
      when(4
      /* SafeString */, () => {
        op(68
        /* AssertSame */);
        op(44
        /* AppendSafeHTML */);
      });
      when(5
      /* Fragment */, () => {
        op(68
        /* AssertSame */);
        op(45
        /* AppendDocumentFragment */);
      });
      when(6
      /* Node */, () => {
        op(68
        /* AssertSame */);
        op(46
        /* AppendNode */);
      });
    });
  }
  function compileStd(context) {
    var mainHandle = build(context, op => main(op));
    var trustingGuardedNonDynamicAppend = build(context, op => StdAppend(op, true, null));
    var cautiousGuardedNonDynamicAppend = build(context, op => StdAppend(op, false, null));
    var trustingGuardedDynamicAppend = build(context, op => StdAppend(op, true, trustingGuardedNonDynamicAppend));
    var cautiousGuardedDynamicAppend = build(context, op => StdAppend(op, false, cautiousGuardedNonDynamicAppend));
    return new StdLib(mainHandle, trustingGuardedDynamicAppend, cautiousGuardedDynamicAppend, trustingGuardedNonDynamicAppend, cautiousGuardedNonDynamicAppend);
  }
  var STDLIB_META = {
    evalSymbols: null,
    upvars: null,
    moduleName: 'stdlib',
    // TODO: ??
    scopeValues: null,
    isStrictMode: true,
    owner: null,
    size: 0
  };
  function build(program, callback) {
    var {
      constants,
      heap,
      resolver
    } = program;
    var encoder = new EncoderImpl(heap, STDLIB_META);
    function pushOp(...op) {
      encodeOp(encoder, constants, resolver, STDLIB_META, op);
    }
    callback(pushOp);
    var result = encoder.commit(0);
    if (typeof result !== 'number') {
      // This shouldn't be possible
      throw new Error(`Unexpected errors compiling std`);
    } else {
      return result;
    }
  }
  class CompileTimeCompilationContextImpl {
    constructor({
      constants,
      heap
    }, resolver) {
      this.resolver = resolver;
      this.constants = constants;
      this.heap = heap;
      this.stdlib = compileStd(this);
    }
  }
  _exports.CompileTimeCompilationContextImpl = CompileTimeCompilationContextImpl;
  var DEFAULT_CAPABILITIES = _exports.DEFAULT_CAPABILITIES = {
    dynamicLayout: true,
    dynamicTag: true,
    prepareArgs: true,
    createArgs: true,
    attributeHook: false,
    elementHook: false,
    dynamicScope: true,
    createCaller: false,
    updateHook: true,
    createInstance: true,
    wrapped: false,
    willDestroy: false,
    hasSubOwner: false
  };
  var MINIMAL_CAPABILITIES = _exports.MINIMAL_CAPABILITIES = {
    dynamicLayout: false,
    dynamicTag: false,
    prepareArgs: false,
    createArgs: false,
    attributeHook: false,
    elementHook: false,
    dynamicScope: false,
    createCaller: false,
    updateHook: false,
    createInstance: false,
    wrapped: false,
    willDestroy: false,
    hasSubOwner: false
  };
  class WrappedBuilder {
    constructor(layout, moduleName) {
      this.layout = layout;
      this.moduleName = moduleName;
      this.compiled = null;
      var {
        block
      } = layout;
      var [, symbols, hasEval] = block;
      symbols = symbols.slice(); // ensure ATTRS_BLOCK is always included (only once) in the list of symbols

      var attrsBlockIndex = symbols.indexOf(ATTRS_BLOCK);
      if (attrsBlockIndex === -1) {
        this.attrsBlockNumber = symbols.push(ATTRS_BLOCK);
      } else {
        this.attrsBlockNumber = attrsBlockIndex + 1;
      }
      this.symbolTable = {
        hasEval,
        symbols
      };
    }
    compile(syntax) {
      if (this.compiled !== null) return this.compiled;
      var m = meta(this.layout);
      var context = templateCompilationContext(syntax, m);
      var {
        encoder,
        program: {
          constants,
          resolver
        }
      } = context;
      function pushOp(...op) {
        encodeOp(encoder, constants, resolver, m, op);
      }
      WrappedComponent(pushOp, this.layout, this.attrsBlockNumber);
      var handle = context.encoder.commit(m.size);
      if (typeof handle !== 'number') {
        return handle;
      }
      this.compiled = handle;
      return handle;
    }
  }
  _exports.WrappedBuilder = WrappedBuilder;
  var clientId = 0;
  var templateCacheCounters = _exports.templateCacheCounters = {
    cacheHit: 0,
    cacheMiss: 0
  };
  /**
   * Wraps a template js in a template module to change it into a factory
   * that handles lazy parsing the template and to create per env singletons
   * of the template.
   */

  function templateFactory({
    id: templateId,
    moduleName,
    block,
    scope,
    isStrictMode
  }) {
    // TODO(template-refactors): This should be removed in the near future, as it
    // appears that id is unused. It is currently kept for backwards compat reasons.
    var id = templateId || `client-${clientId++}`; // TODO: This caches JSON serialized output once in case a template is
    // compiled by multiple owners, but we haven't verified if this is actually
    // helpful. We should benchmark this in the future.

    var parsedBlock;
    var ownerlessTemplate = null;
    var templateCache = new WeakMap();
    var factory = owner => {
      if (parsedBlock === undefined) {
        parsedBlock = JSON.parse(block);
      }
      if (owner === undefined) {
        if (ownerlessTemplate === null) {
          templateCacheCounters.cacheMiss++;
          ownerlessTemplate = new TemplateImpl({
            id,
            block: parsedBlock,
            moduleName,
            owner: null,
            scope,
            isStrictMode
          });
        } else {
          templateCacheCounters.cacheHit++;
        }
        return ownerlessTemplate;
      }
      var result = templateCache.get(owner);
      if (result === undefined) {
        templateCacheCounters.cacheMiss++;
        result = new TemplateImpl({
          id,
          block: parsedBlock,
          moduleName,
          owner,
          scope,
          isStrictMode
        });
        templateCache.set(owner, result);
      } else {
        templateCacheCounters.cacheHit++;
      }
      return result;
    };
    factory.__id = id;
    factory.__meta = {
      moduleName
    };
    return factory;
  }
  class TemplateImpl {
    constructor(parsedLayout) {
      this.parsedLayout = parsedLayout;
      this.result = 'ok';
      this.layout = null;
      this.wrappedLayout = null;
    }
    get moduleName() {
      return this.parsedLayout.moduleName;
    }
    get id() {
      return this.parsedLayout.id;
    } // TODO(template-refactors): This should be removed in the near future, it is
    // only being exposed for backwards compatibility

    get referrer() {
      return {
        moduleName: this.parsedLayout.moduleName,
        owner: this.parsedLayout.owner
      };
    }
    asLayout() {
      if (this.layout) return this.layout;
      return this.layout = compilable((0, _util.assign)({}, this.parsedLayout), this.moduleName);
    }
    asWrappedLayout() {
      if (this.wrappedLayout) return this.wrappedLayout;
      return this.wrappedLayout = new WrappedBuilder((0, _util.assign)({}, this.parsedLayout), this.moduleName);
    }
  }
});
define("@glimmer/owner", ["exports", "@glimmer/util"], function (_exports, _util) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.OWNER = void 0;
  _exports.getOwner = getOwner;
  _exports.setOwner = setOwner;
  var OWNER = _exports.OWNER = (0, _util.symbol)('OWNER');
  /**
    Framework objects in a Glimmer application may receive an owner object.
    Glimmer is unopinionated about this owner, but will forward it through its
    internal resolution system, and through its managers if it is provided.
  */

  function getOwner(object) {
    return object[OWNER];
  }
  /**
    `setOwner` set's an object's owner
  */

  function setOwner(object, owner) {
    object[OWNER] = owner;
  }
});
define("@glimmer/program", ["exports", "@glimmer/util", "@glimmer/manager", "@glimmer/opcode-compiler"], function (_exports, _util, _manager, _opcodeCompiler) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RuntimeProgramImpl = _exports.RuntimeOpImpl = _exports.RuntimeHeapImpl = _exports.RuntimeConstantsImpl = _exports.HeapImpl = _exports.ConstantsImpl = _exports.CompileTimeConstantImpl = void 0;
  _exports.artifacts = artifacts;
  _exports.hydrateHeap = hydrateHeap;
  /**
   * Default component template, which is a plain yield
   */
  var DEFAULT_TEMPLATE_BLOCK = [[[18
  /* Yield */, 1, null]], ['&default'], false, []];
  var DEFAULT_TEMPLATE = {
    // random uuid
    id: '1b32f5c2-7623-43d6-a0ad-9672898920a1',
    moduleName: '__default__.hbs',
    block: JSON.stringify(DEFAULT_TEMPLATE_BLOCK),
    scope: null,
    isStrictMode: true
  };
  var WELL_KNOWN_EMPTY_ARRAY = Object.freeze([]);
  var STARTER_CONSTANTS = (0, _util.constants)(WELL_KNOWN_EMPTY_ARRAY);
  var WELL_KNOWN_EMPTY_ARRAY_POSITION = STARTER_CONSTANTS.indexOf(WELL_KNOWN_EMPTY_ARRAY);
  class CompileTimeConstantImpl {
    constructor() {
      // `0` means NULL
      this.values = STARTER_CONSTANTS.slice();
      this.indexMap = new Map(this.values.map((value, index) => [value, index]));
    }
    value(value) {
      var indexMap = this.indexMap;
      var index = indexMap.get(value);
      if (index === undefined) {
        index = this.values.push(value) - 1;
        indexMap.set(value, index);
      }
      return index;
    }
    array(values) {
      if (values.length === 0) {
        return WELL_KNOWN_EMPTY_ARRAY_POSITION;
      }
      var handles = new Array(values.length);
      for (var i = 0; i < values.length; i++) {
        handles[i] = this.value(values[i]);
      }
      return this.value(handles);
    }
    toPool() {
      return this.values;
    }
  }
  _exports.CompileTimeConstantImpl = CompileTimeConstantImpl;
  class RuntimeConstantsImpl {
    constructor(pool) {
      this.values = pool;
    }
    getValue(handle) {
      return this.values[handle];
    }
    getArray(value) {
      var handles = this.getValue(value);
      var reified = new Array(handles.length);
      for (var i = 0; i < handles.length; i++) {
        var n = handles[i];
        reified[i] = this.getValue(n);
      }
      return reified;
    }
  }
  _exports.RuntimeConstantsImpl = RuntimeConstantsImpl;
  class ConstantsImpl extends CompileTimeConstantImpl {
    constructor() {
      super(...arguments);
      this.reifiedArrs = {
        [WELL_KNOWN_EMPTY_ARRAY_POSITION]: WELL_KNOWN_EMPTY_ARRAY
      };
      this.defaultTemplate = (0, _opcodeCompiler.templateFactory)(DEFAULT_TEMPLATE)(); // Used for tests and debugging purposes, and to be able to analyze large apps
      // This is why it's enabled even in production

      this.helperDefinitionCount = 0;
      this.modifierDefinitionCount = 0;
      this.componentDefinitionCount = 0;
      this.helperDefinitionCache = new WeakMap();
      this.modifierDefinitionCache = new WeakMap();
      this.componentDefinitionCache = new WeakMap();
    }
    helper(definitionState,
    // TODO: Add a way to expose resolved name for debugging
    _resolvedName = null, isOptional) {
      var handle = this.helperDefinitionCache.get(definitionState);
      if (handle === undefined) {
        var managerOrHelper = (0, _manager.getInternalHelperManager)(definitionState, isOptional);
        if (managerOrHelper === null) {
          this.helperDefinitionCache.set(definitionState, null);
          return null;
        }
        var helper = typeof managerOrHelper === 'function' ? managerOrHelper : managerOrHelper.getHelper(definitionState);
        handle = this.value(helper);
        this.helperDefinitionCache.set(definitionState, handle);
        this.helperDefinitionCount++;
      }
      return handle;
    }
    modifier(definitionState, resolvedName = null, isOptional) {
      var handle = this.modifierDefinitionCache.get(definitionState);
      if (handle === undefined) {
        var manager = (0, _manager.getInternalModifierManager)(definitionState, isOptional);
        if (manager === null) {
          this.modifierDefinitionCache.set(definitionState, null);
          return null;
        }
        var definition = {
          resolvedName,
          manager,
          state: definitionState
        };
        handle = this.value(definition);
        this.modifierDefinitionCache.set(definitionState, handle);
        this.modifierDefinitionCount++;
      }
      return handle;
    }
    component(definitionState, owner, isOptional) {
      var _a;
      var definition = this.componentDefinitionCache.get(definitionState);
      if (definition === undefined) {
        var manager = (0, _manager.getInternalComponentManager)(definitionState, isOptional);
        if (manager === null) {
          this.componentDefinitionCache.set(definitionState, null);
          return null;
        }
        var capabilities = (0, _manager.capabilityFlagsFrom)(manager.getCapabilities(definitionState));
        var templateFactory$$1 = (0, _manager.getComponentTemplate)(definitionState);
        var compilable = null;
        var template;
        if (!(0, _manager.managerHasCapability)(manager, capabilities, 1
        /* DynamicLayout */)) {
          template = (_a = templateFactory$$1 === null || templateFactory$$1 === void 0 ? void 0 : templateFactory$$1(owner)) !== null && _a !== void 0 ? _a : this.defaultTemplate;
        } else {
          template = templateFactory$$1 === null || templateFactory$$1 === void 0 ? void 0 : templateFactory$$1(owner);
        }
        if (template !== undefined) {
          template = (0, _util.unwrapTemplate)(template);
          compilable = (0, _manager.managerHasCapability)(manager, capabilities, 1024
          /* Wrapped */) ? template.asWrappedLayout() : template.asLayout();
        }
        definition = {
          resolvedName: null,
          handle: -1,
          manager,
          capabilities,
          state: definitionState,
          compilable
        };
        definition.handle = this.value(definition);
        this.componentDefinitionCache.set(definitionState, definition);
        this.componentDefinitionCount++;
      }
      return definition;
    }
    resolvedComponent(resolvedDefinition, resolvedName) {
      var definition = this.componentDefinitionCache.get(resolvedDefinition);
      if (definition === undefined) {
        var {
          manager,
          state,
          template
        } = resolvedDefinition;
        var capabilities = (0, _manager.capabilityFlagsFrom)(manager.getCapabilities(resolvedDefinition));
        var compilable = null;
        if (!(0, _manager.managerHasCapability)(manager, capabilities, 1
        /* DynamicLayout */)) {
          template = template !== null && template !== void 0 ? template : this.defaultTemplate;
        }
        if (template !== null) {
          template = (0, _util.unwrapTemplate)(template);
          compilable = (0, _manager.managerHasCapability)(manager, capabilities, 1024
          /* Wrapped */) ? template.asWrappedLayout() : template.asLayout();
        }
        definition = {
          resolvedName,
          handle: -1,
          manager,
          capabilities,
          state,
          compilable
        };
        definition.handle = this.value(definition);
        this.componentDefinitionCache.set(resolvedDefinition, definition);
        this.componentDefinitionCount++;
      }
      return definition;
    }
    getValue(index) {
      return this.values[index];
    }
    getArray(index) {
      var reifiedArrs = this.reifiedArrs;
      var reified = reifiedArrs[index];
      if (reified === undefined) {
        var names = this.getValue(index);
        reified = new Array(names.length);
        for (var i = 0; i < names.length; i++) {
          reified[i] = this.getValue(names[i]);
        }
        reifiedArrs[index] = reified;
      }
      return reified;
    }
  }
  _exports.ConstantsImpl = ConstantsImpl;
  class RuntimeOpImpl {
    constructor(heap) {
      this.heap = heap;
      this.offset = 0;
    }
    get size() {
      var rawType = this.heap.getbyaddr(this.offset);
      return ((rawType & 768
      /* OPERAND_LEN_MASK */) >> 8
      /* ARG_SHIFT */) + 1;
    }
    get isMachine() {
      var rawType = this.heap.getbyaddr(this.offset);
      return rawType & 1024
      /* MACHINE_MASK */ ? 1 : 0;
    }
    get type() {
      return this.heap.getbyaddr(this.offset) & 255
      /* TYPE_MASK */;
    }
    get op1() {
      return this.heap.getbyaddr(this.offset + 1);
    }
    get op2() {
      return this.heap.getbyaddr(this.offset + 2);
    }
    get op3() {
      return this.heap.getbyaddr(this.offset + 3);
    }
  }
  _exports.RuntimeOpImpl = RuntimeOpImpl;
  var PAGE_SIZE = 0x100000;
  class RuntimeHeapImpl {
    constructor(serializedHeap) {
      var {
        buffer,
        table
      } = serializedHeap;
      this.heap = new Int32Array(buffer);
      this.table = table;
    } // It is illegal to close over this address, as compaction
    // may move it. However, it is legal to use this address
    // multiple times between compactions.

    getaddr(handle) {
      return this.table[handle];
    }
    getbyaddr(address) {
      return this.heap[address];
    }
    sizeof(handle) {
      return sizeof(this.table, handle);
    }
  }
  _exports.RuntimeHeapImpl = RuntimeHeapImpl;
  function hydrateHeap(serializedHeap) {
    return new RuntimeHeapImpl(serializedHeap);
  }
  /**
   * The Heap is responsible for dynamically allocating
   * memory in which we read/write the VM's instructions
   * from/to. When we malloc we pass out a VMHandle, which
   * is used as an indirect way of accessing the memory during
   * execution of the VM. Internally we track the different
   * regions of the memory in an int array known as the table.
   *
   * The table 32-bit aligned and has the following layout:
   *
   * | ... | hp (u32) |       info (u32)   | size (u32) |
   * | ... |  Handle  | Scope Size | State | Size       |
   * | ... | 32bits   | 30bits     | 2bits | 32bit      |
   *
   * With this information we effectively have the ability to
   * control when we want to free memory. That being said you
   * can not free during execution as raw address are only
   * valid during the execution. This means you cannot close
   * over them as you will have a bad memory access exception.
   */

  class HeapImpl {
    constructor() {
      this.offset = 0;
      this.handle = 0;
      this.heap = new Int32Array(PAGE_SIZE);
      this.handleTable = [];
      this.handleState = [];
    }
    push(item) {
      this.sizeCheck();
      this.heap[this.offset++] = item;
    }
    sizeCheck() {
      var {
        heap
      } = this;
      if (this.offset === this.heap.length) {
        var newHeap = new Int32Array(heap.length + PAGE_SIZE);
        newHeap.set(heap, 0);
        this.heap = newHeap;
      }
    }
    getbyaddr(address) {
      return this.heap[address];
    }
    setbyaddr(address, value) {
      this.heap[address] = value;
    }
    malloc() {
      // push offset, info, size
      this.handleTable.push(this.offset);
      return this.handleTable.length - 1;
    }
    finishMalloc(handle) {}
    size() {
      return this.offset;
    } // It is illegal to close over this address, as compaction
    // may move it. However, it is legal to use this address
    // multiple times between compactions.

    getaddr(handle) {
      return this.handleTable[handle];
    }
    sizeof(handle) {
      return sizeof(this.handleTable, handle);
    }
    free(handle) {
      this.handleState[handle] = 1
      /* Freed */;
    }
    /**
     * The heap uses the [Mark-Compact Algorithm](https://en.wikipedia.org/wiki/Mark-compact_algorithm) to shift
     * reachable memory to the bottom of the heap and freeable
     * memory to the top of the heap. When we have shifted all
     * the reachable memory to the top of the heap, we move the
     * offset to the next free position.
     */

    compact() {
      var compactedSize = 0;
      var {
        handleTable,
        handleState,
        heap
      } = this;
      for (var i = 0; i < length; i++) {
        var offset = handleTable[i];
        var size = handleTable[i + 1] - offset;
        var state = handleState[i];
        if (state === 2
        /* Purged */) {
          continue;
        } else if (state === 1
        /* Freed */) {
          // transition to "already freed" aka "purged"
          // a good improvement would be to reuse
          // these slots
          handleState[i] = 2
          /* Purged */;
          compactedSize += size;
        } else if (state === 0
        /* Allocated */) {
          for (var j = offset; j <= i + size; j++) {
            heap[j - compactedSize] = heap[j];
          }
          handleTable[i] = offset - compactedSize;
        } else if (state === 3
        /* Pointer */) {
          handleTable[i] = offset - compactedSize;
        }
      }
      this.offset = this.offset - compactedSize;
    }
    capture(offset = this.offset) {
      // Only called in eager mode
      var buffer = slice(this.heap, 0, offset).buffer;
      return {
        handle: this.handle,
        table: this.handleTable,
        buffer: buffer
      };
    }
  }
  _exports.HeapImpl = HeapImpl;
  class RuntimeProgramImpl {
    constructor(constants$$1, heap) {
      this.constants = constants$$1;
      this.heap = heap;
      this._opcode = new RuntimeOpImpl(this.heap);
    }
    opcode(offset) {
      this._opcode.offset = offset;
      return this._opcode;
    }
  }
  _exports.RuntimeProgramImpl = RuntimeProgramImpl;
  function slice(arr, start, end) {
    if (arr.slice !== undefined) {
      return arr.slice(start, end);
    }
    var ret = new Int32Array(end);
    for (; start < end; start++) {
      ret[start] = arr[start];
    }
    return ret;
  }
  function sizeof(table, handle) {
    {
      return -1;
    }
  }
  function artifacts() {
    return {
      constants: new ConstantsImpl(),
      heap: new HeapImpl()
    };
  }
});
define("@glimmer/reference", ["exports", "@glimmer/global-context", "@glimmer/util", "@glimmer/validator"], function (_exports, _globalContext, _util, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.UNDEFINED_REFERENCE = _exports.TRUE_REFERENCE = _exports.REFERENCE = _exports.NULL_REFERENCE = _exports.FALSE_REFERENCE = void 0;
  _exports.childRefFor = childRefFor;
  _exports.childRefFromParts = childRefFromParts;
  _exports.createComputeRef = createComputeRef;
  _exports.createConstRef = createConstRef;
  _exports.createDebugAliasRef = void 0;
  _exports.createInvokableRef = createInvokableRef;
  _exports.createIteratorItemRef = createIteratorItemRef;
  _exports.createIteratorRef = createIteratorRef;
  _exports.createPrimitiveRef = createPrimitiveRef;
  _exports.createReadOnlyRef = createReadOnlyRef;
  _exports.createUnboundRef = createUnboundRef;
  _exports.isConstRef = isConstRef;
  _exports.isInvokableRef = isInvokableRef;
  _exports.isUpdatableRef = isUpdatableRef;
  _exports.updateRef = updateRef;
  _exports.valueForRef = valueForRef;
  var REFERENCE = _exports.REFERENCE = (0, _util.symbol)('REFERENCE');
  class ReferenceImpl {
    constructor(type) {
      this.tag = null;
      this.lastRevision = _validator.INITIAL;
      this.children = null;
      this.compute = null;
      this.update = null;
      this[REFERENCE] = type;
    }
  }
  function createPrimitiveRef(value) {
    var ref = new ReferenceImpl(2
    /* Unbound */);
    ref.tag = _validator.CONSTANT_TAG;
    ref.lastValue = value;
    if (true /* DEBUG */) {
      ref.debugLabel = String(value);
    }
    return ref;
  }
  var UNDEFINED_REFERENCE = _exports.UNDEFINED_REFERENCE = createPrimitiveRef(undefined);
  var NULL_REFERENCE = _exports.NULL_REFERENCE = createPrimitiveRef(null);
  var TRUE_REFERENCE = _exports.TRUE_REFERENCE = createPrimitiveRef(true);
  var FALSE_REFERENCE = _exports.FALSE_REFERENCE = createPrimitiveRef(false);
  function createConstRef(value, debugLabel) {
    var ref = new ReferenceImpl(0
    /* Constant */);
    ref.lastValue = value;
    ref.tag = _validator.CONSTANT_TAG;
    if (true /* DEBUG */) {
      ref.debugLabel = debugLabel;
    }
    return ref;
  }
  function createUnboundRef(value, debugLabel) {
    var ref = new ReferenceImpl(2
    /* Unbound */);
    ref.lastValue = value;
    ref.tag = _validator.CONSTANT_TAG;
    if (true /* DEBUG */) {
      ref.debugLabel = debugLabel;
    }
    return ref;
  }
  function createComputeRef(compute, update = null, debugLabel = 'unknown') {
    var ref = new ReferenceImpl(1
    /* Compute */);
    ref.compute = compute;
    ref.update = update;
    if (true /* DEBUG */) {
      ref.debugLabel = `(result of a \`${debugLabel}\` helper)`;
    }
    return ref;
  }
  function createReadOnlyRef(ref) {
    if (!isUpdatableRef(ref)) return ref;
    return createComputeRef(() => valueForRef(ref), null, ref.debugLabel);
  }
  function isInvokableRef(ref) {
    return ref[REFERENCE] === 3
    /* Invokable */;
  }
  function createInvokableRef(inner) {
    var ref = createComputeRef(() => valueForRef(inner), value => updateRef(inner, value));
    ref.debugLabel = inner.debugLabel;
    ref[REFERENCE] = 3
    /* Invokable */;
    return ref;
  }
  function isConstRef(_ref) {
    var ref = _ref;
    return ref.tag === _validator.CONSTANT_TAG;
  }
  function isUpdatableRef(_ref) {
    var ref = _ref;
    return ref.update !== null;
  }
  function valueForRef(_ref) {
    var ref = _ref;
    var {
      tag
    } = ref;
    if (tag === _validator.CONSTANT_TAG) {
      return ref.lastValue;
    }
    var {
      lastRevision
    } = ref;
    var lastValue;
    if (tag === null || !(0, _validator.validateTag)(tag, lastRevision)) {
      var {
        compute
      } = ref;
      tag = ref.tag = (0, _validator.track)(() => {
        lastValue = ref.lastValue = compute();
      }, true /* DEBUG */ && ref.debugLabel);
      ref.lastRevision = (0, _validator.valueForTag)(tag);
    } else {
      lastValue = ref.lastValue;
    }
    (0, _validator.consumeTag)(tag);
    return lastValue;
  }
  function updateRef(_ref, value) {
    var ref = _ref;
    var update = ref.update;
    update(value);
  }
  function childRefFor(_parentRef, path) {
    var parentRef = _parentRef;
    var type = parentRef[REFERENCE];
    var children = parentRef.children;
    var child;
    if (children === null) {
      children = parentRef.children = new Map();
    } else {
      child = children.get(path);
      if (child !== undefined) {
        return child;
      }
    }
    if (type === 2
    /* Unbound */) {
      var parent = valueForRef(parentRef);
      if ((0, _util.isDict)(parent)) {
        child = createUnboundRef(parent[path], true /* DEBUG */ && `${parentRef.debugLabel}.${path}`);
      } else {
        child = UNDEFINED_REFERENCE;
      }
    } else {
      child = createComputeRef(() => {
        var parent = valueForRef(parentRef);
        if ((0, _util.isDict)(parent)) {
          return (0, _globalContext.getProp)(parent, path);
        }
      }, val => {
        var parent = valueForRef(parentRef);
        if ((0, _util.isDict)(parent)) {
          return (0, _globalContext.setProp)(parent, path, val);
        }
      });
      if (true /* DEBUG */) {
        child.debugLabel = `${parentRef.debugLabel}.${path}`;
      }
    }
    children.set(path, child);
    return child;
  }
  function childRefFromParts(root, parts) {
    var reference = root;
    for (var i = 0; i < parts.length; i++) {
      reference = childRefFor(reference, parts[i]);
    }
    return reference;
  }
  var createDebugAliasRef;
  if (true /* DEBUG */) {
    _exports.createDebugAliasRef = createDebugAliasRef = (debugLabel, inner) => {
      var update = isUpdatableRef(inner) ? value => updateRef(inner, value) : null;
      var ref = createComputeRef(() => valueForRef(inner), update);
      ref[REFERENCE] = inner[REFERENCE];
      ref.debugLabel = debugLabel;
      return ref;
    };
  }
  var NULL_IDENTITY = {};
  var KEY = (_, index) => index;
  var INDEX = (_, index) => String(index);
  var IDENTITY = item => {
    if (item === null) {
      // Returning null as an identity will cause failures since the iterator
      // can't tell that it's actually supposed to be null
      return NULL_IDENTITY;
    }
    return item;
  };
  function keyForPath(path) {
    if (true /* DEBUG */ && path[0] === '@') {
      throw new Error(`invalid keypath: '${path}', valid keys: @index, @identity, or a path`);
    }
    return uniqueKeyFor(item => (0, _globalContext.getPath)(item, path));
  }
  function makeKeyFor(key) {
    switch (key) {
      case '@key':
        return uniqueKeyFor(KEY);
      case '@index':
        return uniqueKeyFor(INDEX);
      case '@identity':
        return uniqueKeyFor(IDENTITY);
      default:
        return keyForPath(key);
    }
  }
  class WeakMapWithPrimitives {
    get weakMap() {
      if (this._weakMap === undefined) {
        this._weakMap = new WeakMap();
      }
      return this._weakMap;
    }
    get primitiveMap() {
      if (this._primitiveMap === undefined) {
        this._primitiveMap = new Map();
      }
      return this._primitiveMap;
    }
    set(key, value) {
      if ((0, _util.isObject)(key)) {
        this.weakMap.set(key, value);
      } else {
        this.primitiveMap.set(key, value);
      }
    }
    get(key) {
      if ((0, _util.isObject)(key)) {
        return this.weakMap.get(key);
      } else {
        return this.primitiveMap.get(key);
      }
    }
  }
  var IDENTITIES = new WeakMapWithPrimitives();
  function identityForNthOccurence(value, count) {
    var identities = IDENTITIES.get(value);
    if (identities === undefined) {
      identities = [];
      IDENTITIES.set(value, identities);
    }
    var identity = identities[count];
    if (identity === undefined) {
      identity = {
        value,
        count
      };
      identities[count] = identity;
    }
    return identity;
  }
  /**
   * When iterating over a list, it's possible that an item with the same unique
   * key could be encountered twice:
   *
   * ```js
   * let arr = ['same', 'different', 'same', 'same'];
   * ```
   *
   * In general, we want to treat these items as _unique within the list_. To do
   * this, we track the occurences of every item as we iterate the list, and when
   * an item occurs more than once, we generate a new unique key just for that
   * item, and that occurence within the list. The next time we iterate the list,
   * and encounter an item for the nth time, we can get the _same_ key, and let
   * Glimmer know that it should reuse the DOM for the previous nth occurence.
   */

  function uniqueKeyFor(keyFor) {
    var seen = new WeakMapWithPrimitives();
    return (value, memo) => {
      var key = keyFor(value, memo);
      var count = seen.get(key) || 0;
      seen.set(key, count + 1);
      if (count === 0) {
        return key;
      }
      return identityForNthOccurence(key, count);
    };
  }
  function createIteratorRef(listRef, key) {
    return createComputeRef(() => {
      var iterable = valueForRef(listRef);
      var keyFor = makeKeyFor(key);
      if (Array.isArray(iterable)) {
        return new ArrayIterator(iterable, keyFor);
      }
      var maybeIterator = (0, _globalContext.toIterator)(iterable);
      if (maybeIterator === null) {
        return new ArrayIterator(_util.EMPTY_ARRAY, () => null);
      }
      return new IteratorWrapper(maybeIterator, keyFor);
    });
  }
  function createIteratorItemRef(_value) {
    var value = _value;
    var tag = (0, _validator.createTag)();
    return createComputeRef(() => {
      (0, _validator.consumeTag)(tag);
      return value;
    }, newValue => {
      if (value !== newValue) {
        value = newValue;
        (0, _validator.dirtyTag)(tag);
      }
    });
  }
  class IteratorWrapper {
    constructor(inner, keyFor) {
      this.inner = inner;
      this.keyFor = keyFor;
    }
    isEmpty() {
      return this.inner.isEmpty();
    }
    next() {
      var nextValue = this.inner.next();
      if (nextValue !== null) {
        nextValue.key = this.keyFor(nextValue.value, nextValue.memo);
      }
      return nextValue;
    }
  }
  class ArrayIterator {
    constructor(iterator, keyFor) {
      this.iterator = iterator;
      this.keyFor = keyFor;
      this.pos = 0;
      if (iterator.length === 0) {
        this.current = {
          kind: 'empty'
        };
      } else {
        this.current = {
          kind: 'first',
          value: iterator[this.pos]
        };
      }
    }
    isEmpty() {
      return this.current.kind === 'empty';
    }
    next() {
      var value;
      var current = this.current;
      if (current.kind === 'first') {
        this.current = {
          kind: 'progress'
        };
        value = current.value;
      } else if (this.pos >= this.iterator.length - 1) {
        return null;
      } else {
        value = this.iterator[++this.pos];
      }
      var {
        keyFor
      } = this;
      var key = keyFor(value, this.pos);
      var memo = this.pos;
      return {
        key,
        value,
        memo
      };
    }
  }
});
define("@glimmer/runtime", ["exports", "@glimmer/util", "@glimmer/reference", "@glimmer/global-context", "@glimmer/destroyable", "@glimmer/vm", "@glimmer/validator", "@glimmer/manager", "@glimmer/program", "@glimmer/owner", "@glimmer/runtime"], function (_exports, _util, _reference, _globalContext, _destroyable2, _vm2, _validator, _manager5, _program, _owner2, _runtime) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.array = _exports.UpdatingVM = _exports.UpdatableBlockImpl = _exports.TemplateOnlyComponentManager = _exports.TemplateOnlyComponent = _exports.TEMPLATE_ONLY_COMPONENT_MANAGER = _exports.SimpleDynamicAttribute = _exports.SERIALIZATION_FIRST_NODE_STRING = _exports.RemoteLiveBlock = _exports.RehydrateBuilder = _exports.PartialScopeImpl = _exports.NewElementBuilder = _exports.LowLevelVM = _exports.IDOMChanges = _exports.EnvironmentImpl = _exports.EMPTY_POSITIONAL = _exports.EMPTY_NAMED = _exports.EMPTY_ARGS = _exports.DynamicScopeImpl = _exports.DynamicAttribute = _exports.DOMTreeConstruction = _exports.DOMChanges = _exports.CursorImpl = _exports.CurriedValue = _exports.ConcreteBounds = void 0;
  _exports.clear = clear;
  _exports.clientBuilder = clientBuilder;
  _exports.concat = void 0;
  _exports.createCapturedArgs = createCapturedArgs;
  _exports.curry = curry;
  Object.defineProperty(_exports, "destroy", {
    enumerable: true,
    get: function () {
      return _destroyable2.destroy;
    }
  });
  _exports.dynamicAttribute = dynamicAttribute;
  _exports.hash = _exports.get = _exports.fn = void 0;
  _exports.inTransaction = inTransaction;
  _exports.invokeHelper = invokeHelper;
  Object.defineProperty(_exports, "isDestroyed", {
    enumerable: true,
    get: function () {
      return _destroyable2.isDestroyed;
    }
  });
  Object.defineProperty(_exports, "isDestroying", {
    enumerable: true,
    get: function () {
      return _destroyable2.isDestroying;
    }
  });
  _exports.isSerializationFirstNode = isSerializationFirstNode;
  _exports.isWhitespace = isWhitespace;
  _exports.normalizeProperty = normalizeProperty;
  _exports.on = void 0;
  Object.defineProperty(_exports, "registerDestructor", {
    enumerable: true,
    get: function () {
      return _destroyable2.registerDestructor;
    }
  });
  _exports.rehydrationBuilder = rehydrationBuilder;
  _exports.reifyArgs = reifyArgs;
  _exports.reifyNamed = reifyNamed$1;
  _exports.reifyPositional = reifyPositional$1;
  _exports.renderComponent = renderComponent;
  _exports.renderMain = renderMain;
  _exports.renderSync = renderSync;
  _exports.resetDebuggerCallback = resetDebuggerCallback;
  _exports.runtimeContext = runtimeContext;
  _exports.setDebuggerCallback = setDebuggerCallback;
  _exports.templateOnlyComponent = templateOnlyComponent;
  class DynamicScopeImpl {
    constructor(bucket) {
      if (bucket) {
        this.bucket = (0, _util.assign)({}, bucket);
      } else {
        this.bucket = {};
      }
    }
    get(key) {
      return this.bucket[key];
    }
    set(key, reference) {
      return this.bucket[key] = reference;
    }
    child() {
      return new DynamicScopeImpl(this.bucket);
    }
  }
  _exports.DynamicScopeImpl = DynamicScopeImpl;
  class PartialScopeImpl {
    constructor(
    // the 0th slot is `self`
    slots, owner, callerScope,
    // named arguments and blocks passed to a layout that uses eval
    evalScope,
    // locals in scope when the partial was invoked
    partialMap) {
      this.slots = slots;
      this.owner = owner;
      this.callerScope = callerScope;
      this.evalScope = evalScope;
      this.partialMap = partialMap;
    }
    static root(self, size = 0, owner) {
      var refs = new Array(size + 1);
      for (var i = 0; i <= size; i++) {
        refs[i] = _reference.UNDEFINED_REFERENCE;
      }
      return new PartialScopeImpl(refs, owner, null, null, null).init({
        self
      });
    }
    static sized(size = 0, owner) {
      var refs = new Array(size + 1);
      for (var i = 0; i <= size; i++) {
        refs[i] = _reference.UNDEFINED_REFERENCE;
      }
      return new PartialScopeImpl(refs, owner, null, null, null);
    }
    init({
      self
    }) {
      this.slots[0] = self;
      return this;
    }
    getSelf() {
      return this.get(0);
    }
    getSymbol(symbol$$1) {
      return this.get(symbol$$1);
    }
    getBlock(symbol$$1) {
      var block = this.get(symbol$$1);
      return block === _reference.UNDEFINED_REFERENCE ? null : block;
    }
    getEvalScope() {
      return this.evalScope;
    }
    getPartialMap() {
      return this.partialMap;
    }
    bind(symbol$$1, value) {
      this.set(symbol$$1, value);
    }
    bindSelf(self) {
      this.set(0, self);
    }
    bindSymbol(symbol$$1, value) {
      this.set(symbol$$1, value);
    }
    bindBlock(symbol$$1, value) {
      this.set(symbol$$1, value);
    }
    bindEvalScope(map) {
      this.evalScope = map;
    }
    bindPartialMap(map) {
      this.partialMap = map;
    }
    bindCallerScope(scope) {
      this.callerScope = scope;
    }
    getCallerScope() {
      return this.callerScope;
    }
    child() {
      return new PartialScopeImpl(this.slots.slice(), this.owner, this.callerScope, this.evalScope, this.partialMap);
    }
    get(index) {
      if (index >= this.slots.length) {
        throw new RangeError(`BUG: cannot get $${index} from scope; length=${this.slots.length}`);
      }
      return this.slots[index];
    }
    set(index, value) {
      if (index >= this.slots.length) {
        throw new RangeError(`BUG: cannot get $${index} from scope; length=${this.slots.length}`);
      }
      this.slots[index] = value;
    }
  }

  // the VM in other classes, but are not intended to be a part of
  // Glimmer's API.
  _exports.PartialScopeImpl = PartialScopeImpl;
  var INNER_VM = (0, _util.symbol)('INNER_VM');
  var DESTROYABLE_STACK = (0, _util.symbol)('DESTROYABLE_STACK');
  var STACKS = (0, _util.symbol)('STACKS');
  var REGISTERS = (0, _util.symbol)('REGISTERS');
  var HEAP = (0, _util.symbol)('HEAP');
  var CONSTANTS = (0, _util.symbol)('CONSTANTS');
  var ARGS = (0, _util.symbol)('ARGS');
  var PC = (0, _util.symbol)('PC');
  class CursorImpl {
    constructor(element, nextSibling) {
      this.element = element;
      this.nextSibling = nextSibling;
    }
  }
  _exports.CursorImpl = CursorImpl;
  class ConcreteBounds {
    constructor(parentNode, first, last) {
      this.parentNode = parentNode;
      this.first = first;
      this.last = last;
    }
    parentElement() {
      return this.parentNode;
    }
    firstNode() {
      return this.first;
    }
    lastNode() {
      return this.last;
    }
  }
  _exports.ConcreteBounds = ConcreteBounds;
  class SingleNodeBounds {
    constructor(parentNode, node) {
      this.parentNode = parentNode;
      this.node = node;
    }
    parentElement() {
      return this.parentNode;
    }
    firstNode() {
      return this.node;
    }
    lastNode() {
      return this.node;
    }
  }
  function move(bounds, reference) {
    var parent = bounds.parentElement();
    var first = bounds.firstNode();
    var last = bounds.lastNode();
    var current = first;
    while (true) {
      var next = current.nextSibling;
      parent.insertBefore(current, reference);
      if (current === last) {
        return next;
      }
      current = next;
    }
  }
  function clear(bounds) {
    var parent = bounds.parentElement();
    var first = bounds.firstNode();
    var last = bounds.lastNode();
    var current = first;
    while (true) {
      var next = current.nextSibling;
      parent.removeChild(current);
      if (current === last) {
        return next;
      }
      current = next;
    }
  }
  function normalizeStringValue(value) {
    if (isEmpty(value)) {
      return '';
    }
    return String(value);
  }
  function shouldCoerce(value) {
    return isString(value) || isEmpty(value) || typeof value === 'boolean' || typeof value === 'number';
  }
  function isEmpty(value) {
    return value === null || value === undefined || typeof value.toString !== 'function';
  }
  function isSafeString(value) {
    return typeof value === 'object' && value !== null && typeof value.toHTML === 'function';
  }
  function isNode(value) {
    return typeof value === 'object' && value !== null && typeof value.nodeType === 'number';
  }
  function isFragment(value) {
    return isNode(value) && value.nodeType === 11;
  }
  function isString(value) {
    return typeof value === 'string';
  }

  /*
   * @method normalizeProperty
   * @param element {HTMLElement}
   * @param slotName {String}
   * @returns {Object} { name, type }
   */
  function normalizeProperty(element, slotName) {
    var type, normalized;
    if (slotName in element) {
      normalized = slotName;
      type = 'prop';
    } else {
      var lower = slotName.toLowerCase();
      if (lower in element) {
        type = 'prop';
        normalized = lower;
      } else {
        type = 'attr';
        normalized = slotName;
      }
    }
    if (type === 'prop' && (normalized.toLowerCase() === 'style' || preferAttr(element.tagName, normalized))) {
      type = 'attr';
    }
    return {
      normalized,
      type
    };
  }
  // * browser bug
  // * strange spec outlier

  var ATTR_OVERRIDES = {
    INPUT: {
      form: true,
      // Chrome 46.0.2464.0: 'autocorrect' in document.createElement('input') === false
      // Safari 8.0.7: 'autocorrect' in document.createElement('input') === false
      // Mobile Safari (iOS 8.4 simulator): 'autocorrect' in document.createElement('input') === true
      autocorrect: true,
      // Chrome 54.0.2840.98: 'list' in document.createElement('input') === true
      // Safari 9.1.3: 'list' in document.createElement('input') === false
      list: true
    },
    // element.form is actually a legitimate readOnly property, that is to be
    // mutated, but must be mutated by setAttribute...
    SELECT: {
      form: true
    },
    OPTION: {
      form: true
    },
    TEXTAREA: {
      form: true
    },
    LABEL: {
      form: true
    },
    FIELDSET: {
      form: true
    },
    LEGEND: {
      form: true
    },
    OBJECT: {
      form: true
    },
    OUTPUT: {
      form: true
    },
    BUTTON: {
      form: true
    }
  };
  function preferAttr(tagName, propName) {
    var tag = ATTR_OVERRIDES[tagName.toUpperCase()];
    return tag && tag[propName.toLowerCase()] || false;
  }
  var badProtocols = ['javascript:', 'vbscript:'];
  var badTags = ['A', 'BODY', 'LINK', 'IMG', 'IFRAME', 'BASE', 'FORM'];
  var badTagsForDataURI = ['EMBED'];
  var badAttributes = ['href', 'src', 'background', 'action'];
  var badAttributesForDataURI = ['src'];
  function has(array, item) {
    return array.indexOf(item) !== -1;
  }
  function checkURI(tagName, attribute) {
    return (tagName === null || has(badTags, tagName)) && has(badAttributes, attribute);
  }
  function checkDataURI(tagName, attribute) {
    if (tagName === null) return false;
    return has(badTagsForDataURI, tagName) && has(badAttributesForDataURI, attribute);
  }
  function requiresSanitization(tagName, attribute) {
    return checkURI(tagName, attribute) || checkDataURI(tagName, attribute);
  }
  var protocolForUrl;
  if (typeof URL === 'object' && URL !== null &&
  // this is super annoying, TS thinks that URL **must** be a function so `URL.parse` check
  // thinks it is `never` without this `as unknown as any`
  typeof URL.parse === 'function') {
    // In Ember-land the `fastboot` package sets the `URL` global to `require('url')`
    // ultimately, this should be changed (so that we can either rely on the natural `URL` global
    // that exists) but for now we have to detect the specific `FastBoot` case first
    //
    // a future version of `fastboot` will detect if this legacy URL setup is required (by
    // inspecting Ember version) and if new enough, it will avoid shadowing the `URL` global
    // constructor with `require('url')`.
    var nodeURL = URL;
    protocolForUrl = url => {
      var protocol = null;
      if (typeof url === 'string') {
        protocol = nodeURL.parse(url).protocol;
      }
      return protocol === null ? ':' : protocol;
    };
  } else if (typeof URL === 'function') {
    protocolForUrl = _url => {
      try {
        var url = new URL(_url);
        return url.protocol;
      } catch (error) {
        // any non-fully qualified url string will trigger an error (because there is no
        // baseURI that we can provide; in that case we **know** that the protocol is
        // "safe" because it isn't specifically one of the `badProtocols` listed above
        // (and those protocols can never be the default baseURI)
        return ':';
      }
    };
  } else {
    // fallback for IE11 support
    var parsingNode = document.createElement('a');
    protocolForUrl = url => {
      parsingNode.href = url;
      return parsingNode.protocol;
    };
  }
  function sanitizeAttributeValue(element, attribute, value) {
    var tagName = null;
    if (value === null || value === undefined) {
      return value;
    }
    if (isSafeString(value)) {
      return value.toHTML();
    }
    if (!element) {
      tagName = null;
    } else {
      tagName = element.tagName.toUpperCase();
    }
    var str = normalizeStringValue(value);
    if (checkURI(tagName, attribute)) {
      var protocol = protocolForUrl(str);
      if (has(badProtocols, protocol)) {
        return `unsafe:${str}`;
      }
    }
    if (checkDataURI(tagName, attribute)) {
      return `unsafe:${str}`;
    }
    return str;
  }
  function dynamicAttribute(element, attr, namespace, isTrusting = false) {
    var {
      tagName,
      namespaceURI
    } = element;
    var attribute = {
      element,
      name: attr,
      namespace
    };
    if (true /* DEBUG */ && attr === 'style' && !isTrusting) {
      return new DebugStyleAttributeManager(attribute);
    }
    if (namespaceURI === "http://www.w3.org/2000/svg"
    /* SVG */) {
      return buildDynamicAttribute(tagName, attr, attribute);
    }
    var {
      type,
      normalized
    } = normalizeProperty(element, attr);
    if (type === 'attr') {
      return buildDynamicAttribute(tagName, normalized, attribute);
    } else {
      return buildDynamicProperty(tagName, normalized, attribute);
    }
  }
  function buildDynamicAttribute(tagName, name, attribute) {
    if (requiresSanitization(tagName, name)) {
      return new SafeDynamicAttribute(attribute);
    } else {
      return new SimpleDynamicAttribute(attribute);
    }
  }
  function buildDynamicProperty(tagName, name, attribute) {
    if (requiresSanitization(tagName, name)) {
      return new SafeDynamicProperty(name, attribute);
    }
    if (isUserInputValue(tagName, name)) {
      return new InputValueDynamicAttribute(name, attribute);
    }
    if (isOptionSelected(tagName, name)) {
      return new OptionSelectedDynamicAttribute(name, attribute);
    }
    return new DefaultDynamicProperty(name, attribute);
  }
  class DynamicAttribute {
    constructor(attribute) {
      this.attribute = attribute;
    }
  }
  _exports.DynamicAttribute = DynamicAttribute;
  class SimpleDynamicAttribute extends DynamicAttribute {
    set(dom, value, _env) {
      var normalizedValue = normalizeValue(value);
      if (normalizedValue !== null) {
        var {
          name,
          namespace
        } = this.attribute;
        dom.__setAttribute(name, normalizedValue, namespace);
      }
    }
    update(value, _env) {
      var normalizedValue = normalizeValue(value);
      var {
        element,
        name
      } = this.attribute;
      if (normalizedValue === null) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, normalizedValue);
      }
    }
  }
  _exports.SimpleDynamicAttribute = SimpleDynamicAttribute;
  class DefaultDynamicProperty extends DynamicAttribute {
    constructor(normalizedName, attribute) {
      super(attribute);
      this.normalizedName = normalizedName;
    }
    set(dom, value, _env) {
      if (value !== null && value !== undefined) {
        this.value = value;
        dom.__setProperty(this.normalizedName, value);
      }
    }
    update(value, _env) {
      var {
        element
      } = this.attribute;
      if (this.value !== value) {
        element[this.normalizedName] = this.value = value;
        if (value === null || value === undefined) {
          this.removeAttribute();
        }
      }
    }
    removeAttribute() {
      // TODO this sucks but to preserve properties first and to meet current
      // semantics we must do this.
      var {
        element,
        namespace
      } = this.attribute;
      if (namespace) {
        element.removeAttributeNS(namespace, this.normalizedName);
      } else {
        element.removeAttribute(this.normalizedName);
      }
    }
  }
  class SafeDynamicProperty extends DefaultDynamicProperty {
    set(dom, value, env) {
      var {
        element,
        name
      } = this.attribute;
      var sanitized = sanitizeAttributeValue(element, name, value);
      super.set(dom, sanitized, env);
    }
    update(value, env) {
      var {
        element,
        name
      } = this.attribute;
      var sanitized = sanitizeAttributeValue(element, name, value);
      super.update(sanitized, env);
    }
  }
  class SafeDynamicAttribute extends SimpleDynamicAttribute {
    set(dom, value, env) {
      var {
        element,
        name
      } = this.attribute;
      var sanitized = sanitizeAttributeValue(element, name, value);
      super.set(dom, sanitized, env);
    }
    update(value, env) {
      var {
        element,
        name
      } = this.attribute;
      var sanitized = sanitizeAttributeValue(element, name, value);
      super.update(sanitized, env);
    }
  }
  class InputValueDynamicAttribute extends DefaultDynamicProperty {
    set(dom, value) {
      dom.__setProperty('value', normalizeStringValue(value));
    }
    update(value) {
      var input = this.attribute.element;
      var currentValue = input.value;
      var normalizedValue = normalizeStringValue(value);
      if (currentValue !== normalizedValue) {
        input.value = normalizedValue;
      }
    }
  }
  class OptionSelectedDynamicAttribute extends DefaultDynamicProperty {
    set(dom, value) {
      if (value !== null && value !== undefined && value !== false) {
        dom.__setProperty('selected', true);
      }
    }
    update(value) {
      var option = this.attribute.element;
      if (value) {
        option.selected = true;
      } else {
        option.selected = false;
      }
    }
  }
  function isOptionSelected(tagName, attribute) {
    return tagName === 'OPTION' && attribute === 'selected';
  }
  function isUserInputValue(tagName, attribute) {
    return (tagName === 'INPUT' || tagName === 'TEXTAREA') && attribute === 'value';
  }
  function normalizeValue(value) {
    if (value === false || value === undefined || value === null || typeof value.toString === 'undefined') {
      return null;
    }
    if (value === true) {
      return '';
    } // onclick function etc in SSR

    if (typeof value === 'function') {
      return null;
    }
    return String(value);
  }
  var DebugStyleAttributeManager;
  if (true /* DEBUG */) {
    DebugStyleAttributeManager = class extends SimpleDynamicAttribute {
      set(dom, value, env) {
        (0, _globalContext.warnIfStyleNotTrusted)(value);
        super.set(dom, value, env);
      }
      update(value, env) {
        (0, _globalContext.warnIfStyleNotTrusted)(value);
        super.update(value, env);
      }
    };
  }
  var _a;
  class First {
    constructor(node) {
      this.node = node;
    }
    firstNode() {
      return this.node;
    }
  }
  class Last {
    constructor(node) {
      this.node = node;
    }
    lastNode() {
      return this.node;
    }
  }
  var CURSOR_STACK = (0, _util.symbol)('CURSOR_STACK');
  class NewElementBuilder {
    constructor(env, parentNode, nextSibling) {
      this.constructing = null;
      this.operations = null;
      this[_a] = new _util.Stack();
      this.modifierStack = new _util.Stack();
      this.blockStack = new _util.Stack();
      this.pushElement(parentNode, nextSibling);
      this.env = env;
      this.dom = env.getAppendOperations();
      this.updateOperations = env.getDOM();
    }
    static forInitialRender(env, cursor) {
      return new this(env, cursor.element, cursor.nextSibling).initialize();
    }
    static resume(env, block) {
      var parentNode = block.parentElement();
      var nextSibling = block.reset(env);
      var stack = new this(env, parentNode, nextSibling).initialize();
      stack.pushLiveBlock(block);
      return stack;
    }
    initialize() {
      this.pushSimpleBlock();
      return this;
    }
    debugBlocks() {
      return this.blockStack.toArray();
    }
    get element() {
      return this[CURSOR_STACK].current.element;
    }
    get nextSibling() {
      return this[CURSOR_STACK].current.nextSibling;
    }
    get hasBlocks() {
      return this.blockStack.size > 0;
    }
    block() {
      return this.blockStack.current;
    }
    popElement() {
      this[CURSOR_STACK].pop();
      this[CURSOR_STACK].current;
    }
    pushSimpleBlock() {
      return this.pushLiveBlock(new SimpleLiveBlock(this.element));
    }
    pushUpdatableBlock() {
      return this.pushLiveBlock(new UpdatableBlockImpl(this.element));
    }
    pushBlockList(list) {
      return this.pushLiveBlock(new LiveBlockList(this.element, list));
    }
    pushLiveBlock(block, isRemote = false) {
      var current = this.blockStack.current;
      if (current !== null) {
        if (!isRemote) {
          current.didAppendBounds(block);
        }
      }
      this.__openBlock();
      this.blockStack.push(block);
      return block;
    }
    popBlock() {
      this.block().finalize(this);
      this.__closeBlock();
      return this.blockStack.pop();
    }
    __openBlock() {}
    __closeBlock() {} // todo return seems unused

    openElement(tag) {
      var element = this.__openElement(tag);
      this.constructing = element;
      return element;
    }
    __openElement(tag) {
      return this.dom.createElement(tag, this.element);
    }
    flushElement(modifiers) {
      var parent = this.element;
      var element = this.constructing;
      this.__flushElement(parent, element);
      this.constructing = null;
      this.operations = null;
      this.pushModifiers(modifiers);
      this.pushElement(element, null);
      this.didOpenElement(element);
    }
    __flushElement(parent, constructing) {
      this.dom.insertBefore(parent, constructing, this.nextSibling);
    }
    closeElement() {
      this.willCloseElement();
      this.popElement();
      return this.popModifiers();
    }
    pushRemoteElement(element, guid, insertBefore) {
      return this.__pushRemoteElement(element, guid, insertBefore);
    }
    __pushRemoteElement(element, _guid, insertBefore) {
      this.pushElement(element, insertBefore);
      if (insertBefore === undefined) {
        while (element.lastChild) {
          element.removeChild(element.lastChild);
        }
      }
      var block = new RemoteLiveBlock(element);
      return this.pushLiveBlock(block, true);
    }
    popRemoteElement() {
      this.popBlock();
      this.popElement();
    }
    pushElement(element, nextSibling = null) {
      this[CURSOR_STACK].push(new CursorImpl(element, nextSibling));
    }
    pushModifiers(modifiers) {
      this.modifierStack.push(modifiers);
    }
    popModifiers() {
      return this.modifierStack.pop();
    }
    didAppendBounds(bounds) {
      this.block().didAppendBounds(bounds);
      return bounds;
    }
    didAppendNode(node) {
      this.block().didAppendNode(node);
      return node;
    }
    didOpenElement(element) {
      this.block().openElement(element);
      return element;
    }
    willCloseElement() {
      this.block().closeElement();
    }
    appendText(string) {
      return this.didAppendNode(this.__appendText(string));
    }
    __appendText(text) {
      var {
        dom,
        element,
        nextSibling
      } = this;
      var node = dom.createTextNode(text);
      dom.insertBefore(element, node, nextSibling);
      return node;
    }
    __appendNode(node) {
      this.dom.insertBefore(this.element, node, this.nextSibling);
      return node;
    }
    __appendFragment(fragment) {
      var first = fragment.firstChild;
      if (first) {
        var ret = new ConcreteBounds(this.element, first, fragment.lastChild);
        this.dom.insertBefore(this.element, fragment, this.nextSibling);
        return ret;
      } else {
        return new SingleNodeBounds(this.element, this.__appendComment(''));
      }
    }
    __appendHTML(html) {
      return this.dom.insertHTMLBefore(this.element, this.nextSibling, html);
    }
    appendDynamicHTML(value) {
      var bounds = this.trustedContent(value);
      this.didAppendBounds(bounds);
    }
    appendDynamicText(value) {
      var node = this.untrustedContent(value);
      this.didAppendNode(node);
      return node;
    }
    appendDynamicFragment(value) {
      var bounds = this.__appendFragment(value);
      this.didAppendBounds(bounds);
    }
    appendDynamicNode(value) {
      var node = this.__appendNode(value);
      var bounds = new SingleNodeBounds(this.element, node);
      this.didAppendBounds(bounds);
    }
    trustedContent(value) {
      return this.__appendHTML(value);
    }
    untrustedContent(value) {
      return this.__appendText(value);
    }
    appendComment(string) {
      return this.didAppendNode(this.__appendComment(string));
    }
    __appendComment(string) {
      var {
        dom,
        element,
        nextSibling
      } = this;
      var node = dom.createComment(string);
      dom.insertBefore(element, node, nextSibling);
      return node;
    }
    __setAttribute(name, value, namespace) {
      this.dom.setAttribute(this.constructing, name, value, namespace);
    }
    __setProperty(name, value) {
      this.constructing[name] = value;
    }
    setStaticAttribute(name, value, namespace) {
      this.__setAttribute(name, value, namespace);
    }
    setDynamicAttribute(name, value, trusting, namespace) {
      var element = this.constructing;
      var attribute = dynamicAttribute(element, name, namespace, trusting);
      attribute.set(this, value, this.env);
      return attribute;
    }
  }
  _exports.NewElementBuilder = NewElementBuilder;
  _a = CURSOR_STACK;
  class SimpleLiveBlock {
    constructor(parent) {
      this.parent = parent;
      this.first = null;
      this.last = null;
      this.nesting = 0;
    }
    parentElement() {
      return this.parent;
    }
    firstNode() {
      var first = this.first;
      return first.firstNode();
    }
    lastNode() {
      var last = this.last;
      return last.lastNode();
    }
    openElement(element) {
      this.didAppendNode(element);
      this.nesting++;
    }
    closeElement() {
      this.nesting--;
    }
    didAppendNode(node) {
      if (this.nesting !== 0) return;
      if (!this.first) {
        this.first = new First(node);
      }
      this.last = new Last(node);
    }
    didAppendBounds(bounds) {
      if (this.nesting !== 0) return;
      if (!this.first) {
        this.first = bounds;
      }
      this.last = bounds;
    }
    finalize(stack) {
      if (this.first === null) {
        stack.appendComment('');
      }
    }
  }
  class RemoteLiveBlock extends SimpleLiveBlock {
    constructor(parent) {
      super(parent);
      (0, _destroyable2.registerDestructor)(this, () => {
        // In general, you only need to clear the root of a hierarchy, and should never
        // need to clear any child nodes. This is an important constraint that gives us
        // a strong guarantee that clearing a subtree is a single DOM operation.
        //
        // Because remote blocks are not normally physically nested inside of the tree
        // that they are logically nested inside, we manually clear remote blocks when
        // a logical parent is cleared.
        //
        // HOWEVER, it is currently possible for a remote block to be physically nested
        // inside of the block it is logically contained inside of. This happens when
        // the remote block is appended to the end of the application's entire element.
        //
        // The problem with that scenario is that Glimmer believes that it owns more of
        // the DOM than it actually does. The code is attempting to write past the end
        // of the Glimmer-managed root, but Glimmer isn't aware of that.
        //
        // The correct solution to that problem is for Glimmer to be aware of the end
        // of the bounds that it owns, and once we make that change, this check could
        // be removed.
        //
        // For now, a more targeted fix is to check whether the node was already removed
        // and avoid clearing the node if it was. In most cases this shouldn't happen,
        // so this might hide bugs where the code clears nested nodes unnecessarily,
        // so we should eventually try to do the correct fix.
        if (this.parentElement() === this.firstNode().parentNode) {
          clear(this);
        }
      });
    }
  }
  _exports.RemoteLiveBlock = RemoteLiveBlock;
  class UpdatableBlockImpl extends SimpleLiveBlock {
    reset() {
      (0, _destroyable2.destroy)(this);
      var nextSibling = clear(this);
      this.first = null;
      this.last = null;
      this.nesting = 0;
      return nextSibling;
    }
  } // FIXME: All the noops in here indicate a modelling problem
  _exports.UpdatableBlockImpl = UpdatableBlockImpl;
  class LiveBlockList {
    constructor(parent, boundList) {
      this.parent = parent;
      this.boundList = boundList;
      this.parent = parent;
      this.boundList = boundList;
    }
    parentElement() {
      return this.parent;
    }
    firstNode() {
      var head = this.boundList[0];
      return head.firstNode();
    }
    lastNode() {
      var boundList = this.boundList;
      var tail = boundList[boundList.length - 1];
      return tail.lastNode();
    }
    openElement(_element) {}
    closeElement() {}
    didAppendNode(_node) {}
    didAppendBounds(_bounds) {}
    finalize(_stack) {}
  }
  function clientBuilder(env, cursor) {
    return NewElementBuilder.forInitialRender(env, cursor);
  }
  class AppendOpcodes {
    constructor() {
      this.evaluateOpcode = (0, _util.fillNulls)(104
      /* Size */).slice();
    }
    add(name, evaluate, kind = 'syscall') {
      this.evaluateOpcode[name] = {
        syscall: kind !== 'machine',
        evaluate
      };
    }
    debugBefore(vm, opcode) {
      var params = undefined;
      var opName = undefined;
      var sp;
      return {
        sp: sp,
        pc: vm.fetchValue(_vm2.$pc),
        name: opName,
        params,
        type: opcode.type,
        isMachine: opcode.isMachine,
        size: opcode.size,
        state: undefined
      };
    }
    debugAfter(vm, pre) {}
    evaluate(vm, opcode, type) {
      var operation = this.evaluateOpcode[type];
      if (operation.syscall) {
        operation.evaluate(vm, opcode);
      } else {
        operation.evaluate(vm[INNER_VM], opcode);
      }
    }
  }
  var APPEND_OPCODES = new AppendOpcodes();
  function createConcatRef(partsRefs) {
    return (0, _reference.createComputeRef)(() => {
      var parts = new Array();
      for (var i = 0; i < partsRefs.length; i++) {
        var value = (0, _reference.valueForRef)(partsRefs[i]);
        if (value !== null && value !== undefined) {
          parts[i] = castToString(value);
        }
      }
      if (parts.length > 0) {
        return parts.join('');
      }
      return null;
    });
  }
  function castToString(value) {
    if (typeof value.toString !== 'function') {
      return '';
    }
    return String(value);
  }
  var TYPE = (0, _util.symbol)('TYPE');
  var INNER = (0, _util.symbol)('INNER');
  var OWNER = (0, _util.symbol)('OWNER');
  var ARGS$1 = (0, _util.symbol)('ARGS');
  var RESOLVED = (0, _util.symbol)('RESOLVED');
  var CURRIED_VALUES = new _util._WeakSet();
  function isCurriedValue(value) {
    return CURRIED_VALUES.has(value);
  }
  function isCurriedType(value, type) {
    return isCurriedValue(value) && value[TYPE] === type;
  }
  class CurriedValue {
    /** @internal */
    constructor(type, inner, owner, args, resolved = false) {
      CURRIED_VALUES.add(this);
      this[TYPE] = type;
      this[INNER] = inner;
      this[OWNER] = owner;
      this[ARGS$1] = args;
      this[RESOLVED] = resolved;
    }
  }
  _exports.CurriedValue = CurriedValue;
  function resolveCurriedValue(curriedValue) {
    var currentWrapper = curriedValue;
    var positional;
    var named;
    var definition, owner, resolved;
    while (true) {
      var {
        [ARGS$1]: curriedArgs,
        [INNER]: inner
      } = currentWrapper;
      if (curriedArgs !== null) {
        var {
          named: curriedNamed,
          positional: curriedPositional
        } = curriedArgs;
        if (curriedPositional.length > 0) {
          positional = positional === undefined ? curriedPositional : curriedPositional.concat(positional);
        }
        if (named === undefined) {
          named = [];
        }
        named.unshift(curriedNamed);
      }
      if (!isCurriedValue(inner)) {
        // Save off the owner that this helper was curried with. Later on,
        // we'll fetch the value of this register and set it as the owner on the
        // new root scope.
        definition = inner;
        owner = currentWrapper[OWNER];
        resolved = currentWrapper[RESOLVED];
        break;
      }
      currentWrapper = inner;
    }
    return {
      definition,
      owner,
      resolved,
      positional,
      named
    };
  }
  function curry(type, spec, owner, args, resolved = false) {
    return new CurriedValue(type, spec, owner, args, resolved);
  }
  function createCurryRef(type, inner, owner, args, resolver, isStrict) {
    var lastValue, curriedDefinition;
    return (0, _reference.createComputeRef)(() => {
      var value = (0, _reference.valueForRef)(inner);
      if (value === lastValue) {
        return curriedDefinition;
      }
      if (isCurriedType(value, type)) {
        curriedDefinition = args ? curry(type, value, owner, args) : args;
      } else if (type === 0
      /* Component */ && typeof value === 'string' && value) {
        // Only components should enter this path, as helpers and modifiers do not
        // support string based resolution
        if (true /* DEBUG */) {
          if (isStrict) {
            throw new Error(`Attempted to resolve a dynamic component with a string definition, \`${value}\` in a strict mode template. In strict mode, using strings to resolve component definitions is prohibited. You can instead import the component definition and use it directly.`);
          }
          var resolvedDefinition = resolver.lookupComponent(value, owner);
          if (!resolvedDefinition) {
            throw new Error(`Attempted to resolve \`${value}\`, which was expected to be a component, but nothing was found.`);
          }
        }
        curriedDefinition = curry(type, value, owner, args);
      } else if ((0, _util.isObject)(value)) {
        curriedDefinition = curry(type, value, owner, args);
      } else {
        curriedDefinition = null;
      }
      lastValue = value;
      return curriedDefinition;
    });
  }

  /*
    The calling convention is:
  
    * 0-N block arguments at the bottom
    * 0-N positional arguments next (left-to-right)
    * 0-N named arguments next
  */

  class VMArgumentsImpl {
    constructor() {
      this.stack = null;
      this.positional = new PositionalArgumentsImpl();
      this.named = new NamedArgumentsImpl();
      this.blocks = new BlockArgumentsImpl();
    }
    empty(stack) {
      var base = stack[REGISTERS][_vm2.$sp] + 1;
      this.named.empty(stack, base);
      this.positional.empty(stack, base);
      this.blocks.empty(stack, base);
      return this;
    }
    setup(stack, names, blockNames, positionalCount, atNames) {
      this.stack = stack;
      /*
             | ... | blocks      | positional  | named |
             | ... | b0    b1    | p0 p1 p2 p3 | n0 n1 |
       index | ... | 4/5/6 7/8/9 | 10 11 12 13 | 14 15 |
                     ^             ^             ^  ^
                   bbase         pbase       nbase  sp
      */

      var named = this.named;
      var namedCount = names.length;
      var namedBase = stack[REGISTERS][_vm2.$sp] - namedCount + 1;
      named.setup(stack, namedBase, namedCount, names, atNames);
      var positional = this.positional;
      var positionalBase = namedBase - positionalCount;
      positional.setup(stack, positionalBase, positionalCount);
      var blocks = this.blocks;
      var blocksCount = blockNames.length;
      var blocksBase = positionalBase - blocksCount * 3;
      blocks.setup(stack, blocksBase, blocksCount, blockNames);
    }
    get base() {
      return this.blocks.base;
    }
    get length() {
      return this.positional.length + this.named.length + this.blocks.length * 3;
    }
    at(pos) {
      return this.positional.at(pos);
    }
    realloc(offset) {
      var {
        stack
      } = this;
      if (offset > 0 && stack !== null) {
        var {
          positional,
          named
        } = this;
        var newBase = positional.base + offset;
        var length = positional.length + named.length;
        for (var i = length - 1; i >= 0; i--) {
          stack.copy(i + positional.base, i + newBase);
        }
        positional.base += offset;
        named.base += offset;
        stack[REGISTERS][_vm2.$sp] += offset;
      }
    }
    capture() {
      var positional = this.positional.length === 0 ? EMPTY_POSITIONAL : this.positional.capture();
      var named = this.named.length === 0 ? EMPTY_NAMED : this.named.capture();
      return {
        named,
        positional
      };
    }
    clear() {
      var {
        stack,
        length
      } = this;
      if (length > 0 && stack !== null) stack.pop(length);
    }
  }
  var EMPTY_REFERENCES = (0, _util.emptyArray)();
  class PositionalArgumentsImpl {
    constructor() {
      this.base = 0;
      this.length = 0;
      this.stack = null;
      this._references = null;
    }
    empty(stack, base) {
      this.stack = stack;
      this.base = base;
      this.length = 0;
      this._references = EMPTY_REFERENCES;
    }
    setup(stack, base, length) {
      this.stack = stack;
      this.base = base;
      this.length = length;
      if (length === 0) {
        this._references = EMPTY_REFERENCES;
      } else {
        this._references = null;
      }
    }
    at(position) {
      var {
        base,
        length,
        stack
      } = this;
      if (position < 0 || position >= length) {
        return _reference.UNDEFINED_REFERENCE;
      }
      return stack.get(position, base);
    }
    capture() {
      return this.references;
    }
    prepend(other) {
      var additions = other.length;
      if (additions > 0) {
        var {
          base,
          length,
          stack
        } = this;
        this.base = base = base - additions;
        this.length = length + additions;
        for (var i = 0; i < additions; i++) {
          stack.set(other[i], i, base);
        }
        this._references = null;
      }
    }
    get references() {
      var references = this._references;
      if (!references) {
        var {
          stack,
          base,
          length
        } = this;
        references = this._references = stack.slice(base, base + length);
      }
      return references;
    }
  }
  class NamedArgumentsImpl {
    constructor() {
      this.base = 0;
      this.length = 0;
      this._references = null;
      this._names = _util.EMPTY_STRING_ARRAY;
      this._atNames = _util.EMPTY_STRING_ARRAY;
    }
    empty(stack, base) {
      this.stack = stack;
      this.base = base;
      this.length = 0;
      this._references = EMPTY_REFERENCES;
      this._names = _util.EMPTY_STRING_ARRAY;
      this._atNames = _util.EMPTY_STRING_ARRAY;
    }
    setup(stack, base, length, names, atNames) {
      this.stack = stack;
      this.base = base;
      this.length = length;
      if (length === 0) {
        this._references = EMPTY_REFERENCES;
        this._names = _util.EMPTY_STRING_ARRAY;
        this._atNames = _util.EMPTY_STRING_ARRAY;
      } else {
        this._references = null;
        if (atNames) {
          this._names = null;
          this._atNames = names;
        } else {
          this._names = names;
          this._atNames = null;
        }
      }
    }
    get names() {
      var names = this._names;
      if (!names) {
        names = this._names = this._atNames.map(this.toSyntheticName);
      }
      return names;
    }
    get atNames() {
      var atNames = this._atNames;
      if (!atNames) {
        atNames = this._atNames = this._names.map(this.toAtName);
      }
      return atNames;
    }
    has(name) {
      return this.names.indexOf(name) !== -1;
    }
    get(name, atNames = false) {
      var {
        base,
        stack
      } = this;
      var names = atNames ? this.atNames : this.names;
      var idx = names.indexOf(name);
      if (idx === -1) {
        return _reference.UNDEFINED_REFERENCE;
      }
      var ref = stack.get(idx, base);
      if (true /* DEBUG */) {
        return (0, _reference.createDebugAliasRef)(atNames ? name : `@${name}`, ref);
      } else {
        return ref;
      }
    }
    capture() {
      var {
        names,
        references
      } = this;
      var map = (0, _util.dict)();
      for (var i = 0; i < names.length; i++) {
        var name = names[i];
        if (true /* DEBUG */) {
          map[name] = (0, _reference.createDebugAliasRef)(`@${name}`, references[i]);
        } else {
          map[name] = references[i];
        }
      }
      return map;
    }
    merge(other) {
      var keys = Object.keys(other);
      if (keys.length > 0) {
        var {
          names,
          length,
          stack
        } = this;
        var newNames = names.slice();
        for (var i = 0; i < keys.length; i++) {
          var name = keys[i];
          var idx = newNames.indexOf(name);
          if (idx === -1) {
            length = newNames.push(name);
            stack.push(other[name]);
          }
        }
        this.length = length;
        this._references = null;
        this._names = newNames;
        this._atNames = null;
      }
    }
    get references() {
      var references = this._references;
      if (!references) {
        var {
          base,
          length,
          stack
        } = this;
        references = this._references = stack.slice(base, base + length);
      }
      return references;
    }
    toSyntheticName(name) {
      return name.slice(1);
    }
    toAtName(name) {
      return `@${name}`;
    }
  }
  function toSymbolName(name) {
    return `&${name}`;
  }
  var EMPTY_BLOCK_VALUES = (0, _util.emptyArray)();
  class BlockArgumentsImpl {
    constructor() {
      this.internalValues = null;
      this._symbolNames = null;
      this.internalTag = null;
      this.names = _util.EMPTY_STRING_ARRAY;
      this.length = 0;
      this.base = 0;
    }
    empty(stack, base) {
      this.stack = stack;
      this.names = _util.EMPTY_STRING_ARRAY;
      this.base = base;
      this.length = 0;
      this._symbolNames = null;
      this.internalTag = _validator.CONSTANT_TAG;
      this.internalValues = EMPTY_BLOCK_VALUES;
    }
    setup(stack, base, length, names) {
      this.stack = stack;
      this.names = names;
      this.base = base;
      this.length = length;
      this._symbolNames = null;
      if (length === 0) {
        this.internalTag = _validator.CONSTANT_TAG;
        this.internalValues = EMPTY_BLOCK_VALUES;
      } else {
        this.internalTag = null;
        this.internalValues = null;
      }
    }
    get values() {
      var values = this.internalValues;
      if (!values) {
        var {
          base,
          length,
          stack
        } = this;
        values = this.internalValues = stack.slice(base, base + length * 3);
      }
      return values;
    }
    has(name) {
      return this.names.indexOf(name) !== -1;
    }
    get(name) {
      var idx = this.names.indexOf(name);
      if (idx === -1) {
        return null;
      }
      var {
        base,
        stack
      } = this;
      var table = stack.get(idx * 3, base);
      var scope = stack.get(idx * 3 + 1, base);
      var handle = stack.get(idx * 3 + 2, base);
      return handle === null ? null : [handle, scope, table];
    }
    capture() {
      return new CapturedBlockArgumentsImpl(this.names, this.values);
    }
    get symbolNames() {
      var symbolNames = this._symbolNames;
      if (symbolNames === null) {
        symbolNames = this._symbolNames = this.names.map(toSymbolName);
      }
      return symbolNames;
    }
  }
  class CapturedBlockArgumentsImpl {
    constructor(names, values) {
      this.names = names;
      this.values = values;
      this.length = names.length;
    }
    has(name) {
      return this.names.indexOf(name) !== -1;
    }
    get(name) {
      var idx = this.names.indexOf(name);
      if (idx === -1) return null;
      return [this.values[idx * 3 + 2], this.values[idx * 3 + 1], this.values[idx * 3]];
    }
  }
  function createCapturedArgs(named, positional) {
    return {
      named,
      positional
    };
  }
  function reifyNamed$1(named) {
    var reified = (0, _util.dict)();
    for (var key in named) {
      reified[key] = (0, _reference.valueForRef)(named[key]);
    }
    return reified;
  }
  function reifyPositional$1(positional) {
    return positional.map(_reference.valueForRef);
  }
  function reifyArgs(args) {
    return {
      named: reifyNamed$1(args.named),
      positional: reifyPositional$1(args.positional)
    };
  }
  var EMPTY_NAMED = _exports.EMPTY_NAMED = Object.freeze(Object.create(null));
  var EMPTY_POSITIONAL = _exports.EMPTY_POSITIONAL = EMPTY_REFERENCES;
  var EMPTY_ARGS = _exports.EMPTY_ARGS = createCapturedArgs(EMPTY_NAMED, EMPTY_POSITIONAL);
  APPEND_OPCODES.add(77
  /* Curry */, (vm, {
    op1: type,
    op2: _isStrict
  }) => {
    var stack = vm.stack;
    var definition = stack.pop();
    var capturedArgs = stack.pop();
    var owner = vm.getOwner();
    var resolver = vm.runtime.resolver;
    var isStrict = false;
    if (true /* DEBUG */) {
      // strict check only happens in DEBUG builds, no reason to load it otherwise
      isStrict = vm[CONSTANTS].getValue((0, _util.decodeHandle)(_isStrict));
    }
    vm.loadValue(_vm2.$v0, createCurryRef(type, definition, owner, capturedArgs, resolver, isStrict));
  });
  APPEND_OPCODES.add(107
  /* DynamicHelper */, vm => {
    var stack = vm.stack;
    var ref = stack.pop();
    var args = stack.pop().capture();
    var helperRef;
    var initialOwner = vm.getOwner();
    var helperInstanceRef = (0, _reference.createComputeRef)(() => {
      if (helperRef !== undefined) {
        (0, _destroyable2.destroy)(helperRef);
      }
      var definition = (0, _reference.valueForRef)(ref);
      if (isCurriedType(definition, 1
      /* Helper */)) {
        var {
          definition: resolvedDef,
          owner,
          positional,
          named
        } = resolveCurriedValue(definition);
        var _helper = resolveHelper(vm[CONSTANTS], resolvedDef, ref);
        if (named !== undefined) {
          args.named = (0, _util.assign)({}, ...named, args.named);
        }
        if (positional !== undefined) {
          args.positional = positional.concat(args.positional);
        }
        helperRef = _helper(args, owner);
        (0, _destroyable2.associateDestroyableChild)(helperInstanceRef, helperRef);
      } else if ((0, _util.isObject)(definition)) {
        var _helper2 = resolveHelper(vm[CONSTANTS], definition, ref);
        helperRef = _helper2(args, initialOwner);
        if ((0, _destroyable2._hasDestroyableChildren)(helperRef)) {
          (0, _destroyable2.associateDestroyableChild)(helperInstanceRef, helperRef);
        }
      } else {
        helperRef = _reference.UNDEFINED_REFERENCE;
      }
    });
    var helperValueRef = (0, _reference.createComputeRef)(() => {
      (0, _reference.valueForRef)(helperInstanceRef);
      return (0, _reference.valueForRef)(helperRef);
    });
    vm.associateDestroyable(helperInstanceRef);
    vm.loadValue(_vm2.$v0, helperValueRef);
  });
  function resolveHelper(constants, definition, ref) {
    var handle = constants.helper(definition, null, true);
    if (true /* DEBUG */ && handle === null) {
      throw new Error(`Expected a dynamic helper definition, but received an object or function that did not have a helper manager associated with it. The dynamic invocation was \`{{${ref.debugLabel}}}\` or \`(${ref.debugLabel})\`, and the incorrect definition is the value at the path \`${ref.debugLabel}\`, which was: ${(0, _util.debugToString)(definition)}`);
    }
    return constants.getValue(handle);
  }
  APPEND_OPCODES.add(16
  /* Helper */, (vm, {
    op1: handle
  }) => {
    var stack = vm.stack;
    var helper = vm[CONSTANTS].getValue(handle);
    var args = stack.pop();
    var value = helper(args.capture(), vm.getOwner(), vm.dynamicScope());
    if ((0, _destroyable2._hasDestroyableChildren)(value)) {
      vm.associateDestroyable(value);
    }
    vm.loadValue(_vm2.$v0, value);
  });
  APPEND_OPCODES.add(21
  /* GetVariable */, (vm, {
    op1: symbol$$1
  }) => {
    var expr = vm.referenceForSymbol(symbol$$1);
    vm.stack.push(expr);
  });
  APPEND_OPCODES.add(19
  /* SetVariable */, (vm, {
    op1: symbol$$1
  }) => {
    var expr = vm.stack.pop();
    vm.scope().bindSymbol(symbol$$1, expr);
  });
  APPEND_OPCODES.add(20
  /* SetBlock */, (vm, {
    op1: symbol$$1
  }) => {
    var handle = vm.stack.pop();
    var scope = vm.stack.pop();
    var table = vm.stack.pop();
    vm.scope().bindBlock(symbol$$1, [handle, scope, table]);
  });
  APPEND_OPCODES.add(102
  /* ResolveMaybeLocal */, (vm, {
    op1: _name
  }) => {
    var name = vm[CONSTANTS].getValue(_name);
    var locals = vm.scope().getPartialMap();
    var ref = locals[name];
    if (ref === undefined) {
      ref = (0, _reference.childRefFor)(vm.getSelf(), name);
    }
    vm.stack.push(ref);
  });
  APPEND_OPCODES.add(37
  /* RootScope */, (vm, {
    op1: symbols
  }) => {
    vm.pushRootScope(symbols, vm.getOwner());
  });
  APPEND_OPCODES.add(22
  /* GetProperty */, (vm, {
    op1: _key
  }) => {
    var key = vm[CONSTANTS].getValue(_key);
    var expr = vm.stack.pop();
    vm.stack.push((0, _reference.childRefFor)(expr, key));
  });
  APPEND_OPCODES.add(23
  /* GetBlock */, (vm, {
    op1: _block
  }) => {
    var {
      stack
    } = vm;
    var block = vm.scope().getBlock(_block);
    stack.push(block);
  });
  APPEND_OPCODES.add(24
  /* SpreadBlock */, vm => {
    var {
      stack
    } = vm;
    var block = stack.pop();
    if (block && !isUndefinedReference(block)) {
      var [handleOrCompilable, scope, table] = block;
      stack.push(table);
      stack.push(scope);
      stack.push(handleOrCompilable);
    } else {
      stack.push(null);
      stack.push(null);
      stack.push(null);
    }
  });
  function isUndefinedReference(input) {
    return input === _reference.UNDEFINED_REFERENCE;
  }
  APPEND_OPCODES.add(25
  /* HasBlock */, vm => {
    var {
      stack
    } = vm;
    var block = stack.pop();
    if (block && !isUndefinedReference(block)) {
      stack.push(_reference.TRUE_REFERENCE);
    } else {
      stack.push(_reference.FALSE_REFERENCE);
    }
  });
  APPEND_OPCODES.add(26
  /* HasBlockParams */, vm => {
    // FIXME(mmun): should only need to push the symbol table
    var block = vm.stack.pop();
    var scope = vm.stack.pop();
    var table = vm.stack.pop();
    var hasBlockParams = table && table.parameters.length;
    vm.stack.push(hasBlockParams ? _reference.TRUE_REFERENCE : _reference.FALSE_REFERENCE);
  });
  APPEND_OPCODES.add(27
  /* Concat */, (vm, {
    op1: count
  }) => {
    var out = new Array(count);
    for (var i = count; i > 0; i--) {
      var offset = i - 1;
      out[offset] = vm.stack.pop();
    }
    vm.stack.push(createConcatRef(out));
  });
  APPEND_OPCODES.add(109
  /* IfInline */, vm => {
    var condition = vm.stack.pop();
    var truthy = vm.stack.pop();
    var falsy = vm.stack.pop();
    vm.stack.push((0, _reference.createComputeRef)(() => {
      if ((0, _globalContext.toBool)((0, _reference.valueForRef)(condition)) === true) {
        return (0, _reference.valueForRef)(truthy);
      } else {
        return (0, _reference.valueForRef)(falsy);
      }
    }));
  });
  APPEND_OPCODES.add(110
  /* Not */, vm => {
    var ref = vm.stack.pop();
    vm.stack.push((0, _reference.createComputeRef)(() => {
      return !(0, _globalContext.toBool)((0, _reference.valueForRef)(ref));
    }));
  });
  APPEND_OPCODES.add(111
  /* GetDynamicVar */, vm => {
    var scope = vm.dynamicScope();
    var stack = vm.stack;
    var nameRef = stack.pop();
    stack.push((0, _reference.createComputeRef)(() => {
      var name = String((0, _reference.valueForRef)(nameRef));
      return (0, _reference.valueForRef)(scope.get(name));
    }));
  });
  APPEND_OPCODES.add(112
  /* Log */, vm => {
    var {
      positional
    } = vm.stack.pop().capture();
    vm.loadValue(_vm2.$v0, (0, _reference.createComputeRef)(() => {
      // eslint-disable-next-line no-console
      console.log(...reifyPositional$1(positional));
    }));
  });
  function resolveComponent(resolver, constants, name, owner) {
    var definition = resolver.lookupComponent(name, owner);
    if (true /* DEBUG */ && !definition) {
      throw new Error(`Attempted to resolve \`${name}\`, which was expected to be a component, but nothing was found.`);
    }
    return constants.resolvedComponent(definition, name);
  }

  /** @internal */
  function hasCustomDebugRenderTreeLifecycle(manager) {
    return 'getDebugCustomRenderTree' in manager;
  }
  function createClassListRef(list) {
    return (0, _reference.createComputeRef)(() => {
      var ret = [];
      for (var i = 0; i < list.length; i++) {
        var ref = list[i];
        var value = normalizeStringValue(typeof ref === 'string' ? ref : (0, _reference.valueForRef)(list[i]));
        if (value) ret.push(value);
      }
      return ret.length === 0 ? null : ret.join(' ');
    });
  }
  APPEND_OPCODES.add(39
  /* ChildScope */, vm => vm.pushChildScope());
  APPEND_OPCODES.add(40
  /* PopScope */, vm => vm.popScope());
  APPEND_OPCODES.add(59
  /* PushDynamicScope */, vm => vm.pushDynamicScope());
  APPEND_OPCODES.add(60
  /* PopDynamicScope */, vm => vm.popDynamicScope());
  APPEND_OPCODES.add(28
  /* Constant */, (vm, {
    op1: other
  }) => {
    vm.stack.push(vm[CONSTANTS].getValue((0, _util.decodeHandle)(other)));
  });
  APPEND_OPCODES.add(29
  /* ConstantReference */, (vm, {
    op1: other
  }) => {
    vm.stack.push((0, _reference.createConstRef)(vm[CONSTANTS].getValue((0, _util.decodeHandle)(other)), false));
  });
  APPEND_OPCODES.add(30
  /* Primitive */, (vm, {
    op1: primitive
  }) => {
    var stack = vm.stack;
    if ((0, _util.isHandle)(primitive)) {
      // it is a handle which does not already exist on the stack
      var value = vm[CONSTANTS].getValue((0, _util.decodeHandle)(primitive));
      stack.push(value);
    } else {
      // is already an encoded immediate or primitive handle
      stack.push((0, _util.decodeImmediate)(primitive));
    }
  });
  APPEND_OPCODES.add(31
  /* PrimitiveReference */, vm => {
    var stack = vm.stack;
    var value = stack.pop();
    var ref;
    if (value === undefined) {
      ref = _reference.UNDEFINED_REFERENCE;
    } else if (value === null) {
      ref = _reference.NULL_REFERENCE;
    } else if (value === true) {
      ref = _reference.TRUE_REFERENCE;
    } else if (value === false) {
      ref = _reference.FALSE_REFERENCE;
    } else {
      ref = (0, _reference.createPrimitiveRef)(value);
    }
    stack.push(ref);
  });
  APPEND_OPCODES.add(33
  /* Dup */, (vm, {
    op1: register,
    op2: offset
  }) => {
    var position = vm.fetchValue(register) - offset;
    vm.stack.dup(position);
  });
  APPEND_OPCODES.add(34
  /* Pop */, (vm, {
    op1: count
  }) => {
    vm.stack.pop(count);
  });
  APPEND_OPCODES.add(35
  /* Load */, (vm, {
    op1: register
  }) => {
    vm.load(register);
  });
  APPEND_OPCODES.add(36
  /* Fetch */, (vm, {
    op1: register
  }) => {
    vm.fetch(register);
  });
  APPEND_OPCODES.add(58
  /* BindDynamicScope */, (vm, {
    op1: _names
  }) => {
    var names = vm[CONSTANTS].getArray(_names);
    vm.bindDynamicScope(names);
  });
  APPEND_OPCODES.add(69
  /* Enter */, (vm, {
    op1: args
  }) => {
    vm.enter(args);
  });
  APPEND_OPCODES.add(70
  /* Exit */, vm => {
    vm.exit();
  });
  APPEND_OPCODES.add(63
  /* PushSymbolTable */, (vm, {
    op1: _table
  }) => {
    var stack = vm.stack;
    stack.push(vm[CONSTANTS].getValue(_table));
  });
  APPEND_OPCODES.add(62
  /* PushBlockScope */, vm => {
    var stack = vm.stack;
    stack.push(vm.scope());
  });
  APPEND_OPCODES.add(61
  /* CompileBlock */, vm => {
    var stack = vm.stack;
    var block = stack.pop();
    if (block) {
      stack.push(vm.compile(block));
    } else {
      stack.push(null);
    }
  });
  APPEND_OPCODES.add(64
  /* InvokeYield */, vm => {
    var {
      stack
    } = vm;
    var handle = stack.pop();
    var scope = stack.pop();
    var table = stack.pop();
    var args = stack.pop();
    if (table === null) {
      // To balance the pop{Frame,Scope}
      vm.pushFrame();
      vm.pushScope(scope !== null && scope !== void 0 ? scope : vm.scope());
      return;
    }
    var invokingScope = scope; // If necessary, create a child scope

    {
      var locals = table.parameters;
      var localsCount = locals.length;
      if (localsCount > 0) {
        invokingScope = invokingScope.child();
        for (var i = 0; i < localsCount; i++) {
          invokingScope.bindSymbol(locals[i], args.at(i));
        }
      }
    }
    vm.pushFrame();
    vm.pushScope(invokingScope);
    vm.call(handle);
  });
  APPEND_OPCODES.add(65
  /* JumpIf */, (vm, {
    op1: target
  }) => {
    var reference = vm.stack.pop();
    var value = Boolean((0, _reference.valueForRef)(reference));
    if ((0, _reference.isConstRef)(reference)) {
      if (value === true) {
        vm.goto(target);
      }
    } else {
      if (value === true) {
        vm.goto(target);
      }
      vm.updateWith(new Assert(reference));
    }
  });
  APPEND_OPCODES.add(66
  /* JumpUnless */, (vm, {
    op1: target
  }) => {
    var reference = vm.stack.pop();
    var value = Boolean((0, _reference.valueForRef)(reference));
    if ((0, _reference.isConstRef)(reference)) {
      if (value === false) {
        vm.goto(target);
      }
    } else {
      if (value === false) {
        vm.goto(target);
      }
      vm.updateWith(new Assert(reference));
    }
  });
  APPEND_OPCODES.add(67
  /* JumpEq */, (vm, {
    op1: target,
    op2: comparison
  }) => {
    var other = vm.stack.peek();
    if (other === comparison) {
      vm.goto(target);
    }
  });
  APPEND_OPCODES.add(68
  /* AssertSame */, vm => {
    var reference = vm.stack.peek();
    if ((0, _reference.isConstRef)(reference) === false) {
      vm.updateWith(new Assert(reference));
    }
  });
  APPEND_OPCODES.add(71
  /* ToBoolean */, vm => {
    var {
      stack
    } = vm;
    var valueRef = stack.pop();
    stack.push((0, _reference.createComputeRef)(() => (0, _globalContext.toBool)((0, _reference.valueForRef)(valueRef))));
  });
  class Assert {
    constructor(ref) {
      this.ref = ref;
      this.last = (0, _reference.valueForRef)(ref);
    }
    evaluate(vm) {
      var {
        last,
        ref
      } = this;
      var current = (0, _reference.valueForRef)(ref);
      if (last !== current) {
        vm.throw();
      }
    }
  }
  class AssertFilter {
    constructor(ref, filter) {
      this.ref = ref;
      this.filter = filter;
      this.last = filter((0, _reference.valueForRef)(ref));
    }
    evaluate(vm) {
      var {
        last,
        ref,
        filter
      } = this;
      var current = filter((0, _reference.valueForRef)(ref));
      if (last !== current) {
        vm.throw();
      }
    }
  }
  class JumpIfNotModifiedOpcode {
    constructor() {
      this.tag = _validator.CONSTANT_TAG;
      this.lastRevision = _validator.INITIAL;
    }
    finalize(tag, target) {
      this.target = target;
      this.didModify(tag);
    }
    evaluate(vm) {
      var {
        tag,
        target,
        lastRevision
      } = this;
      if (!vm.alwaysRevalidate && (0, _validator.validateTag)(tag, lastRevision)) {
        (0, _validator.consumeTag)(tag);
        vm.goto(target);
      }
    }
    didModify(tag) {
      this.tag = tag;
      this.lastRevision = (0, _validator.valueForTag)(this.tag);
      (0, _validator.consumeTag)(tag);
    }
  }
  class BeginTrackFrameOpcode {
    constructor(debugLabel) {
      this.debugLabel = debugLabel;
    }
    evaluate() {
      (0, _validator.beginTrackFrame)(this.debugLabel);
    }
  }
  class EndTrackFrameOpcode {
    constructor(target) {
      this.target = target;
    }
    evaluate() {
      var tag = (0, _validator.endTrackFrame)();
      this.target.didModify(tag);
    }
  }
  APPEND_OPCODES.add(41
  /* Text */, (vm, {
    op1: text
  }) => {
    vm.elements().appendText(vm[CONSTANTS].getValue(text));
  });
  APPEND_OPCODES.add(42
  /* Comment */, (vm, {
    op1: text
  }) => {
    vm.elements().appendComment(vm[CONSTANTS].getValue(text));
  });
  APPEND_OPCODES.add(48
  /* OpenElement */, (vm, {
    op1: tag
  }) => {
    vm.elements().openElement(vm[CONSTANTS].getValue(tag));
  });
  APPEND_OPCODES.add(49
  /* OpenDynamicElement */, vm => {
    var tagName = (0, _reference.valueForRef)(vm.stack.pop());
    vm.elements().openElement(tagName);
  });
  APPEND_OPCODES.add(50
  /* PushRemoteElement */, vm => {
    var elementRef = vm.stack.pop();
    var insertBeforeRef = vm.stack.pop();
    var guidRef = vm.stack.pop();
    var element = (0, _reference.valueForRef)(elementRef);
    var insertBefore = (0, _reference.valueForRef)(insertBeforeRef);
    var guid = (0, _reference.valueForRef)(guidRef);
    if (!(0, _reference.isConstRef)(elementRef)) {
      vm.updateWith(new Assert(elementRef));
    }
    if (insertBefore !== undefined && !(0, _reference.isConstRef)(insertBeforeRef)) {
      vm.updateWith(new Assert(insertBeforeRef));
    }
    var block = vm.elements().pushRemoteElement(element, guid, insertBefore);
    if (block) vm.associateDestroyable(block);
  });
  APPEND_OPCODES.add(56
  /* PopRemoteElement */, vm => {
    vm.elements().popRemoteElement();
  });
  APPEND_OPCODES.add(54
  /* FlushElement */, vm => {
    var operations = vm.fetchValue(_vm2.$t0);
    var modifiers = null;
    if (operations) {
      modifiers = operations.flush(vm);
      vm.loadValue(_vm2.$t0, null);
    }
    vm.elements().flushElement(modifiers);
  });
  APPEND_OPCODES.add(55
  /* CloseElement */, vm => {
    var modifiers = vm.elements().closeElement();
    if (modifiers) {
      modifiers.forEach(modifier => {
        vm.env.scheduleInstallModifier(modifier);
        var {
          manager,
          state
        } = modifier;
        var d = manager.getDestroyable(state);
        if (d) {
          vm.associateDestroyable(d);
        }
      });
    }
  });
  APPEND_OPCODES.add(57
  /* Modifier */, (vm, {
    op1: handle
  }) => {
    if (vm.env.isInteractive === false) {
      return;
    }
    var owner = vm.getOwner();
    var args = vm.stack.pop();
    var definition = vm[CONSTANTS].getValue(handle);
    var {
      manager
    } = definition;
    var {
      constructing
    } = vm.elements();
    var state = manager.create(owner, constructing, definition.state, args.capture());
    var instance = {
      manager,
      state,
      definition
    };
    var operations = vm.fetchValue(_vm2.$t0);
    operations.addModifier(instance);
    var tag = manager.getTag(state);
    if (tag !== null) {
      (0, _validator.consumeTag)(tag);
      return vm.updateWith(new UpdateModifierOpcode(tag, instance));
    }
  });
  APPEND_OPCODES.add(108
  /* DynamicModifier */, vm => {
    if (vm.env.isInteractive === false) {
      return;
    }
    var {
      stack,
      [CONSTANTS]: constants
    } = vm;
    var ref = stack.pop();
    var args = stack.pop().capture();
    var {
      constructing
    } = vm.elements();
    var initialOwner = vm.getOwner();
    var instanceRef = (0, _reference.createComputeRef)(() => {
      var value = (0, _reference.valueForRef)(ref);
      var owner;
      if (!(0, _util.isObject)(value)) {
        return;
      }
      var hostDefinition;
      if (isCurriedType(value, 2
      /* Modifier */)) {
        var {
          definition: resolvedDefinition,
          owner: curriedOwner,
          positional,
          named
        } = resolveCurriedValue(value);
        hostDefinition = resolvedDefinition;
        owner = curriedOwner;
        if (positional !== undefined) {
          args.positional = positional.concat(args.positional);
        }
        if (named !== undefined) {
          args.named = (0, _util.assign)({}, ...named, args.named);
        }
      } else {
        hostDefinition = value;
        owner = initialOwner;
      }
      var handle = constants.modifier(hostDefinition, null, true);
      if (true /* DEBUG */ && handle === null) {
        throw new Error(`Expected a dynamic modifier definition, but received an object or function that did not have a modifier manager associated with it. The dynamic invocation was \`{{${ref.debugLabel}}}\`, and the incorrect definition is the value at the path \`${ref.debugLabel}\`, which was: ${(0, _util.debugToString)(hostDefinition)}`);
      }
      var definition = constants.getValue(handle);
      var {
        manager
      } = definition;
      var state = manager.create(owner, constructing, definition.state, args);
      return {
        manager,
        state,
        definition
      };
    });
    var instance = (0, _reference.valueForRef)(instanceRef);
    var tag = null;
    if (instance !== undefined) {
      var operations = vm.fetchValue(_vm2.$t0);
      operations.addModifier(instance);
      tag = instance.manager.getTag(instance.state);
      if (tag !== null) {
        (0, _validator.consumeTag)(tag);
      }
    }
    if (!(0, _reference.isConstRef)(ref) || tag) {
      return vm.updateWith(new UpdateDynamicModifierOpcode(tag, instance, instanceRef));
    }
  });
  class UpdateModifierOpcode {
    constructor(tag, modifier) {
      this.tag = tag;
      this.modifier = modifier;
      this.lastUpdated = (0, _validator.valueForTag)(tag);
    }
    evaluate(vm) {
      var {
        modifier,
        tag,
        lastUpdated
      } = this;
      (0, _validator.consumeTag)(tag);
      if (!(0, _validator.validateTag)(tag, lastUpdated)) {
        vm.env.scheduleUpdateModifier(modifier);
        this.lastUpdated = (0, _validator.valueForTag)(tag);
      }
    }
  }
  class UpdateDynamicModifierOpcode {
    constructor(tag, instance, instanceRef) {
      this.tag = tag;
      this.instance = instance;
      this.instanceRef = instanceRef;
      this.lastUpdated = (0, _validator.valueForTag)(tag !== null && tag !== void 0 ? tag : _validator.CURRENT_TAG);
    }
    evaluate(vm) {
      var {
        tag,
        lastUpdated,
        instance,
        instanceRef
      } = this;
      var newInstance = (0, _reference.valueForRef)(instanceRef);
      if (newInstance !== instance) {
        if (instance !== undefined) {
          var destroyable = instance.manager.getDestroyable(instance.state);
          if (destroyable !== null) {
            (0, _destroyable2.destroy)(destroyable);
          }
        }
        if (newInstance !== undefined) {
          var {
            manager,
            state
          } = newInstance;
          var _destroyable = manager.getDestroyable(state);
          if (_destroyable !== null) {
            (0, _destroyable2.associateDestroyableChild)(this, _destroyable);
          }
          tag = manager.getTag(state);
          if (tag !== null) {
            this.lastUpdated = (0, _validator.valueForTag)(tag);
          }
          this.tag = tag;
          vm.env.scheduleInstallModifier(newInstance);
        }
        this.instance = newInstance;
      } else if (tag !== null && !(0, _validator.validateTag)(tag, lastUpdated)) {
        vm.env.scheduleUpdateModifier(instance);
        this.lastUpdated = (0, _validator.valueForTag)(tag);
      }
      if (tag !== null) {
        (0, _validator.consumeTag)(tag);
      }
    }
  }
  APPEND_OPCODES.add(51
  /* StaticAttr */, (vm, {
    op1: _name,
    op2: _value,
    op3: _namespace
  }) => {
    var name = vm[CONSTANTS].getValue(_name);
    var value = vm[CONSTANTS].getValue(_value);
    var namespace = _namespace ? vm[CONSTANTS].getValue(_namespace) : null;
    vm.elements().setStaticAttribute(name, value, namespace);
  });
  APPEND_OPCODES.add(52
  /* DynamicAttr */, (vm, {
    op1: _name,
    op2: _trusting,
    op3: _namespace
  }) => {
    var name = vm[CONSTANTS].getValue(_name);
    var trusting = vm[CONSTANTS].getValue(_trusting);
    var reference = vm.stack.pop();
    var value = (0, _reference.valueForRef)(reference);
    var namespace = _namespace ? vm[CONSTANTS].getValue(_namespace) : null;
    var attribute = vm.elements().setDynamicAttribute(name, value, trusting, namespace);
    if (!(0, _reference.isConstRef)(reference)) {
      vm.updateWith(new UpdateDynamicAttributeOpcode(reference, attribute, vm.env));
    }
  });
  class UpdateDynamicAttributeOpcode {
    constructor(reference, attribute, env) {
      var initialized = false;
      this.updateRef = (0, _reference.createComputeRef)(() => {
        var value = (0, _reference.valueForRef)(reference);
        if (initialized === true) {
          attribute.update(value, env);
        } else {
          initialized = true;
        }
      });
      (0, _reference.valueForRef)(this.updateRef);
    }
    evaluate() {
      (0, _reference.valueForRef)(this.updateRef);
    }
  }
  APPEND_OPCODES.add(78
  /* PushComponentDefinition */, (vm, {
    op1: handle
  }) => {
    var definition = vm[CONSTANTS].getValue(handle);
    var {
      manager,
      capabilities
    } = definition;
    var instance = {
      definition,
      manager,
      capabilities,
      state: null,
      handle: null,
      table: null,
      lookup: null
    };
    vm.stack.push(instance);
  });
  APPEND_OPCODES.add(80
  /* ResolveDynamicComponent */, (vm, {
    op1: _isStrict
  }) => {
    var stack = vm.stack;
    var component = (0, _reference.valueForRef)(stack.pop());
    var constants = vm[CONSTANTS];
    var owner = vm.getOwner();
    var isStrict = constants.getValue(_isStrict);
    vm.loadValue(_vm2.$t1, null); // Clear the temp register

    var definition;
    if (typeof component === 'string') {
      if (true /* DEBUG */ && isStrict) {
        throw new Error(`Attempted to resolve a dynamic component with a string definition, \`${component}\` in a strict mode template. In strict mode, using strings to resolve component definitions is prohibited. You can instead import the component definition and use it directly.`);
      }
      var resolvedDefinition = resolveComponent(vm.runtime.resolver, constants, component, owner);
      definition = resolvedDefinition;
    } else if (isCurriedValue(component)) {
      definition = component;
    } else {
      definition = constants.component(component, owner);
    }
    stack.push(definition);
  });
  APPEND_OPCODES.add(81
  /* ResolveCurriedComponent */, vm => {
    var stack = vm.stack;
    var ref = stack.pop();
    var value = (0, _reference.valueForRef)(ref);
    var constants = vm[CONSTANTS];
    var definition;
    if (true /* DEBUG */ && !(typeof value === 'function' || typeof value === 'object' && value !== null)) {
      throw new Error(`Expected a component definition, but received ${value}. You may have accidentally done <${ref.debugLabel}>, where "${ref.debugLabel}" was a string instead of a curried component definition. You must either use the component definition directly, or use the {{component}} helper to create a curried component definition when invoking dynamically.`);
    }
    if (isCurriedValue(value)) {
      definition = value;
    } else {
      definition = constants.component(value, vm.getOwner(), true);
      if (true /* DEBUG */ && definition === null) {
        throw new Error(`Expected a dynamic component definition, but received an object or function that did not have a component manager associated with it. The dynamic invocation was \`<${ref.debugLabel}>\` or \`{{${ref.debugLabel}}}\`, and the incorrect definition is the value at the path \`${ref.debugLabel}\`, which was: ${(0, _util.debugToString)(value)}`);
      }
    }
    stack.push(definition);
  });
  APPEND_OPCODES.add(79
  /* PushDynamicComponentInstance */, vm => {
    var {
      stack
    } = vm;
    var definition = stack.pop();
    var capabilities, manager;
    if (isCurriedValue(definition)) {
      manager = capabilities = null;
    } else {
      manager = definition.manager;
      capabilities = definition.capabilities;
    }
    stack.push({
      definition,
      capabilities,
      manager,
      state: null,
      handle: null,
      table: null
    });
  });
  APPEND_OPCODES.add(82
  /* PushArgs */, (vm, {
    op1: _names,
    op2: _blockNames,
    op3: flags
  }) => {
    var stack = vm.stack;
    var names = vm[CONSTANTS].getArray(_names);
    var positionalCount = flags >> 4;
    var atNames = flags & 0b1000;
    var blockNames = flags & 0b0111 ? vm[CONSTANTS].getArray(_blockNames) : _util.EMPTY_STRING_ARRAY;
    vm[ARGS].setup(stack, names, blockNames, positionalCount, !!atNames);
    stack.push(vm[ARGS]);
  });
  APPEND_OPCODES.add(83
  /* PushEmptyArgs */, vm => {
    var {
      stack
    } = vm;
    stack.push(vm[ARGS].empty(stack));
  });
  APPEND_OPCODES.add(86
  /* CaptureArgs */, vm => {
    var stack = vm.stack;
    var args = stack.pop();
    var capturedArgs = args.capture();
    stack.push(capturedArgs);
  });
  APPEND_OPCODES.add(85
  /* PrepareArgs */, (vm, {
    op1: _state
  }) => {
    var stack = vm.stack;
    var instance = vm.fetchValue(_state);
    var args = stack.pop();
    var {
      definition
    } = instance;
    if (isCurriedType(definition, 0
    /* Component */)) {
      var constants = vm[CONSTANTS];
      var {
        definition: resolvedDefinition,
        owner,
        resolved,
        positional,
        named
      } = resolveCurriedValue(definition);
      if (resolved === true) {
        definition = resolvedDefinition;
      } else if (typeof resolvedDefinition === 'string') {
        var resolvedValue = vm.runtime.resolver.lookupComponent(resolvedDefinition, owner);
        definition = constants.resolvedComponent(resolvedValue, resolvedDefinition);
      } else {
        definition = constants.component(resolvedDefinition, owner);
      }
      if (named !== undefined) {
        args.named.merge((0, _util.assign)({}, ...named));
      }
      if (positional !== undefined) {
        args.realloc(positional.length);
        args.positional.prepend(positional);
      }
      var {
        manager: _manager
      } = definition;
      instance.definition = definition;
      instance.manager = _manager;
      instance.capabilities = definition.capabilities; // Save off the owner that this component was curried with. Later on,
      // we'll fetch the value of this register and set it as the owner on the
      // new root scope.

      vm.loadValue(_vm2.$t1, owner);
    }
    var {
      manager,
      state
    } = definition;
    var capabilities = instance.capabilities;
    if (!(0, _manager5.managerHasCapability)(manager, capabilities, 4
    /* PrepareArgs */)) {
      stack.push(args);
      return;
    }
    var blocks = args.blocks.values;
    var blockNames = args.blocks.names;
    var preparedArgs = manager.prepareArgs(state, args);
    if (preparedArgs) {
      args.clear();
      for (var i = 0; i < blocks.length; i++) {
        stack.push(blocks[i]);
      }
      var {
        positional: _positional,
        named: _named
      } = preparedArgs;
      var positionalCount = _positional.length;
      for (var _i = 0; _i < positionalCount; _i++) {
        stack.push(_positional[_i]);
      }
      var names = Object.keys(_named);
      for (var _i2 = 0; _i2 < names.length; _i2++) {
        stack.push(_named[names[_i2]]);
      }
      args.setup(stack, names, blockNames, positionalCount, false);
    }
    stack.push(args);
  });
  APPEND_OPCODES.add(87
  /* CreateComponent */, (vm, {
    op1: flags,
    op2: _state
  }) => {
    var instance = vm.fetchValue(_state);
    var {
      definition,
      manager,
      capabilities
    } = instance;
    if (!(0, _manager5.managerHasCapability)(manager, capabilities, 512
    /* CreateInstance */)) {
      // TODO: Closure and Main components are always invoked dynamically, so this
      // opcode may run even if this capability is not enabled. In the future we
      // should handle this in a better way.
      return;
    }
    var dynamicScope = null;
    if ((0, _manager5.managerHasCapability)(manager, capabilities, 64
    /* DynamicScope */)) {
      dynamicScope = vm.dynamicScope();
    }
    var hasDefaultBlock = flags & 1;
    var args = null;
    if ((0, _manager5.managerHasCapability)(manager, capabilities, 8
    /* CreateArgs */)) {
      args = vm.stack.peek();
    }
    var self = null;
    if ((0, _manager5.managerHasCapability)(manager, capabilities, 128
    /* CreateCaller */)) {
      self = vm.getSelf();
    }
    var state = manager.create(vm.getOwner(), definition.state, args, vm.env, dynamicScope, self, !!hasDefaultBlock); // We want to reuse the `state` POJO here, because we know that the opcodes
    // only transition at exactly one place.

    instance.state = state;
    if ((0, _manager5.managerHasCapability)(manager, capabilities, 256
    /* UpdateHook */)) {
      vm.updateWith(new UpdateComponentOpcode(state, manager, dynamicScope));
    }
  });
  APPEND_OPCODES.add(88
  /* RegisterComponentDestructor */, (vm, {
    op1: _state
  }) => {
    var {
      manager,
      state,
      capabilities
    } = vm.fetchValue(_state);
    var d = manager.getDestroyable(state);
    if (true /* DEBUG */ && !(0, _manager5.managerHasCapability)(manager, capabilities, 2048
    /* WillDestroy */) && d !== null && typeof 'willDestroy' in d) {
      throw new Error('BUG: Destructor has willDestroy, but the willDestroy capability was not enabled for this component. Pre-destruction hooks must be explicitly opted into');
    }
    if (d) vm.associateDestroyable(d);
  });
  APPEND_OPCODES.add(97
  /* BeginComponentTransaction */, (vm, {
    op1: _state
  }) => {
    var _a;
    var name;
    if (true /* DEBUG */) {
      var {
        definition,
        manager
      } = vm.fetchValue(_state);
      name = (_a = definition.resolvedName) !== null && _a !== void 0 ? _a : manager.getDebugName(definition.state);
    }
    vm.beginCacheGroup(name);
    vm.elements().pushSimpleBlock();
  });
  APPEND_OPCODES.add(89
  /* PutComponentOperations */, vm => {
    vm.loadValue(_vm2.$t0, new ComponentElementOperations());
  });
  APPEND_OPCODES.add(53
  /* ComponentAttr */, (vm, {
    op1: _name,
    op2: _trusting,
    op3: _namespace
  }) => {
    var name = vm[CONSTANTS].getValue(_name);
    var trusting = vm[CONSTANTS].getValue(_trusting);
    var reference = vm.stack.pop();
    var namespace = _namespace ? vm[CONSTANTS].getValue(_namespace) : null;
    vm.fetchValue(_vm2.$t0).setAttribute(name, reference, trusting, namespace);
  });
  APPEND_OPCODES.add(105
  /* StaticComponentAttr */, (vm, {
    op1: _name,
    op2: _value,
    op3: _namespace
  }) => {
    var name = vm[CONSTANTS].getValue(_name);
    var value = vm[CONSTANTS].getValue(_value);
    var namespace = _namespace ? vm[CONSTANTS].getValue(_namespace) : null;
    vm.fetchValue(_vm2.$t0).setStaticAttribute(name, value, namespace);
  });
  class ComponentElementOperations {
    constructor() {
      this.attributes = (0, _util.dict)();
      this.classes = [];
      this.modifiers = [];
    }
    setAttribute(name, value, trusting, namespace) {
      var deferred = {
        value,
        namespace,
        trusting
      };
      if (name === 'class') {
        this.classes.push(value);
      }
      this.attributes[name] = deferred;
    }
    setStaticAttribute(name, value, namespace) {
      var deferred = {
        value,
        namespace
      };
      if (name === 'class') {
        this.classes.push(value);
      }
      this.attributes[name] = deferred;
    }
    addModifier(modifier) {
      this.modifiers.push(modifier);
    }
    flush(vm) {
      var type;
      var attributes = this.attributes;
      for (var name in this.attributes) {
        if (name === 'type') {
          type = attributes[name];
          continue;
        }
        var attr = this.attributes[name];
        if (name === 'class') {
          setDeferredAttr(vm, 'class', mergeClasses(this.classes), attr.namespace, attr.trusting);
        } else {
          setDeferredAttr(vm, name, attr.value, attr.namespace, attr.trusting);
        }
      }
      if (type !== undefined) {
        setDeferredAttr(vm, 'type', type.value, type.namespace, type.trusting);
      }
      return this.modifiers;
    }
  }
  function mergeClasses(classes) {
    if (classes.length === 0) {
      return '';
    }
    if (classes.length === 1) {
      return classes[0];
    }
    if (allStringClasses(classes)) {
      return classes.join(' ');
    }
    return createClassListRef(classes);
  }
  function allStringClasses(classes) {
    for (var i = 0; i < classes.length; i++) {
      if (typeof classes[i] !== 'string') {
        return false;
      }
    }
    return true;
  }
  function setDeferredAttr(vm, name, value, namespace, trusting = false) {
    if (typeof value === 'string') {
      vm.elements().setStaticAttribute(name, value, namespace);
    } else {
      var attribute = vm.elements().setDynamicAttribute(name, (0, _reference.valueForRef)(value), trusting, namespace);
      if (!(0, _reference.isConstRef)(value)) {
        vm.updateWith(new UpdateDynamicAttributeOpcode(value, attribute, vm.env));
      }
    }
  }
  APPEND_OPCODES.add(99
  /* DidCreateElement */, (vm, {
    op1: _state
  }) => {
    var {
      definition,
      state
    } = vm.fetchValue(_state);
    var {
      manager
    } = definition;
    var operations = vm.fetchValue(_vm2.$t0);
    manager.didCreateElement(state, vm.elements().constructing, operations);
  });
  APPEND_OPCODES.add(90
  /* GetComponentSelf */, (vm, {
    op1: _state,
    op2: _names
  }) => {
    var _a;
    var instance = vm.fetchValue(_state);
    var {
      definition,
      state
    } = instance;
    var {
      manager
    } = definition;
    var selfRef = manager.getSelf(state);
    if (vm.env.debugRenderTree !== undefined) {
      var _instance = vm.fetchValue(_state);
      var {
        definition: _definition,
        manager: _manager2
      } = _instance;
      var args;
      if (vm.stack.peek() === vm[ARGS]) {
        args = vm[ARGS].capture();
      } else {
        var names = vm[CONSTANTS].getArray(_names);
        vm[ARGS].setup(vm.stack, names, [], 0, true);
        args = vm[ARGS].capture();
      }
      var moduleName;
      var compilable = _definition.compilable;
      if (compilable === null) {
        compilable = _manager2.getDynamicLayout(state, vm.runtime.resolver);
        if (compilable !== null) {
          moduleName = compilable.moduleName;
        } else {
          moduleName = '__default__.hbs';
        }
      } else {
        moduleName = compilable.moduleName;
      } // For tearing down the debugRenderTree

      vm.associateDestroyable(_instance);
      if (hasCustomDebugRenderTreeLifecycle(_manager2)) {
        var nodes = _manager2.getDebugCustomRenderTree(_instance.definition.state, _instance.state, args, moduleName);
        nodes.forEach(node => {
          var {
            bucket
          } = node;
          vm.env.debugRenderTree.create(bucket, node);
          (0, _destroyable2.registerDestructor)(_instance, () => {
            var _a;
            (_a = vm.env.debugRenderTree) === null || _a === void 0 ? void 0 : _a.willDestroy(bucket);
          });
          vm.updateWith(new DebugRenderTreeUpdateOpcode(bucket));
        });
      } else {
        var name = (_a = _definition.resolvedName) !== null && _a !== void 0 ? _a : _manager2.getDebugName(_definition.state);
        vm.env.debugRenderTree.create(_instance, {
          type: 'component',
          name,
          args,
          template: moduleName,
          instance: (0, _reference.valueForRef)(selfRef)
        });
        vm.associateDestroyable(_instance);
        (0, _destroyable2.registerDestructor)(_instance, () => {
          var _a;
          (_a = vm.env.debugRenderTree) === null || _a === void 0 ? void 0 : _a.willDestroy(_instance);
        });
        vm.updateWith(new DebugRenderTreeUpdateOpcode(_instance));
      }
    }
    vm.stack.push(selfRef);
  });
  APPEND_OPCODES.add(91
  /* GetComponentTagName */, (vm, {
    op1: _state
  }) => {
    var {
      definition,
      state
    } = vm.fetchValue(_state);
    var {
      manager
    } = definition;
    var tagName = manager.getTagName(state); // User provided value from JS, so we don't bother to encode

    vm.stack.push(tagName);
  }); // Dynamic Invocation Only

  APPEND_OPCODES.add(92
  /* GetComponentLayout */, (vm, {
    op1: _state
  }) => {
    var instance = vm.fetchValue(_state);
    var {
      manager,
      definition
    } = instance;
    var {
      stack
    } = vm;
    var {
      compilable
    } = definition;
    if (compilable === null) {
      var {
        capabilities
      } = instance;
      compilable = manager.getDynamicLayout(instance.state, vm.runtime.resolver);
      if (compilable === null) {
        if ((0, _manager5.managerHasCapability)(manager, capabilities, 1024
        /* Wrapped */)) {
          compilable = (0, _util.unwrapTemplate)(vm[CONSTANTS].defaultTemplate).asWrappedLayout();
        } else {
          compilable = (0, _util.unwrapTemplate)(vm[CONSTANTS].defaultTemplate).asLayout();
        }
      }
    }
    var handle = compilable.compile(vm.context);
    stack.push(compilable.symbolTable);
    stack.push(handle);
  });
  APPEND_OPCODES.add(75
  /* Main */, (vm, {
    op1: register
  }) => {
    var definition = vm.stack.pop();
    var invocation = vm.stack.pop();
    var {
      manager,
      capabilities
    } = definition;
    var state = {
      definition,
      manager,
      capabilities,
      state: null,
      handle: invocation.handle,
      table: invocation.symbolTable,
      lookup: null
    };
    vm.loadValue(register, state);
  });
  APPEND_OPCODES.add(95
  /* PopulateLayout */, (vm, {
    op1: _state
  }) => {
    var {
      stack
    } = vm; // In DEBUG handles could be ErrHandle objects

    var handle = stack.pop();
    var table = stack.pop();
    var state = vm.fetchValue(_state);
    state.handle = handle;
    state.table = table;
  });
  APPEND_OPCODES.add(38
  /* VirtualRootScope */, (vm, {
    op1: _state
  }) => {
    var {
      table,
      manager,
      capabilities,
      state
    } = vm.fetchValue(_state);
    var owner;
    if ((0, _manager5.managerHasCapability)(manager, capabilities, 4096
    /* HasSubOwner */)) {
      owner = manager.getOwner(state);
      vm.loadValue(_vm2.$t1, null); // Clear the temp register
    } else {
      // Check the temp register to see if an owner was resolved from currying
      owner = vm.fetchValue(_vm2.$t1);
      if (owner === null) {
        // If an owner wasn't found, default to using the current owner. This
        // will happen for normal dynamic component invocation,
        // e.g. <SomeClassicEmberComponent/>
        owner = vm.getOwner();
      } else {
        // Else the owner was found, so clear the temp register. This will happen
        // if we are loading a curried component, e.g. <@someCurriedComponent/>
        vm.loadValue(_vm2.$t1, null);
      }
    }
    vm.pushRootScope(table.symbols.length + 1, owner);
  });
  APPEND_OPCODES.add(94
  /* SetupForEval */, (vm, {
    op1: _state
  }) => {
    var state = vm.fetchValue(_state);
    if (state.table.hasEval) {
      var lookup = state.lookup = (0, _util.dict)();
      vm.scope().bindEvalScope(lookup);
    }
  });
  APPEND_OPCODES.add(17
  /* SetNamedVariables */, (vm, {
    op1: _state
  }) => {
    var state = vm.fetchValue(_state);
    var scope = vm.scope();
    var args = vm.stack.peek();
    var callerNames = args.named.atNames;
    for (var i = callerNames.length - 1; i >= 0; i--) {
      var atName = callerNames[i];
      var symbol$$1 = state.table.symbols.indexOf(callerNames[i]);
      var value = args.named.get(atName, true);
      if (symbol$$1 !== -1) scope.bindSymbol(symbol$$1 + 1, value);
      if (state.lookup) state.lookup[atName] = value;
    }
  });
  function bindBlock(symbolName, blockName, state, blocks, vm) {
    var symbol$$1 = state.table.symbols.indexOf(symbolName);
    var block = blocks.get(blockName);
    if (symbol$$1 !== -1) vm.scope().bindBlock(symbol$$1 + 1, block);
    if (state.lookup) state.lookup[symbolName] = block;
  }
  APPEND_OPCODES.add(18
  /* SetBlocks */, (vm, {
    op1: _state
  }) => {
    var state = vm.fetchValue(_state);
    var {
      blocks
    } = vm.stack.peek();
    for (var i = 0; i < blocks.names.length; i++) {
      bindBlock(blocks.symbolNames[i], blocks.names[i], state, blocks, vm);
    }
  }); // Dynamic Invocation Only

  APPEND_OPCODES.add(96
  /* InvokeComponentLayout */, (vm, {
    op1: _state
  }) => {
    var state = vm.fetchValue(_state);
    vm.call(state.handle);
  });
  APPEND_OPCODES.add(100
  /* DidRenderLayout */, (vm, {
    op1: _state
  }) => {
    var instance = vm.fetchValue(_state);
    var {
      manager,
      state,
      capabilities
    } = instance;
    var bounds = vm.elements().popBlock();
    if (vm.env.debugRenderTree !== undefined) {
      if (hasCustomDebugRenderTreeLifecycle(manager)) {
        var nodes = manager.getDebugCustomRenderTree(instance.definition.state, state, EMPTY_ARGS);
        nodes.reverse().forEach(node => {
          var {
            bucket
          } = node;
          vm.env.debugRenderTree.didRender(bucket, bounds);
          vm.updateWith(new DebugRenderTreeDidRenderOpcode(bucket, bounds));
        });
      } else {
        vm.env.debugRenderTree.didRender(instance, bounds);
        vm.updateWith(new DebugRenderTreeDidRenderOpcode(instance, bounds));
      }
    }
    if ((0, _manager5.managerHasCapability)(manager, capabilities, 512
    /* CreateInstance */)) {
      var mgr = manager;
      mgr.didRenderLayout(state, bounds);
      vm.env.didCreate(instance);
      vm.updateWith(new DidUpdateLayoutOpcode(instance, bounds));
    }
  });
  APPEND_OPCODES.add(98
  /* CommitComponentTransaction */, vm => {
    vm.commitCacheGroup();
  });
  class UpdateComponentOpcode {
    constructor(component, manager, dynamicScope) {
      this.component = component;
      this.manager = manager;
      this.dynamicScope = dynamicScope;
    }
    evaluate(_vm) {
      var {
        component,
        manager,
        dynamicScope
      } = this;
      manager.update(component, dynamicScope);
    }
  }
  class DidUpdateLayoutOpcode {
    constructor(component, bounds) {
      this.component = component;
      this.bounds = bounds;
    }
    evaluate(vm) {
      var {
        component,
        bounds
      } = this;
      var {
        manager,
        state
      } = component;
      manager.didUpdateLayout(state, bounds);
      vm.env.didUpdate(component);
    }
  }
  class DebugRenderTreeUpdateOpcode {
    constructor(bucket) {
      this.bucket = bucket;
    }
    evaluate(vm) {
      var _a;
      (_a = vm.env.debugRenderTree) === null || _a === void 0 ? void 0 : _a.update(this.bucket);
    }
  }
  class DebugRenderTreeDidRenderOpcode {
    constructor(bucket, bounds) {
      this.bucket = bucket;
      this.bounds = bounds;
    }
    evaluate(vm) {
      var _a;
      (_a = vm.env.debugRenderTree) === null || _a === void 0 ? void 0 : _a.didRender(this.bucket, this.bounds);
    }
  }
  class DynamicTextContent {
    constructor(node, reference, lastValue) {
      this.node = node;
      this.reference = reference;
      this.lastValue = lastValue;
    }
    evaluate() {
      var value = (0, _reference.valueForRef)(this.reference);
      var {
        lastValue
      } = this;
      if (value === lastValue) return;
      var normalized;
      if (isEmpty(value)) {
        normalized = '';
      } else if (isString(value)) {
        normalized = value;
      } else {
        normalized = String(value);
      }
      if (normalized !== lastValue) {
        var textNode = this.node;
        textNode.nodeValue = this.lastValue = normalized;
      }
    }
  }
  function toContentType(value) {
    if (shouldCoerce(value)) {
      return 2
      /* String */;
    } else if (isCurriedType(value, 0
    /* Component */) || (0, _manager5.hasInternalComponentManager)(value)) {
      return 0
      /* Component */;
    } else if (isCurriedType(value, 1
    /* Helper */) || (0, _manager5.hasInternalHelperManager)(value)) {
      return 1
      /* Helper */;
    } else if (isSafeString(value)) {
      return 4
      /* SafeString */;
    } else if (isFragment(value)) {
      return 5
      /* Fragment */;
    } else if (isNode(value)) {
      return 6
      /* Node */;
    } else {
      return 2
      /* String */;
    }
  }
  function toDynamicContentType(value) {
    if (!(0, _util.isObject)(value)) {
      return 2
      /* String */;
    }
    if (isCurriedType(value, 0
    /* Component */) || (0, _manager5.hasInternalComponentManager)(value)) {
      return 0
      /* Component */;
    } else {
      if (true /* DEBUG */ && !isCurriedType(value, 1
      /* Helper */) && !(0, _manager5.hasInternalHelperManager)(value)) {
        throw new Error(`Attempted use a dynamic value as a component or helper, but that value did not have an associated component or helper manager. The value was: ${value}`);
      }
      return 1
      /* Helper */;
    }
  }
  APPEND_OPCODES.add(76
  /* ContentType */, vm => {
    var reference = vm.stack.peek();
    vm.stack.push(toContentType((0, _reference.valueForRef)(reference)));
    if (!(0, _reference.isConstRef)(reference)) {
      vm.updateWith(new AssertFilter(reference, toContentType));
    }
  });
  APPEND_OPCODES.add(106
  /* DynamicContentType */, vm => {
    var reference = vm.stack.peek();
    vm.stack.push(toDynamicContentType((0, _reference.valueForRef)(reference)));
    if (!(0, _reference.isConstRef)(reference)) {
      vm.updateWith(new AssertFilter(reference, toDynamicContentType));
    }
  });
  APPEND_OPCODES.add(43
  /* AppendHTML */, vm => {
    var reference = vm.stack.pop();
    var rawValue = (0, _reference.valueForRef)(reference);
    var value = isEmpty(rawValue) ? '' : String(rawValue);
    vm.elements().appendDynamicHTML(value);
  });
  APPEND_OPCODES.add(44
  /* AppendSafeHTML */, vm => {
    var reference = vm.stack.pop();
    var rawValue = (0, _reference.valueForRef)(reference).toHTML();
    var value = isEmpty(rawValue) ? '' : rawValue;
    vm.elements().appendDynamicHTML(value);
  });
  APPEND_OPCODES.add(47
  /* AppendText */, vm => {
    var reference = vm.stack.pop();
    var rawValue = (0, _reference.valueForRef)(reference);
    var value = isEmpty(rawValue) ? '' : String(rawValue);
    var node = vm.elements().appendDynamicText(value);
    if (!(0, _reference.isConstRef)(reference)) {
      vm.updateWith(new DynamicTextContent(node, reference, value));
    }
  });
  APPEND_OPCODES.add(45
  /* AppendDocumentFragment */, vm => {
    var reference = vm.stack.pop();
    var value = (0, _reference.valueForRef)(reference);
    vm.elements().appendDynamicFragment(value);
  });
  APPEND_OPCODES.add(46
  /* AppendNode */, vm => {
    var reference = vm.stack.pop();
    var value = (0, _reference.valueForRef)(reference);
    vm.elements().appendDynamicNode(value);
  });
  function debugCallback(context, get) {
    // eslint-disable-next-line no-console
    console.info('Use `context`, and `get(<path>)` to debug this template.'); // for example...
    // eslint-disable-next-line no-unused-expressions

    context === get('this'); // eslint-disable-next-line no-debugger

    debugger;
  }
  var callback = debugCallback; // For testing purposes

  function setDebuggerCallback(cb) {
    callback = cb;
  }
  function resetDebuggerCallback() {
    callback = debugCallback;
  }
  class ScopeInspector {
    constructor(scope, symbols, evalInfo) {
      this.scope = scope;
      this.locals = (0, _util.dict)();
      for (var i = 0; i < evalInfo.length; i++) {
        var slot = evalInfo[i];
        var name = symbols[slot - 1];
        var ref = scope.getSymbol(slot);
        this.locals[name] = ref;
      }
    }
    get(path) {
      var {
        scope,
        locals
      } = this;
      var parts = path.split('.');
      var [head, ...tail] = path.split('.');
      var evalScope = scope.getEvalScope();
      var ref;
      if (head === 'this') {
        ref = scope.getSelf();
      } else if (locals[head]) {
        ref = locals[head];
      } else if (head.indexOf('@') === 0 && evalScope[head]) {
        ref = evalScope[head];
      } else {
        ref = this.scope.getSelf();
        tail = parts;
      }
      return tail.reduce((r, part) => (0, _reference.childRefFor)(r, part), ref);
    }
  }
  APPEND_OPCODES.add(103
  /* Debugger */, (vm, {
    op1: _symbols,
    op2: _evalInfo
  }) => {
    var symbols = vm[CONSTANTS].getArray(_symbols);
    var evalInfo = vm[CONSTANTS].getArray((0, _util.decodeHandle)(_evalInfo));
    var inspector = new ScopeInspector(vm.scope(), symbols, evalInfo);
    callback((0, _reference.valueForRef)(vm.getSelf()), path => (0, _reference.valueForRef)(inspector.get(path)));
  });
  APPEND_OPCODES.add(72
  /* EnterList */, (vm, {
    op1: relativeStart,
    op2: elseTarget
  }) => {
    var stack = vm.stack;
    var listRef = stack.pop();
    var keyRef = stack.pop();
    var keyValue = (0, _reference.valueForRef)(keyRef);
    var key = keyValue === null ? '@identity' : String(keyValue);
    var iteratorRef = (0, _reference.createIteratorRef)(listRef, key);
    var iterator = (0, _reference.valueForRef)(iteratorRef);
    vm.updateWith(new AssertFilter(iteratorRef, iterator => iterator.isEmpty()));
    if (iterator.isEmpty() === true) {
      // TODO: Fix this offset, should be accurate
      vm.goto(elseTarget + 1);
    } else {
      vm.enterList(iteratorRef, relativeStart);
      vm.stack.push(iterator);
    }
  });
  APPEND_OPCODES.add(73
  /* ExitList */, vm => {
    vm.exitList();
  });
  APPEND_OPCODES.add(74
  /* Iterate */, (vm, {
    op1: breaks
  }) => {
    var stack = vm.stack;
    var iterator = stack.peek();
    var item = iterator.next();
    if (item !== null) {
      vm.registerItem(vm.enterItem(item));
    } else {
      vm.goto(breaks);
    }
  });
  var CAPABILITIES = {
    dynamicLayout: false,
    dynamicTag: false,
    prepareArgs: false,
    createArgs: false,
    attributeHook: false,
    elementHook: false,
    createCaller: false,
    dynamicScope: false,
    updateHook: false,
    createInstance: false,
    wrapped: false,
    willDestroy: false,
    hasSubOwner: false
  };
  class TemplateOnlyComponentManager {
    getCapabilities() {
      return CAPABILITIES;
    }
    getDebugName({
      name
    }) {
      return name;
    }
    getSelf() {
      return _reference.NULL_REFERENCE;
    }
    getDestroyable() {
      return null;
    }
  }
  _exports.TemplateOnlyComponentManager = TemplateOnlyComponentManager;
  var TEMPLATE_ONLY_COMPONENT_MANAGER = _exports.TEMPLATE_ONLY_COMPONENT_MANAGER = new TemplateOnlyComponentManager(); // This is only exported for types, don't use this class directly

  class TemplateOnlyComponentDefinition {
    constructor(moduleName = '@glimmer/component/template-only', name = '(unknown template-only component)') {
      this.moduleName = moduleName;
      this.name = name;
    }
    toString() {
      return this.moduleName;
    }
  }
  _exports.TemplateOnlyComponent = TemplateOnlyComponentDefinition;
  (0, _manager5.setInternalComponentManager)(TEMPLATE_ONLY_COMPONENT_MANAGER, TemplateOnlyComponentDefinition.prototype);
  /**
    This utility function is used to declare a given component has no backing class. When the rendering engine detects this it
    is able to perform a number of optimizations. Templates that are associated with `templateOnly()` will be rendered _as is_
    without adding a wrapping `<div>` (or any of the other element customization behaviors of [@ember/component](/ember/release/classes/Component)).
    Specifically, this means that the template will be rendered as "outer HTML".
  
    In general, this method will be used by build time tooling and would not be directly written in an application. However,
    at times it may be useful to use directly to leverage the "outer HTML" semantics mentioned above. For example, if an addon would like
    to use these semantics for its templates but cannot be certain it will only be consumed by applications that have enabled the
    `template-only-glimmer-components` optional feature.
  
    @example
  
    ```js
    import { templateOnlyComponent } from '@glimmer/runtime';
  
    export default templateOnlyComponent();
    ```
  
    @public
    @method templateOnly
    @param {String} moduleName the module name that the template only component represents, this will be used for debugging purposes
    @category EMBER_GLIMMER_SET_COMPONENT_TEMPLATE
  */

  function templateOnlyComponent(moduleName, name) {
    return new TemplateOnlyComponentDefinition(moduleName, name);
  }

  // http://www.w3.org/TR/html/syntax.html#html-integration-point
  var SVG_INTEGRATION_POINTS = {
    foreignObject: 1,
    desc: 1,
    title: 1
  }; // http://www.w3.org/TR/html/syntax.html#adjust-svg-attributes
  // TODO: Adjust SVG attributes
  // http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign
  // TODO: Adjust SVG elements
  // http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign

  var BLACKLIST_TABLE = Object.create(null);
  class DOMOperations {
    constructor(document) {
      this.document = document;
      this.setupUselessElement();
    } // split into separate method so that NodeDOMTreeConstruction
    // can override it.

    setupUselessElement() {
      this.uselessElement = this.document.createElement('div');
    }
    createElement(tag, context) {
      var isElementInSVGNamespace, isHTMLIntegrationPoint;
      if (context) {
        isElementInSVGNamespace = context.namespaceURI === "http://www.w3.org/2000/svg"
        /* SVG */ || tag === 'svg';
        isHTMLIntegrationPoint = !!SVG_INTEGRATION_POINTS[context.tagName];
      } else {
        isElementInSVGNamespace = tag === 'svg';
        isHTMLIntegrationPoint = false;
      }
      if (isElementInSVGNamespace && !isHTMLIntegrationPoint) {
        // FIXME: This does not properly handle <font> with color, face, or
        // size attributes, which is also disallowed by the spec. We should fix
        // this.
        if (BLACKLIST_TABLE[tag]) {
          throw new Error(`Cannot create a ${tag} inside an SVG context`);
        }
        return this.document.createElementNS("http://www.w3.org/2000/svg"
        /* SVG */, tag);
      } else {
        return this.document.createElement(tag);
      }
    }
    insertBefore(parent, node, reference) {
      parent.insertBefore(node, reference);
    }
    insertHTMLBefore(parent, nextSibling, html) {
      if (html === '') {
        var comment = this.createComment('');
        parent.insertBefore(comment, nextSibling);
        return new ConcreteBounds(parent, comment, comment);
      }
      var prev = nextSibling ? nextSibling.previousSibling : parent.lastChild;
      var last;
      if (nextSibling === null) {
        parent.insertAdjacentHTML("beforeend"
        /* beforeend */, html);
        last = parent.lastChild;
      } else if (nextSibling instanceof HTMLElement) {
        nextSibling.insertAdjacentHTML('beforebegin', html);
        last = nextSibling.previousSibling;
      } else {
        // Non-element nodes do not support insertAdjacentHTML, so add an
        // element and call it on that element. Then remove the element.
        //
        // This also protects Edge, IE and Firefox w/o the inspector open
        // from merging adjacent text nodes. See ./compat/text-node-merging-fix.ts
        var {
          uselessElement
        } = this;
        parent.insertBefore(uselessElement, nextSibling);
        uselessElement.insertAdjacentHTML("beforebegin"
        /* beforebegin */, html);
        last = uselessElement.previousSibling;
        parent.removeChild(uselessElement);
      }
      var first = prev ? prev.nextSibling : parent.firstChild;
      return new ConcreteBounds(parent, first, last);
    }
    createTextNode(text) {
      return this.document.createTextNode(text);
    }
    createComment(data) {
      return this.document.createComment(data);
    }
  }
  function moveNodesBefore(source, target, nextSibling) {
    var first = source.firstChild;
    var last = first;
    var current = first;
    while (current) {
      var next = current.nextSibling;
      target.insertBefore(current, nextSibling);
      last = current;
      current = next;
    }
    return new ConcreteBounds(target, first, last);
  }
  var SVG_NAMESPACE = "http://www.w3.org/2000/svg"
  /* SVG */; // Patch:    insertAdjacentHTML on SVG Fix
  // Browsers: Safari, IE, Edge, Firefox ~33-34
  // Reason:   insertAdjacentHTML does not exist on SVG elements in Safari. It is
  //           present but throws an exception on IE and Edge. Old versions of
  //           Firefox create nodes in the incorrect namespace.
  // Fix:      Since IE and Edge silently fail to create SVG nodes using
  //           innerHTML, and because Firefox may create nodes in the incorrect
  //           namespace using innerHTML on SVG elements, an HTML-string wrapping
  //           approach is used. A pre/post SVG tag is added to the string, then
  //           that whole string is added to a div. The created nodes are plucked
  //           out and applied to the target location on DOM.

  function applySVGInnerHTMLFix(document, DOMClass, svgNamespace) {
    if (!document) return DOMClass;
    if (!shouldApplyFix(document, svgNamespace)) {
      return DOMClass;
    }
    var div = document.createElement('div');
    return class DOMChangesWithSVGInnerHTMLFix extends DOMClass {
      insertHTMLBefore(parent, nextSibling, html) {
        if (html === '') {
          return super.insertHTMLBefore(parent, nextSibling, html);
        }
        if (parent.namespaceURI !== svgNamespace) {
          return super.insertHTMLBefore(parent, nextSibling, html);
        }
        return fixSVG(parent, div, html, nextSibling);
      }
    };
  }
  function fixSVG(parent, div, html, reference) {
    var source; // This is important, because descendants of the <foreignObject> integration
    // point are parsed in the HTML namespace

    if (parent.tagName.toUpperCase() === 'FOREIGNOBJECT') {
      // IE, Edge: also do not correctly support using `innerHTML` on SVG
      // namespaced elements. So here a wrapper is used.
      var wrappedHtml = '<svg><foreignObject>' + html + '</foreignObject></svg>';
      (0, _util.clearElement)(div);
      div.insertAdjacentHTML("afterbegin"
      /* afterbegin */, wrappedHtml);
      source = div.firstChild.firstChild;
    } else {
      // IE, Edge: also do not correctly support using `innerHTML` on SVG
      // namespaced elements. So here a wrapper is used.
      var _wrappedHtml = '<svg>' + html + '</svg>';
      (0, _util.clearElement)(div);
      div.insertAdjacentHTML("afterbegin"
      /* afterbegin */, _wrappedHtml);
      source = div.firstChild;
    }
    return moveNodesBefore(source, parent, reference);
  }
  function shouldApplyFix(document, svgNamespace) {
    var svg = document.createElementNS(svgNamespace, 'svg');
    try {
      svg.insertAdjacentHTML("beforeend"
      /* beforeend */, '<circle></circle>');
    } catch (e) {// IE, Edge: Will throw, insertAdjacentHTML is unsupported on SVG
      // Safari: Will throw, insertAdjacentHTML is not present on SVG
    } finally {
      // FF: Old versions will create a node in the wrong namespace
      if (svg.childNodes.length === 1 && svg.firstChild.namespaceURI === SVG_NAMESPACE) {
        // The test worked as expected, no fix required
        return false;
      }
      return true;
    }
  }

  // Patch:    Adjacent text node merging fix
  // Browsers: IE, Edge, Firefox w/o inspector open
  // Reason:   These browsers will merge adjacent text nodes. For example given
  //           <div>Hello</div> with div.insertAdjacentHTML(' world') browsers
  //           with proper behavior will populate div.childNodes with two items.
  //           These browsers will populate it with one merged node instead.
  // Fix:      Add these nodes to a wrapper element, then iterate the childNodes
  //           of that wrapper and move the nodes to their target location. Note
  //           that potential SVG bugs will have been handled before this fix.
  //           Note that this fix must only apply to the previous text node, as
  //           the base implementation of `insertHTMLBefore` already handles
  //           following text nodes correctly.
  function applyTextNodeMergingFix(document, DOMClass) {
    if (!document) return DOMClass;
    if (!shouldApplyFix$1(document)) {
      return DOMClass;
    }
    return class DOMChangesWithTextNodeMergingFix extends DOMClass {
      constructor(document) {
        super(document);
        this.uselessComment = document.createComment('');
      }
      insertHTMLBefore(parent, nextSibling, html) {
        if (html === '') {
          return super.insertHTMLBefore(parent, nextSibling, html);
        }
        var didSetUselessComment = false;
        var nextPrevious = nextSibling ? nextSibling.previousSibling : parent.lastChild;
        if (nextPrevious && nextPrevious instanceof Text) {
          didSetUselessComment = true;
          parent.insertBefore(this.uselessComment, nextSibling);
        }
        var bounds = super.insertHTMLBefore(parent, nextSibling, html);
        if (didSetUselessComment) {
          parent.removeChild(this.uselessComment);
        }
        return bounds;
      }
    };
  }
  function shouldApplyFix$1(document) {
    var mergingTextDiv = document.createElement('div');
    mergingTextDiv.appendChild(document.createTextNode('first'));
    mergingTextDiv.insertAdjacentHTML("beforeend"
    /* beforeend */, 'second');
    if (mergingTextDiv.childNodes.length === 2) {
      // It worked as expected, no fix required
      return false;
    }
    return true;
  }
  ['b', 'big', 'blockquote', 'body', 'br', 'center', 'code', 'dd', 'div', 'dl', 'dt', 'em', 'embed', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'hr', 'i', 'img', 'li', 'listing', 'main', 'meta', 'nobr', 'ol', 'p', 'pre', 'ruby', 's', 'small', 'span', 'strong', 'strike', 'sub', 'sup', 'table', 'tt', 'u', 'ul', 'var'].forEach(tag => BLACKLIST_TABLE[tag] = 1);
  var WHITESPACE = /[\t-\r \xA0\u1680\u180E\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]/;
  var doc = typeof document === 'undefined' ? null : document;
  function isWhitespace(string) {
    return WHITESPACE.test(string);
  }
  var DOM;
  (function (DOM) {
    class TreeConstruction extends DOMOperations {
      createElementNS(namespace, tag) {
        return this.document.createElementNS(namespace, tag);
      }
      setAttribute(element, name, value, namespace = null) {
        if (namespace) {
          element.setAttributeNS(namespace, name, value);
        } else {
          element.setAttribute(name, value);
        }
      }
    }
    DOM.TreeConstruction = TreeConstruction;
    var appliedTreeConstruction = TreeConstruction;
    appliedTreeConstruction = applyTextNodeMergingFix(doc, appliedTreeConstruction);
    appliedTreeConstruction = applySVGInnerHTMLFix(doc, appliedTreeConstruction, "http://www.w3.org/2000/svg"
    /* SVG */);
    DOM.DOMTreeConstruction = appliedTreeConstruction;
  })(DOM || (DOM = {}));
  class DOMChangesImpl extends DOMOperations {
    constructor(document) {
      super(document);
      this.document = document;
      this.namespace = null;
    }
    setAttribute(element, name, value) {
      element.setAttribute(name, value);
    }
    removeAttribute(element, name) {
      element.removeAttribute(name);
    }
    insertAfter(element, node, reference) {
      this.insertBefore(element, node, reference.nextSibling);
    }
  }
  _exports.IDOMChanges = DOMChangesImpl;
  var helper = DOMChangesImpl;
  helper = applyTextNodeMergingFix(doc, helper);
  helper = applySVGInnerHTMLFix(doc, helper, "http://www.w3.org/2000/svg"
  /* SVG */);
  var helper$1 = _exports.DOMChanges = helper;
  var DOMTreeConstruction = _exports.DOMTreeConstruction = DOM.DOMTreeConstruction;
  var GUID = 0;
  class Ref {
    constructor(value) {
      this.id = GUID++;
      this.value = value;
    }
    get() {
      return this.value;
    }
    release() {
      if (true /* DEBUG */ && this.value === null) {
        throw new Error('BUG: double release?');
      }
      this.value = null;
    }
    toString() {
      var label = `Ref ${this.id}`;
      if (this.value === null) {
        return `${label} (released)`;
      } else {
        try {
          return `${label}: ${this.value}`;
        } catch (_a) {
          return label;
        }
      }
    }
  }
  class DebugRenderTreeImpl {
    constructor() {
      this.stack = new _util.Stack();
      this.refs = new WeakMap();
      this.roots = new Set();
      this.nodes = new WeakMap();
    }
    begin() {
      this.reset();
    }
    create(state, node) {
      var internalNode = (0, _util.assign)({}, node, {
        bounds: null,
        refs: new Set()
      });
      this.nodes.set(state, internalNode);
      this.appendChild(internalNode, state);
      this.enter(state);
    }
    update(state) {
      this.enter(state);
    }
    didRender(state, bounds) {
      if (true /* DEBUG */ && this.stack.current !== state) {
        throw new Error(`BUG: expecting ${this.stack.current}, got ${state}`);
      }
      this.nodeFor(state).bounds = bounds;
      this.exit();
    }
    willDestroy(state) {
      this.refs.get(state).release();
    }
    commit() {
      this.reset();
    }
    capture() {
      return this.captureRefs(this.roots);
    }
    reset() {
      if (this.stack.size !== 0) {
        // We probably encountered an error during the rendering loop. This will
        // likely trigger undefined behavior and memory leaks as the error left
        // things in an inconsistent state. It is recommended that the user
        // refresh the page.
        // TODO: We could warn here? But this happens all the time in our tests?
        // Clean up the root reference to prevent errors from happening if we
        // attempt to capture the render tree (Ember Inspector may do this)
        var root = this.stack.toArray()[0];
        var ref = this.refs.get(root);
        if (ref !== undefined) {
          this.roots.delete(ref);
        }
        while (!this.stack.isEmpty()) {
          this.stack.pop();
        }
      }
    }
    enter(state) {
      this.stack.push(state);
    }
    exit() {
      if (true /* DEBUG */ && this.stack.size === 0) {
        throw new Error('BUG: unbalanced pop');
      }
      this.stack.pop();
    }
    nodeFor(state) {
      return this.nodes.get(state);
    }
    appendChild(node, state) {
      if (true /* DEBUG */ && this.refs.has(state)) {
        throw new Error('BUG: child already appended');
      }
      var parent = this.stack.current;
      var ref = new Ref(state);
      this.refs.set(state, ref);
      if (parent) {
        var parentNode = this.nodeFor(parent);
        parentNode.refs.add(ref);
        node.parent = parentNode;
      } else {
        this.roots.add(ref);
      }
    }
    captureRefs(refs) {
      var captured = [];
      refs.forEach(ref => {
        var state = ref.get();
        if (state) {
          captured.push(this.captureNode(`render-node:${ref.id}`, state));
        } else {
          refs.delete(ref);
        }
      });
      return captured;
    }
    captureNode(id, state) {
      var node = this.nodeFor(state);
      var {
        type,
        name,
        args,
        instance,
        refs
      } = node;
      var template = this.captureTemplate(node);
      var bounds = this.captureBounds(node);
      var children = this.captureRefs(refs);
      return {
        id,
        type,
        name,
        args: reifyArgs(args),
        instance,
        template,
        bounds,
        children
      };
    }
    captureTemplate({
      template
    }) {
      return template || null;
    }
    captureBounds(node) {
      var bounds = node.bounds;
      var parentElement = bounds.parentElement();
      var firstNode = bounds.firstNode();
      var lastNode = bounds.lastNode();
      return {
        parentElement,
        firstNode,
        lastNode
      };
    }
  }
  var _a$1;
  var TRANSACTION = (0, _util.symbol)('TRANSACTION');
  class TransactionImpl {
    constructor() {
      this.scheduledInstallModifiers = [];
      this.scheduledUpdateModifiers = [];
      this.createdComponents = [];
      this.updatedComponents = [];
    }
    didCreate(component) {
      this.createdComponents.push(component);
    }
    didUpdate(component) {
      this.updatedComponents.push(component);
    }
    scheduleInstallModifier(modifier) {
      this.scheduledInstallModifiers.push(modifier);
    }
    scheduleUpdateModifier(modifier) {
      this.scheduledUpdateModifiers.push(modifier);
    }
    commit() {
      var {
        createdComponents,
        updatedComponents
      } = this;
      for (var i = 0; i < createdComponents.length; i++) {
        var {
          manager: _manager3,
          state: _state2
        } = createdComponents[i];
        _manager3.didCreate(_state2);
      }
      for (var _i3 = 0; _i3 < updatedComponents.length; _i3++) {
        var {
          manager: _manager4,
          state: _state3
        } = updatedComponents[_i3];
        _manager4.didUpdate(_state3);
      }
      var {
        scheduledInstallModifiers,
        scheduledUpdateModifiers
      } = this; // Prevent a transpilation issue we guard against in Ember, the
      // throw-if-closure-required issue

      var manager, state;
      for (var _i4 = 0; _i4 < scheduledInstallModifiers.length; _i4++) {
        var modifier = scheduledInstallModifiers[_i4];
        manager = modifier.manager;
        state = modifier.state;
        var modifierTag = manager.getTag(state);
        if (modifierTag !== null) {
          var tag = (0, _validator.track)(
          // eslint-disable-next-line no-loop-func
          () => manager.install(state), true /* DEBUG */ && `- While rendering:\n  (instance of a \`${modifier.definition.resolvedName || manager.getDebugName(modifier.definition.state)}\` modifier)`);
          (0, _validator.updateTag)(modifierTag, tag);
        } else {
          manager.install(state);
        }
      }
      for (var _i5 = 0; _i5 < scheduledUpdateModifiers.length; _i5++) {
        var _modifier = scheduledUpdateModifiers[_i5];
        manager = _modifier.manager;
        state = _modifier.state;
        var _modifierTag = manager.getTag(state);
        if (_modifierTag !== null) {
          var _tag = (0, _validator.track)(
          // eslint-disable-next-line no-loop-func
          () => manager.update(state), true /* DEBUG */ && `- While rendering:\n  (instance of a \`${_modifier.definition.resolvedName || manager.getDebugName(_modifier.definition.state)}\` modifier)`);
          (0, _validator.updateTag)(_modifierTag, _tag);
        } else {
          manager.update(state);
        }
      }
    }
  }
  class EnvironmentImpl {
    constructor(options, delegate) {
      this.delegate = delegate;
      this[_a$1] = null; // Delegate methods and values

      this.isInteractive = this.delegate.isInteractive;
      this.debugRenderTree = this.delegate.enableDebugTooling ? new DebugRenderTreeImpl() : undefined;
      if (options.appendOperations) {
        this.appendOperations = options.appendOperations;
        this.updateOperations = options.updateOperations;
      } else if (options.document) {
        this.appendOperations = new DOMTreeConstruction(options.document);
        this.updateOperations = new DOMChangesImpl(options.document);
      } else if (true /* DEBUG */) {
        throw new Error('you must pass document or appendOperations to a new runtime');
      }
    }
    getAppendOperations() {
      return this.appendOperations;
    }
    getDOM() {
      return this.updateOperations;
    }
    begin() {
      var _b;
      (_b = this.debugRenderTree) === null || _b === void 0 ? void 0 : _b.begin();
      this[TRANSACTION] = new TransactionImpl();
    }
    get transaction() {
      return this[TRANSACTION];
    }
    didCreate(component) {
      this.transaction.didCreate(component);
    }
    didUpdate(component) {
      this.transaction.didUpdate(component);
    }
    scheduleInstallModifier(modifier) {
      if (this.isInteractive) {
        this.transaction.scheduleInstallModifier(modifier);
      }
    }
    scheduleUpdateModifier(modifier) {
      if (this.isInteractive) {
        this.transaction.scheduleUpdateModifier(modifier);
      }
    }
    commit() {
      var _b;
      var transaction = this.transaction;
      this[TRANSACTION] = null;
      transaction.commit();
      (_b = this.debugRenderTree) === null || _b === void 0 ? void 0 : _b.commit();
      this.delegate.onTransactionCommit();
    }
  }
  _exports.EnvironmentImpl = EnvironmentImpl;
  _a$1 = TRANSACTION;
  function runtimeContext(options, delegate, artifacts, resolver) {
    return {
      env: new EnvironmentImpl(options, delegate),
      program: new _program.RuntimeProgramImpl(artifacts.constants, artifacts.heap),
      resolver: resolver
    };
  }
  function inTransaction(env, cb) {
    if (!env[TRANSACTION]) {
      env.begin();
      try {
        cb();
      } finally {
        env.commit();
      }
    } else {
      cb();
    }
  }
  function initializeRegistersWithSP(sp) {
    return [0, -1, sp, 0];
  }
  class LowLevelVM {
    constructor(stack, heap, program, externs, registers) {
      this.stack = stack;
      this.heap = heap;
      this.program = program;
      this.externs = externs;
      this.registers = registers;
      this.currentOpSize = 0;
    }
    fetchRegister(register) {
      return this.registers[register];
    }
    loadRegister(register, value) {
      this.registers[register] = value;
    }
    setPc(pc) {
      this.registers[_vm2.$pc] = pc;
    } // Start a new frame and save $ra and $fp on the stack

    pushFrame() {
      this.stack.push(this.registers[_vm2.$ra]);
      this.stack.push(this.registers[_vm2.$fp]);
      this.registers[_vm2.$fp] = this.registers[_vm2.$sp] - 1;
    } // Restore $ra, $sp and $fp

    popFrame() {
      this.registers[_vm2.$sp] = this.registers[_vm2.$fp] - 1;
      this.registers[_vm2.$ra] = this.stack.get(0);
      this.registers[_vm2.$fp] = this.stack.get(1);
    }
    pushSmallFrame() {
      this.stack.push(this.registers[_vm2.$ra]);
    }
    popSmallFrame() {
      this.registers[_vm2.$ra] = this.stack.pop();
    } // Jump to an address in `program`

    goto(offset) {
      this.setPc(this.target(offset));
    }
    target(offset) {
      return this.registers[_vm2.$pc] + offset - this.currentOpSize;
    } // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)

    call(handle) {
      this.registers[_vm2.$ra] = this.registers[_vm2.$pc];
      this.setPc(this.heap.getaddr(handle));
    } // Put a specific `program` address in $ra

    returnTo(offset) {
      this.registers[_vm2.$ra] = this.target(offset);
    } // Return to the `program` address stored in $ra

    return() {
      this.setPc(this.registers[_vm2.$ra]);
    }
    nextStatement() {
      var {
        registers,
        program
      } = this;
      var pc = registers[_vm2.$pc];
      if (pc === -1) {
        return null;
      } // We have to save off the current operations size so that
      // when we do a jump we can calculate the correct offset
      // to where we are going. We can't simply ask for the size
      // in a jump because we have have already incremented the
      // program counter to the next instruction prior to executing.

      var opcode = program.opcode(pc);
      var operationSize = this.currentOpSize = opcode.size;
      this.registers[_vm2.$pc] += operationSize;
      return opcode;
    }
    evaluateOuter(opcode, vm) {
      {
        this.evaluateInner(opcode, vm);
      }
    }
    evaluateInner(opcode, vm) {
      if (opcode.isMachine) {
        this.evaluateMachine(opcode);
      } else {
        this.evaluateSyscall(opcode, vm);
      }
    }
    evaluateMachine(opcode) {
      switch (opcode.type) {
        case 0
        /* PushFrame */:
          return this.pushFrame();
        case 1
        /* PopFrame */:
          return this.popFrame();
        case 3
        /* InvokeStatic */:
          return this.call(opcode.op1);
        case 2
        /* InvokeVirtual */:
          return this.call(this.stack.pop());
        case 4
        /* Jump */:
          return this.goto(opcode.op1);
        case 5
        /* Return */:
          return this.return();
        case 6
        /* ReturnTo */:
          return this.returnTo(opcode.op1);
      }
    }
    evaluateSyscall(opcode, vm) {
      APPEND_OPCODES.evaluate(vm, opcode, opcode.type);
    }
  }
  class UpdatingVMImpl {
    constructor(env, {
      alwaysRevalidate = false
    }) {
      this.frameStack = new _util.Stack();
      this.env = env;
      this.dom = env.getDOM();
      this.alwaysRevalidate = alwaysRevalidate;
    }
    execute(opcodes, handler) {
      if (true /* DEBUG */) {
        var hasErrored = true;
        try {
          (0, _validator.runInTrackingTransaction)(() => this._execute(opcodes, handler), '- While rendering:'); // using a boolean here to avoid breaking ergonomics of "pause on uncaught exceptions"
          // which would happen with a `catch` + `throw`

          hasErrored = false;
        } finally {
          if (hasErrored) {
            // eslint-disable-next-line no-console
            console.error(`\n\nError occurred:\n\n${(0, _validator.resetTracking)()}\n\n`);
          }
        }
      } else {
        this._execute(opcodes, handler);
      }
    }
    _execute(opcodes, handler) {
      var {
        frameStack
      } = this;
      this.try(opcodes, handler);
      while (true) {
        if (frameStack.isEmpty()) break;
        var opcode = this.frame.nextStatement();
        if (opcode === undefined) {
          frameStack.pop();
          continue;
        }
        opcode.evaluate(this);
      }
    }
    get frame() {
      return this.frameStack.current;
    }
    goto(index) {
      this.frame.goto(index);
    }
    try(ops, handler) {
      this.frameStack.push(new UpdatingVMFrame(ops, handler));
    }
    throw() {
      this.frame.handleException();
      this.frameStack.pop();
    }
  }
  _exports.UpdatingVM = UpdatingVMImpl;
  class ResumableVMStateImpl {
    constructor(state, resumeCallback) {
      this.state = state;
      this.resumeCallback = resumeCallback;
    }
    resume(runtime, builder) {
      return this.resumeCallback(runtime, this.state, builder);
    }
  }
  class BlockOpcode {
    constructor(state, runtime, bounds, children) {
      this.state = state;
      this.runtime = runtime;
      this.children = children;
      this.bounds = bounds;
    }
    parentElement() {
      return this.bounds.parentElement();
    }
    firstNode() {
      return this.bounds.firstNode();
    }
    lastNode() {
      return this.bounds.lastNode();
    }
    evaluate(vm) {
      vm.try(this.children, null);
    }
  }
  class TryOpcode extends BlockOpcode {
    constructor() {
      super(...arguments);
      this.type = 'try';
    }
    evaluate(vm) {
      vm.try(this.children, this);
    }
    handleException() {
      var {
        state,
        bounds,
        runtime
      } = this;
      (0, _destroyable2.destroyChildren)(this);
      var elementStack = NewElementBuilder.resume(runtime.env, bounds);
      var vm = state.resume(runtime, elementStack);
      var updating = [];
      var children = this.children = [];
      var result = vm.execute(vm => {
        vm.pushUpdating(updating);
        vm.updateWith(this);
        vm.pushUpdating(children);
      });
      (0, _destroyable2.associateDestroyableChild)(this, result.drop);
    }
  }
  class ListItemOpcode extends TryOpcode {
    constructor(state, runtime, bounds, key, memo, value) {
      super(state, runtime, bounds, []);
      this.key = key;
      this.memo = memo;
      this.value = value;
      this.retained = false;
      this.index = -1;
    }
    updateReferences(item) {
      this.retained = true;
      (0, _reference.updateRef)(this.value, item.value);
      (0, _reference.updateRef)(this.memo, item.memo);
    }
    shouldRemove() {
      return !this.retained;
    }
    reset() {
      this.retained = false;
    }
  }
  class ListBlockOpcode extends BlockOpcode {
    constructor(state, runtime, bounds, children, iterableRef) {
      super(state, runtime, bounds, children);
      this.iterableRef = iterableRef;
      this.type = 'list-block';
      this.opcodeMap = new Map();
      this.marker = null;
      this.lastIterator = (0, _reference.valueForRef)(iterableRef);
    }
    initializeChild(opcode) {
      opcode.index = this.children.length - 1;
      this.opcodeMap.set(opcode.key, opcode);
    }
    evaluate(vm) {
      var iterator = (0, _reference.valueForRef)(this.iterableRef);
      if (this.lastIterator !== iterator) {
        var {
          bounds
        } = this;
        var {
          dom
        } = vm;
        var marker = this.marker = dom.createComment('');
        dom.insertAfter(bounds.parentElement(), marker, bounds.lastNode());
        this.sync(iterator);
        this.parentElement().removeChild(marker);
        this.marker = null;
        this.lastIterator = iterator;
      } // Run now-updated updating opcodes

      super.evaluate(vm);
    }
    sync(iterator) {
      var {
        opcodeMap: itemMap,
        children
      } = this;
      var currentOpcodeIndex = 0;
      var seenIndex = 0;
      this.children = this.bounds.boundList = [];
      while (true) {
        var item = iterator.next();
        if (item === null) break;
        var opcode = children[currentOpcodeIndex];
        var {
          key
        } = item; // Items that have already been found and moved will already be retained,
        // we can continue until we find the next unretained item

        while (opcode !== undefined && opcode.retained === true) {
          opcode = children[++currentOpcodeIndex];
        }
        if (opcode !== undefined && opcode.key === key) {
          this.retainItem(opcode, item);
          currentOpcodeIndex++;
        } else if (itemMap.has(key)) {
          var itemOpcode = itemMap.get(key); // The item opcode was seen already, so we should move it.

          if (itemOpcode.index < seenIndex) {
            this.moveItem(itemOpcode, item, opcode);
          } else {
            // Update the seen index, we are going to be moving this item around
            // so any other items that come before it will likely need to move as
            // well.
            seenIndex = itemOpcode.index;
            var seenUnretained = false; // iterate through all of the opcodes between the current position and
            // the position of the item's opcode, and determine if they are all
            // retained.

            for (var i = currentOpcodeIndex + 1; i < seenIndex; i++) {
              if (children[i].retained === false) {
                seenUnretained = true;
                break;
              }
            } // If we have seen only retained opcodes between this and the matching
            // opcode, it means that all the opcodes in between have been moved
            // already, and we can safely retain this item's opcode.

            if (seenUnretained === false) {
              this.retainItem(itemOpcode, item);
              currentOpcodeIndex = seenIndex + 1;
            } else {
              this.moveItem(itemOpcode, item, opcode);
              currentOpcodeIndex++;
            }
          }
        } else {
          this.insertItem(item, opcode);
        }
      }
      for (var _i6 = 0; _i6 < children.length; _i6++) {
        var _opcode = children[_i6];
        if (_opcode.retained === false) {
          this.deleteItem(_opcode);
        } else {
          _opcode.reset();
        }
      }
    }
    retainItem(opcode, item) {
      var {
        children
      } = this;
      (0, _reference.updateRef)(opcode.memo, item.memo);
      (0, _reference.updateRef)(opcode.value, item.value);
      opcode.retained = true;
      opcode.index = children.length;
      children.push(opcode);
    }
    insertItem(item, before) {
      var {
        opcodeMap,
        bounds,
        state,
        runtime,
        children
      } = this;
      var {
        key
      } = item;
      var nextSibling = before === undefined ? this.marker : before.firstNode();
      var elementStack = NewElementBuilder.forInitialRender(runtime.env, {
        element: bounds.parentElement(),
        nextSibling
      });
      var vm = state.resume(runtime, elementStack);
      vm.execute(vm => {
        vm.pushUpdating();
        var opcode = vm.enterItem(item);
        opcode.index = children.length;
        children.push(opcode);
        opcodeMap.set(key, opcode);
        (0, _destroyable2.associateDestroyableChild)(this, opcode);
      });
    }
    moveItem(opcode, item, before) {
      var {
        children
      } = this;
      (0, _reference.updateRef)(opcode.memo, item.memo);
      (0, _reference.updateRef)(opcode.value, item.value);
      opcode.retained = true;
      var currentSibling, nextSibling;
      if (before === undefined) {
        move(opcode, this.marker);
      } else {
        currentSibling = opcode.lastNode().nextSibling;
        nextSibling = before.firstNode(); // Items are moved throughout the algorithm, so there are cases where the
        // the items already happen to be siblings (e.g. an item in between was
        // moved before this move happened). Check to see if they are siblings
        // first before doing the move.

        if (currentSibling !== nextSibling) {
          move(opcode, nextSibling);
        }
      }
      opcode.index = children.length;
      children.push(opcode);
    }
    deleteItem(opcode) {
      (0, _destroyable2.destroy)(opcode);
      clear(opcode);
      this.opcodeMap.delete(opcode.key);
    }
  }
  class UpdatingVMFrame {
    constructor(ops, exceptionHandler) {
      this.ops = ops;
      this.exceptionHandler = exceptionHandler;
      this.current = 0;
    }
    goto(index) {
      this.current = index;
    }
    nextStatement() {
      return this.ops[this.current++];
    }
    handleException() {
      if (this.exceptionHandler) {
        this.exceptionHandler.handleException();
      }
    }
  }
  class RenderResultImpl {
    constructor(env, updating, bounds, drop) {
      this.env = env;
      this.updating = updating;
      this.bounds = bounds;
      this.drop = drop;
      (0, _destroyable2.associateDestroyableChild)(this, drop);
      (0, _destroyable2.registerDestructor)(this, () => clear(this.bounds));
    }
    rerender({
      alwaysRevalidate = false
    } = {
      alwaysRevalidate: false
    }) {
      var {
        env,
        updating
      } = this;
      var vm = new UpdatingVMImpl(env, {
        alwaysRevalidate
      });
      vm.execute(updating, this);
    }
    parentElement() {
      return this.bounds.parentElement();
    }
    firstNode() {
      return this.bounds.firstNode();
    }
    lastNode() {
      return this.bounds.lastNode();
    }
    handleException() {
      throw 'this should never happen';
    }
  }
  class EvaluationStackImpl {
    // fp -> sp
    constructor(stack = [], registers) {
      this.stack = stack;
      this[REGISTERS] = registers;
    }
    static restore(snapshot) {
      return new this(snapshot.slice(), initializeRegistersWithSP(snapshot.length - 1));
    }
    push(value) {
      this.stack[++this[REGISTERS][_vm2.$sp]] = value;
    }
    dup(position = this[REGISTERS][_vm2.$sp]) {
      this.stack[++this[REGISTERS][_vm2.$sp]] = this.stack[position];
    }
    copy(from, to) {
      this.stack[to] = this.stack[from];
    }
    pop(n = 1) {
      var top = this.stack[this[REGISTERS][_vm2.$sp]];
      this[REGISTERS][_vm2.$sp] -= n;
      return top;
    }
    peek(offset = 0) {
      return this.stack[this[REGISTERS][_vm2.$sp] - offset];
    }
    get(offset, base = this[REGISTERS][_vm2.$fp]) {
      return this.stack[base + offset];
    }
    set(value, offset, base = this[REGISTERS][_vm2.$fp]) {
      this.stack[base + offset] = value;
    }
    slice(start, end) {
      return this.stack.slice(start, end);
    }
    capture(items) {
      var end = this[REGISTERS][_vm2.$sp] + 1;
      var start = end - items;
      return this.stack.slice(start, end);
    }
    reset() {
      this.stack.length = 0;
    }
    toArray() {
      return this.stack.slice(this[REGISTERS][_vm2.$fp], this[REGISTERS][_vm2.$sp] + 1);
    }
  }
  var _a$2, _b;
  class Stacks {
    constructor() {
      this.scope = new _util.Stack();
      this.dynamicScope = new _util.Stack();
      this.updating = new _util.Stack();
      this.cache = new _util.Stack();
      this.list = new _util.Stack();
    }
  }
  class VM {
    /**
     * End of migrated.
     */
    constructor(runtime, {
      pc,
      scope,
      dynamicScope,
      stack
    }, elementStack, context) {
      this.runtime = runtime;
      this.elementStack = elementStack;
      this.context = context;
      this[_a$2] = new Stacks();
      this[_b] = new _util.Stack();
      this.s0 = null;
      this.s1 = null;
      this.t0 = null;
      this.t1 = null;
      this.v0 = null;
      this.resume = initVM(this.context);
      if (true /* DEBUG */) {
        (0, _globalContext.assertGlobalContextWasSet)();
      }
      var evalStack = EvaluationStackImpl.restore(stack);
      evalStack[REGISTERS][_vm2.$pc] = pc;
      evalStack[REGISTERS][_vm2.$sp] = stack.length - 1;
      evalStack[REGISTERS][_vm2.$fp] = -1;
      this[HEAP] = this.program.heap;
      this[CONSTANTS] = this.program.constants;
      this.elementStack = elementStack;
      this[STACKS].scope.push(scope);
      this[STACKS].dynamicScope.push(dynamicScope);
      this[ARGS] = new VMArgumentsImpl();
      this[INNER_VM] = new LowLevelVM(evalStack, this[HEAP], runtime.program, {
        debugBefore: opcode => {
          return APPEND_OPCODES.debugBefore(this, opcode);
        },
        debugAfter: state => {
          APPEND_OPCODES.debugAfter(this, state);
        }
      }, evalStack[REGISTERS]);
      this.destructor = {};
      this[DESTROYABLE_STACK].push(this.destructor);
    }
    get stack() {
      return this[INNER_VM].stack;
    }
    /* Registers */

    get pc() {
      return this[INNER_VM].fetchRegister(_vm2.$pc);
    } // Fetch a value from a register onto the stack

    fetch(register) {
      var value = this.fetchValue(register);
      this.stack.push(value);
    } // Load a value from the stack into a register

    load(register) {
      var value = this.stack.pop();
      this.loadValue(register, value);
    }
    fetchValue(register) {
      if ((0, _vm2.isLowLevelRegister)(register)) {
        return this[INNER_VM].fetchRegister(register);
      }
      switch (register) {
        case _vm2.$s0:
          return this.s0;
        case _vm2.$s1:
          return this.s1;
        case _vm2.$t0:
          return this.t0;
        case _vm2.$t1:
          return this.t1;
        case _vm2.$v0:
          return this.v0;
      }
    } // Load a value into a register

    loadValue(register, value) {
      if ((0, _vm2.isLowLevelRegister)(register)) {
        this[INNER_VM].loadRegister(register, value);
      }
      switch (register) {
        case _vm2.$s0:
          this.s0 = value;
          break;
        case _vm2.$s1:
          this.s1 = value;
          break;
        case _vm2.$t0:
          this.t0 = value;
          break;
        case _vm2.$t1:
          this.t1 = value;
          break;
        case _vm2.$v0:
          this.v0 = value;
          break;
      }
    }
    /**
     * Migrated to Inner
     */
    // Start a new frame and save $ra and $fp on the stack

    pushFrame() {
      this[INNER_VM].pushFrame();
    } // Restore $ra, $sp and $fp

    popFrame() {
      this[INNER_VM].popFrame();
    } // Jump to an address in `program`

    goto(offset) {
      this[INNER_VM].goto(offset);
    } // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)

    call(handle) {
      this[INNER_VM].call(handle);
    } // Put a specific `program` address in $ra

    returnTo(offset) {
      this[INNER_VM].returnTo(offset);
    } // Return to the `program` address stored in $ra

    return() {
      this[INNER_VM].return();
    }
    static initial(runtime, context, {
      handle,
      self,
      dynamicScope,
      treeBuilder,
      numSymbols,
      owner
    }) {
      var scope = PartialScopeImpl.root(self, numSymbols, owner);
      var state = vmState(runtime.program.heap.getaddr(handle), scope, dynamicScope);
      var vm = initVM(context)(runtime, state, treeBuilder);
      vm.pushUpdating();
      return vm;
    }
    static empty(runtime, {
      handle,
      treeBuilder,
      dynamicScope,
      owner
    }, context) {
      var vm = initVM(context)(runtime, vmState(runtime.program.heap.getaddr(handle), PartialScopeImpl.root(_reference.UNDEFINED_REFERENCE, 0, owner), dynamicScope), treeBuilder);
      vm.pushUpdating();
      return vm;
    }
    compile(block) {
      var handle = (0, _util.unwrapHandle)(block.compile(this.context));
      return handle;
    }
    get program() {
      return this.runtime.program;
    }
    get env() {
      return this.runtime.env;
    }
    captureState(args, pc = this[INNER_VM].fetchRegister(_vm2.$pc)) {
      return {
        pc,
        scope: this.scope(),
        dynamicScope: this.dynamicScope(),
        stack: this.stack.capture(args)
      };
    }
    capture(args, pc = this[INNER_VM].fetchRegister(_vm2.$pc)) {
      return new ResumableVMStateImpl(this.captureState(args, pc), this.resume);
    }
    beginCacheGroup(name) {
      var opcodes = this.updating();
      var guard = new JumpIfNotModifiedOpcode();
      opcodes.push(guard);
      opcodes.push(new BeginTrackFrameOpcode(name));
      this[STACKS].cache.push(guard);
      (0, _validator.beginTrackFrame)(name);
    }
    commitCacheGroup() {
      var opcodes = this.updating();
      var guard = this[STACKS].cache.pop();
      var tag = (0, _validator.endTrackFrame)();
      opcodes.push(new EndTrackFrameOpcode(guard));
      guard.finalize(tag, opcodes.length);
    }
    enter(args) {
      var updating = [];
      var state = this.capture(args);
      var block = this.elements().pushUpdatableBlock();
      var tryOpcode = new TryOpcode(state, this.runtime, block, updating);
      this.didEnter(tryOpcode);
    }
    enterItem({
      key,
      value,
      memo
    }) {
      var {
        stack
      } = this;
      var valueRef = (0, _reference.createIteratorItemRef)(value);
      var memoRef = (0, _reference.createIteratorItemRef)(memo);
      stack.push(valueRef);
      stack.push(memoRef);
      var state = this.capture(2);
      var block = this.elements().pushUpdatableBlock();
      var opcode = new ListItemOpcode(state, this.runtime, block, key, memoRef, valueRef);
      this.didEnter(opcode);
      return opcode;
    }
    registerItem(opcode) {
      this.listBlock().initializeChild(opcode);
    }
    enterList(iterableRef, offset) {
      var updating = [];
      var addr = this[INNER_VM].target(offset);
      var state = this.capture(0, addr);
      var list = this.elements().pushBlockList(updating);
      var opcode = new ListBlockOpcode(state, this.runtime, list, updating, iterableRef);
      this[STACKS].list.push(opcode);
      this.didEnter(opcode);
    }
    didEnter(opcode) {
      this.associateDestroyable(opcode);
      this[DESTROYABLE_STACK].push(opcode);
      this.updateWith(opcode);
      this.pushUpdating(opcode.children);
    }
    exit() {
      this[DESTROYABLE_STACK].pop();
      this.elements().popBlock();
      this.popUpdating();
    }
    exitList() {
      this.exit();
      this[STACKS].list.pop();
    }
    pushUpdating(list = []) {
      this[STACKS].updating.push(list);
    }
    popUpdating() {
      return this[STACKS].updating.pop();
    }
    updateWith(opcode) {
      this.updating().push(opcode);
    }
    listBlock() {
      return this[STACKS].list.current;
    }
    associateDestroyable(child) {
      var parent = this[DESTROYABLE_STACK].current;
      (0, _destroyable2.associateDestroyableChild)(parent, child);
    }
    tryUpdating() {
      return this[STACKS].updating.current;
    }
    updating() {
      return this[STACKS].updating.current;
    }
    elements() {
      return this.elementStack;
    }
    scope() {
      return this[STACKS].scope.current;
    }
    dynamicScope() {
      return this[STACKS].dynamicScope.current;
    }
    pushChildScope() {
      this[STACKS].scope.push(this.scope().child());
    }
    pushDynamicScope() {
      var child = this.dynamicScope().child();
      this[STACKS].dynamicScope.push(child);
      return child;
    }
    pushRootScope(size, owner) {
      var scope = PartialScopeImpl.sized(size, owner);
      this[STACKS].scope.push(scope);
      return scope;
    }
    pushScope(scope) {
      this[STACKS].scope.push(scope);
    }
    popScope() {
      this[STACKS].scope.pop();
    }
    popDynamicScope() {
      this[STACKS].dynamicScope.pop();
    } /// SCOPE HELPERS

    getOwner() {
      return this.scope().owner;
    }
    getSelf() {
      return this.scope().getSelf();
    }
    referenceForSymbol(symbol$$1) {
      return this.scope().getSymbol(symbol$$1);
    } /// EXECUTION

    execute(initialize) {
      if (true /* DEBUG */) {
        var hasErrored = true;
        try {
          var value = this._execute(initialize); // using a boolean here to avoid breaking ergonomics of "pause on uncaught exceptions"
          // which would happen with a `catch` + `throw`

          hasErrored = false;
          return value;
        } finally {
          if (hasErrored) {
            // If any existing blocks are open, due to an error or something like
            // that, we need to close them all and clean things up properly.
            var elements = this.elements();
            while (elements.hasBlocks) {
              elements.popBlock();
            } // eslint-disable-next-line no-console

            console.error(`\n\nError occurred:\n\n${(0, _validator.resetTracking)()}\n\n`);
          }
        }
      } else {
        return this._execute(initialize);
      }
    }
    _execute(initialize) {
      if (initialize) initialize(this);
      var result;
      while (true) {
        result = this.next();
        if (result.done) break;
      }
      return result.value;
    }
    next() {
      var {
        env,
        elementStack
      } = this;
      var opcode = this[INNER_VM].nextStatement();
      var result;
      if (opcode !== null) {
        this[INNER_VM].evaluateOuter(opcode, this);
        result = {
          done: false,
          value: null
        };
      } else {
        // Unload the stack
        this.stack.reset();
        result = {
          done: true,
          value: new RenderResultImpl(env, this.popUpdating(), elementStack.popBlock(), this.destructor)
        };
      }
      return result;
    }
    bindDynamicScope(names) {
      var scope = this.dynamicScope();
      for (var i = names.length - 1; i >= 0; i--) {
        var name = names[i];
        scope.set(name, this.stack.pop());
      }
    }
  }
  _exports.LowLevelVM = VM;
  _a$2 = STACKS, _b = DESTROYABLE_STACK;
  function vmState(pc, scope, dynamicScope) {
    return {
      pc,
      scope,
      dynamicScope,
      stack: []
    };
  }
  function initVM(context) {
    return (runtime, state, builder) => new VM(runtime, state, builder, context);
  }
  class TemplateIteratorImpl {
    constructor(vm) {
      this.vm = vm;
    }
    next() {
      return this.vm.next();
    }
    sync() {
      if (true /* DEBUG */) {
        return (0, _validator.runInTrackingTransaction)(() => this.vm.execute(), '- While rendering:');
      } else {
        return this.vm.execute();
      }
    }
  }
  function renderSync(env, iterator) {
    var result;
    inTransaction(env, () => result = iterator.sync());
    return result;
  }
  function renderMain(runtime, context, owner, self, treeBuilder, layout, dynamicScope = new DynamicScopeImpl()) {
    var handle = (0, _util.unwrapHandle)(layout.compile(context));
    var numSymbols = layout.symbolTable.symbols.length;
    var vm = VM.initial(runtime, context, {
      self,
      dynamicScope,
      treeBuilder,
      handle,
      numSymbols,
      owner
    });
    return new TemplateIteratorImpl(vm);
  }
  function renderInvocation(vm, context, owner, definition, args) {
    // Get a list of tuples of argument names and references, like
    // [['title', reference], ['name', reference]]
    var argList = Object.keys(args).map(key => [key, args[key]]);
    var blockNames = ['main', 'else', 'attrs']; // Prefix argument names with `@` symbol

    var argNames = argList.map(([name]) => `@${name}`);
    var reified = vm[CONSTANTS].component(definition, owner);
    vm.pushFrame(); // Push blocks on to the stack, three stack values per block

    for (var i = 0; i < 3 * blockNames.length; i++) {
      vm.stack.push(null);
    }
    vm.stack.push(null); // For each argument, push its backing reference on to the stack

    argList.forEach(([, reference]) => {
      vm.stack.push(reference);
    }); // Configure VM based on blocks and args just pushed on to the stack.

    vm[ARGS].setup(vm.stack, argNames, blockNames, 0, true);
    var compilable = reified.compilable;
    var layoutHandle = (0, _util.unwrapHandle)(compilable.compile(context));
    var invocation = {
      handle: layoutHandle,
      symbolTable: compilable.symbolTable
    }; // Needed for the Op.Main opcode: arguments, component invocation object, and
    // component definition.

    vm.stack.push(vm[ARGS]);
    vm.stack.push(invocation);
    vm.stack.push(reified);
    return new TemplateIteratorImpl(vm);
  }
  function renderComponent(runtime, treeBuilder, context, owner, definition, args = {}, dynamicScope = new DynamicScopeImpl()) {
    var vm = VM.empty(runtime, {
      treeBuilder,
      handle: context.stdlib.main,
      dynamicScope,
      owner
    }, context);
    return renderInvocation(vm, context, owner, definition, recordToReference(args));
  }
  function recordToReference(record) {
    var root = (0, _reference.createConstRef)(record, 'args');
    return Object.keys(record).reduce((acc, key) => {
      acc[key] = (0, _reference.childRefFor)(root, key);
      return acc;
    }, {});
  }
  var SERIALIZATION_FIRST_NODE_STRING = _exports.SERIALIZATION_FIRST_NODE_STRING = '%+b:0%';
  function isSerializationFirstNode(node) {
    return node.nodeValue === SERIALIZATION_FIRST_NODE_STRING;
  }
  class RehydratingCursor extends CursorImpl {
    constructor(element, nextSibling, startingBlockDepth) {
      super(element, nextSibling);
      this.startingBlockDepth = startingBlockDepth;
      this.candidate = null;
      this.injectedOmittedNode = false;
      this.openBlockDepth = startingBlockDepth - 1;
    }
  }
  class RehydrateBuilder extends NewElementBuilder {
    constructor(env, parentNode, nextSibling) {
      super(env, parentNode, nextSibling);
      this.unmatchedAttributes = null;
      this.blockDepth = 0;
      if (nextSibling) throw new Error('Rehydration with nextSibling not supported');
      var node = this.currentCursor.element.firstChild;
      while (node !== null) {
        if (isOpenBlock(node)) {
          break;
        }
        node = node.nextSibling;
      }
      this.candidate = node;
      var startingBlockOffset = getBlockDepth(node);
      if (startingBlockOffset !== 0) {
        // We are rehydrating from a partial tree and not the root component
        // We need to add an extra block before the first block to rehydrate correctly
        // The extra block is needed since the renderComponent API creates a synthetic component invocation which generates the extra block
        var newBlockDepth = startingBlockOffset - 1;
        var newCandidate = this.dom.createComment(`%+b:${newBlockDepth}%`);
        node.parentNode.insertBefore(newCandidate, this.candidate);
        var closingNode = node.nextSibling;
        while (closingNode !== null) {
          if (isCloseBlock(closingNode) && getBlockDepth(closingNode) === startingBlockOffset) {
            break;
          }
          closingNode = closingNode.nextSibling;
        }
        var newClosingBlock = this.dom.createComment(`%-b:${newBlockDepth}%`);
        node.parentNode.insertBefore(newClosingBlock, closingNode.nextSibling);
        this.candidate = newCandidate;
        this.startingBlockOffset = newBlockDepth;
      } else {
        this.startingBlockOffset = 0;
      }
    }
    get currentCursor() {
      return this[CURSOR_STACK].current;
    }
    get candidate() {
      if (this.currentCursor) {
        return this.currentCursor.candidate;
      }
      return null;
    }
    set candidate(node) {
      var currentCursor = this.currentCursor;
      currentCursor.candidate = node;
    }
    disableRehydration(nextSibling) {
      var currentCursor = this.currentCursor; // rehydration will be disabled until we either:
      // * hit popElement (and return to using the parent elements cursor)
      // * hit closeBlock and the next sibling is a close block comment
      //   matching the expected openBlockDepth

      currentCursor.candidate = null;
      currentCursor.nextSibling = nextSibling;
    }
    enableRehydration(candidate) {
      var currentCursor = this.currentCursor;
      currentCursor.candidate = candidate;
      currentCursor.nextSibling = null;
    }
    pushElement(element, nextSibling = null) {
      var cursor = new RehydratingCursor(element, nextSibling, this.blockDepth || 0);
      /**
       * <div>   <---------------  currentCursor.element
       *   <!--%+b:1%--> <-------  would have been removed during openBlock
       *   <div> <---------------  currentCursor.candidate -> cursor.element
       *     <!--%+b:2%--> <-----  currentCursor.candidate.firstChild -> cursor.candidate
       *     Foo
       *     <!--%-b:2%-->
       *   </div>
       *   <!--%-b:1%-->  <------  becomes currentCursor.candidate
       */

      if (this.candidate !== null) {
        cursor.candidate = element.firstChild;
        this.candidate = element.nextSibling;
      }
      this[CURSOR_STACK].push(cursor);
    } // clears until the end of the current container
    // either the current open block or higher

    clearMismatch(candidate) {
      var current = candidate;
      var currentCursor = this.currentCursor;
      if (currentCursor !== null) {
        var openBlockDepth = currentCursor.openBlockDepth;
        if (openBlockDepth >= currentCursor.startingBlockDepth) {
          while (current) {
            if (isCloseBlock(current)) {
              var closeBlockDepth = getBlockDepthWithOffset(current, this.startingBlockOffset);
              if (openBlockDepth >= closeBlockDepth) {
                break;
              }
            }
            current = this.remove(current);
          }
        } else {
          while (current !== null) {
            current = this.remove(current);
          }
        } // current cursor parentNode should be openCandidate if element
        // or openCandidate.parentNode if comment

        this.disableRehydration(current);
      }
    }
    __openBlock() {
      var {
        currentCursor
      } = this;
      if (currentCursor === null) return;
      var blockDepth = this.blockDepth;
      this.blockDepth++;
      var {
        candidate
      } = currentCursor;
      if (candidate === null) return;
      var {
        tagName
      } = currentCursor.element;
      if (isOpenBlock(candidate) && getBlockDepthWithOffset(candidate, this.startingBlockOffset) === blockDepth) {
        this.candidate = this.remove(candidate);
        currentCursor.openBlockDepth = blockDepth;
      } else if (tagName !== 'TITLE' && tagName !== 'SCRIPT' && tagName !== 'STYLE') {
        this.clearMismatch(candidate);
      }
    }
    __closeBlock() {
      var {
        currentCursor
      } = this;
      if (currentCursor === null) return; // openBlock is the last rehydrated open block

      var openBlockDepth = currentCursor.openBlockDepth; // this currently is the expected next open block depth

      this.blockDepth--;
      var {
        candidate
      } = currentCursor;
      var isRehydrating = false;
      if (candidate !== null) {
        isRehydrating = true; //assert(
        //  openBlockDepth === this.blockDepth,
        //  'when rehydrating, openBlockDepth should match this.blockDepth here'
        //);

        if (isCloseBlock(candidate) && getBlockDepthWithOffset(candidate, this.startingBlockOffset) === openBlockDepth) {
          var nextSibling = this.remove(candidate);
          this.candidate = nextSibling;
          currentCursor.openBlockDepth--;
        } else {
          // close the block and clear mismatch in parent container
          // we will be either at the end of the element
          // or at the end of our containing block
          this.clearMismatch(candidate);
          isRehydrating = false;
        }
      }
      if (isRehydrating === false) {
        // check if nextSibling matches our expected close block
        // if so, we remove the close block comment and
        // restore rehydration after clearMismatch disabled
        var _nextSibling = currentCursor.nextSibling;
        if (_nextSibling !== null && isCloseBlock(_nextSibling) && getBlockDepthWithOffset(_nextSibling, this.startingBlockOffset) === this.blockDepth) {
          // restore rehydration state
          var _candidate2 = this.remove(_nextSibling);
          this.enableRehydration(_candidate2);
          currentCursor.openBlockDepth--;
        }
      }
    }
    __appendNode(node) {
      var {
        candidate
      } = this; // This code path is only used when inserting precisely one node. It needs more
      // comparison logic, but we can probably lean on the cases where this code path
      // is actually used.

      if (candidate) {
        return candidate;
      } else {
        return super.__appendNode(node);
      }
    }
    __appendHTML(html) {
      var candidateBounds = this.markerBounds();
      if (candidateBounds) {
        var first = candidateBounds.firstNode();
        var last = candidateBounds.lastNode();
        var newBounds = new ConcreteBounds(this.element, first.nextSibling, last.previousSibling);
        var possibleEmptyMarker = this.remove(first);
        this.remove(last);
        if (possibleEmptyMarker !== null && isEmpty$1(possibleEmptyMarker)) {
          this.candidate = this.remove(possibleEmptyMarker);
          if (this.candidate !== null) {
            this.clearMismatch(this.candidate);
          }
        }
        return newBounds;
      } else {
        return super.__appendHTML(html);
      }
    }
    remove(node) {
      var element = node.parentNode;
      var next = node.nextSibling;
      element.removeChild(node);
      return next;
    }
    markerBounds() {
      var _candidate = this.candidate;
      if (_candidate && isMarker(_candidate)) {
        var first = _candidate;
        var last = first.nextSibling;
        while (last && !isMarker(last)) {
          last = last.nextSibling;
        }
        return new ConcreteBounds(this.element, first, last);
      } else {
        return null;
      }
    }
    __appendText(string) {
      var {
        candidate
      } = this;
      if (candidate) {
        if (isTextNode(candidate)) {
          if (candidate.nodeValue !== string) {
            candidate.nodeValue = string;
          }
          this.candidate = candidate.nextSibling;
          return candidate;
        } else if (isSeparator(candidate)) {
          this.candidate = this.remove(candidate);
          return this.__appendText(string);
        } else if (isEmpty$1(candidate) && string === '') {
          this.candidate = this.remove(candidate);
          return this.__appendText(string);
        } else {
          this.clearMismatch(candidate);
          return super.__appendText(string);
        }
      } else {
        return super.__appendText(string);
      }
    }
    __appendComment(string) {
      var _candidate = this.candidate;
      if (_candidate && isComment(_candidate)) {
        if (_candidate.nodeValue !== string) {
          _candidate.nodeValue = string;
        }
        this.candidate = _candidate.nextSibling;
        return _candidate;
      } else if (_candidate) {
        this.clearMismatch(_candidate);
      }
      return super.__appendComment(string);
    }
    __openElement(tag) {
      var _candidate = this.candidate;
      if (_candidate && isElement(_candidate) && isSameNodeType(_candidate, tag)) {
        this.unmatchedAttributes = [].slice.call(_candidate.attributes);
        return _candidate;
      } else if (_candidate) {
        if (isElement(_candidate) && _candidate.tagName === 'TBODY') {
          this.pushElement(_candidate, null);
          this.currentCursor.injectedOmittedNode = true;
          return this.__openElement(tag);
        }
        this.clearMismatch(_candidate);
      }
      return super.__openElement(tag);
    }
    __setAttribute(name, value, namespace) {
      var unmatched = this.unmatchedAttributes;
      if (unmatched) {
        var attr = findByName(unmatched, name);
        if (attr) {
          if (attr.value !== value) {
            attr.value = value;
          }
          unmatched.splice(unmatched.indexOf(attr), 1);
          return;
        }
      }
      return super.__setAttribute(name, value, namespace);
    }
    __setProperty(name, value) {
      var unmatched = this.unmatchedAttributes;
      if (unmatched) {
        var attr = findByName(unmatched, name);
        if (attr) {
          if (attr.value !== value) {
            attr.value = value;
          }
          unmatched.splice(unmatched.indexOf(attr), 1);
          return;
        }
      }
      return super.__setProperty(name, value);
    }
    __flushElement(parent, constructing) {
      var {
        unmatchedAttributes: unmatched
      } = this;
      if (unmatched) {
        for (var i = 0; i < unmatched.length; i++) {
          this.constructing.removeAttribute(unmatched[i].name);
        }
        this.unmatchedAttributes = null;
      } else {
        super.__flushElement(parent, constructing);
      }
    }
    willCloseElement() {
      var {
        candidate,
        currentCursor
      } = this;
      if (candidate !== null) {
        this.clearMismatch(candidate);
      }
      if (currentCursor && currentCursor.injectedOmittedNode) {
        this.popElement();
      }
      super.willCloseElement();
    }
    getMarker(element, guid) {
      var marker = element.querySelector(`script[glmr="${guid}"]`);
      if (marker) {
        return marker;
      }
      return null;
    }
    __pushRemoteElement(element, cursorId, insertBefore) {
      var marker = this.getMarker(element, cursorId);
      if (insertBefore === undefined) {
        while (element.firstChild !== null && element.firstChild !== marker) {
          this.remove(element.firstChild);
        }
        insertBefore = null;
      }
      var cursor = new RehydratingCursor(element, null, this.blockDepth);
      this[CURSOR_STACK].push(cursor);
      if (marker === null) {
        this.disableRehydration(insertBefore);
      } else {
        this.candidate = this.remove(marker);
      }
      var block = new RemoteLiveBlock(element);
      return this.pushLiveBlock(block, true);
    }
    didAppendBounds(bounds) {
      super.didAppendBounds(bounds);
      if (this.candidate) {
        var last = bounds.lastNode();
        this.candidate = last && last.nextSibling;
      }
      return bounds;
    }
  }
  _exports.RehydrateBuilder = RehydrateBuilder;
  function isTextNode(node) {
    return node.nodeType === 3;
  }
  function isComment(node) {
    return node.nodeType === 8;
  }
  function isOpenBlock(node) {
    return node.nodeType === 8
    /* COMMENT_NODE */ && node.nodeValue.lastIndexOf('%+b:', 0) === 0;
  }
  function isCloseBlock(node) {
    return node.nodeType === 8
    /* COMMENT_NODE */ && node.nodeValue.lastIndexOf('%-b:', 0) === 0;
  }
  function getBlockDepth(node) {
    return parseInt(node.nodeValue.slice(4), 10);
  }
  function getBlockDepthWithOffset(node, offset) {
    return getBlockDepth(node) - offset;
  }
  function isElement(node) {
    return node.nodeType === 1;
  }
  function isMarker(node) {
    return node.nodeType === 8 && node.nodeValue === '%glmr%';
  }
  function isSeparator(node) {
    return node.nodeType === 8 && node.nodeValue === '%|%';
  }
  function isEmpty$1(node) {
    return node.nodeType === 8 && node.nodeValue === '% %';
  }
  function isSameNodeType(candidate, tag) {
    if (candidate.namespaceURI === "http://www.w3.org/2000/svg"
    /* SVG */) {
      return candidate.tagName === tag;
    }
    return candidate.tagName === tag.toUpperCase();
  }
  function findByName(array, name) {
    for (var i = 0; i < array.length; i++) {
      var attr = array[i];
      if (attr.name === name) return attr;
    }
    return undefined;
  }
  function rehydrationBuilder(env, cursor) {
    return RehydrateBuilder.forInitialRender(env, cursor);
  }
  var ARGS_CACHES = true /* DEBUG */ ? new WeakMap() : undefined;
  function getArgs(proxy) {
    return (0, _validator.getValue)(true /* DEBUG */ ? ARGS_CACHES.get(proxy) : proxy.argsCache);
  }
  class SimpleArgsProxy {
    constructor(context, computeArgs = () => EMPTY_ARGS) {
      var argsCache = (0, _validator.createCache)(() => computeArgs(context));
      if (true /* DEBUG */) {
        ARGS_CACHES.set(this, argsCache);
        Object.freeze(this);
      } else {
        this.argsCache = argsCache;
      }
    }
    get named() {
      return getArgs(this).named || EMPTY_NAMED;
    }
    get positional() {
      return getArgs(this).positional || EMPTY_POSITIONAL;
    }
  } ////////////

  function invokeHelper(context, definition, computeArgs) {
    if (true /* DEBUG */ && (typeof context !== 'object' || context === null)) {
      throw new Error(`Expected a context object to be passed as the first parameter to invokeHelper, got ${context}`);
    }
    var owner = (0, _owner2.getOwner)(context);
    var internalManager = (0, _manager5.getInternalHelperManager)(definition); // TODO: figure out why assert isn't using the TS assert thing

    if (true /* DEBUG */ && !internalManager) {
      throw new Error(`Expected a helper definition to be passed as the second parameter to invokeHelper, but no helper manager was found. The definition value that was passed was \`${(0, _util.debugToString)(definition)}\`. Did you use setHelperManager to associate a helper manager with this value?`);
    }
    if (true /* DEBUG */ && typeof internalManager === 'function') {
      throw new Error('Found a helper manager, but it was an internal built-in helper manager. `invokeHelper` does not support internal helpers yet.');
    }
    var manager = internalManager.getDelegateFor(owner);
    var args = new SimpleArgsProxy(context, computeArgs);
    var bucket = manager.createHelper(definition, args);
    var cache;
    if ((0, _manager5.hasValue)(manager)) {
      cache = (0, _validator.createCache)(() => {
        if (true /* DEBUG */ && ((0, _destroyable2.isDestroying)(cache) || (0, _destroyable2.isDestroyed)(cache))) {
          throw new Error(`You attempted to get the value of a helper after the helper was destroyed, which is not allowed`);
        }
        return manager.getValue(bucket);
      });
      (0, _destroyable2.associateDestroyableChild)(context, cache);
    } else {
      throw new Error('TODO: unreachable, to be implemented with hasScheduledEffect');
    }
    if ((0, _manager5.hasDestroyable)(manager)) {
      var destroyable = manager.getDestroyable(bucket);
      (0, _destroyable2.associateDestroyableChild)(cache, destroyable);
    }
    return cache;
  }
  function internalHelper(helper) {
    return (0, _manager5.setInternalHelperManager)(helper, {});
  }
  var context = (0, _util.buildUntouchableThis)('`fn` helper');
  /**
    The `fn` helper allows you to ensure a function that you are passing off
    to another component, helper, or modifier has access to arguments that are
    available in the template.
  
    For example, if you have an `each` helper looping over a number of items, you
    may need to pass a function that expects to receive the item as an argument
    to a component invoked within the loop. Here's how you could use the `fn`
    helper to pass both the function and its arguments together:
  
      ```app/templates/components/items-listing.hbs
    {{#each @items as |item|}}
      <DisplayItem @item=item @select={{fn this.handleSelected item}} />
    {{/each}}
    ```
  
    ```app/components/items-list.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';
  
    export default class ItemsList extends Component {
      handleSelected = (item) => {
        // ...snip...
      }
    }
    ```
  
    In this case the `display-item` component will receive a normal function
    that it can invoke. When it invokes the function, the `handleSelected`
    function will receive the `item` and any arguments passed, thanks to the
    `fn` helper.
  
    Let's take look at what that means in a couple circumstances:
  
    - When invoked as `this.args.select()` the `handleSelected` function will
      receive the `item` from the loop as its first and only argument.
    - When invoked as `this.args.select('foo')` the `handleSelected` function
      will receive the `item` from the loop as its first argument and the
      string `'foo'` as its second argument.
  
    In the example above, we used an arrow function to ensure that
    `handleSelected` is properly bound to the `items-list`, but let's explore what
    happens if we left out the arrow function:
  
    ```app/components/items-list.js
    import Component from '@glimmer/component';
  
    export default class ItemsList extends Component {
      handleSelected(item) {
        // ...snip...
      }
    }
    ```
  
    In this example, when `handleSelected` is invoked inside the `display-item`
    component, it will **not** have access to the component instance. In other
    words, it will have no `this` context, so please make sure your functions
    are bound (via an arrow function or other means) before passing into `fn`!
  
    See also [partial application](https://en.wikipedia.org/wiki/Partial_application).
  
    @method fn
    @public
  */

  var fn = _exports.fn = internalHelper(({
    positional
  }) => {
    var callbackRef = positional[0];
    if (true /* DEBUG */) assertCallbackIsFn(callbackRef);
    return (0, _reference.createComputeRef)(() => {
      return (...invocationArgs) => {
        var [fn, ...args] = (0, _runtime.reifyPositional)(positional);
        if (true /* DEBUG */) assertCallbackIsFn(callbackRef);
        if ((0, _reference.isInvokableRef)(callbackRef)) {
          var value = args.length > 0 ? args[0] : invocationArgs[0];
          return (0, _reference.updateRef)(callbackRef, value);
        } else {
          return fn.call(context, ...args, ...invocationArgs);
        }
      };
    }, null, 'fn');
  });
  function assertCallbackIsFn(callbackRef) {
    if (!(callbackRef && ((0, _reference.isInvokableRef)(callbackRef) || typeof (0, _reference.valueForRef)(callbackRef) === 'function'))) {
      throw new Error(`You must pass a function as the \`fn\` helper's first argument, you passed ${callbackRef ? (0, _reference.valueForRef)(callbackRef) : callbackRef}. While rendering:\n\n${callbackRef === null || callbackRef === void 0 ? void 0 : callbackRef.debugLabel}`);
    }
  }
  var wrapHashProxy;
  if (true /* DEBUG */) {
    wrapHashProxy = hash => {
      return new Proxy(hash, {
        set(target, key, value) {
          (true && !(false) && (0, _globalContext.deprecate)(`You set the '${String(key)}' property on a {{hash}} object. Setting properties on objects generated by {{hash}} is deprecated. Please update to use an object created with a tracked property or getter, or with a custom helper.`, false, {
            id: 'setting-on-hash'
          }));
          target[key] = value;
          return true;
        }
      });
    };
  }
  /**
     Use the `{{hash}}` helper to create a hash to pass as an option to your
     components. This is specially useful for contextual components where you can
     just yield a hash:
  
     ```handlebars
     {{yield (hash
        name='Sarah'
        title=office
     )}}
     ```
  
     Would result in an object such as:
  
     ```js
     { name: 'Sarah', title: this.get('office') }
     ```
  
     Where the `title` is bound to updates of the `office` property.
  
     Note that the hash is an empty object with no prototype chain, therefore
     common methods like `toString` are not available in the resulting hash.
     If you need to use such a method, you can use the `call` or `apply`
     approach:
  
     ```js
     function toString(obj) {
       return Object.prototype.toString.apply(obj);
     }
     ```
  
     @method hash
     @param {Object} options
     @return {Object} Hash
     @public
   */

  var hash = _exports.hash = internalHelper(({
    named
  }) => {
    var ref = (0, _reference.createComputeRef)(() => {
      var hash = (0, _runtime.reifyNamed)(named);
      if (true /* DEBUG */ && _util.HAS_NATIVE_PROXY) {
        hash = wrapHashProxy(hash);
      }
      return hash;
    }, null, 'hash'); // Setup the children so that templates can bypass getting the value of
    // the reference and treat children lazily

    var children = new Map();
    for (var name in named) {
      children.set(name, named[name]);
    }
    ref.children = children;
    return ref;
  });

  /**
     Use the `{{array}}` helper to create an array to pass as an option to your
     components.
  
     ```handlebars
     <MyComponent @people={{array
       'Tom Dale'
       'Yehuda Katz'
       this.myOtherPerson}}
     />
     ```
      or
     ```handlebars
     {{my-component people=(array
       'Tom Dale'
       'Yehuda Katz'
       this.myOtherPerson)
     }}
     ```
  
     Would result in an object such as:
  
     ```js
     ['Tom Dale', 'Yehuda Katz', this.get('myOtherPerson')]
     ```
  
     Where the 3rd item in the array is bound to updates of the `myOtherPerson` property.
  
     @method array
     @param {Array} options
     @return {Array} Array
     @public
   */

  var array = _exports.array = internalHelper(({
    positional
  }) => {
    return (0, _reference.createComputeRef)(() => (0, _runtime.reifyPositional)(positional), null, 'array');
  });

  /**
    Dynamically look up a property on an object. The second argument to `{{get}}`
    should have a string value, although it can be bound.
  
    For example, these two usages are equivalent:
  
    ```app/components/developer-detail.js
    import Component from '@glimmer/component';
    import { tracked } from '@glimmer/tracking';
  
    export default class extends Component {
      @tracked developer = {
        name: "Sandi Metz",
        language: "Ruby"
      }
    }
    ```
  
    ```handlebars
    {{this.developer.name}}
    {{get this.developer "name"}}
    ```
  
    If there were several facts about a person, the `{{get}}` helper can dynamically
    pick one:
  
    ```app/templates/application.hbs
    <DeveloperDetail @factName="language" />
    ```
  
    ```handlebars
    {{get this.developer @factName}}
    ```
  
    For a more complex example, this template would allow the user to switch
    between showing the user's height and weight with a click:
  
    ```app/components/developer-detail.js
    import Component from '@glimmer/component';
    import { tracked } from '@glimmer/tracking';
  
    export default class extends Component {
      @tracked developer = {
        name: "Sandi Metz",
        language: "Ruby"
      }
  
      @tracked currentFact = 'name'
  
      showFact = (fact) => {
        this.currentFact = fact;
      }
    }
    ```
  
    ```app/components/developer-detail.js
    {{get this.developer this.currentFact}}
  
    <button {{on 'click' (fn this.showFact "name")}}>Show name</button>
    <button {{on 'click' (fn this.showFact "language")}}>Show language</button>
    ```
  
    The `{{get}}` helper can also respect mutable values itself. For example:
  
    ```app/components/developer-detail.js
    <Input @value={{mut (get this.person this.currentFact)}} />
  
    <button {{on 'click' (fn this.showFact "name")}}>Show name</button>
    <button {{on 'click' (fn this.showFact "language")}}>Show language</button>
    ```
  
    Would allow the user to swap what fact is being displayed, and also edit
    that fact via a two-way mutable binding.
  
    @public
    @method get
   */

  var get = _exports.get = internalHelper(({
    positional
  }) => {
    var _a, _b;
    var sourceRef = (_a = positional[0]) !== null && _a !== void 0 ? _a : _reference.UNDEFINED_REFERENCE;
    var pathRef = (_b = positional[1]) !== null && _b !== void 0 ? _b : _reference.UNDEFINED_REFERENCE;
    return (0, _reference.createComputeRef)(() => {
      var source = (0, _reference.valueForRef)(sourceRef);
      if ((0, _util.isDict)(source)) {
        return (0, _globalContext.getPath)(source, String((0, _reference.valueForRef)(pathRef)));
      }
    }, value => {
      var source = (0, _reference.valueForRef)(sourceRef);
      if ((0, _util.isDict)(source)) {
        return (0, _globalContext.setPath)(source, String((0, _reference.valueForRef)(pathRef)), value);
      }
    }, 'get');
  });
  var isEmpty$2 = value => {
    return value === null || value === undefined || typeof value.toString !== 'function';
  };
  var normalizeTextValue = value => {
    if (isEmpty$2(value)) {
      return '';
    }
    return String(value);
  };
  /**
    Concatenates the given arguments into a string.
  
    Example:
  
    ```handlebars
    {{some-component name=(concat firstName " " lastName)}}
  
    {{! would pass name="<first name value> <last name value>" to the component}}
    ```
  
    or for angle bracket invocation, you actually don't need concat at all.
  
    ```handlebars
    <SomeComponent @name="{{firstName}} {{lastName}}" />
    ```
  
    @public
    @method concat
  */

  var concat = _exports.concat = internalHelper(({
    positional
  }) => {
    return (0, _reference.createComputeRef)(() => (0, _runtime.reifyPositional)(positional).map(normalizeTextValue).join(''), null, 'concat');
  });
  var untouchableContext = (0, _util.buildUntouchableThis)('`on` modifier');
  /*
    Internet Explorer 11 does not support `once` and also does not support
    passing `eventOptions`. In some situations it then throws a weird script
    error, like:
  
    ```
    Could not complete the operation due to error 80020101
    ```
  
    This flag determines, whether `{ once: true }` and thus also event options in
    general are supported.
  */

  var SUPPORTS_EVENT_OPTIONS = (() => {
    try {
      var div = document.createElement('div');
      var counter = 0;
      div.addEventListener('click', () => counter++, {
        once: true
      });
      var event;
      if (typeof Event === 'function') {
        event = new Event('click');
      } else {
        event = document.createEvent('Event');
        event.initEvent('click', true, true);
      }
      div.dispatchEvent(event);
      div.dispatchEvent(event);
      return counter === 1;
    } catch (error) {
      return false;
    }
  })();
  class OnModifierState {
    constructor(element, args) {
      this.tag = (0, _validator.createUpdatableTag)();
      this.shouldUpdate = true;
      this.element = element;
      this.args = args;
    }
    updateFromArgs() {
      var {
        args
      } = this;
      var {
        once,
        passive,
        capture
      } = (0, _runtime.reifyNamed)(args.named);
      if (once !== this.once) {
        this.once = once;
        this.shouldUpdate = true;
      }
      if (passive !== this.passive) {
        this.passive = passive;
        this.shouldUpdate = true;
      }
      if (capture !== this.capture) {
        this.capture = capture;
        this.shouldUpdate = true;
      }
      var options;
      if (once || passive || capture) {
        options = this.options = {
          once,
          passive,
          capture
        };
      } else {
        this.options = undefined;
      }
      if (true /* DEBUG */ && (args.positional[0] === undefined || typeof (0, _reference.valueForRef)(args.positional[0]) !== 'string')) {
        throw new Error('You must pass a valid DOM event name as the first argument to the `on` modifier');
      }
      var eventName = (0, _reference.valueForRef)(args.positional[0]);
      if (eventName !== this.eventName) {
        this.eventName = eventName;
        this.shouldUpdate = true;
      }
      var userProvidedCallbackReference = args.positional[1];
      if (true /* DEBUG */) {
        if (args.positional[1] === undefined) {
          throw new Error(`You must pass a function as the second argument to the \`on\` modifier.`);
        }
        var value = (0, _reference.valueForRef)(userProvidedCallbackReference);
        if (typeof value !== 'function') {
          throw new Error(`You must pass a function as the second argument to the \`on\` modifier; you passed ${value === null ? 'null' : typeof value}. While rendering:\n\n${userProvidedCallbackReference.debugLabel}`);
        }
      }
      var userProvidedCallback = (0, _reference.valueForRef)(userProvidedCallbackReference);
      if (userProvidedCallback !== this.userProvidedCallback) {
        this.userProvidedCallback = userProvidedCallback;
        this.shouldUpdate = true;
      }
      if (true /* DEBUG */ && args.positional.length !== 2) {
        throw new Error(`You can only pass two positional arguments (event name and callback) to the \`on\` modifier, but you provided ${args.positional.length}. Consider using the \`fn\` helper to provide additional arguments to the \`on\` callback.`);
      }
      var needsCustomCallback = SUPPORTS_EVENT_OPTIONS === false && once || /* needs manual once implementation */
      true /* DEBUG */ && passive;
      /* needs passive enforcement */

      if (this.shouldUpdate) {
        if (needsCustomCallback) {
          var _callback = this.callback = function (event) {
            if (true /* DEBUG */ && passive) {
              event.preventDefault = () => {
                throw new Error(`You marked this listener as 'passive', meaning that you must not call 'event.preventDefault()': \n\n${userProvidedCallback}`);
              };
            }
            if (!SUPPORTS_EVENT_OPTIONS && once) {
              removeEventListener(this, eventName, _callback, options);
            }
            return userProvidedCallback.call(untouchableContext, event);
          };
        } else if (true /* DEBUG */) {
          // prevent the callback from being bound to the element
          this.callback = userProvidedCallback.bind(untouchableContext);
        } else {
          this.callback = userProvidedCallback;
        }
      }
    }
  }
  var adds = 0;
  var removes = 0;
  function removeEventListener(element, eventName, callback, options) {
    removes++;
    if (SUPPORTS_EVENT_OPTIONS) {
      // when options are supported, use them across the board
      element.removeEventListener(eventName, callback, options);
    } else if (options !== undefined && options.capture) {
      // used only in the following case:
      //
      // `{ once: true | false, passive: true | false, capture: true }
      //
      // `once` is handled via a custom callback that removes after first
      // invocation so we only care about capture here as a boolean
      element.removeEventListener(eventName, callback, true);
    } else {
      // used only in the following cases:
      //
      // * where there is no options
      // * `{ once: true | false, passive: true | false, capture: false }
      element.removeEventListener(eventName, callback);
    }
  }
  function addEventListener(element, eventName, callback, options) {
    adds++;
    if (SUPPORTS_EVENT_OPTIONS) {
      // when options are supported, use them across the board
      element.addEventListener(eventName, callback, options);
    } else if (options !== undefined && options.capture) {
      // used only in the following case:
      //
      // `{ once: true | false, passive: true | false, capture: true }
      //
      // `once` is handled via a custom callback that removes after first
      // invocation so we only care about capture here as a boolean
      element.addEventListener(eventName, callback, true);
    } else {
      // used only in the following cases:
      //
      // * where there is no options
      // * `{ once: true | false, passive: true | false, capture: false }
      element.addEventListener(eventName, callback);
    }
  }
  /**
    The `{{on}}` modifier lets you easily add event listeners (it uses
    [EventTarget.addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)
    internally).
  
    For example, if you'd like to run a function on your component when a `<button>`
    in the components template is clicked you might do something like:
  
    ```app/components/like-post.hbs
    <button {{on 'click' this.saveLike}}>Like this post!</button>
    ```
  
    ```app/components/like-post.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';
  
    export default class LikePostComponent extends Component {
      saveLike = () => {
        // someone likes your post!
        // better send a request off to your server...
      }
    }
    ```
  
    ### Arguments
  
    `{{on}}` accepts two positional arguments, and a few named arguments.
  
    The positional arguments are:
  
    - `event` -- the name to use when calling `addEventListener`
    - `callback` -- the function to be passed to `addEventListener`
  
    The named arguments are:
  
    - capture -- a `true` value indicates that events of this type will be dispatched
      to the registered listener before being dispatched to any EventTarget beneath it
      in the DOM tree.
    - once -- indicates that the listener should be invoked at most once after being
      added. If true, the listener would be automatically removed when invoked.
    - passive -- if `true`, indicates that the function specified by listener will never
      call preventDefault(). If a passive listener does call preventDefault(), the user
      agent will do nothing other than generate a console warning. See
      [Improving scrolling performance with passive listeners](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Improving_scrolling_performance_with_passive_listeners)
      to learn more.
  
    The callback function passed to `{{on}}` will receive any arguments that are passed
    to the event handler. Most commonly this would be the `event` itself.
  
    If you would like to pass additional arguments to the function you should use
    the `{{fn}}` helper.
  
    For example, in our example case above if you'd like to pass in the post that
    was being liked when the button is clicked you could do something like:
  
    ```app/components/like-post.hbs
    <button {{on 'click' (fn this.saveLike @post)}}>Like this post!</button>
    ```
  
    In this case, the `saveLike` function will receive two arguments: the click event
    and the value of `@post`.
  
    ### Function Context
  
    In the example above, we used an arrow function to ensure that `likePost` is
    properly bound to the `items-list`, but let's explore what happens if we
    left out the arrow function:
  
    ```app/components/like-post.js
    import Component from '@glimmer/component';
  
    export default class LikePostComponent extends Component {
      saveLike() {
        // ...snip...
      }
    }
    ```
  
    In this example, when the button is clicked `saveLike` will be invoked,
    it will **not** have access to the component instance. In other
    words, it will have no `this` context, so please make sure your functions
    are bound (via an arrow function or other means) before passing into `on`!
  
    @method on
    @public
  */

  class OnModifierManager {
    constructor() {
      this.SUPPORTS_EVENT_OPTIONS = SUPPORTS_EVENT_OPTIONS;
    }
    getDebugName() {
      return 'on';
    }
    get counters() {
      return {
        adds,
        removes
      };
    }
    create(_owner, element, _state, args) {
      return new OnModifierState(element, args);
    }
    getTag(state) {
      if (state === null) {
        return null;
      }
      return state.tag;
    }
    install(state) {
      if (state === null) {
        return;
      }
      state.updateFromArgs();
      var {
        element,
        eventName,
        callback,
        options
      } = state;
      addEventListener(element, eventName, callback, options);
      (0, _destroyable2.registerDestructor)(state, () => removeEventListener(element, eventName, callback, options));
      state.shouldUpdate = false;
    }
    update(state) {
      if (state === null) {
        return;
      } // stash prior state for el.removeEventListener

      var {
        element,
        eventName,
        callback,
        options
      } = state;
      state.updateFromArgs();
      if (!state.shouldUpdate) {
        return;
      } // use prior state values for removal

      removeEventListener(element, eventName, callback, options); // read updated values from the state object

      addEventListener(state.element, state.eventName, state.callback, state.options);
      state.shouldUpdate = false;
    }
    getDestroyable(state) {
      return state;
    }
  }
  var on = _exports.on = (0, _manager5.setInternalModifierManager)(new OnModifierManager(), {});
});
define("@glimmer/tracking/index", ["exports", "@ember/-internals/metal"], function (_exports, _metal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "cached", {
    enumerable: true,
    get: function () {
      return _metal.cached;
    }
  });
  Object.defineProperty(_exports, "tracked", {
    enumerable: true,
    get: function () {
      return _metal.tracked;
    }
  });
});
define("@glimmer/tracking/primitives/cache", ["exports", "@ember/-internals/metal"], function (_exports, _metal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "createCache", {
    enumerable: true,
    get: function () {
      return _metal.createCache;
    }
  });
  Object.defineProperty(_exports, "getValue", {
    enumerable: true,
    get: function () {
      return _metal.getValue;
    }
  });
  Object.defineProperty(_exports, "isConst", {
    enumerable: true,
    get: function () {
      return _metal.isConst;
    }
  });
});
define("@glimmer/util", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports._WeakSet = _exports.Stack = _exports.SERIALIZATION_FIRST_NODE_STRING = _exports.LOGGER = _exports.LOCAL_LOGGER = _exports.HAS_NATIVE_SYMBOL = _exports.HAS_NATIVE_PROXY = _exports.EMPTY_STRING_ARRAY = _exports.EMPTY_NUMBER_ARRAY = _exports.EMPTY_ARRAY = void 0;
  _exports.assert = debugAssert$$1;
  _exports.assertNever = assertNever;
  _exports.assertPresent = assertPresent;
  _exports.beginTestSteps = _exports.assign = void 0;
  _exports.buildUntouchableThis = buildUntouchableThis;
  _exports.castToBrowser = castToBrowser;
  _exports.castToSimple = castToSimple;
  _exports.checkNode = checkNode;
  _exports.clearElement = clearElement;
  _exports.constants = constants;
  _exports.debugToString = void 0;
  _exports.decodeHandle = decodeHandle;
  _exports.decodeImmediate = decodeImmediate;
  _exports.decodeNegative = decodeNegative;
  _exports.decodePositive = decodePositive;
  _exports.deprecate = deprecate$$1;
  _exports.dict = dict;
  _exports.emptyArray = emptyArray;
  _exports.encodeHandle = encodeHandle;
  _exports.encodeImmediate = encodeImmediate;
  _exports.encodeNegative = encodeNegative;
  _exports.encodePositive = encodePositive;
  _exports.endTestSteps = void 0;
  _exports.enumerableSymbol = enumerableSymbol;
  _exports.exhausted = exhausted;
  _exports.expect = expect;
  _exports.extractHandle = extractHandle;
  _exports.fillNulls = fillNulls;
  _exports.ifPresent = ifPresent;
  _exports.intern = intern;
  _exports.isDict = isDict;
  _exports.isEmptyArray = isEmptyArray;
  _exports.isErrHandle = isErrHandle;
  _exports.isHandle = isHandle;
  _exports.isNonPrimitiveHandle = isNonPrimitiveHandle;
  _exports.isObject = isObject;
  _exports.isOkHandle = isOkHandle;
  _exports.isPresent = isPresent;
  _exports.isSerializationFirstNode = isSerializationFirstNode;
  _exports.isSmallInt = isSmallInt;
  _exports.keys = keys;
  _exports.logStep = void 0;
  _exports.mapPresent = mapPresent;
  _exports.strip = strip;
  _exports.symbol = void 0;
  _exports.toPresentOption = toPresentOption;
  _exports.tuple = void 0;
  _exports.unreachable = unreachable;
  _exports.unwrap = unwrap;
  _exports.unwrapHandle = unwrapHandle;
  _exports.unwrapTemplate = unwrapTemplate;
  _exports.values = values;
  _exports.verifySteps = void 0;
  var EMPTY_ARRAY = _exports.EMPTY_ARRAY = Object.freeze([]);
  function emptyArray() {
    return EMPTY_ARRAY;
  }
  var EMPTY_STRING_ARRAY = _exports.EMPTY_STRING_ARRAY = emptyArray();
  var EMPTY_NUMBER_ARRAY = _exports.EMPTY_NUMBER_ARRAY = emptyArray();
  /**
   * This function returns `true` if the input array is the special empty array sentinel,
   * which is sometimes used for optimizations.
   */

  function isEmptyArray(input) {
    return input === EMPTY_ARRAY;
  }

  // import Logger from './logger';

  function debugAssert$$1(test, msg) {
    // if (!alreadyWarned) {
    //   alreadyWarned = true;
    //   Logger.warn("Don't leave debug assertions on in public builds");
    // }
    if (!test) {
      throw new Error(msg || 'assertion failure');
    }
  }
  function deprecate$$1(desc) {
    LOCAL_LOGGER.warn(`DEPRECATION: ${desc}`);
  }
  function dict() {
    return Object.create(null);
  }
  function isDict(u) {
    return u !== null && u !== undefined;
  }
  function isObject(u) {
    return typeof u === 'function' || typeof u === 'object' && u !== null;
  }
  class StackImpl {
    constructor(values = []) {
      this.current = null;
      this.stack = values;
    }
    get size() {
      return this.stack.length;
    }
    push(item) {
      this.current = item;
      this.stack.push(item);
    }
    pop() {
      var item = this.stack.pop();
      var len = this.stack.length;
      this.current = len === 0 ? null : this.stack[len - 1];
      return item === undefined ? null : item;
    }
    nth(from) {
      var len = this.stack.length;
      return len < from ? null : this.stack[len - from];
    }
    isEmpty() {
      return this.stack.length === 0;
    }
    toArray() {
      return this.stack;
    }
  }
  _exports.Stack = StackImpl;
  function clearElement(parent) {
    var current = parent.firstChild;
    while (current) {
      var next = current.nextSibling;
      parent.removeChild(current);
      current = next;
    }
  }
  var SERIALIZATION_FIRST_NODE_STRING = _exports.SERIALIZATION_FIRST_NODE_STRING = '%+b:0%';
  function isSerializationFirstNode(node) {
    return node.nodeValue === SERIALIZATION_FIRST_NODE_STRING;
  }
  var assign = _exports.assign = Object.assign;
  function fillNulls(count) {
    var arr = new Array(count);
    for (var i = 0; i < count; i++) {
      arr[i] = null;
    }
    return arr;
  }
  function values(obj) {
    var vals = [];
    for (var key in obj) {
      vals.push(obj[key]);
    }
    return vals;
  }

  /**
    Strongly hint runtimes to intern the provided string.
  
    When do I need to use this function?
  
    For the most part, never. Pre-mature optimization is bad, and often the
    runtime does exactly what you need it to, and more often the trade-off isn't
    worth it.
  
    Why?
  
    Runtimes store strings in at least 2 different representations:
    Ropes and Symbols (interned strings). The Rope provides a memory efficient
    data-structure for strings created from concatenation or some other string
    manipulation like splitting.
  
    Unfortunately checking equality of different ropes can be quite costly as
    runtimes must resort to clever string comparison algorithms. These
    algorithms typically cost in proportion to the length of the string.
    Luckily, this is where the Symbols (interned strings) shine. As Symbols are
    unique by their string content, equality checks can be done by pointer
    comparison.
  
    How do I know if my string is a rope or symbol?
  
    Typically (warning general sweeping statement, but truthy in runtimes at
    present) static strings created as part of the JS source are interned.
    Strings often used for comparisons can be interned at runtime if some
    criteria are met.  One of these criteria can be the size of the entire rope.
    For example, in chrome 38 a rope longer then 12 characters will not
    intern, nor will segments of that rope.
  
    Some numbers: http://jsperf.com/eval-vs-keys/8
  
    Known Trick™
  
    @private
    @return {String} interned version of the provided string
  */
  function intern(str) {
    var obj = {};
    obj[str] = 1;
    for (var key in obj) {
      if (key === str) {
        return key;
      }
    }
    return str;
  }
  var HAS_NATIVE_PROXY = _exports.HAS_NATIVE_PROXY = typeof Proxy === 'function';
  var HAS_NATIVE_SYMBOL = _exports.HAS_NATIVE_SYMBOL = function () {
    if (typeof Symbol !== 'function') {
      return false;
    } // eslint-disable-next-line symbol-description

    return typeof Symbol() === 'symbol';
  }();
  function keys(obj) {
    return Object.keys(obj);
  }
  function unwrap(val) {
    if (val === null || val === undefined) throw new Error(`Expected value to be present`);
    return val;
  }
  function expect(val, message) {
    if (val === null || val === undefined) throw new Error(message);
    return val;
  }
  function unreachable(message = 'unreachable') {
    return new Error(message);
  }
  function exhausted(value) {
    throw new Error(`Exhausted ${value}`);
  }
  var tuple = (...args) => args;
  _exports.tuple = tuple;
  function enumerableSymbol(key) {
    return intern(`__${key}${Math.floor(Math.random() * Date.now())}__`);
  }
  var symbol = _exports.symbol = HAS_NATIVE_SYMBOL ? Symbol : enumerableSymbol;
  function strip(strings, ...args) {
    var out = '';
    for (var i = 0; i < strings.length; i++) {
      var string = strings[i];
      var dynamic = args[i] !== undefined ? String(args[i]) : '';
      out += `${string}${dynamic}`;
    }
    var lines = out.split('\n');
    while (lines.length && lines[0].match(/^\s*$/)) {
      lines.shift();
    }
    while (lines.length && lines[lines.length - 1].match(/^\s*$/)) {
      lines.pop();
    }
    var min = Infinity;
    for (var line of lines) {
      var leading = line.match(/^\s*/)[0].length;
      min = Math.min(min, leading);
    }
    var stripped = [];
    for (var _line of lines) {
      stripped.push(_line.slice(min));
    }
    return stripped.join('\n');
  }
  function isHandle(value) {
    return value >= 0;
  }
  function isNonPrimitiveHandle(value) {
    return value > 3
    /* ENCODED_UNDEFINED_HANDLE */;
  }
  function constants(...values) {
    return [false, true, null, undefined, ...values];
  }
  function isSmallInt(value) {
    return value % 1 === 0 && value <= 536870911
    /* MAX_INT */ && value >= -536870912
    /* MIN_INT */;
  }
  function encodeNegative(num) {
    return num & -536870913
    /* SIGN_BIT */;
  }
  function decodeNegative(num) {
    return num | ~-536870913
    /* SIGN_BIT */;
  }
  function encodePositive(num) {
    return ~num;
  }
  function decodePositive(num) {
    return ~num;
  }
  function encodeHandle(num) {
    return num;
  }
  function decodeHandle(num) {
    return num;
  }
  function encodeImmediate(num) {
    num |= 0;
    return num < 0 ? encodeNegative(num) : encodePositive(num);
  }
  function decodeImmediate(num) {
    num |= 0;
    return num > -536870913
    /* SIGN_BIT */ ? decodePositive(num) : decodeNegative(num);
  } // Warm
  [1, -1].forEach(x => decodeImmediate(encodeImmediate(x)));
  function unwrapHandle(handle) {
    if (typeof handle === 'number') {
      return handle;
    } else {
      var error = handle.errors[0];
      throw new Error(`Compile Error: ${error.problem} @ ${error.span.start}..${error.span.end}`);
    }
  }
  function unwrapTemplate(template) {
    if (template.result === 'error') {
      throw new Error(`Compile Error: ${template.problem} @ ${template.span.start}..${template.span.end}`);
    }
    return template;
  }
  function extractHandle(handle) {
    if (typeof handle === 'number') {
      return handle;
    } else {
      return handle.handle;
    }
  }
  function isOkHandle(handle) {
    return typeof handle === 'number';
  }
  function isErrHandle(handle) {
    return typeof handle === 'number';
  }
  var weakSet = _exports._WeakSet = typeof WeakSet === 'function' ? WeakSet : class WeakSetPolyFill {
    constructor() {
      this._map = new WeakMap();
    }
    add(val) {
      this._map.set(val, true);
      return this;
    }
    delete(val) {
      return this._map.delete(val);
    }
    has(val) {
      return this._map.has(val);
    }
  };
  function castToSimple(node) {
    if (isDocument(node)) {
      return node;
    } else if (isElement(node)) {
      return node;
    } else {
      return node;
    }
  }
  function castToBrowser(node, sugaryCheck) {
    if (node === null || node === undefined) {
      return null;
    }
    if (typeof document === undefined) {
      throw new Error('Attempted to cast to a browser node in a non-browser context');
    }
    if (isDocument(node)) {
      return node;
    }
    if (node.ownerDocument !== document) {
      throw new Error('Attempted to cast to a browser node with a node that was not created from this document');
    }
    return checkNode(node, sugaryCheck);
  }
  function checkError(from, check) {
    return new Error(`cannot cast a ${from} into ${check}`);
  }
  function isDocument(node) {
    return node.nodeType === 9
    /* DOCUMENT_NODE */;
  }
  function isElement(node) {
    return node.nodeType === 1
    /* ELEMENT_NODE */;
  }
  function checkNode(node, check) {
    var isMatch = false;
    if (node !== null) {
      if (typeof check === 'string') {
        isMatch = stringCheckNode(node, check);
      } else if (Array.isArray(check)) {
        isMatch = check.some(c => stringCheckNode(node, c));
      } else {
        throw unreachable();
      }
    }
    if (isMatch) {
      return node;
    } else {
      throw checkError(`SimpleElement(${node})`, check);
    }
  }
  function stringCheckNode(node, check) {
    switch (check) {
      case 'NODE':
        return true;
      case 'HTML':
        return node instanceof HTMLElement;
      case 'SVG':
        return node instanceof SVGElement;
      case 'ELEMENT':
        return node instanceof Element;
      default:
        if (check.toUpperCase() === check) {
          throw new Error(`BUG: this code is missing handling for a generic node type`);
        }
        return node instanceof Element && node.tagName.toLowerCase() === check;
    }
  }
  function isPresent(list) {
    return list.length > 0;
  }
  function ifPresent(list, ifPresent, otherwise) {
    if (isPresent(list)) {
      return ifPresent(list);
    } else {
      return otherwise();
    }
  }
  function toPresentOption(list) {
    if (isPresent(list)) {
      return list;
    } else {
      return null;
    }
  }
  function assertPresent(list, message = `unexpected empty list`) {
    if (!isPresent(list)) {
      throw new Error(message);
    }
  }
  function mapPresent(list, callback) {
    if (list === null) {
      return null;
    }
    var out = [];
    for (var item of list) {
      out.push(callback(item));
    }
    return out;
  }
  function buildUntouchableThis(source) {
    var context = null;
    if (true /* DEBUG */ && HAS_NATIVE_PROXY) {
      var assertOnProperty = property => {
        throw new Error(`You accessed \`this.${String(property)}\` from a function passed to the ${source}, but the function itself was not bound to a valid \`this\` context. Consider updating to use a bound function (for instance, use an arrow function, \`() => {}\`).`);
      };
      context = new Proxy({}, {
        get(_target, property) {
          assertOnProperty(property);
        },
        set(_target, property) {
          assertOnProperty(property);
          return false;
        },
        has(_target, property) {
          assertOnProperty(property);
          return false;
        }
      });
    }
    return context;
  }
  var debugToString;
  if (true /* DEBUG */) {
    var getFunctionName = fn => {
      var functionName = fn.name;
      if (functionName === undefined) {
        var match = Function.prototype.toString.call(fn).match(/function (\w+)\s*\(/);
        functionName = match && match[1] || '';
      }
      return functionName.replace(/^bound /, '');
    };
    var getObjectName = obj => {
      var name;
      var className;
      if (obj.constructor && typeof obj.constructor === 'function') {
        className = getFunctionName(obj.constructor);
      }
      if ('toString' in obj && obj.toString !== Object.prototype.toString && obj.toString !== Function.prototype.toString) {
        name = obj.toString();
      } // If the class has a decent looking name, and the `toString` is one of the
      // default Ember toStrings, replace the constructor portion of the toString
      // with the class name. We check the length of the class name to prevent doing
      // this when the value is minified.

      if (name && name.match(/<.*:ember\d+>/) && className && className[0] !== '_' && className.length > 2 && className !== 'Class') {
        return name.replace(/<.*:/, `<${className}:`);
      }
      return name || className;
    };
    var getPrimitiveName = value => {
      return String(value);
    };
    debugToString = value => {
      if (typeof value === 'function') {
        return getFunctionName(value) || `(unknown function)`;
      } else if (typeof value === 'object' && value !== null) {
        return getObjectName(value) || `(unknown object)`;
      } else {
        return getPrimitiveName(value);
      }
    };
  }
  var debugToString$1 = _exports.debugToString = debugToString;
  var beginTestSteps;
  var endTestSteps;
  var verifySteps;
  var logStep;

  /**
   * This constant exists to make it easier to differentiate normal logs from
   * errant console.logs. LOCAL_LOGGER should only be used inside a
   * LOCAL_SHOULD_LOG check.
   *
   * It does not alleviate the need to check LOCAL_SHOULD_LOG, which is used
   * for stripping.
   */

  var LOCAL_LOGGER = _exports.LOCAL_LOGGER = console;
  /**
   * This constant exists to make it easier to differentiate normal logs from
   * errant console.logs. LOGGER can be used outside of LOCAL_SHOULD_LOG checks,
   * and is meant to be used in the rare situation where a console.* call is
   * actually appropriate.
   */

  var LOGGER = _exports.LOGGER = console;
  function assertNever(value, desc = 'unexpected unreachable branch') {
    LOGGER.log('unreachable', value);
    LOGGER.log(`${desc} :: ${JSON.stringify(value)} (${value})`);
    throw new Error(`code reached unreachable`);
  }
});
define("@glimmer/validator", ["exports", "@glimmer/global-context"], function (_exports, _globalContext) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.VolatileTag = _exports.VOLATILE_TAG = _exports.VOLATILE = _exports.INITIAL = _exports.CurrentTag = _exports.CURRENT_TAG = _exports.CONSTANT_TAG = _exports.CONSTANT = _exports.COMPUTE = _exports.ALLOW_CYCLES = void 0;
  _exports.beginTrackFrame = beginTrackFrame;
  _exports.beginTrackingTransaction = void 0;
  _exports.beginUntrackFrame = beginUntrackFrame;
  _exports.bump = bump;
  _exports.combine = void 0;
  _exports.consumeTag = consumeTag;
  _exports.createCache = createCache;
  _exports.createTag = createTag;
  _exports.createUpdatableTag = createUpdatableTag;
  _exports.dirtyTag = void 0;
  _exports.dirtyTagFor = dirtyTagFor;
  _exports.endTrackFrame = endTrackFrame;
  _exports.endTrackingTransaction = void 0;
  _exports.endUntrackFrame = endUntrackFrame;
  _exports.getValue = getValue;
  _exports.isConst = isConst;
  _exports.isConstTag = isConstTag;
  _exports.isTracking = isTracking;
  _exports.logTrackingStack = void 0;
  _exports.resetTracking = resetTracking;
  _exports.setTrackingTransactionEnv = _exports.runInTrackingTransaction = void 0;
  _exports.tagFor = tagFor;
  _exports.tagMetaFor = tagMetaFor;
  _exports.track = track;
  _exports.trackedData = trackedData;
  _exports.untrack = untrack;
  _exports.updateTag = void 0;
  _exports.validateTag = validateTag;
  _exports.valueForTag = valueForTag;
  // eslint-disable-next-line @typescript-eslint/ban-types
  function indexable(input) {
    return input;
  } // This is a duplicate utility from @glimmer/util because `@glimmer/validator`
  // should not depend on any other @glimmer packages, in order to avoid pulling
  // in types and prevent regressions in `@glimmer/tracking` (which has public types).

  var symbol = typeof Symbol !== 'undefined' ? Symbol :
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  key => `__${key}${Math.floor(Math.random() * Date.now())}__`; // eslint-disable-next-line @typescript-eslint/no-explicit-any

  var symbolFor = typeof Symbol !== 'undefined' ? Symbol.for : key => `__GLIMMER_VALIDATOR_SYMBOL_FOR_${key}`;
  function getGlobal() {
    // eslint-disable-next-line node/no-unsupported-features/es-builtins
    if (typeof globalThis !== 'undefined') return indexable(globalThis);
    if (typeof self !== 'undefined') return indexable(self);
    if (typeof window !== 'undefined') return indexable(window);
    if (typeof global !== 'undefined') return indexable(global);
    throw new Error('unable to locate global object');
  }
  function unwrap(val) {
    if (val === null || val === undefined) throw new Error(`Expected value to be present`);
    return val;
  }
  var beginTrackingTransaction;
  var endTrackingTransaction;
  var runInTrackingTransaction;
  var resetTrackingTransaction;
  var setTrackingTransactionEnv;
  var assertTagNotConsumed;
  var markTagAsConsumed;
  var logTrackingStack;
  if (true /* DEBUG */) {
    var CONSUMED_TAGS = null;
    var TRANSACTION_STACK = []; /////////

    var TRANSACTION_ENV = {
      debugMessage(obj, keyName) {
        var objName;
        if (typeof obj === 'function') {
          objName = obj.name;
        } else if (typeof obj === 'object' && obj !== null) {
          var className = obj.constructor && obj.constructor.name || '(unknown class)';
          objName = `(an instance of ${className})`;
        } else if (obj === undefined) {
          objName = '(an unknown tag)';
        } else {
          objName = String(obj);
        }
        var dirtyString = keyName ? `\`${keyName}\` on \`${objName}\`` : `\`${objName}\``;
        return `You attempted to update ${dirtyString}, but it had already been used previously in the same computation.  Attempting to update a value after using it in a computation can cause logical errors, infinite revalidation bugs, and performance issues, and is not supported.`;
      }
    };
    _exports.setTrackingTransactionEnv = setTrackingTransactionEnv = env => Object.assign(TRANSACTION_ENV, env);
    _exports.beginTrackingTransaction = beginTrackingTransaction = _debugLabel => {
      CONSUMED_TAGS = CONSUMED_TAGS || new WeakMap();
      var debugLabel = _debugLabel || undefined;
      var parent = TRANSACTION_STACK[TRANSACTION_STACK.length - 1] || null;
      TRANSACTION_STACK.push({
        parent,
        debugLabel
      });
    };
    _exports.endTrackingTransaction = endTrackingTransaction = () => {
      if (TRANSACTION_STACK.length === 0) {
        throw new Error('attempted to close a tracking transaction, but one was not open');
      }
      TRANSACTION_STACK.pop();
      if (TRANSACTION_STACK.length === 0) {
        CONSUMED_TAGS = null;
      }
    };
    resetTrackingTransaction = () => {
      var stack = '';
      if (TRANSACTION_STACK.length > 0) {
        stack = logTrackingStack(TRANSACTION_STACK[TRANSACTION_STACK.length - 1]);
      }
      TRANSACTION_STACK = [];
      CONSUMED_TAGS = null;
      return stack;
    };
    /**
     * Creates a global autotracking transaction. This will prevent any backflow
     * in any `track` calls within the transaction, even if they are not
     * externally consumed.
     *
     * `runInAutotrackingTransaction` can be called within itself, and it will add
     * onto the existing transaction if one exists.
     *
     * TODO: Only throw an error if the `track` is consumed.
     */

    _exports.runInTrackingTransaction = runInTrackingTransaction = (fn, debugLabel) => {
      beginTrackingTransaction(debugLabel);
      var didError = true;
      try {
        var value = fn();
        didError = false;
        return value;
      } finally {
        if (didError !== true) {
          endTrackingTransaction();
        }
      }
    };
    var nthIndex = (str, pattern, n, startingPos = -1) => {
      var i = startingPos;
      while (n-- > 0 && i++ < str.length) {
        i = str.indexOf(pattern, i);
        if (i < 0) break;
      }
      return i;
    };
    var makeTrackingErrorMessage = (transaction, obj, keyName) => {
      var message = [TRANSACTION_ENV.debugMessage(obj, keyName && String(keyName))];
      message.push(`\`${String(keyName)}\` was first used:`);
      message.push(logTrackingStack(transaction));
      message.push(`Stack trace for the update:`);
      return message.join('\n\n');
    };
    _exports.logTrackingStack = logTrackingStack = transaction => {
      var trackingStack = [];
      var current = transaction || TRANSACTION_STACK[TRANSACTION_STACK.length - 1];
      if (current === undefined) return '';
      while (current) {
        if (current.debugLabel) {
          trackingStack.unshift(current.debugLabel);
        }
        current = current.parent;
      } // TODO: Use String.prototype.repeat here once we can drop support for IE11

      return trackingStack.map((label, index) => Array(2 * index + 1).join(' ') + label).join('\n');
    };
    markTagAsConsumed = _tag => {
      if (!CONSUMED_TAGS || CONSUMED_TAGS.has(_tag)) return;
      CONSUMED_TAGS.set(_tag, TRANSACTION_STACK[TRANSACTION_STACK.length - 1]); // We need to mark the tag and all of its subtags as consumed, so we need to
      // cast it and access its internals. In the future this shouldn't be necessary,
      // this is only for computed properties.

      var tag = _tag;
      if (tag.subtag) {
        markTagAsConsumed(tag.subtag);
      }
      if (tag.subtags) {
        tag.subtags.forEach(tag => markTagAsConsumed(tag));
      }
    };
    assertTagNotConsumed = (tag, obj, keyName) => {
      if (CONSUMED_TAGS === null) return;
      var transaction = CONSUMED_TAGS.get(tag);
      if (!transaction) return; // This hack makes the assertion message nicer, we can cut off the first
      // few lines of the stack trace and let users know where the actual error
      // occurred.

      try {
        (true && (0, _globalContext.assert)(false, makeTrackingErrorMessage(transaction, obj, keyName)));
      } catch (e) {
        if (e.stack) {
          var updateStackBegin = e.stack.indexOf('Stack trace for the update:');
          if (updateStackBegin !== -1) {
            var start = nthIndex(e.stack, '\n', 1, updateStackBegin);
            var end = nthIndex(e.stack, '\n', 4, updateStackBegin);
            e.stack = e.stack.substr(0, start) + e.stack.substr(end);
          }
        }
        throw e;
      }
    };
  }
  var CONSTANT = _exports.CONSTANT = 0;
  var INITIAL = _exports.INITIAL = 1;
  var VOLATILE = _exports.VOLATILE = NaN;
  var $REVISION = INITIAL;
  function bump() {
    $REVISION++;
  } //////////

  var COMPUTE = _exports.COMPUTE = symbol('TAG_COMPUTE'); //////////

  /**
   * `value` receives a tag and returns an opaque Revision based on that tag. This
   * snapshot can then later be passed to `validate` with the same tag to
   * determine if the tag has changed at all since the time that `value` was
   * called.
   *
   * @param tag
   */

  function valueForTag(tag) {
    return tag[COMPUTE]();
  }
  /**
   * `validate` receives a tag and a snapshot from a previous call to `value` with
   * the same tag, and determines if the tag is still valid compared to the
   * snapshot. If the tag's state has changed at all since then, `validate` will
   * return false, otherwise it will return true. This is used to determine if a
   * calculation related to the tags should be rerun.
   *
   * @param tag
   * @param snapshot
   */

  function validateTag(tag, snapshot) {
    return snapshot >= tag[COMPUTE]();
  }
  var TYPE = symbol('TAG_TYPE'); // this is basically a const
  // eslint-disable-next-line @typescript-eslint/naming-convention

  var ALLOW_CYCLES;
  if (true /* DEBUG */) {
    _exports.ALLOW_CYCLES = ALLOW_CYCLES = new WeakMap();
  }
  function allowsCycles(tag) {
    if (ALLOW_CYCLES === undefined) {
      return true;
    } else {
      return ALLOW_CYCLES.has(tag);
    }
  }
  class MonomorphicTagImpl {
    constructor(type) {
      this.revision = INITIAL;
      this.lastChecked = INITIAL;
      this.lastValue = INITIAL;
      this.isUpdating = false;
      this.subtag = null;
      this.subtagBufferCache = null;
      this[TYPE] = type;
    }
    static combine(tags) {
      switch (tags.length) {
        case 0:
          return CONSTANT_TAG;
        case 1:
          return tags[0];
        default:
          var tag = new MonomorphicTagImpl(2
          /* Combinator */);
          tag.subtag = tags;
          return tag;
      }
    }
    [COMPUTE]() {
      var {
        lastChecked
      } = this;
      if (this.isUpdating === true) {
        if (true /* DEBUG */ && !allowsCycles(this)) {
          throw new Error('Cycles in tags are not allowed');
        }
        this.lastChecked = ++$REVISION;
      } else if (lastChecked !== $REVISION) {
        this.isUpdating = true;
        this.lastChecked = $REVISION;
        try {
          var {
            subtag,
            revision
          } = this;
          if (subtag !== null) {
            if (Array.isArray(subtag)) {
              for (var i = 0; i < subtag.length; i++) {
                var value = subtag[i][COMPUTE]();
                revision = Math.max(value, revision);
              }
            } else {
              var subtagValue = subtag[COMPUTE]();
              if (subtagValue === this.subtagBufferCache) {
                revision = Math.max(revision, this.lastValue);
              } else {
                // Clear the temporary buffer cache
                this.subtagBufferCache = null;
                revision = Math.max(revision, subtagValue);
              }
            }
          }
          this.lastValue = revision;
        } finally {
          this.isUpdating = false;
        }
      }
      return this.lastValue;
    }
    static updateTag(_tag, _subtag) {
      if (true /* DEBUG */ && _tag[TYPE] !== 1
      /* Updatable */) {
        throw new Error('Attempted to update a tag that was not updatable');
      } // TODO: TS 3.7 should allow us to do this via assertion

      var tag = _tag;
      var subtag = _subtag;
      if (subtag === CONSTANT_TAG) {
        tag.subtag = null;
      } else {
        // There are two different possibilities when updating a subtag:
        //
        // 1. subtag[COMPUTE]() <= tag[COMPUTE]();
        // 2. subtag[COMPUTE]() > tag[COMPUTE]();
        //
        // The first possibility is completely fine within our caching model, but
        // the second possibility presents a problem. If the parent tag has
        // already been read, then it's value is cached and will not update to
        // reflect the subtag's greater value. Next time the cache is busted, the
        // subtag's value _will_ be read, and it's value will be _greater_ than
        // the saved snapshot of the parent, causing the resulting calculation to
        // be rerun erroneously.
        //
        // In order to prevent this, when we first update to a new subtag we store
        // its computed value, and then check against that computed value on
        // subsequent updates. If its value hasn't changed, then we return the
        // parent's previous value. Once the subtag changes for the first time,
        // we clear the cache and everything is finally in sync with the parent.
        tag.subtagBufferCache = subtag[COMPUTE]();
        tag.subtag = subtag;
      }
    }
    static dirtyTag(tag, disableConsumptionAssertion) {
      if (true /* DEBUG */ && !(tag[TYPE] === 1
      /* Updatable */ || tag[TYPE] === 0
      /* Dirtyable */)) {
        throw new Error('Attempted to dirty a tag that was not dirtyable');
      }
      if (true /* DEBUG */ && disableConsumptionAssertion !== true) {
        // Usually by this point, we've already asserted with better error information,
        // but this is our last line of defense.
        unwrap(assertTagNotConsumed)(tag);
      }
      tag.revision = ++$REVISION;
      (0, _globalContext.scheduleRevalidate)();
    }
  }
  var DIRTY_TAG = _exports.dirtyTag = MonomorphicTagImpl.dirtyTag;
  var UPDATE_TAG = _exports.updateTag = MonomorphicTagImpl.updateTag; //////////

  function createTag() {
    return new MonomorphicTagImpl(0
    /* Dirtyable */);
  }
  function createUpdatableTag() {
    return new MonomorphicTagImpl(1
    /* Updatable */);
  } //////////

  var CONSTANT_TAG = _exports.CONSTANT_TAG = new MonomorphicTagImpl(3
  /* Constant */);
  function isConstTag(tag) {
    return tag === CONSTANT_TAG;
  } //////////

  class VolatileTag {
    [COMPUTE]() {
      return VOLATILE;
    }
  }
  _exports.VolatileTag = VolatileTag;
  var VOLATILE_TAG = _exports.VOLATILE_TAG = new VolatileTag(); //////////

  class CurrentTag {
    [COMPUTE]() {
      return $REVISION;
    }
  }
  _exports.CurrentTag = CurrentTag;
  var CURRENT_TAG = _exports.CURRENT_TAG = new CurrentTag(); //////////

  var combine = _exports.combine = MonomorphicTagImpl.combine; // Warm

  var tag1 = createUpdatableTag();
  var tag2 = createUpdatableTag();
  var tag3 = createUpdatableTag();
  valueForTag(tag1);
  DIRTY_TAG(tag1);
  valueForTag(tag1);
  UPDATE_TAG(tag1, combine([tag2, tag3]));
  valueForTag(tag1);
  DIRTY_TAG(tag2);
  valueForTag(tag1);
  DIRTY_TAG(tag3);
  valueForTag(tag1);
  UPDATE_TAG(tag1, tag3);
  valueForTag(tag1);
  DIRTY_TAG(tag3);
  valueForTag(tag1);
  function isObjectLike(u) {
    return typeof u === 'object' && u !== null || typeof u === 'function';
  }
  var TRACKED_TAGS = new WeakMap();
  function dirtyTagFor(obj, key, meta) {
    if (true /* DEBUG */ && !isObjectLike(obj)) {
      throw new Error(`BUG: Can't update a tag for a primitive`);
    }
    var tags = meta === undefined ? TRACKED_TAGS.get(obj) : meta; // No tags have been setup for this object yet, return

    if (tags === undefined) return; // Dirty the tag for the specific property if it exists

    var propertyTag = tags.get(key);
    if (propertyTag !== undefined) {
      if (true /* DEBUG */) {
        unwrap(assertTagNotConsumed)(propertyTag, obj, key);
      }
      DIRTY_TAG(propertyTag, true);
    }
  }
  function tagMetaFor(obj) {
    var tags = TRACKED_TAGS.get(obj);
    if (tags === undefined) {
      tags = new Map();
      TRACKED_TAGS.set(obj, tags);
    }
    return tags;
  }
  function tagFor(obj, key, meta) {
    var tags = meta === undefined ? tagMetaFor(obj) : meta;
    var tag = tags.get(key);
    if (tag === undefined) {
      tag = createUpdatableTag();
      tags.set(key, tag);
    }
    return tag;
  }

  /**
   * An object that that tracks @tracked properties that were consumed.
   */

  class Tracker {
    constructor() {
      this.tags = new Set();
      this.last = null;
    }
    add(tag) {
      if (tag === CONSTANT_TAG) return;
      this.tags.add(tag);
      if (true /* DEBUG */) {
        unwrap(markTagAsConsumed)(tag);
      }
      this.last = tag;
    }
    combine() {
      var {
        tags
      } = this;
      if (tags.size === 0) {
        return CONSTANT_TAG;
      } else if (tags.size === 1) {
        return this.last;
      } else {
        var tagsArr = [];
        tags.forEach(tag => tagsArr.push(tag));
        return combine(tagsArr);
      }
    }
  }
  /**
   * Whenever a tracked computed property is entered, the current tracker is
   * saved off and a new tracker is replaced.
   *
   * Any tracked properties consumed are added to the current tracker.
   *
   * When a tracked computed property is exited, the tracker's tags are
   * combined and added to the parent tracker.
   *
   * The consequence is that each tracked computed property has a tag
   * that corresponds to the tracked properties consumed inside of
   * itself, including child tracked computed properties.
   */

  var CURRENT_TRACKER = null;
  var OPEN_TRACK_FRAMES = [];
  function beginTrackFrame(debuggingContext) {
    OPEN_TRACK_FRAMES.push(CURRENT_TRACKER);
    CURRENT_TRACKER = new Tracker();
    if (true /* DEBUG */) {
      unwrap(beginTrackingTransaction)(debuggingContext);
    }
  }
  function endTrackFrame() {
    var current = CURRENT_TRACKER;
    if (true /* DEBUG */) {
      if (OPEN_TRACK_FRAMES.length === 0) {
        throw new Error('attempted to close a tracking frame, but one was not open');
      }
      unwrap(endTrackingTransaction)();
    }
    CURRENT_TRACKER = OPEN_TRACK_FRAMES.pop() || null;
    return unwrap(current).combine();
  }
  function beginUntrackFrame() {
    OPEN_TRACK_FRAMES.push(CURRENT_TRACKER);
    CURRENT_TRACKER = null;
  }
  function endUntrackFrame() {
    if (true /* DEBUG */ && OPEN_TRACK_FRAMES.length === 0) {
      throw new Error('attempted to close a tracking frame, but one was not open');
    }
    CURRENT_TRACKER = OPEN_TRACK_FRAMES.pop() || null;
  } // This function is only for handling errors and resetting to a valid state

  function resetTracking() {
    while (OPEN_TRACK_FRAMES.length > 0) {
      OPEN_TRACK_FRAMES.pop();
    }
    CURRENT_TRACKER = null;
    if (true /* DEBUG */) {
      return unwrap(resetTrackingTransaction)();
    }
  }
  function isTracking() {
    return CURRENT_TRACKER !== null;
  }
  function consumeTag(tag) {
    if (CURRENT_TRACKER !== null) {
      CURRENT_TRACKER.add(tag);
    }
  } //////////
  var FN = symbol('FN');
  var LAST_VALUE = symbol('LAST_VALUE');
  var TAG = symbol('TAG');
  var SNAPSHOT = symbol('SNAPSHOT');
  var DEBUG_LABEL = symbol('DEBUG_LABEL');
  function createCache(fn, debuggingLabel) {
    if (true /* DEBUG */ && !(typeof fn === 'function')) {
      throw new Error(`createCache() must be passed a function as its first parameter. Called with: ${String(fn)}`);
    }
    var cache = {
      [FN]: fn,
      [LAST_VALUE]: undefined,
      [TAG]: undefined,
      [SNAPSHOT]: -1
    };
    if (true /* DEBUG */) {
      cache[DEBUG_LABEL] = debuggingLabel;
    }
    return cache;
  }
  function getValue(cache) {
    assertCache(cache, 'getValue');
    var fn = cache[FN];
    var tag = cache[TAG];
    var snapshot = cache[SNAPSHOT];
    if (tag === undefined || !validateTag(tag, snapshot)) {
      beginTrackFrame();
      try {
        cache[LAST_VALUE] = fn();
      } finally {
        tag = endTrackFrame();
        cache[TAG] = tag;
        cache[SNAPSHOT] = valueForTag(tag);
        consumeTag(tag);
      }
    } else {
      consumeTag(tag);
    }
    return cache[LAST_VALUE];
  }
  function isConst(cache) {
    assertCache(cache, 'isConst');
    var tag = cache[TAG];
    assertTag(tag, cache);
    return isConstTag(tag);
  }
  function assertCache(value, fnName) {
    if (true /* DEBUG */ && !(typeof value === 'object' && value !== null && FN in value)) {
      throw new Error(`${fnName}() can only be used on an instance of a cache created with createCache(). Called with: ${String(value)}`);
    }
  } // replace this with `expect` when we can

  function assertTag(tag, cache) {
    if (true /* DEBUG */ && tag === undefined) {
      throw new Error(`isConst() can only be used on a cache once getValue() has been called at least once. Called with cache function:\n\n${String(cache[FN])}`);
    }
  } //////////
  // Legacy tracking APIs
  // track() shouldn't be necessary at all in the VM once the autotracking
  // refactors are merged, and we should generally be moving away from it. It may
  // be necessary in Ember for a while longer, but I think we'll be able to drop
  // it in favor of cache sooner rather than later.

  function track(callback, debugLabel) {
    beginTrackFrame(debugLabel);
    var tag;
    try {
      callback();
    } finally {
      tag = endTrackFrame();
    }
    return tag;
  } // untrack() is currently mainly used to handle places that were previously not
  // tracked, and that tracking now would cause backtracking rerender assertions.
  // I think once we move everyone forward onto modern APIs, we'll probably be
  // able to remove it, but I'm not sure yet.

  function untrack(callback) {
    beginUntrackFrame();
    try {
      return callback();
    } finally {
      endUntrackFrame();
    }
  }
  function trackedData(key, initializer) {
    var values = new WeakMap();
    var hasInitializer = typeof initializer === 'function';
    function getter(self) {
      consumeTag(tagFor(self, key));
      var value; // If the field has never been initialized, we should initialize it

      if (hasInitializer && !values.has(self)) {
        value = initializer.call(self);
        values.set(self, value);
      } else {
        value = values.get(self);
      }
      return value;
    }
    function setter(self, value) {
      dirtyTagFor(self, key);
      values.set(self, value);
    }
    return {
      getter,
      setter
    };
  }
  var GLIMMER_VALIDATOR_REGISTRATION = symbolFor('GLIMMER_VALIDATOR_REGISTRATION');
  var globalObj = getGlobal();
  if (globalObj[GLIMMER_VALIDATOR_REGISTRATION] === true) {
    throw new Error('The `@glimmer/validator` library has been included twice in this application. It could be different versions of the package, or the same version included twice by mistake. `@glimmer/validator` depends on having a single copy of the package in use at any time in an application, even if they are the same version. You must dedupe your build to remove the duplicate packages in order to prevent this error.');
  }
  globalObj[GLIMMER_VALIDATOR_REGISTRATION] = true;
});
define("@glimmer/vm", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TemporaryRegister = _exports.SavedRegister = _exports.$v0 = _exports.$t1 = _exports.$t0 = _exports.$sp = _exports.$s1 = _exports.$s0 = _exports.$ra = _exports.$pc = _exports.$fp = void 0;
  _exports.isLowLevelRegister = isLowLevelRegister;
  _exports.isMachineOp = isMachineOp;
  _exports.isOp = isOp;
  /* This file is generated by build/debug.js */
  function isMachineOp(value) {
    return value >= 0 && value <= 15;
  }
  function isOp(value) {
    return value >= 16;
  }

  /**
   * Registers
   *
   * For the most part, these follows MIPS naming conventions, however the
   * register numbers are different.
   */
  // $0 or $pc (program counter): pointer into `program` for the next insturction; -1 means exit
  var $pc = _exports.$pc = 0; // $1 or $ra (return address): pointer into `program` for the return

  var $ra = _exports.$ra = 1; // $2 or $fp (frame pointer): pointer into the `evalStack` for the base of the stack

  var $fp = _exports.$fp = 2; // $3 or $sp (stack pointer): pointer into the `evalStack` for the top of the stack

  var $sp = _exports.$sp = 3; // $4-$5 or $s0-$s1 (saved): callee saved general-purpose registers

  var $s0 = _exports.$s0 = 4;
  var $s1 = _exports.$s1 = 5; // $6-$7 or $t0-$t1 (temporaries): caller saved general-purpose registers

  var $t0 = _exports.$t0 = 6;
  var $t1 = _exports.$t1 = 7; // $8 or $v0 (return value)

  var $v0 = _exports.$v0 = 8;
  function isLowLevelRegister(register) {
    return register <= $sp;
  }
  var SavedRegister;
  (function (SavedRegister) {
    SavedRegister[SavedRegister["s0"] = 4] = "s0";
    SavedRegister[SavedRegister["s1"] = 5] = "s1";
  })(SavedRegister || (_exports.SavedRegister = SavedRegister = {}));
  var TemporaryRegister;
  (function (TemporaryRegister) {
    TemporaryRegister[TemporaryRegister["t0"] = 6] = "t0";
    TemporaryRegister[TemporaryRegister["t1"] = 7] = "t1";
  })(TemporaryRegister || (_exports.TemporaryRegister = TemporaryRegister = {}));
});
define("@glimmer/wire-format", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getStringFromValue = getStringFromValue;
  _exports.is = is;
  _exports.isArgument = isArgument;
  _exports.isAttribute = isAttribute;
  _exports.isGet = _exports.isFlushElement = void 0;
  _exports.isHelper = isHelper;
  _exports.isStringLiteral = isStringLiteral;
  function is(variant) {
    return function (value) {
      return Array.isArray(value) && value[0] === variant;
    };
  } // Statements

  var isFlushElement = _exports.isFlushElement = is(12
  /* FlushElement */);
  function isAttribute(val) {
    return val[0] === 14
    /* StaticAttr */ || val[0] === 15
    /* DynamicAttr */ || val[0] === 22
    /* TrustingDynamicAttr */ || val[0] === 16
    /* ComponentAttr */ || val[0] === 24
    /* StaticComponentAttr */ || val[0] === 23
    /* TrustingComponentAttr */ || val[0] === 17
    /* AttrSplat */ || val[0] === 4
    /* Modifier */;
  }
  function isStringLiteral(expr) {
    return typeof expr === 'string';
  }
  function getStringFromValue(expr) {
    return expr;
  }
  function isArgument(val) {
    return val[0] === 21
    /* StaticArg */ || val[0] === 20
    /* DynamicArg */;
  }
  function isHelper(expr) {
    return Array.isArray(expr) && expr[0] === 28
    /* Call */;
  } // Expressions

  var isGet = _exports.isGet = is(30
  /* GetSymbol */);
});
define("@simple-dom/document", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var EMPTY_ATTRS = [];
  function indexOfAttribute(attributes, namespaceURI, localName) {
    for (var i = 0; i < attributes.length; i++) {
      var attr = attributes[i];
      if (attr.namespaceURI === namespaceURI && attr.localName === localName) {
        return i;
      }
    }
    return -1;
  }
  function adjustAttrName(namespaceURI, localName) {
    return namespaceURI === "http://www.w3.org/1999/xhtml" /* HTML */ ? localName.toLowerCase() : localName;
  }
  function getAttribute(attributes, namespaceURI, localName) {
    var index = indexOfAttribute(attributes, namespaceURI, localName);
    return index === -1 ? null : attributes[index].value;
  }
  function removeAttribute(attributes, namespaceURI, localName) {
    var index = indexOfAttribute(attributes, namespaceURI, localName);
    if (index !== -1) {
      attributes.splice(index, 1);
    }
  }
  // https://dom.spec.whatwg.org/#dom-element-setattributens
  function setAttribute(element, namespaceURI, prefix, localName, value) {
    if (typeof value !== 'string') {
      value = '' + value;
    }
    var {
      attributes
    } = element;
    if (attributes === EMPTY_ATTRS) {
      attributes = element.attributes = [];
    } else {
      var index = indexOfAttribute(attributes, namespaceURI, localName);
      if (index !== -1) {
        attributes[index].value = value;
        return;
      }
    }
    attributes.push({
      localName,
      name: prefix === null ? localName : prefix + ':' + localName,
      namespaceURI,
      prefix,
      specified: true,
      value
    });
  }
  class ChildNodes {
    constructor(node) {
      this.node = node;
      this.stale = true;
      this._length = 0;
    }
    get length() {
      if (this.stale) {
        this.stale = false;
        var len = 0;
        var child = this.node.firstChild;
        for (; child !== null; len++) {
          this[len] = child;
          child = child.nextSibling;
        }
        var oldLen = this._length;
        this._length = len;
        for (; len < oldLen; len++) {
          delete this[len];
        }
      }
      return this._length;
    }
    item(index) {
      return index < this.length ? this[index] : null;
    }
  }
  function cloneNode(node, deep) {
    var clone = nodeFrom(node);
    if (deep) {
      var child = node.firstChild;
      var nextChild = child;
      while (child !== null) {
        nextChild = child.nextSibling;
        clone.appendChild(child.cloneNode(true));
        child = nextChild;
      }
    }
    return clone;
  }
  function nodeFrom(node) {
    var namespaceURI;
    if (node.nodeType === 1 /* ELEMENT_NODE */) {
      namespaceURI = node.namespaceURI;
    }
    var clone = new SimpleNodeImpl(node.ownerDocument, node.nodeType, node.nodeName, node.nodeValue, namespaceURI);
    if (node.nodeType === 1 /* ELEMENT_NODE */) {
      clone.attributes = copyAttrs(node.attributes);
    }
    return clone;
  }
  function copyAttrs(attrs) {
    if (attrs === EMPTY_ATTRS) {
      return EMPTY_ATTRS;
    }
    var copy = [];
    for (var i = 0; i < attrs.length; i++) {
      var attr = attrs[i];
      copy.push({
        localName: attr.localName,
        name: attr.name,
        namespaceURI: attr.namespaceURI,
        prefix: attr.prefix,
        specified: true,
        value: attr.value
      });
    }
    return copy;
  }
  function insertBefore(parentNode, newChild, refChild) {
    invalidate(parentNode);
    insertBetween(parentNode, newChild, refChild === null ? parentNode.lastChild : refChild.previousSibling, refChild);
  }
  function removeChild(parentNode, oldChild) {
    invalidate(parentNode);
    removeBetween(parentNode, oldChild, oldChild.previousSibling, oldChild.nextSibling);
  }
  function invalidate(parentNode) {
    var childNodes = parentNode._childNodes;
    if (childNodes !== undefined) {
      childNodes.stale = true;
    }
  }
  function insertBetween(parentNode, newChild, previousSibling, nextSibling) {
    if (newChild.nodeType === 11 /* DOCUMENT_FRAGMENT_NODE */) {
      insertFragment(newChild, parentNode, previousSibling, nextSibling);
      return;
    }
    if (newChild.parentNode !== null) {
      removeChild(newChild.parentNode, newChild);
    }
    newChild.parentNode = parentNode;
    newChild.previousSibling = previousSibling;
    newChild.nextSibling = nextSibling;
    if (previousSibling === null) {
      parentNode.firstChild = newChild;
    } else {
      previousSibling.nextSibling = newChild;
    }
    if (nextSibling === null) {
      parentNode.lastChild = newChild;
    } else {
      nextSibling.previousSibling = newChild;
    }
  }
  function removeBetween(parentNode, oldChild, previousSibling, nextSibling) {
    oldChild.parentNode = null;
    oldChild.previousSibling = null;
    oldChild.nextSibling = null;
    if (previousSibling === null) {
      parentNode.firstChild = nextSibling;
    } else {
      previousSibling.nextSibling = nextSibling;
    }
    if (nextSibling === null) {
      parentNode.lastChild = previousSibling;
    } else {
      nextSibling.previousSibling = previousSibling;
    }
  }
  function insertFragment(fragment, parentNode, previousSibling, nextSibling) {
    var firstChild = fragment.firstChild;
    if (firstChild === null) {
      return;
    }
    fragment.firstChild = null;
    fragment.lastChild = null;
    var lastChild = firstChild;
    var newChild = firstChild;
    firstChild.previousSibling = previousSibling;
    if (previousSibling === null) {
      parentNode.firstChild = firstChild;
    } else {
      previousSibling.nextSibling = firstChild;
    }
    while (newChild !== null) {
      newChild.parentNode = parentNode;
      lastChild = newChild;
      newChild = newChild.nextSibling;
    }
    lastChild.nextSibling = nextSibling;
    if (nextSibling === null) {
      parentNode.lastChild = lastChild;
    } else {
      nextSibling.previousSibling = lastChild;
    }
  }
  function parseQualifiedName(qualifiedName) {
    var localName = qualifiedName;
    var prefix = null;
    var i = qualifiedName.indexOf(':');
    if (i !== -1) {
      prefix = qualifiedName.slice(0, i);
      localName = qualifiedName.slice(i + 1);
    }
    return [prefix, localName];
  }
  class SimpleNodeImpl {
    constructor(ownerDocument, nodeType, nodeName, nodeValue, namespaceURI) {
      this.ownerDocument = ownerDocument;
      this.nodeType = nodeType;
      this.nodeName = nodeName;
      this.nodeValue = nodeValue;
      this.namespaceURI = namespaceURI;
      this.parentNode = null;
      this.previousSibling = null;
      this.nextSibling = null;
      this.firstChild = null;
      this.lastChild = null;
      this.attributes = EMPTY_ATTRS;
      /**
       * @internal
       */
      this._childNodes = undefined;
    }
    get tagName() {
      return this.nodeName;
    }
    get childNodes() {
      var children = this._childNodes;
      if (children === undefined) {
        children = this._childNodes = new ChildNodes(this);
      }
      return children;
    }
    cloneNode(deep) {
      return cloneNode(this, deep === true);
    }
    appendChild(newChild) {
      insertBefore(this, newChild, null);
      return newChild;
    }
    insertBefore(newChild, refChild) {
      insertBefore(this, newChild, refChild);
      return newChild;
    }
    removeChild(oldChild) {
      removeChild(this, oldChild);
      return oldChild;
    }
    insertAdjacentHTML(position, html) {
      var raw = new SimpleNodeImpl(this.ownerDocument, -1 /* RAW_NODE */, '#raw', html, void 0);
      var parentNode;
      var nextSibling;
      switch (position) {
        case 'beforebegin':
          parentNode = this.parentNode;
          nextSibling = this;
          break;
        case 'afterbegin':
          parentNode = this;
          nextSibling = this.firstChild;
          break;
        case 'beforeend':
          parentNode = this;
          nextSibling = null;
          break;
        case 'afterend':
          parentNode = this.parentNode;
          nextSibling = this.nextSibling;
          break;
        default:
          throw new Error('invalid position');
      }
      if (parentNode === null) {
        throw new Error(`${position} requires a parentNode`);
      }
      insertBefore(parentNode, raw, nextSibling);
    }
    getAttribute(name) {
      var localName = adjustAttrName(this.namespaceURI, name);
      return getAttribute(this.attributes, null, localName);
    }
    getAttributeNS(namespaceURI, localName) {
      return getAttribute(this.attributes, namespaceURI, localName);
    }
    setAttribute(name, value) {
      var localName = adjustAttrName(this.namespaceURI, name);
      setAttribute(this, null, null, localName, value);
    }
    setAttributeNS(namespaceURI, qualifiedName, value) {
      var [prefix, localName] = parseQualifiedName(qualifiedName);
      setAttribute(this, namespaceURI, prefix, localName, value);
    }
    removeAttribute(name) {
      var localName = adjustAttrName(this.namespaceURI, name);
      removeAttribute(this.attributes, null, localName);
    }
    removeAttributeNS(namespaceURI, localName) {
      removeAttribute(this.attributes, namespaceURI, localName);
    }
    get doctype() {
      return this.firstChild;
    }
    get documentElement() {
      return this.lastChild;
    }
    get head() {
      return this.documentElement.firstChild;
    }
    get body() {
      return this.documentElement.lastChild;
    }
    createElement(name) {
      return new SimpleNodeImpl(this, 1 /* ELEMENT_NODE */, name.toUpperCase(), null, "http://www.w3.org/1999/xhtml" /* HTML */);
    }
    createElementNS(namespace, qualifiedName) {
      // Node name is case-preserving in XML contexts, but returns canonical uppercase form in HTML contexts
      // https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-104682815
      var nodeName = namespace === "http://www.w3.org/1999/xhtml" /* HTML */ ? qualifiedName.toUpperCase() : qualifiedName;
      // we don't care to parse the qualified name because we only support HTML documents
      // which don't support prefixed elements
      return new SimpleNodeImpl(this, 1 /* ELEMENT_NODE */, nodeName, null, namespace);
    }
    createTextNode(text) {
      return new SimpleNodeImpl(this, 3 /* TEXT_NODE */, '#text', text, void 0);
    }
    createComment(text) {
      return new SimpleNodeImpl(this, 8 /* COMMENT_NODE */, '#comment', text, void 0);
    }
    /**
     * Backwards compat
     * @deprecated
     */
    createRawHTMLSection(text) {
      return new SimpleNodeImpl(this, -1 /* RAW_NODE */, '#raw', text, void 0);
    }
    createDocumentFragment() {
      return new SimpleNodeImpl(this, 11 /* DOCUMENT_FRAGMENT_NODE */, '#document-fragment', null, void 0);
    }
  }
  function createHTMLDocument() {
    // dom.d.ts types ownerDocument as Document but for a document ownerDocument is null
    var document = new SimpleNodeImpl(null, 9 /* DOCUMENT_NODE */, '#document', null, "http://www.w3.org/1999/xhtml" /* HTML */);
    var doctype = new SimpleNodeImpl(document, 10 /* DOCUMENT_TYPE_NODE */, 'html', null, "http://www.w3.org/1999/xhtml" /* HTML */);
    var html = new SimpleNodeImpl(document, 1 /* ELEMENT_NODE */, 'HTML', null, "http://www.w3.org/1999/xhtml" /* HTML */);
    var head = new SimpleNodeImpl(document, 1 /* ELEMENT_NODE */, 'HEAD', null, "http://www.w3.org/1999/xhtml" /* HTML */);
    var body = new SimpleNodeImpl(document, 1 /* ELEMENT_NODE */, 'BODY', null, "http://www.w3.org/1999/xhtml" /* HTML */);
    html.appendChild(head);
    html.appendChild(body);
    document.appendChild(doctype);
    document.appendChild(html);
    return document;
  }
  var _default = _exports.default = createHTMLDocument;
});
define("backburner", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.buildPlatform = buildPlatform;
  _exports.default = void 0;
  var SET_TIMEOUT = setTimeout;
  var NOOP = () => {};
  function buildNext(flush) {
    // Using "promises first" here to:
    //
    // 1) Ensure more consistent experience on browsers that
    //    have differently queued microtasks (separate queues for
    //    MutationObserver vs Promises).
    // 2) Ensure better debugging experiences (it shows up in Chrome
    //    call stack as "Promise.then (async)") which is more consistent
    //    with user expectations
    //
    // When Promise is unavailable use MutationObserver (mostly so that we
    // still get microtasks on IE11), and when neither MutationObserver and
    // Promise are present use a plain old setTimeout.
    if (typeof Promise === 'function') {
      var autorunPromise = Promise.resolve();
      return () => autorunPromise.then(flush);
    } else if (typeof MutationObserver === 'function') {
      var iterations = 0;
      var observer = new MutationObserver(flush);
      var node = document.createTextNode('');
      observer.observe(node, {
        characterData: true
      });
      return () => {
        iterations = ++iterations % 2;
        node.data = '' + iterations;
        return iterations;
      };
    } else {
      return () => SET_TIMEOUT(flush, 0);
    }
  }
  function buildPlatform(flush) {
    var clearNext = NOOP;
    return {
      setTimeout(fn, ms) {
        return setTimeout(fn, ms);
      },
      clearTimeout(timerId) {
        return clearTimeout(timerId);
      },
      now() {
        return Date.now();
      },
      next: buildNext(flush),
      clearNext
    };
  }
  var NUMBER = /\d+/;
  var TIMERS_OFFSET = 6;
  function isCoercableNumber(suspect) {
    var type = typeof suspect;
    return type === 'number' && suspect === suspect || type === 'string' && NUMBER.test(suspect);
  }
  function getOnError(options) {
    return options.onError || options.onErrorTarget && options.onErrorTarget[options.onErrorMethod];
  }
  function findItem(target, method, collection) {
    var index = -1;
    for (var i = 0, l = collection.length; i < l; i += 4) {
      if (collection[i] === target && collection[i + 1] === method) {
        index = i;
        break;
      }
    }
    return index;
  }
  function findTimerItem(target, method, collection) {
    var index = -1;
    for (var i = 2, l = collection.length; i < l; i += 6) {
      if (collection[i] === target && collection[i + 1] === method) {
        index = i - 2;
        break;
      }
    }
    return index;
  }
  function getQueueItems(items, queueItemLength, queueItemPositionOffset = 0) {
    var queueItems = [];
    for (var i = 0; i < items.length; i += queueItemLength) {
      var maybeError = items[i + 3 /* stack */ + queueItemPositionOffset];
      var queueItem = {
        target: items[i + 0 /* target */ + queueItemPositionOffset],
        method: items[i + 1 /* method */ + queueItemPositionOffset],
        args: items[i + 2 /* args */ + queueItemPositionOffset],
        stack: maybeError !== undefined && 'stack' in maybeError ? maybeError.stack : ''
      };
      queueItems.push(queueItem);
    }
    return queueItems;
  }
  function binarySearch(time, timers) {
    var start = 0;
    var end = timers.length - TIMERS_OFFSET;
    var middle;
    var l;
    while (start < end) {
      // since timers is an array of pairs 'l' will always
      // be an integer
      l = (end - start) / TIMERS_OFFSET;
      // compensate for the index in case even number
      // of pairs inside timers
      middle = start + l - l % TIMERS_OFFSET;
      if (time >= timers[middle]) {
        start = middle + TIMERS_OFFSET;
      } else {
        end = middle;
      }
    }
    return time >= timers[start] ? start + TIMERS_OFFSET : start;
  }
  var QUEUE_ITEM_LENGTH = 4;
  class Queue {
    constructor(name, options = {}, globalOptions = {}) {
      this._queueBeingFlushed = [];
      this.targetQueues = new Map();
      this.index = 0;
      this._queue = [];
      this.name = name;
      this.options = options;
      this.globalOptions = globalOptions;
    }
    stackFor(index) {
      if (index < this._queue.length) {
        var entry = this._queue[index * 3 + QUEUE_ITEM_LENGTH];
        if (entry) {
          return entry.stack;
        } else {
          return null;
        }
      }
    }
    flush(sync) {
      var {
        before,
        after
      } = this.options;
      var target;
      var method;
      var args;
      var errorRecordedForStack;
      this.targetQueues.clear();
      if (this._queueBeingFlushed.length === 0) {
        this._queueBeingFlushed = this._queue;
        this._queue = [];
      }
      if (before !== undefined) {
        before();
      }
      var invoke;
      var queueItems = this._queueBeingFlushed;
      if (queueItems.length > 0) {
        var onError = getOnError(this.globalOptions);
        invoke = onError ? this.invokeWithOnError : this.invoke;
        for (var i = this.index; i < queueItems.length; i += QUEUE_ITEM_LENGTH) {
          this.index += QUEUE_ITEM_LENGTH;
          method = queueItems[i + 1];
          // method could have been nullified / canceled during flush
          if (method !== null) {
            //
            //    ** Attention intrepid developer **
            //
            //    To find out the stack of this task when it was scheduled onto
            //    the run loop, add the following to your app.js:
            //
            //    Ember.run.backburner.DEBUG = true; // NOTE: This slows your app, don't leave it on in production.
            //
            //    Once that is in place, when you are at a breakpoint and navigate
            //    here in the stack explorer, you can look at `errorRecordedForStack.stack`,
            //    which will be the captured stack when this job was scheduled.
            //
            //    One possible long-term solution is the following Chrome issue:
            //       https://bugs.chromium.org/p/chromium/issues/detail?id=332624
            //
            target = queueItems[i];
            args = queueItems[i + 2];
            errorRecordedForStack = queueItems[i + 3]; // Debugging assistance
            invoke(target, method, args, onError, errorRecordedForStack);
          }
          if (this.index !== this._queueBeingFlushed.length && this.globalOptions.mustYield && this.globalOptions.mustYield()) {
            return 1 /* Pause */;
          }
        }
      }
      if (after !== undefined) {
        after();
      }
      this._queueBeingFlushed.length = 0;
      this.index = 0;
      if (sync !== false && this._queue.length > 0) {
        // check if new items have been added
        this.flush(true);
      }
    }
    hasWork() {
      return this._queueBeingFlushed.length > 0 || this._queue.length > 0;
    }
    cancel({
      target,
      method
    }) {
      var queue = this._queue;
      var targetQueueMap = this.targetQueues.get(target);
      if (targetQueueMap !== undefined) {
        targetQueueMap.delete(method);
      }
      var index = findItem(target, method, queue);
      if (index > -1) {
        queue.splice(index, QUEUE_ITEM_LENGTH);
        return true;
      }
      // if not found in current queue
      // could be in the queue that is being flushed
      queue = this._queueBeingFlushed;
      index = findItem(target, method, queue);
      if (index > -1) {
        queue[index + 1] = null;
        return true;
      }
      return false;
    }
    push(target, method, args, stack) {
      this._queue.push(target, method, args, stack);
      return {
        queue: this,
        target,
        method
      };
    }
    pushUnique(target, method, args, stack) {
      var localQueueMap = this.targetQueues.get(target);
      if (localQueueMap === undefined) {
        localQueueMap = new Map();
        this.targetQueues.set(target, localQueueMap);
      }
      var index = localQueueMap.get(method);
      if (index === undefined) {
        var queueIndex = this._queue.push(target, method, args, stack) - QUEUE_ITEM_LENGTH;
        localQueueMap.set(method, queueIndex);
      } else {
        var queue = this._queue;
        queue[index + 2] = args; // replace args
        queue[index + 3] = stack; // replace stack
      }
      return {
        queue: this,
        target,
        method
      };
    }
    _getDebugInfo(debugEnabled) {
      if (debugEnabled) {
        var debugInfo = getQueueItems(this._queue, QUEUE_ITEM_LENGTH);
        return debugInfo;
      }
      return undefined;
    }
    invoke(target, method, args /*, onError, errorRecordedForStack */) {
      if (args === undefined) {
        method.call(target);
      } else {
        method.apply(target, args);
      }
    }
    invokeWithOnError(target, method, args, onError, errorRecordedForStack) {
      try {
        if (args === undefined) {
          method.call(target);
        } else {
          method.apply(target, args);
        }
      } catch (error) {
        onError(error, errorRecordedForStack);
      }
    }
  }
  class DeferredActionQueues {
    constructor(queueNames = [], options) {
      this.queues = {};
      this.queueNameIndex = 0;
      this.queueNames = queueNames;
      queueNames.reduce(function (queues, queueName) {
        queues[queueName] = new Queue(queueName, options[queueName], options);
        return queues;
      }, this.queues);
    }
    /**
     * @method schedule
     * @param {String} queueName
     * @param {Any} target
     * @param {Any} method
     * @param {Any} args
     * @param {Boolean} onceFlag
     * @param {Any} stack
     * @return queue
     */
    schedule(queueName, target, method, args, onceFlag, stack) {
      var queues = this.queues;
      var queue = queues[queueName];
      if (queue === undefined) {
        throw new Error(`You attempted to schedule an action in a queue (${queueName}) that doesn\'t exist`);
      }
      if (method === undefined || method === null) {
        throw new Error(`You attempted to schedule an action in a queue (${queueName}) for a method that doesn\'t exist`);
      }
      this.queueNameIndex = 0;
      if (onceFlag) {
        return queue.pushUnique(target, method, args, stack);
      } else {
        return queue.push(target, method, args, stack);
      }
    }
    /**
     * DeferredActionQueues.flush() calls Queue.flush()
     *
     * @method flush
     * @param {Boolean} fromAutorun
     */
    flush(fromAutorun = false) {
      var queue;
      var queueName;
      var numberOfQueues = this.queueNames.length;
      while (this.queueNameIndex < numberOfQueues) {
        queueName = this.queueNames[this.queueNameIndex];
        queue = this.queues[queueName];
        if (queue.hasWork() === false) {
          this.queueNameIndex++;
          if (fromAutorun && this.queueNameIndex < numberOfQueues) {
            return 1 /* Pause */;
          }
        } else {
          if (queue.flush(false /* async */) === 1 /* Pause */) {
            return 1 /* Pause */;
          }
        }
      }
    }
    /**
     * Returns debug information for the current queues.
     *
     * @method _getDebugInfo
     * @param {Boolean} debugEnabled
     * @returns {IDebugInfo | undefined}
     */
    _getDebugInfo(debugEnabled) {
      if (debugEnabled) {
        var debugInfo = {};
        var queue;
        var queueName;
        var numberOfQueues = this.queueNames.length;
        var i = 0;
        while (i < numberOfQueues) {
          queueName = this.queueNames[i];
          queue = this.queues[queueName];
          debugInfo[queueName] = queue._getDebugInfo(debugEnabled);
          i++;
        }
        return debugInfo;
      }
      return;
    }
  }
  function iteratorDrain(fn) {
    var iterator = fn();
    var result = iterator.next();
    while (result.done === false) {
      result.value();
      result = iterator.next();
    }
  }
  var noop = function () {};
  var DISABLE_SCHEDULE = Object.freeze([]);
  function parseArgs() {
    var length = arguments.length;
    var args;
    var method;
    var target;
    if (length === 0) ;else if (length === 1) {
      target = null;
      method = arguments[0];
    } else {
      var argsIndex = 2;
      var methodOrTarget = arguments[0];
      var methodOrArgs = arguments[1];
      var type = typeof methodOrArgs;
      if (type === 'function') {
        target = methodOrTarget;
        method = methodOrArgs;
      } else if (methodOrTarget !== null && type === 'string' && methodOrArgs in methodOrTarget) {
        target = methodOrTarget;
        method = target[methodOrArgs];
      } else if (typeof methodOrTarget === 'function') {
        argsIndex = 1;
        target = null;
        method = methodOrTarget;
      }
      if (length > argsIndex) {
        var len = length - argsIndex;
        args = new Array(len);
        for (var i = 0; i < len; i++) {
          args[i] = arguments[i + argsIndex];
        }
      }
    }
    return [target, method, args];
  }
  function parseTimerArgs() {
    var [target, method, args] = parseArgs(...arguments);
    var wait = 0;
    var length = args !== undefined ? args.length : 0;
    if (length > 0) {
      var last = args[length - 1];
      if (isCoercableNumber(last)) {
        wait = parseInt(args.pop(), 10);
      }
    }
    return [target, method, args, wait];
  }
  function parseDebounceArgs() {
    var target;
    var method;
    var isImmediate;
    var args;
    var wait;
    if (arguments.length === 2) {
      method = arguments[0];
      wait = arguments[1];
      target = null;
    } else {
      [target, method, args] = parseArgs(...arguments);
      if (args === undefined) {
        wait = 0;
      } else {
        wait = args.pop();
        if (!isCoercableNumber(wait)) {
          isImmediate = wait === true;
          wait = args.pop();
        }
      }
    }
    wait = parseInt(wait, 10);
    return [target, method, args, wait, isImmediate];
  }
  var UUID = 0;
  var beginCount = 0;
  var endCount = 0;
  var beginEventCount = 0;
  var endEventCount = 0;
  var runCount = 0;
  var joinCount = 0;
  var deferCount = 0;
  var scheduleCount = 0;
  var scheduleIterableCount = 0;
  var deferOnceCount = 0;
  var scheduleOnceCount = 0;
  var setTimeoutCount = 0;
  var laterCount = 0;
  var throttleCount = 0;
  var debounceCount = 0;
  var cancelTimersCount = 0;
  var cancelCount = 0;
  var autorunsCreatedCount = 0;
  var autorunsCompletedCount = 0;
  var deferredActionQueuesCreatedCount = 0;
  var nestedDeferredActionQueuesCreated = 0;
  class Backburner {
    constructor(queueNames, options) {
      this.DEBUG = false;
      this.currentInstance = null;
      this.instanceStack = [];
      this._eventCallbacks = {
        end: [],
        begin: []
      };
      this._timerTimeoutId = null;
      this._timers = [];
      this._autorun = false;
      this._autorunStack = null;
      this.queueNames = queueNames;
      this.options = options || {};
      if (typeof this.options.defaultQueue === 'string') {
        this._defaultQueue = this.options.defaultQueue;
      } else {
        this._defaultQueue = this.queueNames[0];
      }
      this._onBegin = this.options.onBegin || noop;
      this._onEnd = this.options.onEnd || noop;
      this._boundRunExpiredTimers = this._runExpiredTimers.bind(this);
      this._boundAutorunEnd = () => {
        autorunsCompletedCount++;
        // if the autorun was already flushed, do nothing
        if (this._autorun === false) {
          return;
        }
        this._autorun = false;
        this._autorunStack = null;
        this._end(true /* fromAutorun */);
      };
      var builder = this.options._buildPlatform || buildPlatform;
      this._platform = builder(this._boundAutorunEnd);
    }
    get counters() {
      return {
        begin: beginCount,
        end: endCount,
        events: {
          begin: beginEventCount,
          end: endEventCount
        },
        autoruns: {
          created: autorunsCreatedCount,
          completed: autorunsCompletedCount
        },
        run: runCount,
        join: joinCount,
        defer: deferCount,
        schedule: scheduleCount,
        scheduleIterable: scheduleIterableCount,
        deferOnce: deferOnceCount,
        scheduleOnce: scheduleOnceCount,
        setTimeout: setTimeoutCount,
        later: laterCount,
        throttle: throttleCount,
        debounce: debounceCount,
        cancelTimers: cancelTimersCount,
        cancel: cancelCount,
        loops: {
          total: deferredActionQueuesCreatedCount,
          nested: nestedDeferredActionQueuesCreated
        }
      };
    }
    get defaultQueue() {
      return this._defaultQueue;
    }
    /*
      @method begin
      @return instantiated class DeferredActionQueues
    */
    begin() {
      beginCount++;
      var options = this.options;
      var previousInstance = this.currentInstance;
      var current;
      if (this._autorun !== false) {
        current = previousInstance;
        this._cancelAutorun();
      } else {
        if (previousInstance !== null) {
          nestedDeferredActionQueuesCreated++;
          this.instanceStack.push(previousInstance);
        }
        deferredActionQueuesCreatedCount++;
        current = this.currentInstance = new DeferredActionQueues(this.queueNames, options);
        beginEventCount++;
        this._trigger('begin', current, previousInstance);
      }
      this._onBegin(current, previousInstance);
      return current;
    }
    end() {
      endCount++;
      this._end(false);
    }
    on(eventName, callback) {
      if (typeof callback !== 'function') {
        throw new TypeError(`Callback must be a function`);
      }
      var callbacks = this._eventCallbacks[eventName];
      if (callbacks !== undefined) {
        callbacks.push(callback);
      } else {
        throw new TypeError(`Cannot on() event ${eventName} because it does not exist`);
      }
    }
    off(eventName, callback) {
      var callbacks = this._eventCallbacks[eventName];
      if (!eventName || callbacks === undefined) {
        throw new TypeError(`Cannot off() event ${eventName} because it does not exist`);
      }
      var callbackFound = false;
      if (callback) {
        for (var i = 0; i < callbacks.length; i++) {
          if (callbacks[i] === callback) {
            callbackFound = true;
            callbacks.splice(i, 1);
            i--;
          }
        }
      }
      if (!callbackFound) {
        throw new TypeError(`Cannot off() callback that does not exist`);
      }
    }
    run() {
      runCount++;
      var [target, method, args] = parseArgs(...arguments);
      return this._run(target, method, args);
    }
    join() {
      joinCount++;
      var [target, method, args] = parseArgs(...arguments);
      return this._join(target, method, args);
    }
    /**
     * @deprecated please use schedule instead.
     */
    defer(queueName, target, method, ...args) {
      deferCount++;
      return this.schedule(queueName, target, method, ...args);
    }
    schedule(queueName, ..._args) {
      scheduleCount++;
      var [target, method, args] = parseArgs(..._args);
      var stack = this.DEBUG ? new Error() : undefined;
      return this._ensureInstance().schedule(queueName, target, method, args, false, stack);
    }
    /*
      Defer the passed iterable of functions to run inside the specified queue.
         @method scheduleIterable
      @param {String} queueName
      @param {Iterable} an iterable of functions to execute
      @return method result
    */
    scheduleIterable(queueName, iterable) {
      scheduleIterableCount++;
      var stack = this.DEBUG ? new Error() : undefined;
      return this._ensureInstance().schedule(queueName, null, iteratorDrain, [iterable], false, stack);
    }
    /**
     * @deprecated please use scheduleOnce instead.
     */
    deferOnce(queueName, target, method, ...args) {
      deferOnceCount++;
      return this.scheduleOnce(queueName, target, method, ...args);
    }
    scheduleOnce(queueName, ..._args) {
      scheduleOnceCount++;
      var [target, method, args] = parseArgs(..._args);
      var stack = this.DEBUG ? new Error() : undefined;
      return this._ensureInstance().schedule(queueName, target, method, args, true, stack);
    }
    setTimeout() {
      setTimeoutCount++;
      return this.later(...arguments);
    }
    later() {
      laterCount++;
      var [target, method, args, wait] = parseTimerArgs(...arguments);
      return this._later(target, method, args, wait);
    }
    throttle() {
      throttleCount++;
      var [target, method, args, wait, isImmediate = true] = parseDebounceArgs(...arguments);
      var index = findTimerItem(target, method, this._timers);
      var timerId;
      if (index === -1) {
        timerId = this._later(target, method, isImmediate ? DISABLE_SCHEDULE : args, wait);
        if (isImmediate) {
          this._join(target, method, args);
        }
      } else {
        timerId = this._timers[index + 1];
        var argIndex = index + 4;
        if (this._timers[argIndex] !== DISABLE_SCHEDULE) {
          this._timers[argIndex] = args;
        }
      }
      return timerId;
    }
    debounce() {
      debounceCount++;
      var [target, method, args, wait, isImmediate = false] = parseDebounceArgs(...arguments);
      var _timers = this._timers;
      var index = findTimerItem(target, method, _timers);
      var timerId;
      if (index === -1) {
        timerId = this._later(target, method, isImmediate ? DISABLE_SCHEDULE : args, wait);
        if (isImmediate) {
          this._join(target, method, args);
        }
      } else {
        var executeAt = this._platform.now() + wait;
        var argIndex = index + 4;
        if (_timers[argIndex] === DISABLE_SCHEDULE) {
          args = DISABLE_SCHEDULE;
        }
        timerId = _timers[index + 1];
        var i = binarySearch(executeAt, _timers);
        if (index + TIMERS_OFFSET === i) {
          _timers[index] = executeAt;
          _timers[argIndex] = args;
        } else {
          var stack = this._timers[index + 5];
          this._timers.splice(i, 0, executeAt, timerId, target, method, args, stack);
          this._timers.splice(index, TIMERS_OFFSET);
        }
        if (index === 0) {
          this._reinstallTimerTimeout();
        }
      }
      return timerId;
    }
    cancelTimers() {
      cancelTimersCount++;
      this._clearTimerTimeout();
      this._timers = [];
      this._cancelAutorun();
    }
    hasTimers() {
      return this._timers.length > 0 || this._autorun;
    }
    cancel(timer) {
      cancelCount++;
      if (timer === null || timer === undefined) {
        return false;
      }
      var timerType = typeof timer;
      if (timerType === 'number') {
        // we're cancelling a setTimeout or throttle or debounce
        return this._cancelLaterTimer(timer);
      } else if (timerType === 'object' && timer.queue && timer.method) {
        // we're cancelling a deferOnce
        return timer.queue.cancel(timer);
      }
      return false;
    }
    ensureInstance() {
      this._ensureInstance();
    }
    /**
     * Returns debug information related to the current instance of Backburner
     *
     * @method getDebugInfo
     * @returns {Object | undefined} Will return and Object containing debug information if
     * the DEBUG flag is set to true on the current instance of Backburner, else undefined.
     */
    getDebugInfo() {
      if (this.DEBUG) {
        return {
          autorun: this._autorunStack,
          counters: this.counters,
          timers: getQueueItems(this._timers, TIMERS_OFFSET, 2),
          instanceStack: [this.currentInstance, ...this.instanceStack].map(deferredActionQueue => deferredActionQueue && deferredActionQueue._getDebugInfo(this.DEBUG))
        };
      }
      return undefined;
    }
    _end(fromAutorun) {
      var currentInstance = this.currentInstance;
      var nextInstance = null;
      if (currentInstance === null) {
        throw new Error(`end called without begin`);
      }
      // Prevent double-finally bug in Safari 6.0.2 and iOS 6
      // This bug appears to be resolved in Safari 6.0.5 and iOS 7
      var finallyAlreadyCalled = false;
      var result;
      try {
        result = currentInstance.flush(fromAutorun);
      } finally {
        if (!finallyAlreadyCalled) {
          finallyAlreadyCalled = true;
          if (result === 1 /* Pause */) {
            var plannedNextQueue = this.queueNames[currentInstance.queueNameIndex];
            this._scheduleAutorun(plannedNextQueue);
          } else {
            this.currentInstance = null;
            if (this.instanceStack.length > 0) {
              nextInstance = this.instanceStack.pop();
              this.currentInstance = nextInstance;
            }
            this._trigger('end', currentInstance, nextInstance);
            this._onEnd(currentInstance, nextInstance);
          }
        }
      }
    }
    _join(target, method, args) {
      if (this.currentInstance === null) {
        return this._run(target, method, args);
      }
      if (target === undefined && args === undefined) {
        return method();
      } else {
        return method.apply(target, args);
      }
    }
    _run(target, method, args) {
      var onError = getOnError(this.options);
      this.begin();
      if (onError) {
        try {
          return method.apply(target, args);
        } catch (error) {
          onError(error);
        } finally {
          this.end();
        }
      } else {
        try {
          return method.apply(target, args);
        } finally {
          this.end();
        }
      }
    }
    _cancelAutorun() {
      if (this._autorun) {
        this._platform.clearNext();
        this._autorun = false;
        this._autorunStack = null;
      }
    }
    _later(target, method, args, wait) {
      var stack = this.DEBUG ? new Error() : undefined;
      var executeAt = this._platform.now() + wait;
      var id = UUID++;
      if (this._timers.length === 0) {
        this._timers.push(executeAt, id, target, method, args, stack);
        this._installTimerTimeout();
      } else {
        // find position to insert
        var i = binarySearch(executeAt, this._timers);
        this._timers.splice(i, 0, executeAt, id, target, method, args, stack);
        // always reinstall since it could be out of sync
        this._reinstallTimerTimeout();
      }
      return id;
    }
    _cancelLaterTimer(timer) {
      for (var i = 1; i < this._timers.length; i += TIMERS_OFFSET) {
        if (this._timers[i] === timer) {
          this._timers.splice(i - 1, TIMERS_OFFSET);
          if (i === 1) {
            this._reinstallTimerTimeout();
          }
          return true;
        }
      }
      return false;
    }
    /**
     Trigger an event. Supports up to two arguments. Designed around
     triggering transition events from one run loop instance to the
     next, which requires an argument for the  instance and then
     an argument for the next instance.
        @private
     @method _trigger
     @param {String} eventName
     @param {any} arg1
     @param {any} arg2
     */
    _trigger(eventName, arg1, arg2) {
      var callbacks = this._eventCallbacks[eventName];
      if (callbacks !== undefined) {
        for (var i = 0; i < callbacks.length; i++) {
          callbacks[i](arg1, arg2);
        }
      }
    }
    _runExpiredTimers() {
      this._timerTimeoutId = null;
      if (this._timers.length > 0) {
        this.begin();
        this._scheduleExpiredTimers();
        this.end();
      }
    }
    _scheduleExpiredTimers() {
      var timers = this._timers;
      var i = 0;
      var l = timers.length;
      var defaultQueue = this._defaultQueue;
      var n = this._platform.now();
      for (; i < l; i += TIMERS_OFFSET) {
        var executeAt = timers[i];
        if (executeAt > n) {
          break;
        }
        var args = timers[i + 4];
        if (args !== DISABLE_SCHEDULE) {
          var target = timers[i + 2];
          var method = timers[i + 3];
          var stack = timers[i + 5];
          this.currentInstance.schedule(defaultQueue, target, method, args, false, stack);
        }
      }
      timers.splice(0, i);
      this._installTimerTimeout();
    }
    _reinstallTimerTimeout() {
      this._clearTimerTimeout();
      this._installTimerTimeout();
    }
    _clearTimerTimeout() {
      if (this._timerTimeoutId === null) {
        return;
      }
      this._platform.clearTimeout(this._timerTimeoutId);
      this._timerTimeoutId = null;
    }
    _installTimerTimeout() {
      if (this._timers.length === 0) {
        return;
      }
      var minExpiresAt = this._timers[0];
      var n = this._platform.now();
      var wait = Math.max(0, minExpiresAt - n);
      this._timerTimeoutId = this._platform.setTimeout(this._boundRunExpiredTimers, wait);
    }
    _ensureInstance() {
      var currentInstance = this.currentInstance;
      if (currentInstance === null) {
        this._autorunStack = this.DEBUG ? new Error() : undefined;
        currentInstance = this.begin();
        this._scheduleAutorun(this.queueNames[0]);
      }
      return currentInstance;
    }
    _scheduleAutorun(plannedNextQueue) {
      autorunsCreatedCount++;
      var next = this._platform.next;
      var flush = this.options.flush;
      if (flush) {
        flush(plannedNextQueue, next);
      } else {
        next();
      }
      this._autorun = true;
    }
  }
  Backburner.Queue = Queue;
  Backburner.buildPlatform = buildPlatform;
  Backburner.buildNext = buildNext;
  var _default = _exports.default = Backburner;
});
define("dag-map", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
   * A topologically ordered map of key/value pairs with a simple API for adding constraints.
   *
   * Edges can forward reference keys that have not been added yet (the forward reference will
   * map the key to undefined).
   */
  var DAG = function () {
    function DAG() {
      this._vertices = new Vertices();
    }
    /**
     * Adds a key/value pair with dependencies on other key/value pairs.
     *
     * @public
     * @param key    The key of the vertex to be added.
     * @param value  The value of that vertex.
     * @param before A key or array of keys of the vertices that must
     *               be visited before this vertex.
     * @param after  An string or array of strings with the keys of the
     *               vertices that must be after this vertex is visited.
     */
    DAG.prototype.add = function (key, value, before, after) {
      if (!key) throw new Error('argument `key` is required');
      var vertices = this._vertices;
      var v = vertices.add(key);
      v.val = value;
      if (before) {
        if (typeof before === "string") {
          vertices.addEdge(v, vertices.add(before));
        } else {
          for (var i = 0; i < before.length; i++) {
            vertices.addEdge(v, vertices.add(before[i]));
          }
        }
      }
      if (after) {
        if (typeof after === "string") {
          vertices.addEdge(vertices.add(after), v);
        } else {
          for (var i = 0; i < after.length; i++) {
            vertices.addEdge(vertices.add(after[i]), v);
          }
        }
      }
    };
    /**
     * @deprecated please use add.
     */
    DAG.prototype.addEdges = function (key, value, before, after) {
      this.add(key, value, before, after);
    };
    /**
     * Visits key/value pairs in topological order.
     *
     * @public
     * @param callback The function to be invoked with each key/value.
     */
    DAG.prototype.each = function (callback) {
      this._vertices.walk(callback);
    };
    /**
     * @deprecated please use each.
     */
    DAG.prototype.topsort = function (callback) {
      this.each(callback);
    };
    return DAG;
  }();
  var _default = _exports.default = DAG;
  /** @private */
  var Vertices = function () {
    function Vertices() {
      this.length = 0;
      this.stack = new IntStack();
      this.path = new IntStack();
      this.result = new IntStack();
    }
    Vertices.prototype.add = function (key) {
      if (!key) throw new Error("missing key");
      var l = this.length | 0;
      var vertex;
      for (var i = 0; i < l; i++) {
        vertex = this[i];
        if (vertex.key === key) return vertex;
      }
      this.length = l + 1;
      return this[l] = {
        idx: l,
        key: key,
        val: undefined,
        out: false,
        flag: false,
        length: 0
      };
    };
    Vertices.prototype.addEdge = function (v, w) {
      this.check(v, w.key);
      var l = w.length | 0;
      for (var i = 0; i < l; i++) {
        if (w[i] === v.idx) return;
      }
      w.length = l + 1;
      w[l] = v.idx;
      v.out = true;
    };
    Vertices.prototype.walk = function (cb) {
      this.reset();
      for (var i = 0; i < this.length; i++) {
        var vertex = this[i];
        if (vertex.out) continue;
        this.visit(vertex, "");
      }
      this.each(this.result, cb);
    };
    Vertices.prototype.check = function (v, w) {
      if (v.key === w) {
        throw new Error("cycle detected: " + w + " <- " + w);
      }
      // quick check
      if (v.length === 0) return;
      // shallow check
      for (var i = 0; i < v.length; i++) {
        var key = this[v[i]].key;
        if (key === w) {
          throw new Error("cycle detected: " + w + " <- " + v.key + " <- " + w);
        }
      }
      // deep check
      this.reset();
      this.visit(v, w);
      if (this.path.length > 0) {
        var msg_1 = "cycle detected: " + w;
        this.each(this.path, function (key) {
          msg_1 += " <- " + key;
        });
        throw new Error(msg_1);
      }
    };
    Vertices.prototype.reset = function () {
      this.stack.length = 0;
      this.path.length = 0;
      this.result.length = 0;
      for (var i = 0, l = this.length; i < l; i++) {
        this[i].flag = false;
      }
    };
    Vertices.prototype.visit = function (start, search) {
      var _a = this,
        stack = _a.stack,
        path = _a.path,
        result = _a.result;
      stack.push(start.idx);
      while (stack.length) {
        var index = stack.pop() | 0;
        if (index >= 0) {
          // enter
          var vertex = this[index];
          if (vertex.flag) continue;
          vertex.flag = true;
          path.push(index);
          if (search === vertex.key) break;
          // push exit
          stack.push(~index);
          this.pushIncoming(vertex);
        } else {
          // exit
          path.pop();
          result.push(~index);
        }
      }
    };
    Vertices.prototype.pushIncoming = function (incomming) {
      var stack = this.stack;
      for (var i = incomming.length - 1; i >= 0; i--) {
        var index = incomming[i];
        if (!this[index].flag) {
          stack.push(index);
        }
      }
    };
    Vertices.prototype.each = function (indices, cb) {
      for (var i = 0, l = indices.length; i < l; i++) {
        var vertex = this[indices[i]];
        cb(vertex.key, vertex.val);
      }
    };
    return Vertices;
  }();
  /** @private */
  var IntStack = function () {
    function IntStack() {
      this.length = 0;
    }
    IntStack.prototype.push = function (n) {
      this[this.length++] = n | 0;
    };
    IntStack.prototype.pop = function () {
      return this[--this.length] | 0;
    };
    return IntStack;
  }();
});
define("ember-babel", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.assertThisInitialized = assertThisInitialized;
  _exports.classCallCheck = classCallCheck;
  _exports.createClass = createClass;
  _exports.createForOfIteratorHelperLoose = createForOfIteratorHelperLoose;
  _exports.createSuper = createSuper;
  _exports.inheritsLoose = inheritsLoose;
  _exports.objectDestructuringEmpty = objectDestructuringEmpty;
  _exports.possibleConstructorReturn = possibleConstructorReturn;
  _exports.taggedTemplateLiteralLoose = taggedTemplateLiteralLoose;
  _exports.wrapNativeSuper = wrapNativeSuper;
  /* globals Reflect */

  var setPrototypeOf = Object.setPrototypeOf;
  var getPrototypeOf = Object.getPrototypeOf;
  var hasReflectConstruct = typeof Reflect === 'object' && typeof Reflect.construct === 'function';
  var nativeWrapperCache = new Map();

  // Super minimal version of Babel's wrapNativeSuper. We only use this for
  // extending Function, for ComputedDecoratorImpl and AliasDecoratorImpl. We know
  // we will never directly create an instance of these classes so no need to
  // include `construct` code or other helpers.
  function wrapNativeSuper(Class) {
    if (nativeWrapperCache.has(Class)) {
      return nativeWrapperCache.get(Class);
    }
    function Wrapper() {}
    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    nativeWrapperCache.set(Class, Wrapper);
    return setPrototypeOf(Wrapper, Class);
  }
  function classCallCheck(instance, Constructor) {
    if (true /* DEBUG */) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
      }
    }
  }

  /*
    Overrides default `inheritsLoose` to _also_ call `Object.setPrototypeOf`.
    This is needed so that we can use `loose` option with the
    `@babel/plugin-transform-classes` (because we want simple assignment to the
    prototype wherever possible) but also keep our constructor based prototypal
    inheritance working properly
  */
  function inheritsLoose(subClass, superClass) {
    if (true /* DEBUG */) {
      if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function');
      }
    }
    subClass.prototype = Object.create(superClass === null ? null : superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass !== null) {
      setPrototypeOf(subClass, superClass);
    }
  }
  function taggedTemplateLiteralLoose(strings, raw) {
    if (!raw) {
      raw = strings.slice(0);
    }
    strings.raw = raw;
    return strings;
  }
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ('value' in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  /*
    Differs from default implementation by avoiding boolean coercion of
    `protoProps` and `staticProps`.
  */
  function createClass(Constructor, protoProps, staticProps) {
    if (protoProps !== null && protoProps !== undefined) {
      _defineProperties(Constructor.prototype, protoProps);
    }
    if (staticProps !== null && staticProps !== undefined) {
      _defineProperties(Constructor, staticProps);
    }
    return Constructor;
  }
  function assertThisInitialized(self) {
    if (true /* DEBUG */ && self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }

  /*
    Adds `DEBUG` guard to error being thrown, and avoids boolean coercion of `call`.
  */
  function possibleConstructorReturn(self, call) {
    if (typeof call === 'object' && call !== null || typeof call === 'function') {
      return call;
    }
    return assertThisInitialized(self);
  }
  function objectDestructuringEmpty(obj) {
    if (true /* DEBUG */ && (obj === null || obj === undefined)) {
      throw new TypeError('Cannot destructure undefined');
    }
  }

  /*
    Differs from default implementation by checking for _any_ `Reflect.construct`
    (the default implementation tries to ensure that `Reflect.construct` is truly
    the native one).
  
    Original source: https://github.com/babel/babel/blob/v7.9.2/packages/babel-helpers/src/helpers.js#L738-L757
  */
  function createSuper(Derived) {
    return function () {
      var Super = getPrototypeOf(Derived);
      var result;
      if (hasReflectConstruct) {
        // NOTE: This doesn't work if this.__proto__.constructor has been modified.
        var NewTarget = getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return possibleConstructorReturn(this, result);
    };
  }

  /*
    Does not differ from default implementation.
  */
  function arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    var arr2 = new Array(len);
    for (var i = 0; i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }

  /*
    Does not differ from default implementation.
  */
  function unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === 'string') return arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === 'Object' && o.constructor) n = o.constructor.name;
    if (n === 'Map' || n === 'Set') return Array.from(n);
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
  }

  /*
    Does not differ from default implementation.
  */
  function createForOfIteratorHelperLoose(o) {
    var i = 0;
    if (typeof Symbol === 'undefined' || o[Symbol.iterator] == null) {
      // Fallback for engines without symbol support
      if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
      throw new TypeError('Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
    }
    i = o[Symbol.iterator]();
    return i.next.bind(i);
  }
});
define("ember-testing/index", ["exports", "ember-testing/lib/test", "ember-testing/lib/adapters/adapter", "ember-testing/lib/setup_for_testing", "ember-testing/lib/adapters/qunit", "ember-testing/lib/ext/application", "ember-testing/lib/ext/rsvp", "ember-testing/lib/helpers", "ember-testing/lib/initializers"], function (_exports, _test, _adapter, _setup_for_testing, _qunit, _application, _rsvp, _helpers, _initializers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "Adapter", {
    enumerable: true,
    get: function () {
      return _adapter.default;
    }
  });
  Object.defineProperty(_exports, "QUnitAdapter", {
    enumerable: true,
    get: function () {
      return _qunit.default;
    }
  });
  Object.defineProperty(_exports, "Test", {
    enumerable: true,
    get: function () {
      return _test.default;
    }
  });
  Object.defineProperty(_exports, "setupForTesting", {
    enumerable: true,
    get: function () {
      return _setup_for_testing.default;
    }
  });
});
define("ember-testing/lib/adapters/adapter", ["exports", "@ember/object"], function (_exports, _object) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var Adapter = _object.default.extend({
    /**
      This callback will be called whenever an async operation is about to start.
         Override this to call your framework's methods that handle async
      operations.
         @public
      @method asyncStart
    */
    asyncStart() {},
    /**
      This callback will be called whenever an async operation has completed.
         @public
      @method asyncEnd
    */
    asyncEnd() {},
    /**
      Override this method with your testing framework's false assertion.
      This function is called whenever an exception occurs causing the testing
      promise to fail.
         QUnit example:
         ```javascript
        exception: function(error) {
          ok(false, error);
        };
      ```
         @public
      @method exception
      @param {String} error The exception to be raised.
    */
    exception(error) {
      throw error;
    }
  });
  var _default = _exports.default = Adapter;
});
define("ember-testing/lib/adapters/qunit", ["exports", "@ember/debug", "ember-testing/lib/adapters/adapter"], function (_exports, _debug, _adapter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /* globals QUnit */

  function isVeryOldQunit(obj) {
    return obj != null && typeof obj.stop === 'function';
  }
  var QUnitAdapter = _adapter.default.extend({
    init() {
      this.doneCallbacks = [];
    },
    asyncStart() {
      if (isVeryOldQunit(QUnit)) {
        // very old QUnit version
        // eslint-disable-next-line qunit/no-qunit-stop
        QUnit.stop();
      } else {
        this.doneCallbacks.push(QUnit.config.current ? QUnit.config.current.assert.async() : null);
      }
    },
    asyncEnd() {
      // checking for QUnit.stop here (even though we _need_ QUnit.start) because
      // QUnit.start() still exists in QUnit 2.x (it just throws an error when calling
      // inside a test context)
      if (isVeryOldQunit(QUnit)) {
        QUnit.start();
      } else {
        var done = this.doneCallbacks.pop();
        // This can be null if asyncStart() was called outside of a test
        if (done) {
          done();
        }
      }
    },
    exception(error) {
      QUnit.config.current.assert.ok(false, (0, _debug.inspect)(error));
    }
  });
  var _default = _exports.default = QUnitAdapter;
});
define("ember-testing/lib/ext/application", ["@ember/application", "ember-testing/lib/setup_for_testing", "ember-testing/lib/test/helpers", "ember-testing/lib/test/promise", "ember-testing/lib/test/run", "ember-testing/lib/test/on_inject_helpers", "ember-testing/lib/test/adapter", "@ember/debug"], function (_application, _setup_for_testing, _helpers, _promise, _run, _on_inject_helpers, _adapter, _debug) {
  "use strict";

  _application.default.reopen({
    /**
     This property contains the testing helpers for the current application. These
     are created once you call `injectTestHelpers` on your `Application`
     instance. The included helpers are also available on the `window` object by
     default, but can be used from this object on the individual application also.
         @property testHelpers
      @type {Object}
      @default {}
      @public
    */
    testHelpers: {},
    /**
     This property will contain the original methods that were registered
     on the `helperContainer` before `injectTestHelpers` is called.
        When `removeTestHelpers` is called, these methods are restored to the
     `helperContainer`.
         @property originalMethods
      @type {Object}
      @default {}
      @private
      @since 1.3.0
    */
    originalMethods: {},
    /**
    This property indicates whether or not this application is currently in
    testing mode. This is set when `setupForTesting` is called on the current
    application.
       @property testing
    @type {Boolean}
    @default false
    @since 1.3.0
    @public
    */
    testing: false,
    /**
      This hook defers the readiness of the application, so that you can start
      the app when your tests are ready to run. It also sets the router's
      location to 'none', so that the window's location will not be modified
      (preventing both accidental leaking of state between tests and interference
      with your testing framework). `setupForTesting` should only be called after
      setting a custom `router` class (for example `App.Router = Router.extend(`).
         Example:
         ```
      App.setupForTesting();
      ```
         @method setupForTesting
      @public
    */
    setupForTesting() {
      (0, _setup_for_testing.default)();
      this.testing = true;
      this.resolveRegistration('router:main').reopen({
        location: 'none'
      });
    },
    /**
      This will be used as the container to inject the test helpers into. By
      default the helpers are injected into `window`.
         @property helperContainer
      @type {Object} The object to be used for test helpers.
      @default window
      @since 1.2.0
      @private
    */
    helperContainer: null,
    /**
      This injects the test helpers into the `helperContainer` object. If an object is provided
      it will be used as the helperContainer. If `helperContainer` is not set it will default
      to `window`. If a function of the same name has already been defined it will be cached
      (so that it can be reset if the helper is removed with `unregisterHelper` or
      `removeTestHelpers`).
         Any callbacks registered with `onInjectHelpers` will be called once the
      helpers have been injected.
         Example:
      ```
      App.injectTestHelpers();
      ```
         @method injectTestHelpers
      @public
    */
    injectTestHelpers(helperContainer) {
      if (helperContainer) {
        this.helperContainer = helperContainer;
      } else {
        this.helperContainer = window;
      }
      this.reopen({
        willDestroy() {
          this._super(...arguments);
          this.removeTestHelpers();
        }
      });
      this.testHelpers = {};
      for (var name in _helpers.helpers) {
        // SAFETY: It is safe to access a property on an object
        this.originalMethods[name] = this.helperContainer[name];
        // SAFETY: It is not quite as safe to do this, but it _seems_ to be ok.
        this.testHelpers[name] = this.helperContainer[name] = helper(this, name);
        // SAFETY: We checked that it exists
        protoWrap(_promise.default.prototype, name, helper(this, name), _helpers.helpers[name].meta.wait);
      }
      (0, _on_inject_helpers.invokeInjectHelpersCallbacks)(this);
    },
    /**
      This removes all helpers that have been registered, and resets and functions
      that were overridden by the helpers.
         Example:
         ```javascript
      App.removeTestHelpers();
      ```
         @public
      @method removeTestHelpers
    */
    removeTestHelpers() {
      if (!this.helperContainer) {
        return;
      }
      for (var name in _helpers.helpers) {
        this.helperContainer[name] = this.originalMethods[name];
        // SAFETY: This is a weird thing, but it's not technically unsafe here.
        delete _promise.default.prototype[name];
        delete this.testHelpers[name];
        delete this.originalMethods[name];
      }
    }
  });
  // This method is no longer needed
  // But still here for backwards compatibility
  // of helper chaining
  function protoWrap(proto, name, callback, isAsync) {
    // SAFETY: This isn't entirely safe, but it _seems_ to be ok.
    proto[name] = function (...args) {
      if (isAsync) {
        return callback.apply(this, args);
      } else {
        // SAFETY: This is not actually safe.
        return this.then(function () {
          return callback.apply(this, args);
        });
      }
    };
  }
  function helper(app, name) {
    var helper = _helpers.helpers[name];
    (true && !(helper) && (0, _debug.assert)(`[BUG] Missing helper: ${name}`, helper));
    var fn = helper.method;
    var meta = helper.meta;
    if (!meta.wait) {
      return (...args) => fn.apply(app, [app, ...args]);
    }
    return (...args) => {
      var lastPromise = (0, _run.default)(() => (0, _promise.resolve)((0, _promise.getLastPromise)()));
      // wait for last helper's promise to resolve and then
      // execute. To be safe, we need to tell the adapter we're going
      // asynchronous here, because fn may not be invoked before we
      // return.
      (0, _adapter.asyncStart)();
      return lastPromise.then(() => fn.apply(app, [app, ...args])).finally(_adapter.asyncEnd);
    };
  }
});
define("ember-testing/lib/ext/rsvp", ["exports", "@ember/-internals/runtime", "@ember/runloop", "@ember/debug", "ember-testing/lib/test/adapter"], function (_exports, _runtime, _runloop, _debug, _adapter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _runtime.RSVP.configure('async', function (callback, promise) {
    // if schedule will cause autorun, we need to inform adapter
    if ((0, _debug.isTesting)() && !_runloop._backburner.currentInstance) {
      (0, _adapter.asyncStart)();
      _runloop._backburner.schedule('actions', () => {
        (0, _adapter.asyncEnd)();
        callback(promise);
      });
    } else {
      _runloop._backburner.schedule('actions', () => callback(promise));
    }
  });
  var _default = _exports.default = _runtime.RSVP;
});
define("ember-testing/lib/helpers", ["ember-testing/lib/test/helpers", "ember-testing/lib/helpers/and_then", "ember-testing/lib/helpers/current_path", "ember-testing/lib/helpers/current_route_name", "ember-testing/lib/helpers/current_url", "ember-testing/lib/helpers/pause_test", "ember-testing/lib/helpers/visit", "ember-testing/lib/helpers/wait"], function (_helpers, _and_then, _current_path, _current_route_name, _current_url, _pause_test, _visit, _wait) {
  "use strict";

  (0, _helpers.registerAsyncHelper)('visit', _visit.default);
  (0, _helpers.registerAsyncHelper)('wait', _wait.default);
  (0, _helpers.registerAsyncHelper)('andThen', _and_then.default);
  (0, _helpers.registerAsyncHelper)('pauseTest', _pause_test.pauseTest);
  (0, _helpers.registerHelper)('currentRouteName', _current_route_name.default);
  (0, _helpers.registerHelper)('currentPath', _current_path.default);
  (0, _helpers.registerHelper)('currentURL', _current_url.default);
  (0, _helpers.registerHelper)('resumeTest', _pause_test.resumeTest);
});
define("ember-testing/lib/helpers/and_then", ["exports", "@ember/debug"], function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = andThen;
  function andThen(app, callback) {
    var wait = app.testHelpers['wait'];
    (true && !(wait) && (0, _debug.assert)('[BUG] Missing wait helper', wait));
    return wait(callback(app));
  }
});
define("ember-testing/lib/helpers/current_path", ["exports", "@ember/object", "@ember/routing/-internals", "@ember/debug"], function (_exports, _object, _internals, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = currentPath;
  /**
  @module ember
  */

  /**
    Returns the current path.
  
  Example:
  
  ```javascript
  function validateURL() {
    equal(currentPath(), 'some.path.index', "correct path was transitioned into.");
  }
  
  click('#some-link-id').then(validateURL);
  ```
  
  @method currentPath
  @return {Object} The currently active path.
  @since 1.5.0
  @public
  */
  function currentPath(app) {
    (true && !(app.__container__) && (0, _debug.assert)('[BUG] app.__container__ is not set', app.__container__));
    var routingService = app.__container__.lookup('service:-routing');
    (true && !(routingService instanceof _internals.RoutingService) && (0, _debug.assert)('[BUG] service:-routing is not a RoutingService', routingService instanceof _internals.RoutingService));
    return (0, _object.get)(routingService, 'currentPath');
  }
});
define("ember-testing/lib/helpers/current_route_name", ["exports", "@ember/object", "@ember/routing/-internals", "@ember/debug"], function (_exports, _object, _internals, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = currentRouteName;
  /**
  @module ember
  */

  /**
    Returns the currently active route name.
  
  Example:
  
  ```javascript
  function validateRouteName() {
    equal(currentRouteName(), 'some.path', "correct route was transitioned into.");
  }
  visit('/some/path').then(validateRouteName)
  ```
  
  @method currentRouteName
  @return {Object} The name of the currently active route.
  @since 1.5.0
  @public
  */
  function currentRouteName(app) {
    (true && !(app.__container__) && (0, _debug.assert)('[BUG] app.__container__ is not set', app.__container__));
    var routingService = app.__container__.lookup('service:-routing');
    (true && !(routingService instanceof _internals.RoutingService) && (0, _debug.assert)('[BUG] service:-routing is not a RoutingService', routingService instanceof _internals.RoutingService));
    return (0, _object.get)(routingService, 'currentRouteName');
  }
});
define("ember-testing/lib/helpers/current_url", ["exports", "@ember/object", "@ember/debug", "@ember/routing/router"], function (_exports, _object, _debug, _router) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = currentURL;
  /**
  @module ember
  */

  /**
    Returns the current URL.
  
  Example:
  
  ```javascript
  function validateURL() {
    equal(currentURL(), '/some/path', "correct URL was transitioned into.");
  }
  
  click('#some-link-id').then(validateURL);
  ```
  
  @method currentURL
  @return {Object} The currently active URL.
  @since 1.5.0
  @public
  */
  function currentURL(app) {
    (true && !(app.__container__) && (0, _debug.assert)('[BUG] app.__container__ is not set', app.__container__));
    var router = app.__container__.lookup('router:main');
    (true && !(router instanceof _router.default) && (0, _debug.assert)('[BUG] router:main is not a Router', router instanceof _router.default));
    var location = (0, _object.get)(router, 'location');
    (true && !(typeof location !== 'string') && (0, _debug.assert)('[BUG] location is still a string', typeof location !== 'string'));
    return location.getURL();
  }
});
define("ember-testing/lib/helpers/pause_test", ["exports", "@ember/-internals/runtime", "@ember/debug"], function (_exports, _runtime, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.pauseTest = pauseTest;
  _exports.resumeTest = resumeTest;
  /**
  @module ember
  */

  var resume;
  /**
   Resumes a test paused by `pauseTest`.
  
   @method resumeTest
   @return {void}
   @public
  */
  function resumeTest() {
    (true && !(resume) && (0, _debug.assert)('Testing has not been paused. There is nothing to resume.', resume));
    resume();
    resume = undefined;
  }
  /**
   Pauses the current test - this is useful for debugging while testing or for test-driving.
   It allows you to inspect the state of your application at any point.
   Example (The test will pause before clicking the button):
  
   ```javascript
   visit('/')
   return pauseTest();
   click('.btn');
   ```
  
   You may want to turn off the timeout before pausing.
  
   qunit (timeout available to use as of 2.4.0):
  
   ```
   visit('/');
   assert.timeout(0);
   return pauseTest();
   click('.btn');
   ```
  
   mocha (timeout happens automatically as of ember-mocha v0.14.0):
  
   ```
   visit('/');
   this.timeout(0);
   return pauseTest();
   click('.btn');
   ```
  
  
   @since 1.9.0
   @method pauseTest
   @return {Object} A promise that will never resolve
   @public
  */
  function pauseTest() {
    (0, _debug.info)('Testing paused. Use `resumeTest()` to continue.');
    return new _runtime.RSVP.Promise(resolve => {
      resume = resolve;
    }, 'TestAdapter paused promise');
  }
});
define("ember-testing/lib/helpers/visit", ["exports", "@ember/debug", "@ember/routing/router", "@ember/runloop"], function (_exports, _debug, _router, _runloop) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = visit;
  /**
    Loads a route, sets up any controllers, and renders any templates associated
    with the route as though a real user had triggered the route change while
    using your app.
  
    Example:
  
    ```javascript
    visit('posts/index').then(function() {
      // assert something
    });
    ```
  
    @method visit
    @param {String} url the name of the route
    @return {RSVP.Promise<undefined>}
    @public
  */
  function visit(app, url) {
    (true && !(app.__container__) && (0, _debug.assert)('[BUG] Missing container', app.__container__));
    var router = app.__container__.lookup('router:main');
    (true && !(router instanceof _router.default) && (0, _debug.assert)('[BUG] router:main is not a Router', router instanceof _router.default));
    var shouldHandleURL = false;
    app.boot().then(() => {
      (true && !(typeof router.location !== 'string') && (0, _debug.assert)('[BUG] router.location is still a string', typeof router.location !== 'string'));
      router.location.setURL(url);
      if (shouldHandleURL) {
        (true && !(app.__deprecatedInstance__) && (0, _debug.assert)("[BUG] __deprecatedInstance__ isn't set", app.__deprecatedInstance__));
        (0, _runloop.run)(app.__deprecatedInstance__, 'handleURL', url);
      }
    });
    if (app._readinessDeferrals > 0) {
      // SAFETY: This should be safe, though it is odd.
      router.initialURL = url;
      (0, _runloop.run)(app, 'advanceReadiness');
      delete router.initialURL;
    } else {
      shouldHandleURL = true;
    }
    var wait = app.testHelpers['wait'];
    (true && !(wait) && (0, _debug.assert)('[BUG] missing wait helper', wait));
    return wait();
  }
});
define("ember-testing/lib/helpers/wait", ["exports", "ember-testing/lib/test/waiters", "@ember/-internals/runtime", "@ember/runloop", "ember-testing/lib/test/pending_requests", "@ember/debug", "@ember/routing/router"], function (_exports, _waiters, _runtime, _runloop, _pending_requests, _debug, _router) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = wait;
  /**
  @module ember
  */

  /**
    Causes the run loop to process any pending events. This is used to ensure that
    any async operations from other helpers (or your assertions) have been processed.
  
    This is most often used as the return value for the helper functions (see 'click',
    'fillIn','visit',etc). However, there is a method to register a test helper which
    utilizes this method without the need to actually call `wait()` in your helpers.
  
    The `wait` helper is built into `registerAsyncHelper` by default. You will not need
    to `return app.testHelpers.wait();` - the wait behavior is provided for you.
  
    Example:
  
    ```javascript
    import { registerAsyncHelper } from '@ember/test';
  
    registerAsyncHelper('loginUser', function(app, username, password) {
      visit('secured/path/here')
        .fillIn('#username', username)
        .fillIn('#password', password)
        .click('.submit');
    });
    ```
  
    @method wait
    @param {Object} value The value to be returned.
    @return {RSVP.Promise<any>} Promise that resolves to the passed value.
    @public
    @since 1.0.0
  */
  function wait(app, value) {
    return new _runtime.RSVP.Promise(function (resolve) {
      (true && !(app.__container__) && (0, _debug.assert)('[BUG] Missing container', app.__container__));
      var router = app.__container__.lookup('router:main');
      (true && !(router instanceof _router.default) && (0, _debug.assert)('[BUG] Expected router:main to be a subclass of Ember Router', router instanceof _router.default)); // Every 10ms, poll for the async thing to have finished
      var watcher = setInterval(() => {
        // 1. If the router is loading, keep polling
        var routerIsLoading = router._routerMicrolib && Boolean(router._routerMicrolib.activeTransition);
        if (routerIsLoading) {
          return;
        }
        // 2. If there are pending Ajax requests, keep polling
        if ((0, _pending_requests.pendingRequests)()) {
          return;
        }
        // 3. If there are scheduled timers or we are inside of a run loop, keep polling
        if ((0, _runloop._hasScheduledTimers)() || (0, _runloop._getCurrentRunLoop)()) {
          return;
        }
        if ((0, _waiters.checkWaiters)()) {
          return;
        }
        // Stop polling
        clearInterval(watcher);
        // Synchronously resolve the promise
        (0, _runloop.run)(null, resolve, value);
      }, 10);
    });
  }
});
define("ember-testing/lib/initializers", ["@ember/application"], function (_application) {
  "use strict";

  var name = 'deferReadiness in `testing` mode';
  (0, _application.onLoad)('Ember.Application', function (ApplicationClass) {
    if (!ApplicationClass.initializers[name]) {
      ApplicationClass.initializer({
        name: name,
        initialize(application) {
          if (application.testing) {
            application.deferReadiness();
          }
        }
      });
    }
  });
});
define("ember-testing/lib/setup_for_testing", ["exports", "@ember/debug", "ember-testing/lib/test/adapter", "ember-testing/lib/adapters/adapter", "ember-testing/lib/adapters/qunit"], function (_exports, _debug, _adapter, _adapter2, _qunit) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = setupForTesting;
  /* global self */

  /**
    Sets Ember up for testing. This is useful to perform
    basic setup steps in order to unit test.
  
    Use `App.setupForTesting` to perform integration tests (full
    application testing).
  
    @method setupForTesting
    @namespace Ember
    @since 1.5.0
    @private
  */
  function setupForTesting() {
    (0, _debug.setTesting)(true);
    var adapter = (0, _adapter.getAdapter)();
    // if adapter is not manually set default to QUnit
    if (!adapter) {
      (0, _adapter.setAdapter)(typeof self.QUnit === 'undefined' ? _adapter2.default.create() : _qunit.default.create());
    }
  }
});
define("ember-testing/lib/test", ["exports", "ember-testing/lib/test/helpers", "ember-testing/lib/test/on_inject_helpers", "ember-testing/lib/test/promise", "ember-testing/lib/test/waiters", "ember-testing/lib/test/adapter"], function (_exports, _helpers, _on_inject_helpers, _promise, _waiters, _adapter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    @module ember
  */

  /**
    This is a container for an assortment of testing related functionality:
  
    * Choose your default test adapter (for your framework of choice).
    * Register/Unregister additional test helpers.
    * Setup callbacks to be fired when the test helpers are injected into
      your application.
  
    @class Test
    @namespace Ember
    @public
  */
  var Test = {
    /**
      Hash containing all known test helpers.
         @property _helpers
      @private
      @since 1.7.0
    */
    _helpers: _helpers.helpers,
    registerHelper: _helpers.registerHelper,
    registerAsyncHelper: _helpers.registerAsyncHelper,
    unregisterHelper: _helpers.unregisterHelper,
    onInjectHelpers: _on_inject_helpers.onInjectHelpers,
    Promise: _promise.default,
    promise: _promise.promise,
    resolve: _promise.resolve,
    registerWaiter: _waiters.registerWaiter,
    unregisterWaiter: _waiters.unregisterWaiter,
    checkWaiters: _waiters.checkWaiters
  };
  /**
   Used to allow ember-testing to communicate with a specific testing
   framework.
  
   You can manually set it before calling `App.setupForTesting()`.
  
   Example:
  
   ```javascript
   Ember.Test.adapter = MyCustomAdapter.create()
   ```
  
   If you do not set it, ember-testing will default to `Ember.Test.QUnitAdapter`.
  
   @public
   @for Ember.Test
   @property adapter
   @type {Class} The adapter to be used.
   @default Ember.Test.QUnitAdapter
  */
  Object.defineProperty(Test, 'adapter', {
    get: _adapter.getAdapter,
    set: _adapter.setAdapter
  });
  var _default = _exports.default = Test;
});
define("ember-testing/lib/test/adapter", ["exports", "@ember/-internals/error-handling"], function (_exports, _errorHandling) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.asyncEnd = asyncEnd;
  _exports.asyncStart = asyncStart;
  _exports.getAdapter = getAdapter;
  _exports.setAdapter = setAdapter;
  var adapter;
  function getAdapter() {
    return adapter;
  }
  function setAdapter(value) {
    adapter = value;
    if (value && typeof value.exception === 'function') {
      (0, _errorHandling.setDispatchOverride)(adapterDispatch);
    } else {
      (0, _errorHandling.setDispatchOverride)(null);
    }
  }
  function asyncStart() {
    if (adapter) {
      adapter.asyncStart();
    }
  }
  function asyncEnd() {
    if (adapter) {
      adapter.asyncEnd();
    }
  }
  function adapterDispatch(error) {
    adapter.exception(error);
    // @ts-expect-error Normally unreachable
    console.error(error.stack); // eslint-disable-line no-console
  }
});
define("ember-testing/lib/test/helpers", ["exports", "ember-testing/lib/test/promise"], function (_exports, _promise) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.helpers = void 0;
  _exports.registerAsyncHelper = registerAsyncHelper;
  _exports.registerHelper = registerHelper;
  _exports.unregisterHelper = unregisterHelper;
  var helpers = _exports.helpers = {};
  /**
   @module @ember/test
  */
  /**
    `registerHelper` is used to register a test helper that will be injected
    when `App.injectTestHelpers` is called.
  
    The helper method will always be called with the current Application as
    the first parameter.
  
    For example:
  
    ```javascript
    import { registerHelper } from '@ember/test';
    import { run } from '@ember/runloop';
  
    registerHelper('boot', function(app) {
      run(app, app.advanceReadiness);
    });
    ```
  
    This helper can later be called without arguments because it will be
    called with `app` as the first parameter.
  
    ```javascript
    import Application from '@ember/application';
  
    App = Application.create();
    App.injectTestHelpers();
    boot();
    ```
  
    @public
    @for @ember/test
    @static
    @method registerHelper
    @param {String} name The name of the helper method to add.
    @param {Function} helperMethod
    @param options {Object}
  */
  function registerHelper(name, helperMethod) {
    helpers[name] = {
      method: helperMethod,
      meta: {
        wait: false
      }
    };
  }
  /**
    `registerAsyncHelper` is used to register an async test helper that will be injected
    when `App.injectTestHelpers` is called.
  
    The helper method will always be called with the current Application as
    the first parameter.
  
    For example:
  
    ```javascript
    import { registerAsyncHelper } from '@ember/test';
    import { run } from '@ember/runloop';
  
    registerAsyncHelper('boot', function(app) {
      run(app, app.advanceReadiness);
    });
    ```
  
    The advantage of an async helper is that it will not run
    until the last async helper has completed.  All async helpers
    after it will wait for it complete before running.
  
  
    For example:
  
    ```javascript
    import { registerAsyncHelper } from '@ember/test';
  
    registerAsyncHelper('deletePost', function(app, postId) {
      click('.delete-' + postId);
    });
  
    // ... in your test
    visit('/post/2');
    deletePost(2);
    visit('/post/3');
    deletePost(3);
    ```
  
    @public
    @for @ember/test
    @method registerAsyncHelper
    @param {String} name The name of the helper method to add.
    @param {Function} helperMethod
    @since 1.2.0
  */
  function registerAsyncHelper(name, helperMethod) {
    helpers[name] = {
      method: helperMethod,
      meta: {
        wait: true
      }
    };
  }
  /**
    Remove a previously added helper method.
  
    Example:
  
    ```javascript
    import { unregisterHelper } from '@ember/test';
  
    unregisterHelper('wait');
    ```
  
    @public
    @method unregisterHelper
    @static
    @for @ember/test
    @param {String} name The helper to remove.
  */
  function unregisterHelper(name) {
    delete helpers[name];
    // SAFETY: This isn't necessarily a safe thing to do, but in terms of the immediate types here
    // it won't error.
    delete _promise.default.prototype[name];
  }
});
define("ember-testing/lib/test/on_inject_helpers", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.callbacks = void 0;
  _exports.invokeInjectHelpersCallbacks = invokeInjectHelpersCallbacks;
  _exports.onInjectHelpers = onInjectHelpers;
  var callbacks = _exports.callbacks = [];
  /**
    Used to register callbacks to be fired whenever `App.injectTestHelpers`
    is called.
  
    The callback will receive the current application as an argument.
  
    Example:
  
    ```javascript
    import $ from 'jquery';
  
    Ember.Test.onInjectHelpers(function() {
      $(document).ajaxSend(function() {
        Test.pendingRequests++;
      });
  
      $(document).ajaxComplete(function() {
        Test.pendingRequests--;
      });
    });
    ```
  
    @public
    @for Ember.Test
    @method onInjectHelpers
    @param {Function} callback The function to be called.
  */
  function onInjectHelpers(callback) {
    callbacks.push(callback);
  }
  function invokeInjectHelpersCallbacks(app) {
    for (var callback of callbacks) {
      callback(app);
    }
  }
});
define("ember-testing/lib/test/pending_requests", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.clearPendingRequests = clearPendingRequests;
  _exports.decrementPendingRequests = decrementPendingRequests;
  _exports.incrementPendingRequests = incrementPendingRequests;
  _exports.pendingRequests = pendingRequests;
  var requests = [];
  function pendingRequests() {
    return requests.length;
  }
  function clearPendingRequests() {
    requests.length = 0;
  }
  function incrementPendingRequests(_, xhr) {
    requests.push(xhr);
  }
  function decrementPendingRequests(_, xhr) {
    setTimeout(function () {
      for (var i = 0; i < requests.length; i++) {
        if (xhr === requests[i]) {
          requests.splice(i, 1);
          break;
        }
      }
    }, 0);
  }
});
define("ember-testing/lib/test/promise", ["exports", "@ember/-internals/runtime", "ember-testing/lib/test/run"], function (_exports, _runtime, _run) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.getLastPromise = getLastPromise;
  _exports.promise = promise;
  _exports.resolve = resolve;
  var lastPromise = null;
  class TestPromise extends _runtime.RSVP.Promise {
    constructor(executor, label) {
      super(executor, label);
      lastPromise = this;
    }
    then(onFulfilled, onRejected, label) {
      var normalizedOnFulfilled = typeof onFulfilled === 'function' ? result => isolate(onFulfilled, result) : undefined;
      return super.then(normalizedOnFulfilled, onRejected, label);
    }
  }
  /**
    This returns a thenable tailored for testing.  It catches failed
    `onSuccess` callbacks and invokes the `Ember.Test.adapter.exception`
    callback in the last chained then.
  
    This method should be returned by async helpers such as `wait`.
  
    @public
    @for Ember.Test
    @method promise
    @param {Function} resolver The function used to resolve the promise.
    @param {String} label An optional string for identifying the promise.
  */
  _exports.default = TestPromise;
  function promise(resolver, label) {
    var fullLabel = `Ember.Test.promise: ${label || '<Unknown Promise>'}`;
    return new TestPromise(resolver, fullLabel);
  }
  /**
    Replacement for `Ember.RSVP.resolve`
    The only difference is this uses
    an instance of `Ember.Test.Promise`
  
    @public
    @for Ember.Test
    @method resolve
    @param {Mixed} The value to resolve
    @since 1.2.0
  */
  function resolve(result, label) {
    return TestPromise.resolve(result, label);
  }
  function getLastPromise() {
    return lastPromise;
  }
  // This method isolates nested async methods
  // so that they don't conflict with other last promises.
  //
  // 1. Set `Ember.Test.lastPromise` to null
  // 2. Invoke method
  // 3. Return the last promise created during method
  function isolate(onFulfilled, result) {
    // Reset lastPromise for nested helpers
    lastPromise = null;
    var value = onFulfilled(result);
    var promise = lastPromise;
    lastPromise = null;
    // If the method returned a promise
    // return that promise. If not,
    // return the last async helper's promise
    if (value && value instanceof TestPromise || !promise) {
      return value;
    } else {
      return (0, _run.default)(() => resolve(promise).then(() => value));
    }
  }
});
define("ember-testing/lib/test/run", ["exports", "@ember/runloop"], function (_exports, _runloop) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = run;
  function run(fn) {
    if (!(0, _runloop._getCurrentRunLoop)()) {
      return (0, _runloop.run)(fn);
    } else {
      return fn();
    }
  }
});
define("ember-testing/lib/test/waiters", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.checkWaiters = checkWaiters;
  _exports.registerWaiter = registerWaiter;
  _exports.unregisterWaiter = unregisterWaiter;
  /**
   @module @ember/test
  */
  var contexts = [];
  var callbacks = [];
  function registerWaiter(...args) {
    var checkedCallback;
    var checkedContext;
    if (args.length === 1) {
      checkedContext = null;
      checkedCallback = args[0];
    } else {
      checkedContext = args[0];
      checkedCallback = args[1];
    }
    if (indexOf(checkedContext, checkedCallback) > -1) {
      return;
    }
    contexts.push(checkedContext);
    callbacks.push(checkedCallback);
  }
  /**
     `unregisterWaiter` is used to unregister a callback that was
     registered with `registerWaiter`.
  
     @public
     @for @ember/test
     @static
     @method unregisterWaiter
     @param {Object} context (optional)
     @param {Function} callback
     @since 1.2.0
  */
  function unregisterWaiter(context, callback) {
    if (!callbacks.length) {
      return;
    }
    if (arguments.length === 1) {
      callback = context;
      context = null;
    }
    var i = indexOf(context, callback);
    if (i === -1) {
      return;
    }
    contexts.splice(i, 1);
    callbacks.splice(i, 1);
  }
  /**
    Iterates through each registered test waiter, and invokes
    its callback. If any waiter returns false, this method will return
    true indicating that the waiters have not settled yet.
  
    This is generally used internally from the acceptance/integration test
    infrastructure.
  
    @public
    @for @ember/test
    @static
    @method checkWaiters
  */
  function checkWaiters() {
    if (!callbacks.length) {
      return false;
    }
    for (var i = 0; i < callbacks.length; i++) {
      var context = contexts[i];
      var callback = callbacks[i];
      // SAFETY: The loop ensures that this exists
      if (!callback.call(context)) {
        return true;
      }
    }
    return false;
  }
  function indexOf(context, callback) {
    for (var i = 0; i < callbacks.length; i++) {
      if (callbacks[i] === callback && contexts[i] === context) {
        return i;
      }
    }
    return -1;
  }
});
define("ember/index", ["exports", "require", "@ember/-internals/environment", "@ember/-internals/utils", "@ember/-internals/container", "@ember/instrumentation", "@ember/-internals/meta", "@ember/-internals/metal", "@ember/canary-features", "@ember/debug", "backburner", "@ember/controller", "@ember/string", "@ember/service", "@ember/object", "@ember/object/-internals", "@ember/object/compat", "@ember/object/computed", "@ember/object/events", "@ember/-internals/runtime", "@ember/-internals/glimmer", "ember/version", "@ember/-internals/views", "@ember/debug/container-debug-adapter", "@ember/debug/data-adapter", "@ember/error", "@ember/runloop", "@ember/-internals/error-handling", "@ember/array", "@ember/array/mutable", "@ember/array/proxy", "@ember/application", "@ember/application/instance", "@ember/application/namespace", "@ember/component", "@ember/component/helper", "@ember/engine", "@ember/engine/instance", "@ember/enumerable", "@ember/enumerable/mutable", "@ember/object/core", "@ember/object/evented", "@ember/object/mixin", "@ember/object/observable", "@ember/object/observers", "@ember/object/proxy", "@ember/object/promise-proxy-mixin", "@ember/polyfills", "@ember/routing/auto-location", "@ember/routing/hash-location", "@ember/routing/history-location", "@ember/routing/none-location", "@ember/routing/location", "@ember/routing/route", "@ember/routing/router", "@ember/routing/-internals", "@ember/utils", "@glimmer/runtime", "@glimmer/manager", "@ember/destroyable"], function (_exports, _require, _environment, utils, _container, instrumentation, _meta, metal, _canaryFeatures, _debug, _backburner, _controller, _string, _service, _object, _internals, _compat, _computed, _events, _runtime, _glimmer, _version, views, _containerDebugAdapter, _dataAdapter, _error, _runloop, _errorHandling, _array, _mutable, _proxy, _application, _instance, _namespace, _component, _helper, _engine, _instance2, _enumerable, _mutable2, _core, _evented, _mixin, _observable, _observers, _proxy2, _promiseProxyMixin, _polyfills, _autoLocation, _hashLocation, _historyLocation, _noneLocation, _location, _route, _router, _internals2, _utils2, glimmerRuntime, _manager, _destroyable) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var EmberDebug = _debug;
  /**
  @module ember
  */

  /**
    Namespace for injection helper methods.
  
    @class inject
    @namespace Ember
    @static
    @public
  */
  function inject() {
    (true && !(false) && (0, _debug.assert)(`Injected properties must be created through helpers, see '${Object.keys(inject).map(k => `'inject.${k}'`).join(' or ')}'`));
  }
  // ****@ember/controller****
  inject.controller = _controller.inject;
  // ****@ember/service****
  inject.service = _service.service;
  var PartialEmber = {
    isNamespace: true,
    toString() {
      return 'Ember';
    },
    // ****@ember/-internals/container****
    Container: _container.Container,
    Registry: _container.Registry,
    // ****@ember/-internals/glimmer****
    // Partially re-exported from @glimmer/manager
    _setComponentManager: _glimmer.setComponentManager,
    _componentManagerCapabilities: _glimmer.componentCapabilities,
    _modifierManagerCapabilities: _glimmer.modifierCapabilities,
    // ****@ember/-internals/meta****
    meta: _meta.meta,
    // ****@ember/-internals/metal****
    _createCache: metal.createCache,
    _cacheGetValue: metal.getValue,
    _cacheIsConst: metal.isConst,
    _descriptor: metal.nativeDescDecorator,
    _getPath: metal._getPath,
    _setClassicDecorator: metal.setClassicDecorator,
    _tracked: metal.tracked,
    beginPropertyChanges: metal.beginPropertyChanges,
    changeProperties: metal.changeProperties,
    endPropertyChanges: metal.endPropertyChanges,
    hasListeners: metal.hasListeners,
    libraries: metal.libraries,
    // ****@ember/-internals/runtime****
    _ContainerProxyMixin: _runtime.ContainerProxyMixin,
    _ProxyMixin: _runtime._ProxyMixin,
    _RegistryProxyMixin: _runtime.RegistryProxyMixin,
    ActionHandler: _runtime.ActionHandler,
    Comparable: _runtime.Comparable,
    RSVP: _runtime.RSVP,
    // ****@ember/-internals/view****
    ComponentLookup: views.ComponentLookup,
    EventDispatcher: views.EventDispatcher,
    // ****@ember/-internals/utils****
    _Cache: utils.Cache,
    GUID_KEY: utils.GUID_KEY,
    canInvoke: utils.canInvoke,
    generateGuid: utils.generateGuid,
    guidFor: utils.guidFor,
    uuid: utils.uuid,
    wrap: utils.wrap,
    // ****@ember/application****
    getOwner: _application.getOwner,
    onLoad: _application.onLoad,
    runLoadHooks: _application.runLoadHooks,
    setOwner: _application.setOwner,
    Application: _application.default,
    // ****@ember/application/instance****
    ApplicationInstance: _instance.default,
    // ****@ember/application/namespace****
    Namespace: _namespace.default,
    // ****@ember/array****
    A: _array.A,
    Array: _array.default,
    NativeArray: _array.NativeArray,
    isArray: _array.isArray,
    makeArray: _array.makeArray,
    // ****@ember/array/mutable****
    MutableArray: _mutable.default,
    // ****@ember/array/proxy****
    ArrayProxy: _proxy.default,
    // ****@ember/canary-features****
    FEATURES: Object.assign({
      isEnabled: _canaryFeatures.isEnabled
    }, _canaryFeatures.FEATURES),
    // ****@ember/component****
    _Input: _component.Input,
    Component: _component.default,
    // ****@ember/component/helper****
    Helper: _helper.default,
    // ****@ember/controller****
    Controller: _controller.default,
    ControllerMixin: _controller.ControllerMixin,
    // ****@ember/debug****
    _captureRenderTree: _debug.captureRenderTree,
    assert: EmberDebug.assert,
    warn: EmberDebug.warn,
    debug: EmberDebug.debug,
    deprecate: EmberDebug.deprecate,
    deprecateFunc: EmberDebug.deprecateFunc,
    runInDebug: EmberDebug.runInDebug,
    inspect: EmberDebug.inspect,
    Debug: {
      registerDeprecationHandler: EmberDebug.registerDeprecationHandler,
      registerWarnHandler: EmberDebug.registerWarnHandler,
      // ****@ember/-internals/metal****
      isComputed: metal.isComputed
    },
    // ****@ember/debug/container-debug-adapter****
    ContainerDebugAdapter: _containerDebugAdapter.default,
    // ****@ember/debug/data-adapter****
    DataAdapter: _dataAdapter.default,
    // ****@ember/destroyable****
    _assertDestroyablesDestroyed: _destroyable.assertDestroyablesDestroyed,
    _associateDestroyableChild: _destroyable.associateDestroyableChild,
    _enableDestroyableTracking: _destroyable.enableDestroyableTracking,
    _isDestroying: _destroyable.isDestroying,
    _isDestroyed: _destroyable.isDestroyed,
    _registerDestructor: _destroyable.registerDestructor,
    _unregisterDestructor: _destroyable.unregisterDestructor,
    destroy: _destroyable.destroy,
    // ****@ember/engine****
    Engine: _engine.default,
    // ****@ember/engine/instance****
    EngineInstance: _instance2.default,
    // ****@ember/enumerable****
    Enumerable: _enumerable.default,
    // ****@ember/enumerable/mutable****
    MutableEnumerable: _mutable2.default,
    // ****@ember/error****
    Error: _error.default,
    // ****@ember/instrumentation****
    instrument: instrumentation.instrument,
    subscribe: instrumentation.subscribe,
    Instrumentation: {
      instrument: instrumentation.instrument,
      subscribe: instrumentation.subscribe,
      unsubscribe: instrumentation.unsubscribe,
      reset: instrumentation.reset
    },
    // ****@ember/object****
    Object: _object.default,
    _action: _object.action,
    computed: _object.computed,
    defineProperty: _object.defineProperty,
    get: _object.get,
    getProperties: _object.getProperties,
    notifyPropertyChange: _object.notifyPropertyChange,
    observer: _object.observer,
    set: _object.set,
    trySet: _object.trySet,
    setProperties: _object.setProperties,
    // ****@ember/object/-internals****
    cacheFor: _internals.cacheFor,
    // ****@ember/object/compat****
    _dependentKeyCompat: _compat.dependentKeyCompat,
    // ****@ember/object/computed****
    ComputedProperty: _computed.default,
    expandProperties: _computed.expandProperties,
    // ****@ember/object/core****
    CoreObject: _core.default,
    // ****@ember/object/evented****
    Evented: _evented.default,
    on: _evented.on,
    // ****@ember/object/events****
    addListener: _events.addListener,
    removeListener: _events.removeListener,
    sendEvent: _events.sendEvent,
    // ****@ember/object/mixin****
    Mixin: _mixin.default,
    mixin: _mixin.mixin,
    // ****@ember/object/observable****
    Observable: _observable.default,
    // ****@ember/object/observers****
    addObserver: _observers.addObserver,
    removeObserver: _observers.removeObserver,
    // ****@ember/object/promise-proxy-mixin****
    PromiseProxyMixin: _promiseProxyMixin.default,
    // ****@ember/object/proxy****
    ObjectProxy: _proxy2.default,
    // ****@ember/polyfills****
    assign: _polyfills.assign,
    // ****@ember/routing/-internals****
    RouterDSL: _internals2.DSL,
    controllerFor: _internals2.controllerFor,
    generateController: _internals2.generateController,
    generateControllerFactory: _internals2.generateControllerFactory,
    // ****@ember/routing/auto-location****
    AutoLocation: _autoLocation.default,
    // ****@ember/routing/hash-location****
    HashLocation: _hashLocation.default,
    // ****@ember/routing/history-location****
    HistoryLocation: _historyLocation.default,
    // ****@ember/routing/location****
    Location: _location.default,
    // ****@ember/routing/none-location****
    NoneLocation: _noneLocation.default,
    // ****@ember/routing/route****
    Route: _route.default,
    // ****@ember/routing/router****
    Router: _router.default,
    // ****@ember/runloop****
    run: _runloop.run,
    // ****@ember/service****
    Service: _service.default,
    // ****@ember/string****
    String: {
      camelize: _string.camelize,
      capitalize: _string.capitalize,
      classify: _string.classify,
      decamelize: _string.decamelize,
      dasherize: _string.dasherize,
      underscore: _string.underscore,
      w: _string.w
    },
    // ****@ember/utils****
    compare: _utils2.compare,
    isBlank: _utils2.isBlank,
    isEmpty: _utils2.isEmpty,
    isEqual: _utils2.isEqual,
    isNone: _utils2.isNone,
    isPresent: _utils2.isPresent,
    typeOf: _utils2.typeOf,
    // ****@ember/version****
    /**
      The semantic version
         @property VERSION
      @type String
      @public
    */
    VERSION: _version.default,
    ViewUtils: {
      // ****@ember/-internals/views****
      getChildViews: views.getChildViews,
      getElementView: views.getElementView,
      getRootViews: views.getRootViews,
      getViewBounds: views.getViewBounds,
      getViewBoundingClientRect: views.getViewBoundingClientRect,
      getViewClientRects: views.getViewClientRects,
      getViewElement: views.getViewElement,
      isSimpleClick: views.isSimpleClick,
      // ****@ember/-internals/glimmer****
      isSerializationFirstNode: _glimmer.isSerializationFirstNode
    },
    // ****@glimmer/manager****
    _getComponentTemplate: _manager.getComponentTemplate,
    _helperManagerCapabilities: _manager.helperCapabilities,
    _setComponentTemplate: _manager.setComponentTemplate,
    _setHelperManager: _manager.setHelperManager,
    _setModifierManager: _manager.setModifierManager,
    // ****@glimmer/runtime****
    _templateOnlyComponent: glimmerRuntime.templateOnlyComponent,
    _invokeHelper: glimmerRuntime.invokeHelper,
    _hash: glimmerRuntime.hash,
    _array: glimmerRuntime.array,
    _concat: glimmerRuntime.concat,
    _get: glimmerRuntime.get,
    _on: glimmerRuntime.on,
    _fn: glimmerRuntime.fn,
    // Backburner
    _Backburner: _backburner.default,
    // ****@ember/controller, @ember/service****
    inject,
    // Non-imported
    platform: {
      defineProperty: true,
      hasPropertyAccessors: true
    },
    __loader: {
      require: _require.default,
      define,
      // @ts-expect-error These properties don't appear as being defined
      registry: typeof requirejs !== 'undefined' ? requirejs.entries : _require.default.entries
    }
  };
  var Ember = PartialEmber;
  Object.defineProperty(Ember, 'ENV', {
    get: _environment.getENV,
    enumerable: false
  });
  Object.defineProperty(Ember, 'lookup', {
    get: _environment.getLookup,
    set: _environment.setLookup,
    enumerable: false
  });
  Object.defineProperty(Ember, 'onerror', {
    get: _errorHandling.getOnerror,
    set: _errorHandling.setOnerror,
    enumerable: false
  });
  Object.defineProperty(Ember, 'testing', {
    get: EmberDebug.isTesting,
    set: EmberDebug.setTesting,
    enumerable: false
  });
  Object.defineProperty(Ember, 'STRINGS', {
    configurable: false,
    get: _string._getStrings,
    set: _string._setStrings
  });
  Object.defineProperty(Ember, 'BOOTED', {
    configurable: false,
    enumerable: false,
    get: metal.isNamespaceSearchDisabled,
    set: metal.setNamespaceSearchDisabled
  });
  Object.defineProperty(Ember, 'TEMPLATES', {
    get: _glimmer.getTemplates,
    set: _glimmer.setTemplates,
    configurable: false,
    enumerable: false
  });
  function deprecateStringUseOnEmberModule() {
    (true && !(false) && (0, _debug.deprecate)('Using `Ember.String` is deprecated. Please import methods directly from `@ember/string`.', false, {
      id: 'ember-string.from-ember-module',
      for: 'ember-source',
      since: {
        available: '4.10',
        enabled: '4.10.'
      },
      until: '5.0.0',
      url: 'https://deprecations.emberjs.com/v4.x/#toc_ember-string-from-ember-module'
    }));
  }
  Object.defineProperty(Ember, 'String', {
    enumerable: true,
    configurable: true,
    get() {
      deprecateStringUseOnEmberModule();
      return {
        camelize: _string.camelize,
        capitalize: _string.capitalize,
        classify: _string.classify,
        dasherize: _string.dasherize,
        decamelize: _string.decamelize,
        underscore: _string.underscore,
        w: _string.w,
        htmlSafe: _glimmer.htmlSafe,
        isHTMLSafe: _glimmer.isHTMLSafe
      };
    }
  });
  Object.defineProperty(Ember, 'TEMPLATES', {
    get: _glimmer.getTemplates,
    set: _glimmer.setTemplates,
    configurable: false,
    enumerable: false
  });
  // ****@ember/debug****
  Object.defineProperty(Ember, 'testing', {
    get: EmberDebug.isTesting,
    set: EmberDebug.setTesting,
    enumerable: false
  });
  (0, _application.runLoadHooks)('Ember.Application', _application.default);
  var EmberHandlebars = {
    template: _glimmer.template,
    Utils: {
      escapeExpression: _glimmer.escapeExpression
    }
  };
  var EmberHTMLBars = {
    template: _glimmer.template
  };
  function defineEmberTemplateCompilerLazyLoad(key) {
    Object.defineProperty(Ember, key, {
      configurable: true,
      enumerable: true,
      get() {
        if ((0, _require.has)('ember-template-compiler')) {
          var templateCompiler = (0, _require.default)("ember-template-compiler");
          EmberHTMLBars.precompile = EmberHandlebars.precompile = templateCompiler.precompile;
          EmberHTMLBars.compile = EmberHandlebars.compile = templateCompiler.compile;
          Object.defineProperty(Ember, 'HTMLBars', {
            configurable: true,
            writable: true,
            enumerable: true,
            value: EmberHTMLBars
          });
          Object.defineProperty(Ember, 'Handlebars', {
            configurable: true,
            writable: true,
            enumerable: true,
            value: EmberHandlebars
          });
        }
        return key === 'Handlebars' ? EmberHandlebars : EmberHTMLBars;
      }
    });
  }
  defineEmberTemplateCompilerLazyLoad('HTMLBars');
  defineEmberTemplateCompilerLazyLoad('Handlebars');
  // do this to ensure that Ember.Test is defined properly on the global
  // if it is present.
  function defineEmberTestingLazyLoad(key) {
    Object.defineProperty(Ember, key, {
      configurable: true,
      enumerable: true,
      get() {
        if ((0, _require.has)('ember-testing')) {
          var testing = (0, _require.default)("ember-testing");
          var {
            Test,
            Adapter,
            QUnitAdapter,
            setupForTesting
          } = testing;
          // @ts-expect-error We should not do this
          Test.Adapter = Adapter;
          // @ts-expect-error We should not do this
          Test.QUnitAdapter = QUnitAdapter;
          Object.defineProperty(Ember, 'Test', {
            configurable: true,
            writable: true,
            enumerable: true,
            value: Test
          });
          Object.defineProperty(Ember, 'setupForTesting', {
            configurable: true,
            writable: true,
            enumerable: true,
            value: setupForTesting
          });
          return key === 'Test' ? Test : setupForTesting;
        }
        return undefined;
      }
    });
  }
  defineEmberTestingLazyLoad('Test');
  defineEmberTestingLazyLoad('setupForTesting');
  // @ts-expect-error Per types, runLoadHooks requires a second parameter. Should we loosen types?
  (0, _application.runLoadHooks)('Ember');
  var _default = _exports.default = Ember;
});
define("ember/version", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = "4.12.3";
});
define("route-recognizer", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var createObject = Object.create;
  function createMap() {
    var map = createObject(null);
    map["__"] = undefined;
    delete map["__"];
    return map;
  }
  var Target = function Target(path, matcher, delegate) {
    this.path = path;
    this.matcher = matcher;
    this.delegate = delegate;
  };
  Target.prototype.to = function to(target, callback) {
    var delegate = this.delegate;
    if (delegate && delegate.willAddRoute) {
      target = delegate.willAddRoute(this.matcher.target, target);
    }
    this.matcher.add(this.path, target);
    if (callback) {
      if (callback.length === 0) {
        throw new Error("You must have an argument in the function passed to `to`");
      }
      this.matcher.addChild(this.path, target, callback, this.delegate);
    }
  };
  var Matcher = function Matcher(target) {
    this.routes = createMap();
    this.children = createMap();
    this.target = target;
  };
  Matcher.prototype.add = function add(path, target) {
    this.routes[path] = target;
  };
  Matcher.prototype.addChild = function addChild(path, target, callback, delegate) {
    var matcher = new Matcher(target);
    this.children[path] = matcher;
    var match = generateMatch(path, matcher, delegate);
    if (delegate && delegate.contextEntered) {
      delegate.contextEntered(target, match);
    }
    callback(match);
  };
  function generateMatch(startingPath, matcher, delegate) {
    function match(path, callback) {
      var fullPath = startingPath + path;
      if (callback) {
        callback(generateMatch(fullPath, matcher, delegate));
      } else {
        return new Target(fullPath, matcher, delegate);
      }
    }
    return match;
  }
  function addRoute(routeArray, path, handler) {
    var len = 0;
    for (var i = 0; i < routeArray.length; i++) {
      len += routeArray[i].path.length;
    }
    path = path.substr(len);
    var route = {
      path: path,
      handler: handler
    };
    routeArray.push(route);
  }
  function eachRoute(baseRoute, matcher, callback, binding) {
    var routes = matcher.routes;
    var paths = Object.keys(routes);
    for (var i = 0; i < paths.length; i++) {
      var path = paths[i];
      var routeArray = baseRoute.slice();
      addRoute(routeArray, path, routes[path]);
      var nested = matcher.children[path];
      if (nested) {
        eachRoute(routeArray, nested, callback, binding);
      } else {
        callback.call(binding, routeArray);
      }
    }
  }
  var map = function (callback, addRouteCallback) {
    var matcher = new Matcher();
    callback(generateMatch("", matcher, this.delegate));
    eachRoute([], matcher, function (routes) {
      if (addRouteCallback) {
        addRouteCallback(this, routes);
      } else {
        this.add(routes);
      }
    }, this);
  };

  // Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded
  // values that are not reserved (i.e., unicode characters, emoji, etc). The reserved
  // chars are "/" and "%".
  // Safe to call multiple times on the same path.
  // Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded
  function normalizePath(path) {
    return path.split("/").map(normalizeSegment).join("/");
  }
  // We want to ensure the characters "%" and "/" remain in percent-encoded
  // form when normalizing paths, so replace them with their encoded form after
  // decoding the rest of the path
  var SEGMENT_RESERVED_CHARS = /%|\//g;
  function normalizeSegment(segment) {
    if (segment.length < 3 || segment.indexOf("%") === -1) {
      return segment;
    }
    return decodeURIComponent(segment).replace(SEGMENT_RESERVED_CHARS, encodeURIComponent);
  }
  // We do not want to encode these characters when generating dynamic path segments
  // See https://tools.ietf.org/html/rfc3986#section-3.3
  // sub-delims: "!", "$", "&", "'", "(", ")", "*", "+", ",", ";", "="
  // others allowed by RFC 3986: ":", "@"
  //
  // First encode the entire path segment, then decode any of the encoded special chars.
  //
  // The chars "!", "'", "(", ")", "*" do not get changed by `encodeURIComponent`,
  // so the possible encoded chars are:
  // ['%24', '%26', '%2B', '%2C', '%3B', '%3D', '%3A', '%40'].
  var PATH_SEGMENT_ENCODINGS = /%(?:2(?:4|6|B|C)|3(?:B|D|A)|40)/g;
  function encodePathSegment(str) {
    return encodeURIComponent(str).replace(PATH_SEGMENT_ENCODINGS, decodeURIComponent);
  }
  var escapeRegex = /(\/|\.|\*|\+|\?|\||\(|\)|\[|\]|\{|\}|\\)/g;
  var isArray = Array.isArray;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  function getParam(params, key) {
    if (typeof params !== "object" || params === null) {
      throw new Error("You must pass an object as the second argument to `generate`.");
    }
    if (!hasOwnProperty.call(params, key)) {
      throw new Error("You must provide param `" + key + "` to `generate`.");
    }
    var value = params[key];
    var str = typeof value === "string" ? value : "" + value;
    if (str.length === 0) {
      throw new Error("You must provide a param `" + key + "`.");
    }
    return str;
  }
  var eachChar = [];
  eachChar[0 /* Static */] = function (segment, currentState) {
    var state = currentState;
    var value = segment.value;
    for (var i = 0; i < value.length; i++) {
      var ch = value.charCodeAt(i);
      state = state.put(ch, false, false);
    }
    return state;
  };
  eachChar[1 /* Dynamic */] = function (_, currentState) {
    return currentState.put(47 /* SLASH */, true, true);
  };
  eachChar[2 /* Star */] = function (_, currentState) {
    return currentState.put(-1 /* ANY */, false, true);
  };
  eachChar[4 /* Epsilon */] = function (_, currentState) {
    return currentState;
  };
  var regex = [];
  regex[0 /* Static */] = function (segment) {
    return segment.value.replace(escapeRegex, "\\$1");
  };
  regex[1 /* Dynamic */] = function () {
    return "([^/]+)";
  };
  regex[2 /* Star */] = function () {
    return "(.+)";
  };
  regex[4 /* Epsilon */] = function () {
    return "";
  };
  var generate = [];
  generate[0 /* Static */] = function (segment) {
    return segment.value;
  };
  generate[1 /* Dynamic */] = function (segment, params) {
    var value = getParam(params, segment.value);
    if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {
      return encodePathSegment(value);
    } else {
      return value;
    }
  };
  generate[2 /* Star */] = function (segment, params) {
    return getParam(params, segment.value);
  };
  generate[4 /* Epsilon */] = function () {
    return "";
  };
  var EmptyObject = Object.freeze({});
  var EmptyArray = Object.freeze([]);
  // The `names` will be populated with the paramter name for each dynamic/star
  // segment. `shouldDecodes` will be populated with a boolean for each dyanamic/star
  // segment, indicating whether it should be decoded during recognition.
  function parse(segments, route, types) {
    // normalize route as not starting with a "/". Recognition will
    // also normalize.
    if (route.length > 0 && route.charCodeAt(0) === 47 /* SLASH */) {
      route = route.substr(1);
    }
    var parts = route.split("/");
    var names = undefined;
    var shouldDecodes = undefined;
    for (var i = 0; i < parts.length; i++) {
      var part = parts[i];
      var flags = 0;
      var type = 0;
      if (part === "") {
        type = 4 /* Epsilon */;
      } else if (part.charCodeAt(0) === 58 /* COLON */) {
        type = 1 /* Dynamic */;
      } else if (part.charCodeAt(0) === 42 /* STAR */) {
        type = 2 /* Star */;
      } else {
        type = 0 /* Static */;
      }
      flags = 2 << type;
      if (flags & 12 /* Named */) {
        part = part.slice(1);
        names = names || [];
        names.push(part);
        shouldDecodes = shouldDecodes || [];
        shouldDecodes.push((flags & 4 /* Decoded */) !== 0);
      }
      if (flags & 14 /* Counted */) {
        types[type]++;
      }
      segments.push({
        type: type,
        value: normalizeSegment(part)
      });
    }
    return {
      names: names || EmptyArray,
      shouldDecodes: shouldDecodes || EmptyArray
    };
  }
  function isEqualCharSpec(spec, char, negate) {
    return spec.char === char && spec.negate === negate;
  }
  // A State has a character specification and (`charSpec`) and a list of possible
  // subsequent states (`nextStates`).
  //
  // If a State is an accepting state, it will also have several additional
  // properties:
  //
  // * `regex`: A regular expression that is used to extract parameters from paths
  //   that reached this accepting state.
  // * `handlers`: Information on how to convert the list of captures into calls
  //   to registered handlers with the specified parameters
  // * `types`: How many static, dynamic or star segments in this route. Used to
  //   decide which route to use if multiple registered routes match a path.
  //
  // Currently, State is implemented naively by looping over `nextStates` and
  // comparing a character specification against a character. A more efficient
  // implementation would use a hash of keys pointing at one or more next states.
  var State = function State(states, id, char, negate, repeat) {
    this.states = states;
    this.id = id;
    this.char = char;
    this.negate = negate;
    this.nextStates = repeat ? id : null;
    this.pattern = "";
    this._regex = undefined;
    this.handlers = undefined;
    this.types = undefined;
  };
  State.prototype.regex = function regex$1() {
    if (!this._regex) {
      this._regex = new RegExp(this.pattern);
    }
    return this._regex;
  };
  State.prototype.get = function get(char, negate) {
    var this$1 = this;
    var nextStates = this.nextStates;
    if (nextStates === null) {
      return;
    }
    if (isArray(nextStates)) {
      for (var i = 0; i < nextStates.length; i++) {
        var child = this$1.states[nextStates[i]];
        if (isEqualCharSpec(child, char, negate)) {
          return child;
        }
      }
    } else {
      var child$1 = this.states[nextStates];
      if (isEqualCharSpec(child$1, char, negate)) {
        return child$1;
      }
    }
  };
  State.prototype.put = function put(char, negate, repeat) {
    var state;
    // If the character specification already exists in a child of the current
    // state, just return that state.
    if (state = this.get(char, negate)) {
      return state;
    }
    // Make a new state for the character spec
    var states = this.states;
    state = new State(states, states.length, char, negate, repeat);
    states[states.length] = state;
    // Insert the new state as a child of the current state
    if (this.nextStates == null) {
      this.nextStates = state.id;
    } else if (isArray(this.nextStates)) {
      this.nextStates.push(state.id);
    } else {
      this.nextStates = [this.nextStates, state.id];
    }
    // Return the new state
    return state;
  };
  // Find a list of child states matching the next character
  State.prototype.match = function match(ch) {
    var this$1 = this;
    var nextStates = this.nextStates;
    if (!nextStates) {
      return [];
    }
    var returned = [];
    if (isArray(nextStates)) {
      for (var i = 0; i < nextStates.length; i++) {
        var child = this$1.states[nextStates[i]];
        if (isMatch(child, ch)) {
          returned.push(child);
        }
      }
    } else {
      var child$1 = this.states[nextStates];
      if (isMatch(child$1, ch)) {
        returned.push(child$1);
      }
    }
    return returned;
  };
  function isMatch(spec, char) {
    return spec.negate ? spec.char !== char && spec.char !== -1 /* ANY */ : spec.char === char || spec.char === -1 /* ANY */;
  }
  // This is a somewhat naive strategy, but should work in a lot of cases
  // A better strategy would properly resolve /posts/:id/new and /posts/edit/:id.
  //
  // This strategy generally prefers more static and less dynamic matching.
  // Specifically, it
  //
  //  * prefers fewer stars to more, then
  //  * prefers using stars for less of the match to more, then
  //  * prefers fewer dynamic segments to more, then
  //  * prefers more static segments to more
  function sortSolutions(states) {
    return states.sort(function (a, b) {
      var ref = a.types || [0, 0, 0];
      var astatics = ref[0];
      var adynamics = ref[1];
      var astars = ref[2];
      var ref$1 = b.types || [0, 0, 0];
      var bstatics = ref$1[0];
      var bdynamics = ref$1[1];
      var bstars = ref$1[2];
      if (astars !== bstars) {
        return astars - bstars;
      }
      if (astars) {
        if (astatics !== bstatics) {
          return bstatics - astatics;
        }
        if (adynamics !== bdynamics) {
          return bdynamics - adynamics;
        }
      }
      if (adynamics !== bdynamics) {
        return adynamics - bdynamics;
      }
      if (astatics !== bstatics) {
        return bstatics - astatics;
      }
      return 0;
    });
  }
  function recognizeChar(states, ch) {
    var nextStates = [];
    for (var i = 0, l = states.length; i < l; i++) {
      var state = states[i];
      nextStates = nextStates.concat(state.match(ch));
    }
    return nextStates;
  }
  var RecognizeResults = function RecognizeResults(queryParams) {
    this.length = 0;
    this.queryParams = queryParams || {};
  };
  RecognizeResults.prototype.splice = Array.prototype.splice;
  RecognizeResults.prototype.slice = Array.prototype.slice;
  RecognizeResults.prototype.push = Array.prototype.push;
  function findHandler(state, originalPath, queryParams) {
    var handlers = state.handlers;
    var regex = state.regex();
    if (!regex || !handlers) {
      throw new Error("state not initialized");
    }
    var captures = originalPath.match(regex);
    var currentCapture = 1;
    var result = new RecognizeResults(queryParams);
    result.length = handlers.length;
    for (var i = 0; i < handlers.length; i++) {
      var handler = handlers[i];
      var names = handler.names;
      var shouldDecodes = handler.shouldDecodes;
      var params = EmptyObject;
      var isDynamic = false;
      if (names !== EmptyArray && shouldDecodes !== EmptyArray) {
        for (var j = 0; j < names.length; j++) {
          isDynamic = true;
          var name = names[j];
          var capture = captures && captures[currentCapture++];
          if (params === EmptyObject) {
            params = {};
          }
          if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS && shouldDecodes[j]) {
            params[name] = capture && decodeURIComponent(capture);
          } else {
            params[name] = capture;
          }
        }
      }
      result[i] = {
        handler: handler.handler,
        params: params,
        isDynamic: isDynamic
      };
    }
    return result;
  }
  function decodeQueryParamPart(part) {
    // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1
    part = part.replace(/\+/gm, "%20");
    var result;
    try {
      result = decodeURIComponent(part);
    } catch (error) {
      result = "";
    }
    return result;
  }
  var RouteRecognizer = function RouteRecognizer() {
    this.names = createMap();
    var states = [];
    var state = new State(states, 0, -1 /* ANY */, true, false);
    states[0] = state;
    this.states = states;
    this.rootState = state;
  };
  RouteRecognizer.prototype.add = function add(routes, options) {
    var currentState = this.rootState;
    var pattern = "^";
    var types = [0, 0, 0];
    var handlers = new Array(routes.length);
    var allSegments = [];
    var isEmpty = true;
    var j = 0;
    for (var i = 0; i < routes.length; i++) {
      var route = routes[i];
      var ref = parse(allSegments, route.path, types);
      var names = ref.names;
      var shouldDecodes = ref.shouldDecodes;
      // preserve j so it points to the start of newly added segments
      for (; j < allSegments.length; j++) {
        var segment = allSegments[j];
        if (segment.type === 4 /* Epsilon */) {
          continue;
        }
        isEmpty = false;
        // Add a "/" for the new segment
        currentState = currentState.put(47 /* SLASH */, false, false);
        pattern += "/";
        // Add a representation of the segment to the NFA and regex
        currentState = eachChar[segment.type](segment, currentState);
        pattern += regex[segment.type](segment);
      }
      handlers[i] = {
        handler: route.handler,
        names: names,
        shouldDecodes: shouldDecodes
      };
    }
    if (isEmpty) {
      currentState = currentState.put(47 /* SLASH */, false, false);
      pattern += "/";
    }
    currentState.handlers = handlers;
    currentState.pattern = pattern + "$";
    currentState.types = types;
    var name;
    if (typeof options === "object" && options !== null && options.as) {
      name = options.as;
    }
    if (name) {
      // if (this.names[name]) {
      //   throw new Error("You may not add a duplicate route named `" + name + "`.");
      // }
      this.names[name] = {
        segments: allSegments,
        handlers: handlers
      };
    }
  };
  RouteRecognizer.prototype.handlersFor = function handlersFor(name) {
    var route = this.names[name];
    if (!route) {
      throw new Error("There is no route named " + name);
    }
    var result = new Array(route.handlers.length);
    for (var i = 0; i < route.handlers.length; i++) {
      var handler = route.handlers[i];
      result[i] = handler;
    }
    return result;
  };
  RouteRecognizer.prototype.hasRoute = function hasRoute(name) {
    return !!this.names[name];
  };
  RouteRecognizer.prototype.generate = function generate$1(name, params) {
    var route = this.names[name];
    var output = "";
    if (!route) {
      throw new Error("There is no route named " + name);
    }
    var segments = route.segments;
    for (var i = 0; i < segments.length; i++) {
      var segment = segments[i];
      if (segment.type === 4 /* Epsilon */) {
        continue;
      }
      output += "/";
      output += generate[segment.type](segment, params);
    }
    if (output.charAt(0) !== "/") {
      output = "/" + output;
    }
    if (params && params.queryParams) {
      output += this.generateQueryString(params.queryParams);
    }
    return output;
  };
  RouteRecognizer.prototype.generateQueryString = function generateQueryString(params) {
    var pairs = [];
    var keys = Object.keys(params);
    keys.sort();
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var value = params[key];
      if (value == null) {
        continue;
      }
      var pair = encodeURIComponent(key);
      if (isArray(value)) {
        for (var j = 0; j < value.length; j++) {
          var arrayPair = key + "[]" + "=" + encodeURIComponent(value[j]);
          pairs.push(arrayPair);
        }
      } else {
        pair += "=" + encodeURIComponent(value);
        pairs.push(pair);
      }
    }
    if (pairs.length === 0) {
      return "";
    }
    return "?" + pairs.join("&");
  };
  RouteRecognizer.prototype.parseQueryString = function parseQueryString(queryString) {
    var pairs = queryString.split("&");
    var queryParams = {};
    for (var i = 0; i < pairs.length; i++) {
      var pair = pairs[i].split("="),
        key = decodeQueryParamPart(pair[0]),
        keyLength = key.length,
        isArray = false,
        value = void 0;
      if (pair.length === 1) {
        value = "true";
      } else {
        // Handle arrays
        if (keyLength > 2 && key.slice(keyLength - 2) === "[]") {
          isArray = true;
          key = key.slice(0, keyLength - 2);
          if (!queryParams[key]) {
            queryParams[key] = [];
          }
        }
        value = pair[1] ? decodeQueryParamPart(pair[1]) : "";
      }
      if (isArray) {
        queryParams[key].push(value);
      } else {
        queryParams[key] = value;
      }
    }
    return queryParams;
  };
  RouteRecognizer.prototype.recognize = function recognize(path) {
    var results;
    var states = [this.rootState];
    var queryParams = {};
    var isSlashDropped = false;
    var hashStart = path.indexOf("#");
    if (hashStart !== -1) {
      path = path.substr(0, hashStart);
    }
    var queryStart = path.indexOf("?");
    if (queryStart !== -1) {
      var queryString = path.substr(queryStart + 1, path.length);
      path = path.substr(0, queryStart);
      queryParams = this.parseQueryString(queryString);
    }
    if (path.charAt(0) !== "/") {
      path = "/" + path;
    }
    var originalPath = path;
    if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {
      path = normalizePath(path);
    } else {
      path = decodeURI(path);
      originalPath = decodeURI(originalPath);
    }
    var pathLen = path.length;
    if (pathLen > 1 && path.charAt(pathLen - 1) === "/") {
      path = path.substr(0, pathLen - 1);
      originalPath = originalPath.substr(0, originalPath.length - 1);
      isSlashDropped = true;
    }
    for (var i = 0; i < path.length; i++) {
      states = recognizeChar(states, path.charCodeAt(i));
      if (!states.length) {
        break;
      }
    }
    var solutions = [];
    for (var i$1 = 0; i$1 < states.length; i$1++) {
      if (states[i$1].handlers) {
        solutions.push(states[i$1]);
      }
    }
    states = sortSolutions(solutions);
    var state = solutions[0];
    if (state && state.handlers) {
      // if a trailing slash was dropped and a star segment is the last segment
      // specified, put the trailing slash back
      if (isSlashDropped && state.pattern && state.pattern.slice(-5) === "(.+)$") {
        originalPath = originalPath + "/";
      }
      results = findHandler(state, originalPath, queryParams);
    }
    return results;
  };
  RouteRecognizer.VERSION = "0.3.4";
  // Set to false to opt-out of encoding and decoding path segments.
  // See https://github.com/tildeio/route-recognizer/pull/55
  RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS = true;
  RouteRecognizer.Normalizer = {
    normalizeSegment: normalizeSegment,
    normalizePath: normalizePath,
    encodePathSegment: encodePathSegment
  };
  RouteRecognizer.prototype.map = map;
  var _default = _exports.default = RouteRecognizer;
});
define("router_js", ["exports", "rsvp", "route-recognizer"], function (_exports, _rsvp, _routeRecognizer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.TransitionState = _exports.TransitionError = _exports.STATE_SYMBOL = _exports.QUERY_PARAMS_SYMBOL = _exports.PARAMS_SYMBOL = _exports.InternalTransition = _exports.InternalRouteInfo = void 0;
  _exports.logAbort = logAbort;
  function buildTransitionAborted() {
    var error = new Error('TransitionAborted');
    error.name = 'TransitionAborted';
    error.code = 'TRANSITION_ABORTED';
    return error;
  }
  function isTransitionAborted(maybeError) {
    return typeof maybeError === 'object' && maybeError !== null && maybeError.code === 'TRANSITION_ABORTED';
  }
  function isAbortable(maybeAbortable) {
    return typeof maybeAbortable === 'object' && maybeAbortable !== null && typeof maybeAbortable.isAborted === 'boolean';
  }
  function throwIfAborted(maybe) {
    if (isAbortable(maybe) && maybe.isAborted) {
      throw buildTransitionAborted();
    }
  }
  var slice = Array.prototype.slice;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  /**
    Determines if an object is Promise by checking if it is "thenable".
  **/
  function isPromise(p) {
    return p !== null && typeof p === 'object' && typeof p.then === 'function';
  }
  function merge(hash, other) {
    for (var prop in other) {
      if (hasOwnProperty.call(other, prop)) {
        hash[prop] = other[prop];
      }
    }
  }
  /**
    @private
  
    Extracts query params from the end of an array
  **/
  function extractQueryParams(array) {
    var len = array && array.length,
      head,
      queryParams;
    if (len && len > 0) {
      var obj = array[len - 1];
      if (isQueryParamsContainer(obj)) {
        queryParams = obj.queryParams;
        head = slice.call(array, 0, len - 1);
        return [head, queryParams];
      }
    }
    // SAFETY: We confirmed that the last item isn't a QP container
    return [array, null];
  }
  // TODO: Actually check that Dict is QueryParams
  function isQueryParamsContainer(obj) {
    if (obj && typeof obj === 'object') {
      var cast = obj;
      return 'queryParams' in cast && Object.keys(cast.queryParams).every(k => typeof k === 'string');
    }
    return false;
  }
  /**
    @private
  
    Coerces query param properties and array elements into strings.
  **/
  function coerceQueryParamsToString(queryParams) {
    for (var key in queryParams) {
      var val = queryParams[key];
      if (typeof val === 'number') {
        queryParams[key] = '' + val;
      } else if (Array.isArray(val)) {
        for (var i = 0, l = val.length; i < l; i++) {
          val[i] = '' + val[i];
        }
      }
    }
  }
  /**
    @private
   */
  function log(router, ...args) {
    if (!router.log) {
      return;
    }
    if (args.length === 2) {
      var [sequence, msg] = args;
      router.log('Transition #' + sequence + ': ' + msg);
    } else {
      var [_msg] = args;
      router.log(_msg);
    }
  }
  function isParam(object) {
    return typeof object === 'string' || object instanceof String || typeof object === 'number' || object instanceof Number;
  }
  function forEach(array, callback) {
    for (var i = 0, l = array.length; i < l && callback(array[i]) !== false; i++) {
      // empty intentionally
    }
  }
  function getChangelist(oldObject, newObject) {
    var key;
    var results = {
      all: {},
      changed: {},
      removed: {}
    };
    merge(results.all, newObject);
    var didChange = false;
    coerceQueryParamsToString(oldObject);
    coerceQueryParamsToString(newObject);
    // Calculate removals
    for (key in oldObject) {
      if (hasOwnProperty.call(oldObject, key)) {
        if (!hasOwnProperty.call(newObject, key)) {
          didChange = true;
          results.removed[key] = oldObject[key];
        }
      }
    }
    // Calculate changes
    for (key in newObject) {
      if (hasOwnProperty.call(newObject, key)) {
        var oldElement = oldObject[key];
        var newElement = newObject[key];
        if (isArray(oldElement) && isArray(newElement)) {
          if (oldElement.length !== newElement.length) {
            results.changed[key] = newObject[key];
            didChange = true;
          } else {
            for (var i = 0, l = oldElement.length; i < l; i++) {
              if (oldElement[i] !== newElement[i]) {
                results.changed[key] = newObject[key];
                didChange = true;
              }
            }
          }
        } else if (oldObject[key] !== newObject[key]) {
          results.changed[key] = newObject[key];
          didChange = true;
        }
      }
    }
    return didChange ? results : undefined;
  }
  function isArray(obj) {
    return Array.isArray(obj);
  }
  function promiseLabel(label) {
    return 'Router: ' + label;
  }
  var STATE_SYMBOL = _exports.STATE_SYMBOL = `__STATE__-2619860001345920-3322w3`;
  var PARAMS_SYMBOL = _exports.PARAMS_SYMBOL = `__PARAMS__-261986232992830203-23323`;
  var QUERY_PARAMS_SYMBOL = _exports.QUERY_PARAMS_SYMBOL = `__QPS__-2619863929824844-32323`;
  /**
    A Transition is a thenable (a promise-like object) that represents
    an attempt to transition to another route. It can be aborted, either
    explicitly via `abort` or by attempting another transition while a
    previous one is still underway. An aborted transition can also
    be `retry()`d later.
  
    @class Transition
    @constructor
    @param {Object} router
    @param {Object} intent
    @param {Object} state
    @param {Object} error
    @private
   */
  class Transition {
    constructor(router, intent, state, error = undefined, previousTransition = undefined) {
      this.from = null;
      this.to = undefined;
      this.isAborted = false;
      this.isActive = true;
      this.urlMethod = 'update';
      this.resolveIndex = 0;
      this.queryParamsOnly = false;
      this.isTransition = true;
      this.isCausedByAbortingTransition = false;
      this.isCausedByInitialTransition = false;
      this.isCausedByAbortingReplaceTransition = false;
      this._visibleQueryParams = {};
      this.isIntermediate = false;
      this[STATE_SYMBOL] = state || router.state;
      this.intent = intent;
      this.router = router;
      this.data = intent && intent.data || {};
      this.resolvedModels = {};
      this[QUERY_PARAMS_SYMBOL] = {};
      this.promise = undefined;
      this.error = undefined;
      this[PARAMS_SYMBOL] = {};
      this.routeInfos = [];
      this.targetName = undefined;
      this.pivotHandler = undefined;
      this.sequence = -1;
      if (true /* DEBUG */) {
        var _error = new Error(`Transition creation stack`);
        this.debugCreationStack = () => _error.stack;
        // not aborted yet, will be replaced when `this.isAborted` is set
        this.debugAbortStack = () => undefined;
        this.debugPreviousTransition = previousTransition;
      }
      if (error) {
        this.promise = _rsvp.Promise.reject(error);
        this.error = error;
        return;
      }
      // if you're doing multiple redirects, need the new transition to know if it
      // is actually part of the first transition or not. Any further redirects
      // in the initial transition also need to know if they are part of the
      // initial transition
      this.isCausedByAbortingTransition = !!previousTransition;
      this.isCausedByInitialTransition = !!previousTransition && (previousTransition.isCausedByInitialTransition || previousTransition.sequence === 0);
      // Every transition in the chain is a replace
      this.isCausedByAbortingReplaceTransition = !!previousTransition && previousTransition.urlMethod === 'replace' && (!previousTransition.isCausedByAbortingTransition || previousTransition.isCausedByAbortingReplaceTransition);
      if (state) {
        this[PARAMS_SYMBOL] = state.params;
        this[QUERY_PARAMS_SYMBOL] = state.queryParams;
        this.routeInfos = state.routeInfos;
        var len = state.routeInfos.length;
        if (len) {
          this.targetName = state.routeInfos[len - 1].name;
        }
        for (var i = 0; i < len; ++i) {
          var handlerInfo = state.routeInfos[i];
          // TODO: this all seems hacky
          if (!handlerInfo.isResolved) {
            break;
          }
          this.pivotHandler = handlerInfo.route;
        }
        this.sequence = router.currentSequence++;
        this.promise = state.resolve(this).catch(result => {
          var error = this.router.transitionDidError(result, this);
          throw error;
        }, promiseLabel('Handle Abort'));
      } else {
        this.promise = _rsvp.Promise.resolve(this[STATE_SYMBOL]);
        this[PARAMS_SYMBOL] = {};
      }
    }
    /**
      The Transition's internal promise. Calling `.then` on this property
      is that same as calling `.then` on the Transition object itself, but
      this property is exposed for when you want to pass around a
      Transition's promise, but not the Transition object itself, since
      Transition object can be externally `abort`ed, while the promise
      cannot.
         @property promise
      @type {Object}
      @public
     */
    /**
      Custom state can be stored on a Transition's `data` object.
      This can be useful for decorating a Transition within an earlier
      hook and shared with a later hook. Properties set on `data` will
      be copied to new transitions generated by calling `retry` on this
      transition.
         @property data
      @type {Object}
      @public
     */
    /**
      A standard promise hook that resolves if the transition
      succeeds and rejects if it fails/redirects/aborts.
         Forwards to the internal `promise` property which you can
      use in situations where you want to pass around a thenable,
      but not the Transition itself.
         @method then
      @param {Function} onFulfilled
      @param {Function} onRejected
      @param {String} label optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
      @public
     */
    then(onFulfilled, onRejected, label) {
      return this.promise.then(onFulfilled, onRejected, label);
    }
    /**
         Forwards to the internal `promise` property which you can
      use in situations where you want to pass around a thennable,
      but not the Transition itself.
         @method catch
      @param {Function} onRejection
      @param {String} label optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
      @public
     */
    catch(onRejection, label) {
      return this.promise.catch(onRejection, label);
    }
    /**
         Forwards to the internal `promise` property which you can
      use in situations where you want to pass around a thenable,
      but not the Transition itself.
         @method finally
      @param {Function} callback
      @param {String} label optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
      @public
     */
    finally(callback, label) {
      return this.promise.finally(callback, label);
    }
    /**
      Aborts the Transition. Note you can also implicitly abort a transition
      by initiating another transition while a previous one is underway.
         @method abort
      @return {Transition} this transition
      @public
     */
    abort() {
      this.rollback();
      var transition = new Transition(this.router, undefined, undefined, undefined);
      transition.to = this.from;
      transition.from = this.from;
      transition.isAborted = true;
      this.router.routeWillChange(transition);
      this.router.routeDidChange(transition);
      return this;
    }
    rollback() {
      if (!this.isAborted) {
        log(this.router, this.sequence, this.targetName + ': transition was aborted');
        if (true /* DEBUG */) {
          var error = new Error(`Transition aborted stack`);
          this.debugAbortStack = () => error.stack;
        }
        if (this.intent !== undefined && this.intent !== null) {
          this.intent.preTransitionState = this.router.state;
        }
        this.isAborted = true;
        this.isActive = false;
        this.router.activeTransition = undefined;
      }
    }
    redirect(newTransition) {
      this.rollback();
      this.router.routeWillChange(newTransition);
    }
    /**
         Retries a previously-aborted transition (making sure to abort the
      transition if it's still active). Returns a new transition that
      represents the new attempt to transition.
         @method retry
      @return {Transition} new transition
      @public
     */
    retry() {
      // TODO: add tests for merged state retry()s
      this.abort();
      var newTransition = this.router.transitionByIntent(this.intent, false);
      // inheriting a `null` urlMethod is not valid
      // the urlMethod is only set to `null` when
      // the transition is initiated *after* the url
      // has been updated (i.e. `router.handleURL`)
      //
      // in that scenario, the url method cannot be
      // inherited for a new transition because then
      // the url would not update even though it should
      if (this.urlMethod !== null) {
        newTransition.method(this.urlMethod);
      }
      return newTransition;
    }
    /**
         Sets the URL-changing method to be employed at the end of a
      successful transition. By default, a new Transition will just
      use `updateURL`, but passing 'replace' to this method will
      cause the URL to update using 'replaceWith' instead. Omitting
      a parameter will disable the URL change, allowing for transitions
      that don't update the URL at completion (this is also used for
      handleURL, since the URL has already changed before the
      transition took place).
         @method method
      @param {String} method the type of URL-changing method to use
        at the end of a transition. Accepted values are 'replace',
        falsy values, or any other non-falsy value (which is
        interpreted as an updateURL transition).
         @return {Transition} this transition
      @public
     */
    method(method) {
      this.urlMethod = method;
      return this;
    }
    // Alias 'trigger' as 'send'
    send(ignoreFailure = false, _name, err, transition, handler) {
      this.trigger(ignoreFailure, _name, err, transition, handler);
    }
    /**
         Fires an event on the current list of resolved/resolving
      handlers within this transition. Useful for firing events
      on route hierarchies that haven't fully been entered yet.
         Note: This method is also aliased as `send`
         @method trigger
      @param {Boolean} [ignoreFailure=false] a boolean specifying whether unhandled events throw an error
      @param {String} name the name of the event to fire
      @public
     */
    trigger(ignoreFailure = false, name, ...args) {
      // TODO: Deprecate the current signature
      if (typeof ignoreFailure === 'string') {
        name = ignoreFailure;
        ignoreFailure = false;
      }
      this.router.triggerEvent(this[STATE_SYMBOL].routeInfos.slice(0, this.resolveIndex + 1), ignoreFailure, name, args);
    }
    /**
      Transitions are aborted and their promises rejected
      when redirects occur; this method returns a promise
      that will follow any redirects that occur and fulfill
      with the value fulfilled by any redirecting transitions
      that occur.
         @method followRedirects
      @return {Promise} a promise that fulfills with the same
        value that the final redirecting transition fulfills with
      @public
     */
    followRedirects() {
      var router = this.router;
      return this.promise.catch(function (reason) {
        if (router.activeTransition) {
          return router.activeTransition.followRedirects();
        }
        return _rsvp.Promise.reject(reason);
      });
    }
    toString() {
      return 'Transition (sequence ' + this.sequence + ')';
    }
    /**
      @private
     */
    log(message) {
      log(this.router, this.sequence, message);
    }
  }
  /**
    @private
  
    Logs and returns an instance of TransitionAborted.
   */
  _exports.InternalTransition = Transition;
  function logAbort(transition) {
    log(transition.router, transition.sequence, 'detected abort.');
    return buildTransitionAborted();
  }
  function isTransition(obj) {
    return typeof obj === 'object' && obj instanceof Transition && obj.isTransition;
  }
  function prepareResult(obj) {
    if (isTransition(obj)) {
      return null;
    }
    return obj;
  }
  var ROUTE_INFOS = new WeakMap();
  function toReadOnlyRouteInfo(routeInfos, queryParams = {}, includeAttributes = false) {
    return routeInfos.map((info, i) => {
      var {
        name,
        params,
        paramNames,
        context,
        route
      } = info;
      // SAFETY: This should be safe since it is just for use as a key
      var key = info;
      if (ROUTE_INFOS.has(key) && includeAttributes) {
        var _routeInfo = ROUTE_INFOS.get(key);
        _routeInfo = attachMetadata(route, _routeInfo);
        var routeInfoWithAttribute = createRouteInfoWithAttributes(_routeInfo, context);
        ROUTE_INFOS.set(key, routeInfoWithAttribute);
        return routeInfoWithAttribute;
      }
      var routeInfo = {
        find(predicate, thisArg) {
          var publicInfo;
          var arr = [];
          if (predicate.length === 3) {
            arr = routeInfos.map(
            // SAFETY: This should be safe since it is just for use as a key
            info => ROUTE_INFOS.get(info));
          }
          for (var _i = 0; routeInfos.length > _i; _i++) {
            // SAFETY: This should be safe since it is just for use as a key
            publicInfo = ROUTE_INFOS.get(routeInfos[_i]);
            if (predicate.call(thisArg, publicInfo, _i, arr)) {
              return publicInfo;
            }
          }
          return undefined;
        },
        get name() {
          return name;
        },
        get paramNames() {
          return paramNames;
        },
        get metadata() {
          return buildRouteInfoMetadata(info.route);
        },
        get parent() {
          var parent = routeInfos[i - 1];
          if (parent === undefined) {
            return null;
          }
          // SAFETY: This should be safe since it is just for use as a key
          return ROUTE_INFOS.get(parent);
        },
        get child() {
          var child = routeInfos[i + 1];
          if (child === undefined) {
            return null;
          }
          // SAFETY: This should be safe since it is just for use as a key
          return ROUTE_INFOS.get(child);
        },
        get localName() {
          var parts = this.name.split('.');
          return parts[parts.length - 1];
        },
        get params() {
          return params;
        },
        get queryParams() {
          return queryParams;
        }
      };
      if (includeAttributes) {
        routeInfo = createRouteInfoWithAttributes(routeInfo, context);
      }
      // SAFETY: This should be safe since it is just for use as a key
      ROUTE_INFOS.set(info, routeInfo);
      return routeInfo;
    });
  }
  function createRouteInfoWithAttributes(routeInfo, context) {
    var attributes = {
      get attributes() {
        return context;
      }
    };
    if (!Object.isExtensible(routeInfo) || routeInfo.hasOwnProperty('attributes')) {
      return Object.freeze(Object.assign({}, routeInfo, attributes));
    }
    return Object.assign(routeInfo, attributes);
  }
  function buildRouteInfoMetadata(route) {
    if (route !== undefined && route !== null && route.buildRouteInfoMetadata !== undefined) {
      return route.buildRouteInfoMetadata();
    }
    return null;
  }
  function attachMetadata(route, routeInfo) {
    var metadata = {
      get metadata() {
        return buildRouteInfoMetadata(route);
      }
    };
    if (!Object.isExtensible(routeInfo) || routeInfo.hasOwnProperty('metadata')) {
      return Object.freeze(Object.assign({}, routeInfo, metadata));
    }
    return Object.assign(routeInfo, metadata);
  }
  class InternalRouteInfo {
    constructor(router, name, paramNames, route) {
      this._routePromise = undefined;
      this._route = null;
      this.params = {};
      this.isResolved = false;
      this.name = name;
      this.paramNames = paramNames;
      this.router = router;
      if (route) {
        this._processRoute(route);
      }
    }
    getModel(_transition) {
      return _rsvp.Promise.resolve(this.context);
    }
    serialize(_context) {
      return this.params || {};
    }
    resolve(transition) {
      return _rsvp.Promise.resolve(this.routePromise).then(route => {
        throwIfAborted(transition);
        return route;
      }).then(() => this.runBeforeModelHook(transition)).then(() => throwIfAborted(transition)).then(() => this.getModel(transition)).then(resolvedModel => {
        throwIfAborted(transition);
        return resolvedModel;
      }).then(resolvedModel => this.runAfterModelHook(transition, resolvedModel)).then(resolvedModel => this.becomeResolved(transition, resolvedModel));
    }
    becomeResolved(transition, resolvedContext) {
      var params = this.serialize(resolvedContext);
      if (transition) {
        this.stashResolvedModel(transition, resolvedContext);
        transition[PARAMS_SYMBOL] = transition[PARAMS_SYMBOL] || {};
        transition[PARAMS_SYMBOL][this.name] = params;
      }
      var context;
      var contextsMatch = resolvedContext === this.context;
      if ('context' in this || !contextsMatch) {
        context = resolvedContext;
      }
      // SAFETY: Since this is just for lookup, it should be safe
      var cached = ROUTE_INFOS.get(this);
      var resolved = new ResolvedRouteInfo(this.router, this.name, this.paramNames, params, this.route, context);
      if (cached !== undefined) {
        // SAFETY: This is potentially a bit risker, but for what we're doing, it should be ok.
        ROUTE_INFOS.set(resolved, cached);
      }
      return resolved;
    }
    shouldSupersede(routeInfo) {
      // Prefer this newer routeInfo over `other` if:
      // 1) The other one doesn't exist
      // 2) The names don't match
      // 3) This route has a context that doesn't match
      //    the other one (or the other one doesn't have one).
      // 4) This route has parameters that don't match the other.
      if (!routeInfo) {
        return true;
      }
      var contextsMatch = routeInfo.context === this.context;
      return routeInfo.name !== this.name || 'context' in this && !contextsMatch || this.hasOwnProperty('params') && !paramsMatch(this.params, routeInfo.params);
    }
    get route() {
      // _route could be set to either a route object or undefined, so we
      // compare against null to know when it's been set
      if (this._route !== null) {
        return this._route;
      }
      return this.fetchRoute();
    }
    set route(route) {
      this._route = route;
    }
    get routePromise() {
      if (this._routePromise) {
        return this._routePromise;
      }
      this.fetchRoute();
      return this._routePromise;
    }
    set routePromise(routePromise) {
      this._routePromise = routePromise;
    }
    log(transition, message) {
      if (transition.log) {
        transition.log(this.name + ': ' + message);
      }
    }
    updateRoute(route) {
      route._internalName = this.name;
      return this.route = route;
    }
    runBeforeModelHook(transition) {
      if (transition.trigger) {
        transition.trigger(true, 'willResolveModel', transition, this.route);
      }
      var result;
      if (this.route) {
        if (this.route.beforeModel !== undefined) {
          result = this.route.beforeModel(transition);
        }
      }
      if (isTransition(result)) {
        result = null;
      }
      return _rsvp.Promise.resolve(result);
    }
    runAfterModelHook(transition, resolvedModel) {
      // Stash the resolved model on the payload.
      // This makes it possible for users to swap out
      // the resolved model in afterModel.
      var name = this.name;
      this.stashResolvedModel(transition, resolvedModel);
      var result;
      if (this.route !== undefined) {
        if (this.route.afterModel !== undefined) {
          result = this.route.afterModel(resolvedModel, transition);
        }
      }
      result = prepareResult(result);
      return _rsvp.Promise.resolve(result).then(() => {
        // Ignore the fulfilled value returned from afterModel.
        // Return the value stashed in resolvedModels, which
        // might have been swapped out in afterModel.
        // SAFTEY: We expect this to be of type T, though typing it as such is challenging.
        return transition.resolvedModels[name];
      });
    }
    stashResolvedModel(transition, resolvedModel) {
      transition.resolvedModels = transition.resolvedModels || {};
      // SAFETY: It's unfortunate that we have to do this cast. It should be safe though.
      transition.resolvedModels[this.name] = resolvedModel;
    }
    fetchRoute() {
      var route = this.router.getRoute(this.name);
      return this._processRoute(route);
    }
    _processRoute(route) {
      // Setup a routePromise so that we can wait for asynchronously loaded routes
      this.routePromise = _rsvp.Promise.resolve(route);
      // Wait until the 'route' property has been updated when chaining to a route
      // that is a promise
      if (isPromise(route)) {
        this.routePromise = this.routePromise.then(r => {
          return this.updateRoute(r);
        });
        // set to undefined to avoid recursive loop in the route getter
        return this.route = undefined;
      } else if (route) {
        return this.updateRoute(route);
      }
      return undefined;
    }
  }
  _exports.InternalRouteInfo = InternalRouteInfo;
  class ResolvedRouteInfo extends InternalRouteInfo {
    constructor(router, name, paramNames, params, route, context) {
      super(router, name, paramNames, route);
      this.params = params;
      this.isResolved = true;
      this.context = context;
    }
    resolve(transition) {
      // A ResolvedRouteInfo just resolved with itself.
      if (transition && transition.resolvedModels) {
        transition.resolvedModels[this.name] = this.context;
      }
      return _rsvp.Promise.resolve(this);
    }
  }
  class UnresolvedRouteInfoByParam extends InternalRouteInfo {
    constructor(router, name, paramNames, params, route) {
      super(router, name, paramNames, route);
      this.params = {};
      if (params) {
        this.params = params;
      }
    }
    getModel(transition) {
      var fullParams = this.params;
      if (transition && transition[QUERY_PARAMS_SYMBOL]) {
        fullParams = {};
        merge(fullParams, this.params);
        fullParams.queryParams = transition[QUERY_PARAMS_SYMBOL];
      }
      var route = this.route;
      var result;
      // FIXME: Review these casts
      if (route.deserialize) {
        result = route.deserialize(fullParams, transition);
      } else if (route.model) {
        result = route.model(fullParams, transition);
      }
      if (result && isTransition(result)) {
        result = undefined;
      }
      return _rsvp.Promise.resolve(result);
    }
  }
  class UnresolvedRouteInfoByObject extends InternalRouteInfo {
    constructor(router, name, paramNames, context) {
      super(router, name, paramNames);
      this.context = context;
      this.serializer = this.router.getSerializer(name);
    }
    getModel(transition) {
      if (this.router.log !== undefined) {
        this.router.log(this.name + ': resolving provided model');
      }
      return super.getModel(transition);
    }
    /**
      @private
         Serializes a route using its custom `serialize` method or
      by a default that looks up the expected property name from
      the dynamic segment.
         @param {Object} model the model to be serialized for this route
    */
    serialize(model) {
      var {
        paramNames,
        context
      } = this;
      if (!model) {
        // SAFETY: By the time we serialize, we expect to be resolved.
        // This may not be an entirely safe assumption though no tests fail.
        model = context;
      }
      var object = {};
      if (isParam(model)) {
        object[paramNames[0]] = model;
        return object;
      }
      // Use custom serialize if it exists.
      if (this.serializer) {
        // invoke this.serializer unbound (getSerializer returns a stateless function)
        return this.serializer.call(null, model, paramNames);
      } else if (this.route !== undefined) {
        if (this.route.serialize) {
          return this.route.serialize(model, paramNames);
        }
      }
      if (paramNames.length !== 1) {
        return;
      }
      var name = paramNames[0];
      if (/_id$/.test(name)) {
        // SAFETY: Model is supposed to extend IModel already
        object[name] = model.id;
      } else {
        object[name] = model;
      }
      return object;
    }
  }
  function paramsMatch(a, b) {
    if (a === b) {
      // Both are identical, may both be undefined
      return true;
    }
    if (!a || !b) {
      // Only one is undefined, already checked they aren't identical
      return false;
    }
    // Note: this assumes that both params have the same
    // number of keys, but since we're comparing the
    // same routes, they should.
    for (var k in a) {
      if (a.hasOwnProperty(k) && a[k] !== b[k]) {
        return false;
      }
    }
    return true;
  }
  class TransitionIntent {
    constructor(router, data = {}) {
      this.router = router;
      this.data = data;
    }
  }
  function handleError(currentState, transition, error) {
    // This is the only possible
    // reject value of TransitionState#resolve
    var routeInfos = currentState.routeInfos;
    var errorHandlerIndex = transition.resolveIndex >= routeInfos.length ? routeInfos.length - 1 : transition.resolveIndex;
    var wasAborted = transition.isAborted;
    throw new TransitionError(error, currentState.routeInfos[errorHandlerIndex].route, wasAborted, currentState);
  }
  function resolveOneRouteInfo(currentState, transition) {
    if (transition.resolveIndex === currentState.routeInfos.length) {
      // This is is the only possible
      // fulfill value of TransitionState#resolve
      return;
    }
    var routeInfo = currentState.routeInfos[transition.resolveIndex];
    var callback = proceed.bind(null, currentState, transition);
    return routeInfo.resolve(transition).then(callback, null, currentState.promiseLabel('Proceed'));
  }
  function proceed(currentState, transition, resolvedRouteInfo) {
    var wasAlreadyResolved = currentState.routeInfos[transition.resolveIndex].isResolved;
    // Swap the previously unresolved routeInfo with
    // the resolved routeInfo
    currentState.routeInfos[transition.resolveIndex++] = resolvedRouteInfo;
    if (!wasAlreadyResolved) {
      // Call the redirect hook. The reason we call it here
      // vs. afterModel is so that redirects into child
      // routes don't re-run the model hooks for this
      // already-resolved route.
      var {
        route
      } = resolvedRouteInfo;
      if (route !== undefined) {
        if (route.redirect) {
          route.redirect(resolvedRouteInfo.context, transition);
        }
      }
    }
    // Proceed after ensuring that the redirect hook
    // didn't abort this transition by transitioning elsewhere.
    throwIfAborted(transition);
    return resolveOneRouteInfo(currentState, transition);
  }
  class TransitionState {
    constructor() {
      this.routeInfos = [];
      this.queryParams = {};
      this.params = {};
    }
    promiseLabel(label) {
      var targetName = '';
      forEach(this.routeInfos, function (routeInfo) {
        if (targetName !== '') {
          targetName += '.';
        }
        targetName += routeInfo.name;
        return true;
      });
      return promiseLabel("'" + targetName + "': " + label);
    }
    resolve(transition) {
      // First, calculate params for this state. This is useful
      // information to provide to the various route hooks.
      var params = this.params;
      forEach(this.routeInfos, routeInfo => {
        params[routeInfo.name] = routeInfo.params || {};
        return true;
      });
      transition.resolveIndex = 0;
      var callback = resolveOneRouteInfo.bind(null, this, transition);
      var errorHandler = handleError.bind(null, this, transition);
      // The prelude RSVP.resolve() async moves us into the promise land.
      return _rsvp.Promise.resolve(null, this.promiseLabel('Start transition')).then(callback, null, this.promiseLabel('Resolve route')).catch(errorHandler, this.promiseLabel('Handle error')).then(() => this);
    }
  }
  _exports.TransitionState = TransitionState;
  class TransitionError {
    constructor(error, route, wasAborted, state) {
      this.error = error;
      this.route = route;
      this.wasAborted = wasAborted;
      this.state = state;
    }
  }
  _exports.TransitionError = TransitionError;
  class NamedTransitionIntent extends TransitionIntent {
    constructor(router, name, pivotHandler, contexts = [], queryParams = {}, data) {
      super(router, data);
      this.preTransitionState = undefined;
      this.name = name;
      this.pivotHandler = pivotHandler;
      this.contexts = contexts;
      this.queryParams = queryParams;
    }
    applyToState(oldState, isIntermediate) {
      var handlers = this.router.recognizer.handlersFor(this.name);
      var targetRouteName = handlers[handlers.length - 1].handler;
      return this.applyToHandlers(oldState, handlers, targetRouteName, isIntermediate, false);
    }
    applyToHandlers(oldState, parsedHandlers, targetRouteName, isIntermediate, checkingIfActive) {
      var i, len;
      var newState = new TransitionState();
      var objects = this.contexts.slice(0);
      var invalidateIndex = parsedHandlers.length;
      // Pivot handlers are provided for refresh transitions
      if (this.pivotHandler) {
        for (i = 0, len = parsedHandlers.length; i < len; ++i) {
          if (parsedHandlers[i].handler === this.pivotHandler._internalName) {
            invalidateIndex = i;
            break;
          }
        }
      }
      for (i = parsedHandlers.length - 1; i >= 0; --i) {
        var result = parsedHandlers[i];
        var name = result.handler;
        var oldHandlerInfo = oldState.routeInfos[i];
        var newHandlerInfo = null;
        if (result.names.length > 0) {
          if (i >= invalidateIndex) {
            newHandlerInfo = this.createParamHandlerInfo(name, result.names, objects, oldHandlerInfo);
          } else {
            newHandlerInfo = this.getHandlerInfoForDynamicSegment(name, result.names, objects, oldHandlerInfo, targetRouteName, i);
          }
        } else {
          // This route has no dynamic segment.
          // Therefore treat as a param-based handlerInfo
          // with empty params. This will cause the `model`
          // hook to be called with empty params, which is desirable.
          newHandlerInfo = this.createParamHandlerInfo(name, result.names, objects, oldHandlerInfo);
        }
        if (checkingIfActive) {
          // If we're performing an isActive check, we want to
          // serialize URL params with the provided context, but
          // ignore mismatches between old and new context.
          newHandlerInfo = newHandlerInfo.becomeResolved(null,
          // SAFETY: This seems to imply that it would be resolved, but it's unclear if that's actually the case.
          newHandlerInfo.context);
          var oldContext = oldHandlerInfo && oldHandlerInfo.context;
          if (result.names.length > 0 && oldHandlerInfo.context !== undefined && newHandlerInfo.context === oldContext) {
            // If contexts match in isActive test, assume params also match.
            // This allows for flexibility in not requiring that every last
            // handler provide a `serialize` method
            newHandlerInfo.params = oldHandlerInfo && oldHandlerInfo.params;
          }
          newHandlerInfo.context = oldContext;
        }
        var handlerToUse = oldHandlerInfo;
        if (i >= invalidateIndex || newHandlerInfo.shouldSupersede(oldHandlerInfo)) {
          invalidateIndex = Math.min(i, invalidateIndex);
          handlerToUse = newHandlerInfo;
        }
        if (isIntermediate && !checkingIfActive) {
          handlerToUse = handlerToUse.becomeResolved(null,
          // SAFETY: This seems to imply that it would be resolved, but it's unclear if that's actually the case.
          handlerToUse.context);
        }
        newState.routeInfos.unshift(handlerToUse);
      }
      if (objects.length > 0) {
        throw new Error('More context objects were passed than there are dynamic segments for the route: ' + targetRouteName);
      }
      if (!isIntermediate) {
        this.invalidateChildren(newState.routeInfos, invalidateIndex);
      }
      merge(newState.queryParams, this.queryParams || {});
      if (isIntermediate && oldState.queryParams) {
        merge(newState.queryParams, oldState.queryParams);
      }
      return newState;
    }
    invalidateChildren(handlerInfos, invalidateIndex) {
      for (var i = invalidateIndex, l = handlerInfos.length; i < l; ++i) {
        var handlerInfo = handlerInfos[i];
        if (handlerInfo.isResolved) {
          var {
            name,
            params,
            route,
            paramNames
          } = handlerInfos[i];
          handlerInfos[i] = new UnresolvedRouteInfoByParam(this.router, name, paramNames, params, route);
        }
      }
    }
    getHandlerInfoForDynamicSegment(name, names, objects, oldHandlerInfo, _targetRouteName, i) {
      var objectToUse;
      if (objects.length > 0) {
        // Use the objects provided for this transition.
        objectToUse = objects[objects.length - 1];
        if (isParam(objectToUse)) {
          return this.createParamHandlerInfo(name, names, objects, oldHandlerInfo);
        } else {
          objects.pop();
        }
      } else if (oldHandlerInfo && oldHandlerInfo.name === name) {
        // Reuse the matching oldHandlerInfo
        return oldHandlerInfo;
      } else {
        if (this.preTransitionState) {
          var preTransitionHandlerInfo = this.preTransitionState.routeInfos[i];
          objectToUse = preTransitionHandlerInfo === null || preTransitionHandlerInfo === void 0 ? void 0 : preTransitionHandlerInfo.context;
        } else {
          // Ideally we should throw this error to provide maximal
          // information to the user that not enough context objects
          // were provided, but this proves too cumbersome in Ember
          // in cases where inner template helpers are evaluated
          // before parent helpers un-render, in which cases this
          // error somewhat prematurely fires.
          //throw new Error("Not enough context objects were provided to complete a transition to " + targetRouteName + ". Specifically, the " + name + " route needs an object that can be serialized into its dynamic URL segments [" + names.join(', ') + "]");
          return oldHandlerInfo;
        }
      }
      return new UnresolvedRouteInfoByObject(this.router, name, names, objectToUse);
    }
    createParamHandlerInfo(name, names, objects, oldHandlerInfo) {
      var params = {};
      // Soak up all the provided string/numbers
      var numNames = names.length;
      var missingParams = [];
      while (numNames--) {
        // Only use old params if the names match with the new handler
        var oldParams = oldHandlerInfo && name === oldHandlerInfo.name && oldHandlerInfo.params || {};
        var peek = objects[objects.length - 1];
        var paramName = names[numNames];
        if (isParam(peek)) {
          params[paramName] = '' + objects.pop();
        } else {
          // If we're here, this means only some of the params
          // were string/number params, so try and use a param
          // value from a previous handler.
          if (oldParams.hasOwnProperty(paramName)) {
            params[paramName] = oldParams[paramName];
          } else {
            missingParams.push(paramName);
          }
        }
      }
      if (missingParams.length > 0) {
        throw new Error(`You didn't provide enough string/numeric parameters to satisfy all of the dynamic segments for route ${name}.` + ` Missing params: ${missingParams}`);
      }
      return new UnresolvedRouteInfoByParam(this.router, name, names, params);
    }
  }
  var UnrecognizedURLError = function () {
    UnrecognizedURLError.prototype = Object.create(Error.prototype);
    UnrecognizedURLError.prototype.constructor = UnrecognizedURLError;
    function UnrecognizedURLError(message) {
      var error = Error.call(this, message);
      this.name = 'UnrecognizedURLError';
      this.message = message || 'UnrecognizedURL';
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, UnrecognizedURLError);
      } else {
        this.stack = error.stack;
      }
    }
    return UnrecognizedURLError;
  }();
  class URLTransitionIntent extends TransitionIntent {
    constructor(router, url, data) {
      super(router, data);
      this.url = url;
      this.preTransitionState = undefined;
    }
    applyToState(oldState) {
      var newState = new TransitionState();
      var results = this.router.recognizer.recognize(this.url),
        i,
        len;
      if (!results) {
        throw new UnrecognizedURLError(this.url);
      }
      var statesDiffer = false;
      var _url = this.url;
      // Checks if a handler is accessible by URL. If it is not, an error is thrown.
      // For the case where the handler is loaded asynchronously, the error will be
      // thrown once it is loaded.
      function checkHandlerAccessibility(handler) {
        if (handler && handler.inaccessibleByURL) {
          throw new UnrecognizedURLError(_url);
        }
        return handler;
      }
      for (i = 0, len = results.length; i < len; ++i) {
        var result = results[i];
        var name = result.handler;
        var paramNames = [];
        if (this.router.recognizer.hasRoute(name)) {
          paramNames = this.router.recognizer.handlersFor(name)[i].names;
        }
        var newRouteInfo = new UnresolvedRouteInfoByParam(this.router, name, paramNames, result.params);
        var route = newRouteInfo.route;
        if (route) {
          checkHandlerAccessibility(route);
        } else {
          // If the handler is being loaded asynchronously, check if we can
          // access it after it has resolved
          newRouteInfo.routePromise = newRouteInfo.routePromise.then(checkHandlerAccessibility);
        }
        var oldRouteInfo = oldState.routeInfos[i];
        if (statesDiffer || newRouteInfo.shouldSupersede(oldRouteInfo)) {
          statesDiffer = true;
          newState.routeInfos[i] = newRouteInfo;
        } else {
          newState.routeInfos[i] = oldRouteInfo;
        }
      }
      merge(newState.queryParams, results.queryParams);
      return newState;
    }
  }
  class Router {
    constructor(logger) {
      this._lastQueryParams = {};
      this.state = undefined;
      this.oldState = undefined;
      this.activeTransition = undefined;
      this.currentRouteInfos = undefined;
      this._changedQueryParams = undefined;
      this.currentSequence = 0;
      this.log = logger;
      this.recognizer = new _routeRecognizer.default();
      this.reset();
    }
    /**
      The main entry point into the router. The API is essentially
      the same as the `map` method in `route-recognizer`.
         This method extracts the String handler at the last `.to()`
      call and uses it as the name of the whole route.
         @param {Function} callback
    */
    map(callback) {
      this.recognizer.map(callback, function (recognizer, routes) {
        for (var i = routes.length - 1, _proceed = true; i >= 0 && _proceed; --i) {
          var route = routes[i];
          var handler = route.handler;
          recognizer.add(routes, {
            as: handler
          });
          _proceed = route.path === '/' || route.path === '' || handler.slice(-6) === '.index';
        }
      });
    }
    hasRoute(route) {
      return this.recognizer.hasRoute(route);
    }
    queryParamsTransition(changelist, wasTransitioning, oldState, newState) {
      this.fireQueryParamDidChange(newState, changelist);
      if (!wasTransitioning && this.activeTransition) {
        // One of the routes in queryParamsDidChange
        // caused a transition. Just return that transition.
        return this.activeTransition;
      } else {
        // Running queryParamsDidChange didn't change anything.
        // Just update query params and be on our way.
        // We have to return a noop transition that will
        // perform a URL update at the end. This gives
        // the user the ability to set the url update
        // method (default is replaceState).
        var newTransition = new Transition(this, undefined, undefined);
        newTransition.queryParamsOnly = true;
        oldState.queryParams = this.finalizeQueryParamChange(newState.routeInfos, newState.queryParams, newTransition);
        newTransition[QUERY_PARAMS_SYMBOL] = newState.queryParams;
        this.toReadOnlyInfos(newTransition, newState);
        this.routeWillChange(newTransition);
        newTransition.promise = newTransition.promise.then(result => {
          if (!newTransition.isAborted) {
            this._updateURL(newTransition, oldState);
            this.didTransition(this.currentRouteInfos);
            this.toInfos(newTransition, newState.routeInfos, true);
            this.routeDidChange(newTransition);
          }
          return result;
        }, null, promiseLabel('Transition complete'));
        return newTransition;
      }
    }
    transitionByIntent(intent, isIntermediate) {
      try {
        return this.getTransitionByIntent(intent, isIntermediate);
      } catch (e) {
        return new Transition(this, intent, undefined, e, undefined);
      }
    }
    recognize(url) {
      var intent = new URLTransitionIntent(this, url);
      var newState = this.generateNewState(intent);
      if (newState === null) {
        return newState;
      }
      var readonlyInfos = toReadOnlyRouteInfo(newState.routeInfos, newState.queryParams);
      return readonlyInfos[readonlyInfos.length - 1];
    }
    recognizeAndLoad(url) {
      var intent = new URLTransitionIntent(this, url);
      var newState = this.generateNewState(intent);
      if (newState === null) {
        return _rsvp.Promise.reject(`URL ${url} was not recognized`);
      }
      var newTransition = new Transition(this, intent, newState, undefined);
      return newTransition.then(() => {
        var routeInfosWithAttributes = toReadOnlyRouteInfo(newState.routeInfos, newTransition[QUERY_PARAMS_SYMBOL], true);
        return routeInfosWithAttributes[routeInfosWithAttributes.length - 1];
      });
    }
    generateNewState(intent) {
      try {
        return intent.applyToState(this.state, false);
      } catch (e) {
        return null;
      }
    }
    getTransitionByIntent(intent, isIntermediate) {
      var wasTransitioning = !!this.activeTransition;
      var oldState = wasTransitioning ? this.activeTransition[STATE_SYMBOL] : this.state;
      var newTransition;
      var newState = intent.applyToState(oldState, isIntermediate);
      var queryParamChangelist = getChangelist(oldState.queryParams, newState.queryParams);
      if (routeInfosEqual(newState.routeInfos, oldState.routeInfos)) {
        // This is a no-op transition. See if query params changed.
        if (queryParamChangelist) {
          var _newTransition = this.queryParamsTransition(queryParamChangelist, wasTransitioning, oldState, newState);
          _newTransition.queryParamsOnly = true;
          // SAFETY: The returned OpaqueTransition should actually be this.
          return _newTransition;
        }
        // No-op. No need to create a new transition.
        return this.activeTransition || new Transition(this, undefined, undefined);
      }
      if (isIntermediate) {
        var transition = new Transition(this, undefined, newState);
        transition.isIntermediate = true;
        this.toReadOnlyInfos(transition, newState);
        this.setupContexts(newState, transition);
        this.routeWillChange(transition);
        return this.activeTransition;
      }
      // Create a new transition to the destination route.
      newTransition = new Transition(this, intent, newState, undefined, this.activeTransition);
      // transition is to same route with same params, only query params differ.
      // not caught above probably because refresh() has been used
      if (routeInfosSameExceptQueryParams(newState.routeInfos, oldState.routeInfos)) {
        newTransition.queryParamsOnly = true;
      }
      this.toReadOnlyInfos(newTransition, newState);
      // Abort and usurp any previously active transition.
      if (this.activeTransition) {
        this.activeTransition.redirect(newTransition);
      }
      this.activeTransition = newTransition;
      // Transition promises by default resolve with resolved state.
      // For our purposes, swap out the promise to resolve
      // after the transition has been finalized.
      newTransition.promise = newTransition.promise.then(result => {
        return this.finalizeTransition(newTransition, result);
      }, null, promiseLabel('Settle transition promise when transition is finalized'));
      if (!wasTransitioning) {
        this.notifyExistingHandlers(newState, newTransition);
      }
      this.fireQueryParamDidChange(newState, queryParamChangelist);
      return newTransition;
    }
    /**
    @private
       Begins and returns a Transition based on the provided
    arguments. Accepts arguments in the form of both URL
    transitions and named transitions.
       @param {Router} router
    @param {Array[Object]} args arguments passed to transitionTo,
      replaceWith, or handleURL
    */
    doTransition(name, modelsArray = [], isIntermediate = false) {
      var lastArg = modelsArray[modelsArray.length - 1];
      var queryParams = {};
      if (lastArg && Object.prototype.hasOwnProperty.call(lastArg, 'queryParams')) {
        // We just checked this.
        // TODO: Use an assertion?
        queryParams = modelsArray.pop().queryParams;
      }
      var intent;
      if (name === undefined) {
        log(this, 'Updating query params');
        // A query param update is really just a transition
        // into the route you're already on.
        var {
          routeInfos
        } = this.state;
        intent = new NamedTransitionIntent(this, routeInfos[routeInfos.length - 1].name, undefined, [], queryParams);
      } else if (name.charAt(0) === '/') {
        log(this, 'Attempting URL transition to ' + name);
        intent = new URLTransitionIntent(this, name);
      } else {
        log(this, 'Attempting transition to ' + name);
        intent = new NamedTransitionIntent(this, name, undefined,
        // SAFETY: We know this to be the case since we removed the last item if it was QPs
        modelsArray, queryParams);
      }
      return this.transitionByIntent(intent, isIntermediate);
    }
    /**
    @private
       Updates the URL (if necessary) and calls `setupContexts`
    to update the router's array of `currentRouteInfos`.
    */
    finalizeTransition(transition, newState) {
      try {
        log(transition.router, transition.sequence, 'Resolved all models on destination route; finalizing transition.');
        var routeInfos = newState.routeInfos;
        // Run all the necessary enter/setup/exit hooks
        this.setupContexts(newState, transition);
        // Check if a redirect occurred in enter/setup
        if (transition.isAborted) {
          // TODO: cleaner way? distinguish b/w targetRouteInfos?
          this.state.routeInfos = this.currentRouteInfos;
          return _rsvp.Promise.reject(logAbort(transition));
        }
        this._updateURL(transition, newState);
        transition.isActive = false;
        this.activeTransition = undefined;
        this.triggerEvent(this.currentRouteInfos, true, 'didTransition', []);
        this.didTransition(this.currentRouteInfos);
        this.toInfos(transition, newState.routeInfos, true);
        this.routeDidChange(transition);
        log(this, transition.sequence, 'TRANSITION COMPLETE.');
        // Resolve with the final route.
        return routeInfos[routeInfos.length - 1].route;
      } catch (e) {
        if (!isTransitionAborted(e)) {
          var infos = transition[STATE_SYMBOL].routeInfos;
          transition.trigger(true, 'error', e, transition, infos[infos.length - 1].route);
          transition.abort();
        }
        throw e;
      }
    }
    /**
    @private
       Takes an Array of `RouteInfo`s, figures out which ones are
    exiting, entering, or changing contexts, and calls the
    proper route hooks.
       For example, consider the following tree of routes. Each route is
    followed by the URL segment it handles.
       ```
    |~index ("/")
    | |~posts ("/posts")
    | | |-showPost ("/:id")
    | | |-newPost ("/new")
    | | |-editPost ("/edit")
    | |~about ("/about/:id")
    ```
       Consider the following transitions:
       1. A URL transition to `/posts/1`.
       1. Triggers the `*model` callbacks on the
          `index`, `posts`, and `showPost` routes
       2. Triggers the `enter` callback on the same
       3. Triggers the `setup` callback on the same
    2. A direct transition to `newPost`
       1. Triggers the `exit` callback on `showPost`
       2. Triggers the `enter` callback on `newPost`
       3. Triggers the `setup` callback on `newPost`
    3. A direct transition to `about` with a specified
       context object
       1. Triggers the `exit` callback on `newPost`
          and `posts`
       2. Triggers the `serialize` callback on `about`
       3. Triggers the `enter` callback on `about`
       4. Triggers the `setup` callback on `about`
       @param {Router} transition
    @param {TransitionState} newState
    */
    setupContexts(newState, transition) {
      var partition = this.partitionRoutes(this.state, newState);
      var i, l, route;
      for (i = 0, l = partition.exited.length; i < l; i++) {
        route = partition.exited[i].route;
        delete route.context;
        if (route !== undefined) {
          if (route._internalReset !== undefined) {
            route._internalReset(true, transition);
          }
          if (route.exit !== undefined) {
            route.exit(transition);
          }
        }
      }
      var oldState = this.oldState = this.state;
      this.state = newState;
      var currentRouteInfos = this.currentRouteInfos = partition.unchanged.slice();
      try {
        for (i = 0, l = partition.reset.length; i < l; i++) {
          route = partition.reset[i].route;
          if (route !== undefined) {
            if (route._internalReset !== undefined) {
              route._internalReset(false, transition);
            }
          }
        }
        for (i = 0, l = partition.updatedContext.length; i < l; i++) {
          this.routeEnteredOrUpdated(currentRouteInfos, partition.updatedContext[i], false, transition);
        }
        for (i = 0, l = partition.entered.length; i < l; i++) {
          this.routeEnteredOrUpdated(currentRouteInfos, partition.entered[i], true, transition);
        }
      } catch (e) {
        this.state = oldState;
        this.currentRouteInfos = oldState.routeInfos;
        throw e;
      }
      this.state.queryParams = this.finalizeQueryParamChange(currentRouteInfos, newState.queryParams, transition);
    }
    /**
    @private
       Fires queryParamsDidChange event
    */
    fireQueryParamDidChange(newState, queryParamChangelist) {
      // If queryParams changed trigger event
      if (queryParamChangelist) {
        // This is a little hacky but we need some way of storing
        // changed query params given that no activeTransition
        // is guaranteed to have occurred.
        this._changedQueryParams = queryParamChangelist.all;
        this.triggerEvent(newState.routeInfos, true, 'queryParamsDidChange', [queryParamChangelist.changed, queryParamChangelist.all, queryParamChangelist.removed]);
        this._changedQueryParams = undefined;
      }
    }
    /**
    @private
       Helper method used by setupContexts. Handles errors or redirects
    that may happen in enter/setup.
    */
    routeEnteredOrUpdated(currentRouteInfos, routeInfo, enter, transition) {
      var route = routeInfo.route,
        context = routeInfo.context;
      function _routeEnteredOrUpdated(route) {
        if (enter) {
          if (route.enter !== undefined) {
            route.enter(transition);
          }
        }
        throwIfAborted(transition);
        route.context = context;
        if (route.contextDidChange !== undefined) {
          route.contextDidChange();
        }
        if (route.setup !== undefined) {
          route.setup(context, transition);
        }
        throwIfAborted(transition);
        currentRouteInfos.push(routeInfo);
        return route;
      }
      // If the route doesn't exist, it means we haven't resolved the route promise yet
      if (route === undefined) {
        routeInfo.routePromise = routeInfo.routePromise.then(_routeEnteredOrUpdated);
      } else {
        _routeEnteredOrUpdated(route);
      }
      return true;
    }
    /**
    @private
       This function is called when transitioning from one URL to
    another to determine which routes are no longer active,
    which routes are newly active, and which routes remain
    active but have their context changed.
       Take a list of old routes and new routes and partition
    them into four buckets:
       * unchanged: the route was active in both the old and
      new URL, and its context remains the same
    * updated context: the route was active in both the
      old and new URL, but its context changed. The route's
      `setup` method, if any, will be called with the new
      context.
    * exited: the route was active in the old URL, but is
      no longer active.
    * entered: the route was not active in the old URL, but
      is now active.
       The PartitionedRoutes structure has four fields:
       * `updatedContext`: a list of `RouteInfo` objects that
      represent routes that remain active but have a changed
      context
    * `entered`: a list of `RouteInfo` objects that represent
      routes that are newly active
    * `exited`: a list of `RouteInfo` objects that are no
      longer active.
    * `unchanged`: a list of `RouteInfo` objects that remain active.
       @param {Array[InternalRouteInfo]} oldRoutes a list of the route
      information for the previous URL (or `[]` if this is the
      first handled transition)
    @param {Array[InternalRouteInfo]} newRoutes a list of the route
      information for the new URL
       @return {Partition}
    */
    partitionRoutes(oldState, newState) {
      var oldRouteInfos = oldState.routeInfos;
      var newRouteInfos = newState.routeInfos;
      var routes = {
        updatedContext: [],
        exited: [],
        entered: [],
        unchanged: [],
        reset: []
      };
      var routeChanged,
        contextChanged = false,
        i,
        l;
      for (i = 0, l = newRouteInfos.length; i < l; i++) {
        var oldRouteInfo = oldRouteInfos[i],
          newRouteInfo = newRouteInfos[i];
        if (!oldRouteInfo || oldRouteInfo.route !== newRouteInfo.route) {
          routeChanged = true;
        }
        if (routeChanged) {
          routes.entered.push(newRouteInfo);
          if (oldRouteInfo) {
            routes.exited.unshift(oldRouteInfo);
          }
        } else if (contextChanged || oldRouteInfo.context !== newRouteInfo.context) {
          contextChanged = true;
          routes.updatedContext.push(newRouteInfo);
        } else {
          routes.unchanged.push(oldRouteInfo);
        }
      }
      for (i = newRouteInfos.length, l = oldRouteInfos.length; i < l; i++) {
        routes.exited.unshift(oldRouteInfos[i]);
      }
      routes.reset = routes.updatedContext.slice();
      routes.reset.reverse();
      return routes;
    }
    _updateURL(transition, state) {
      var urlMethod = transition.urlMethod;
      if (!urlMethod) {
        return;
      }
      var {
        routeInfos
      } = state;
      var {
        name: routeName
      } = routeInfos[routeInfos.length - 1];
      var params = {};
      for (var i = routeInfos.length - 1; i >= 0; --i) {
        var routeInfo = routeInfos[i];
        merge(params, routeInfo.params);
        if (routeInfo.route.inaccessibleByURL) {
          urlMethod = null;
        }
      }
      if (urlMethod) {
        params.queryParams = transition._visibleQueryParams || state.queryParams;
        var url = this.recognizer.generate(routeName, params);
        // transitions during the initial transition must always use replaceURL.
        // When the app boots, you are at a url, e.g. /foo. If some route
        // redirects to bar as part of the initial transition, you don't want to
        // add a history entry for /foo. If you do, pressing back will immediately
        // hit the redirect again and take you back to /bar, thus killing the back
        // button
        var initial = transition.isCausedByInitialTransition;
        // say you are at / and you click a link to route /foo. In /foo's
        // route, the transition is aborted using replaceWith('/bar').
        // Because the current url is still /, the history entry for / is
        // removed from the history. Clicking back will take you to the page
        // you were on before /, which is often not even the app, thus killing
        // the back button. That's why updateURL is always correct for an
        // aborting transition that's not the initial transition
        var replaceAndNotAborting = urlMethod === 'replace' && !transition.isCausedByAbortingTransition;
        // because calling refresh causes an aborted transition, this needs to be
        // special cased - if the initial transition is a replace transition, the
        // urlMethod should be honored here.
        var isQueryParamsRefreshTransition = transition.queryParamsOnly && urlMethod === 'replace';
        // say you are at / and you a `replaceWith(/foo)` is called. Then, that
        // transition is aborted with `replaceWith(/bar)`. At the end, we should
        // end up with /bar replacing /. We are replacing the replace. We only
        // will replace the initial route if all subsequent aborts are also
        // replaces. However, there is some ambiguity around the correct behavior
        // here.
        var replacingReplace = urlMethod === 'replace' && transition.isCausedByAbortingReplaceTransition;
        if (initial || replaceAndNotAborting || isQueryParamsRefreshTransition || replacingReplace) {
          this.replaceURL(url);
        } else {
          this.updateURL(url);
        }
      }
    }
    finalizeQueryParamChange(resolvedHandlers, newQueryParams, transition) {
      // We fire a finalizeQueryParamChange event which
      // gives the new route hierarchy a chance to tell
      // us which query params it's consuming and what
      // their final values are. If a query param is
      // no longer consumed in the final route hierarchy,
      // its serialized segment will be removed
      // from the URL.
      for (var k in newQueryParams) {
        if (newQueryParams.hasOwnProperty(k) && newQueryParams[k] === null) {
          delete newQueryParams[k];
        }
      }
      var finalQueryParamsArray = [];
      this.triggerEvent(resolvedHandlers, true, 'finalizeQueryParamChange', [newQueryParams, finalQueryParamsArray, transition]);
      if (transition) {
        transition._visibleQueryParams = {};
      }
      var finalQueryParams = {};
      for (var i = 0, len = finalQueryParamsArray.length; i < len; ++i) {
        var qp = finalQueryParamsArray[i];
        finalQueryParams[qp.key] = qp.value;
        if (transition && qp.visible !== false) {
          transition._visibleQueryParams[qp.key] = qp.value;
        }
      }
      return finalQueryParams;
    }
    toReadOnlyInfos(newTransition, newState) {
      var oldRouteInfos = this.state.routeInfos;
      this.fromInfos(newTransition, oldRouteInfos);
      this.toInfos(newTransition, newState.routeInfos);
      this._lastQueryParams = newState.queryParams;
    }
    fromInfos(newTransition, oldRouteInfos) {
      if (newTransition !== undefined && oldRouteInfos.length > 0) {
        var fromInfos = toReadOnlyRouteInfo(oldRouteInfos, Object.assign({}, this._lastQueryParams), true);
        newTransition.from = fromInfos[fromInfos.length - 1] || null;
      }
    }
    toInfos(newTransition, newRouteInfos, includeAttributes = false) {
      if (newTransition !== undefined && newRouteInfos.length > 0) {
        var toInfos = toReadOnlyRouteInfo(newRouteInfos, Object.assign({}, newTransition[QUERY_PARAMS_SYMBOL]), includeAttributes);
        newTransition.to = toInfos[toInfos.length - 1] || null;
      }
    }
    notifyExistingHandlers(newState, newTransition) {
      var oldRouteInfos = this.state.routeInfos,
        i,
        oldRouteInfoLen,
        oldHandler,
        newRouteInfo;
      oldRouteInfoLen = oldRouteInfos.length;
      for (i = 0; i < oldRouteInfoLen; i++) {
        oldHandler = oldRouteInfos[i];
        newRouteInfo = newState.routeInfos[i];
        if (!newRouteInfo || oldHandler.name !== newRouteInfo.name) {
          break;
        }
        if (!newRouteInfo.isResolved) {}
      }
      this.triggerEvent(oldRouteInfos, true, 'willTransition', [newTransition]);
      this.routeWillChange(newTransition);
      this.willTransition(oldRouteInfos, newState.routeInfos, newTransition);
    }
    /**
      Clears the current and target route routes and triggers exit
      on each of them starting at the leaf and traversing up through
      its ancestors.
    */
    reset() {
      if (this.state) {
        forEach(this.state.routeInfos.slice().reverse(), function (routeInfo) {
          var route = routeInfo.route;
          if (route !== undefined) {
            if (route.exit !== undefined) {
              route.exit();
            }
          }
          return true;
        });
      }
      this.oldState = undefined;
      this.state = new TransitionState();
      this.currentRouteInfos = undefined;
    }
    /**
      let handler = routeInfo.handler;
      The entry point for handling a change to the URL (usually
      via the back and forward button).
         Returns an Array of handlers and the parameters associated
      with those parameters.
         @param {String} url a URL to process
         @return {Array} an Array of `[handler, parameter]` tuples
    */
    handleURL(url) {
      // Perform a URL-based transition, but don't change
      // the URL afterward, since it already happened.
      if (url.charAt(0) !== '/') {
        url = '/' + url;
      }
      return this.doTransition(url).method(null);
    }
    /**
      Transition into the specified named route.
         If necessary, trigger the exit callback on any routes
      that are no longer represented by the target route.
         @param {String} name the name of the route
    */
    transitionTo(name, ...contexts) {
      if (typeof name === 'object') {
        contexts.push(name);
        return this.doTransition(undefined, contexts, false);
      }
      return this.doTransition(name, contexts);
    }
    intermediateTransitionTo(name, ...args) {
      return this.doTransition(name, args, true);
    }
    refresh(pivotRoute) {
      var previousTransition = this.activeTransition;
      var state = previousTransition ? previousTransition[STATE_SYMBOL] : this.state;
      var routeInfos = state.routeInfos;
      if (pivotRoute === undefined) {
        pivotRoute = routeInfos[0].route;
      }
      log(this, 'Starting a refresh transition');
      var name = routeInfos[routeInfos.length - 1].name;
      var intent = new NamedTransitionIntent(this, name, pivotRoute, [], this._changedQueryParams || state.queryParams);
      var newTransition = this.transitionByIntent(intent, false);
      // if the previous transition is a replace transition, that needs to be preserved
      if (previousTransition && previousTransition.urlMethod === 'replace') {
        newTransition.method(previousTransition.urlMethod);
      }
      return newTransition;
    }
    /**
      Identical to `transitionTo` except that the current URL will be replaced
      if possible.
         This method is intended primarily for use with `replaceState`.
         @param {String} name the name of the route
    */
    replaceWith(name) {
      return this.doTransition(name).method('replace');
    }
    /**
      Take a named route and context objects and generate a
      URL.
         @param {String} name the name of the route to generate
        a URL for
      @param {...Object} objects a list of objects to serialize
         @return {String} a URL
    */
    generate(routeName, ...args) {
      var partitionedArgs = extractQueryParams(args),
        suppliedParams = partitionedArgs[0],
        queryParams = partitionedArgs[1];
      // Construct a TransitionIntent with the provided params
      // and apply it to the present state of the router.
      var intent = new NamedTransitionIntent(this, routeName, undefined, suppliedParams);
      var state = intent.applyToState(this.state, false);
      var params = {};
      for (var i = 0, len = state.routeInfos.length; i < len; ++i) {
        var routeInfo = state.routeInfos[i];
        var routeParams = routeInfo.serialize();
        merge(params, routeParams);
      }
      params.queryParams = queryParams;
      return this.recognizer.generate(routeName, params);
    }
    applyIntent(routeName, contexts) {
      var intent = new NamedTransitionIntent(this, routeName, undefined, contexts);
      var state = this.activeTransition && this.activeTransition[STATE_SYMBOL] || this.state;
      return intent.applyToState(state, false);
    }
    isActiveIntent(routeName, contexts, queryParams, _state) {
      var state = _state || this.state,
        targetRouteInfos = state.routeInfos,
        routeInfo,
        len;
      if (!targetRouteInfos.length) {
        return false;
      }
      var targetHandler = targetRouteInfos[targetRouteInfos.length - 1].name;
      var recognizerHandlers = this.recognizer.handlersFor(targetHandler);
      var index = 0;
      for (len = recognizerHandlers.length; index < len; ++index) {
        routeInfo = targetRouteInfos[index];
        if (routeInfo.name === routeName) {
          break;
        }
      }
      if (index === recognizerHandlers.length) {
        // The provided route name isn't even in the route hierarchy.
        return false;
      }
      var testState = new TransitionState();
      testState.routeInfos = targetRouteInfos.slice(0, index + 1);
      recognizerHandlers = recognizerHandlers.slice(0, index + 1);
      var intent = new NamedTransitionIntent(this, targetHandler, undefined, contexts);
      var newState = intent.applyToHandlers(testState, recognizerHandlers, targetHandler, true, true);
      var routesEqual = routeInfosEqual(newState.routeInfos, testState.routeInfos);
      if (!queryParams || !routesEqual) {
        return routesEqual;
      }
      // Get a hash of QPs that will still be active on new route
      var activeQPsOnNewHandler = {};
      merge(activeQPsOnNewHandler, queryParams);
      var activeQueryParams = state.queryParams;
      for (var key in activeQueryParams) {
        if (activeQueryParams.hasOwnProperty(key) && activeQPsOnNewHandler.hasOwnProperty(key)) {
          activeQPsOnNewHandler[key] = activeQueryParams[key];
        }
      }
      return routesEqual && !getChangelist(activeQPsOnNewHandler, queryParams);
    }
    isActive(routeName, ...args) {
      var [contexts, queryParams] = extractQueryParams(args);
      return this.isActiveIntent(routeName, contexts, queryParams);
    }
    trigger(name, ...args) {
      this.triggerEvent(this.currentRouteInfos, false, name, args);
    }
  }
  function routeInfosEqual(routeInfos, otherRouteInfos) {
    if (routeInfos.length !== otherRouteInfos.length) {
      return false;
    }
    for (var i = 0, len = routeInfos.length; i < len; ++i) {
      // SAFETY: Just casting for comparison
      if (routeInfos[i] !== otherRouteInfos[i]) {
        return false;
      }
    }
    return true;
  }
  function routeInfosSameExceptQueryParams(routeInfos, otherRouteInfos) {
    if (routeInfos.length !== otherRouteInfos.length) {
      return false;
    }
    for (var i = 0, len = routeInfos.length; i < len; ++i) {
      if (routeInfos[i].name !== otherRouteInfos[i].name) {
        return false;
      }
      if (!paramsEqual(routeInfos[i].params, otherRouteInfos[i].params)) {
        return false;
      }
    }
    return true;
  }
  function paramsEqual(params, otherParams) {
    if (params === otherParams) {
      // Both identical or both undefined
      return true;
    }
    if (!params || !otherParams) {
      // One is falsy but other is not
      return false;
    }
    var keys = Object.keys(params);
    var otherKeys = Object.keys(otherParams);
    if (keys.length !== otherKeys.length) {
      return false;
    }
    for (var i = 0, len = keys.length; i < len; ++i) {
      var key = keys[i];
      if (params[key] !== otherParams[key]) {
        return false;
      }
    }
    return true;
  }
  var _default = _exports.default = Router;
});
define("rsvp", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Promise = _exports.EventTarget = void 0;
  _exports.all = all$1;
  _exports.allSettled = allSettled;
  _exports.asap = asap;
  _exports.cast = _exports.async = void 0;
  _exports.configure = configure;
  _exports.default = void 0;
  _exports.defer = defer;
  _exports.denodeify = denodeify;
  _exports.filter = filter;
  _exports.hash = hash;
  _exports.hashSettled = hashSettled;
  _exports.map = map;
  _exports.off = off;
  _exports.on = on;
  _exports.race = race$1;
  _exports.reject = reject$2;
  _exports.resolve = resolve$2;
  _exports.rethrow = rethrow;
  function callbacksFor(object) {
    var callbacks = object._promiseCallbacks;
    if (!callbacks) {
      callbacks = object._promiseCallbacks = {};
    }
    return callbacks;
  }

  /**
    @class EventTarget
    @for rsvp
    @public
  */
  var EventTarget = _exports.EventTarget = {
    /**
      `EventTarget.mixin` extends an object with EventTarget methods. For
      Example:
       ```javascript
      import EventTarget from 'rsvp';
       let object = {};
       EventTarget.mixin(object);
       object.on('finished', function(event) {
        // handle event
      });
       object.trigger('finished', { detail: value });
      ```
       `EventTarget.mixin` also works with prototypes:
       ```javascript
      import EventTarget from 'rsvp';
       let Person = function() {};
      EventTarget.mixin(Person.prototype);
       let yehuda = new Person();
      let tom = new Person();
       yehuda.on('poke', function(event) {
        console.log('Yehuda says OW');
      });
       tom.on('poke', function(event) {
        console.log('Tom says OW');
      });
       yehuda.trigger('poke');
      tom.trigger('poke');
      ```
       @method mixin
      @for rsvp
      @private
      @param {Object} object object to extend with EventTarget methods
    */
    mixin(object) {
      object.on = this.on;
      object.off = this.off;
      object.trigger = this.trigger;
      object._promiseCallbacks = undefined;
      return object;
    },
    /**
      Registers a callback to be executed when `eventName` is triggered
       ```javascript
      object.on('event', function(eventInfo){
        // handle the event
      });
       object.trigger('event');
      ```
       @method on
      @for EventTarget
      @private
      @param {String} eventName name of the event to listen for
      @param {Function} callback function to be called when the event is triggered.
    */
    on(eventName, callback) {
      if (typeof callback !== 'function') {
        throw new TypeError('Callback must be a function');
      }
      var allCallbacks = callbacksFor(this);
      var callbacks = allCallbacks[eventName];
      if (!callbacks) {
        callbacks = allCallbacks[eventName] = [];
      }
      if (callbacks.indexOf(callback) === -1) {
        callbacks.push(callback);
      }
    },
    /**
      You can use `off` to stop firing a particular callback for an event:
       ```javascript
      function doStuff() { // do stuff! }
      object.on('stuff', doStuff);
       object.trigger('stuff'); // doStuff will be called
       // Unregister ONLY the doStuff callback
      object.off('stuff', doStuff);
      object.trigger('stuff'); // doStuff will NOT be called
      ```
       If you don't pass a `callback` argument to `off`, ALL callbacks for the
      event will not be executed when the event fires. For example:
       ```javascript
      let callback1 = function(){};
      let callback2 = function(){};
       object.on('stuff', callback1);
      object.on('stuff', callback2);
       object.trigger('stuff'); // callback1 and callback2 will be executed.
       object.off('stuff');
      object.trigger('stuff'); // callback1 and callback2 will not be executed!
      ```
       @method off
      @for rsvp
      @private
      @param {String} eventName event to stop listening to
      @param {Function} [callback] optional argument. If given, only the function
      given will be removed from the event's callback queue. If no `callback`
      argument is given, all callbacks will be removed from the event's callback
      queue.
    */
    off(eventName, callback) {
      var allCallbacks = callbacksFor(this);
      if (!callback) {
        allCallbacks[eventName] = [];
        return;
      }
      var callbacks = allCallbacks[eventName];
      var index = callbacks.indexOf(callback);
      if (index !== -1) {
        callbacks.splice(index, 1);
      }
    },
    /**
      Use `trigger` to fire custom events. For example:
       ```javascript
      object.on('foo', function(){
        console.log('foo event happened!');
      });
      object.trigger('foo');
      // 'foo event happened!' logged to the console
      ```
       You can also pass a value as a second argument to `trigger` that will be
      passed as an argument to all event listeners for the event:
       ```javascript
      object.on('foo', function(value){
        console.log(value.name);
      });
       object.trigger('foo', { name: 'bar' });
      // 'bar' logged to the console
      ```
       @method trigger
      @for rsvp
      @private
      @param {String} eventName name of the event to be triggered
      @param {*} [options] optional value to be passed to any event handlers for
      the given `eventName`
    */
    trigger(eventName, options, label) {
      var allCallbacks = callbacksFor(this);
      var callbacks = allCallbacks[eventName];
      if (callbacks) {
        // Don't cache the callbacks.length since it may grow
        var callback;
        for (var i = 0; i < callbacks.length; i++) {
          callback = callbacks[i];
          callback(options, label);
        }
      }
    }
  };
  var config = {
    instrument: false
  };
  EventTarget['mixin'](config);
  function configure(name, value) {
    if (arguments.length === 2) {
      config[name] = value;
    } else {
      return config[name];
    }
  }
  var queue = [];
  function scheduleFlush() {
    setTimeout(() => {
      for (var i = 0; i < queue.length; i++) {
        var entry = queue[i];
        var payload = entry.payload;
        payload.guid = payload.key + payload.id;
        payload.childGuid = payload.key + payload.childId;
        if (payload.error) {
          payload.stack = payload.error.stack;
        }
        config['trigger'](entry.name, entry.payload);
      }
      queue.length = 0;
    }, 50);
  }
  function instrument(eventName, promise, child) {
    if (1 === queue.push({
      name: eventName,
      payload: {
        key: promise._guidKey,
        id: promise._id,
        eventName: eventName,
        detail: promise._result,
        childId: child && child._id,
        label: promise._label,
        timeStamp: Date.now(),
        error: config["instrument-with-stack"] ? new Error(promise._label) : null
      }
    })) {
      scheduleFlush();
    }
  }

  /**
    `Promise.resolve` returns a promise that will become resolved with the
    passed `value`. It is shorthand for the following:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise = new Promise(function(resolve, reject){
      resolve(1);
    });
  
    promise.then(function(value){
      // value === 1
    });
    ```
  
    Instead of writing the above, your code now simply becomes the following:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise = RSVP.Promise.resolve(1);
  
    promise.then(function(value){
      // value === 1
    });
    ```
  
    @method resolve
    @for Promise
    @static
    @param {*} object value that the returned promise will be resolved with
    @param {String} [label] optional string for identifying the returned promise.
    Useful for tooling.
    @return {Promise} a promise that will become fulfilled with the given
    `value`
  */
  function resolve$$1(object, label) {
    /*jshint validthis:true */
    var Constructor = this;
    if (object && typeof object === 'object' && object.constructor === Constructor) {
      return object;
    }
    var promise = new Constructor(noop, label);
    resolve$1(promise, object);
    return promise;
  }
  function withOwnPromise() {
    return new TypeError('A promises callback cannot return that same promise.');
  }
  function objectOrFunction(x) {
    var type = typeof x;
    return x !== null && (type === 'object' || type === 'function');
  }
  function noop() {}
  var PENDING = void 0;
  var FULFILLED = 1;
  var REJECTED = 2;
  function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
    try {
      then$$1.call(value, fulfillmentHandler, rejectionHandler);
    } catch (e) {
      return e;
    }
  }
  function handleForeignThenable(promise, thenable, then$$1) {
    config.async(promise => {
      var sealed = false;
      var error = tryThen(then$$1, thenable, value => {
        if (sealed) {
          return;
        }
        sealed = true;
        if (thenable === value) {
          fulfill(promise, value);
        } else {
          resolve$1(promise, value);
        }
      }, reason => {
        if (sealed) {
          return;
        }
        sealed = true;
        reject(promise, reason);
      }, 'Settle: ' + (promise._label || ' unknown promise'));
      if (!sealed && error) {
        sealed = true;
        reject(promise, error);
      }
    }, promise);
  }
  function handleOwnThenable(promise, thenable) {
    if (thenable._state === FULFILLED) {
      fulfill(promise, thenable._result);
    } else if (thenable._state === REJECTED) {
      thenable._onError = null;
      reject(promise, thenable._result);
    } else {
      subscribe(thenable, undefined, value => {
        if (thenable === value) {
          fulfill(promise, value);
        } else {
          resolve$1(promise, value);
        }
      }, reason => reject(promise, reason));
    }
  }
  function handleMaybeThenable(promise, maybeThenable, then$$1) {
    var isOwnThenable = maybeThenable.constructor === promise.constructor && then$$1 === then && promise.constructor.resolve === resolve$$1;
    if (isOwnThenable) {
      handleOwnThenable(promise, maybeThenable);
    } else if (typeof then$$1 === 'function') {
      handleForeignThenable(promise, maybeThenable, then$$1);
    } else {
      fulfill(promise, maybeThenable);
    }
  }
  function resolve$1(promise, value) {
    if (promise === value) {
      fulfill(promise, value);
    } else if (objectOrFunction(value)) {
      var then$$1;
      try {
        then$$1 = value.then;
      } catch (error) {
        reject(promise, error);
        return;
      }
      handleMaybeThenable(promise, value, then$$1);
    } else {
      fulfill(promise, value);
    }
  }
  function publishRejection(promise) {
    if (promise._onError) {
      promise._onError(promise._result);
    }
    publish(promise);
  }
  function fulfill(promise, value) {
    if (promise._state !== PENDING) {
      return;
    }
    promise._result = value;
    promise._state = FULFILLED;
    if (promise._subscribers.length === 0) {
      if (config.instrument) {
        instrument('fulfilled', promise);
      }
    } else {
      config.async(publish, promise);
    }
  }
  function reject(promise, reason) {
    if (promise._state !== PENDING) {
      return;
    }
    promise._state = REJECTED;
    promise._result = reason;
    config.async(publishRejection, promise);
  }
  function subscribe(parent, child, onFulfillment, onRejection) {
    var subscribers = parent._subscribers;
    var length = subscribers.length;
    parent._onError = null;
    subscribers[length] = child;
    subscribers[length + FULFILLED] = onFulfillment;
    subscribers[length + REJECTED] = onRejection;
    if (length === 0 && parent._state) {
      config.async(publish, parent);
    }
  }
  function publish(promise) {
    var subscribers = promise._subscribers;
    var settled = promise._state;
    if (config.instrument) {
      instrument(settled === FULFILLED ? 'fulfilled' : 'rejected', promise);
    }
    if (subscribers.length === 0) {
      return;
    }
    var child,
      callback,
      result = promise._result;
    for (var i = 0; i < subscribers.length; i += 3) {
      child = subscribers[i];
      callback = subscribers[i + settled];
      if (child) {
        invokeCallback(settled, child, callback, result);
      } else {
        callback(result);
      }
    }
    promise._subscribers.length = 0;
  }
  function invokeCallback(state, promise, callback, result) {
    var hasCallback = typeof callback === 'function';
    var value,
      succeeded = true,
      error;
    if (hasCallback) {
      try {
        value = callback(result);
      } catch (e) {
        succeeded = false;
        error = e;
      }
    } else {
      value = result;
    }
    if (promise._state !== PENDING) {
      // noop
    } else if (value === promise) {
      reject(promise, withOwnPromise());
    } else if (succeeded === false) {
      reject(promise, error);
    } else if (hasCallback) {
      resolve$1(promise, value);
    } else if (state === FULFILLED) {
      fulfill(promise, value);
    } else if (state === REJECTED) {
      reject(promise, value);
    }
  }
  function initializePromise(promise, resolver) {
    var resolved = false;
    try {
      resolver(value => {
        if (resolved) {
          return;
        }
        resolved = true;
        resolve$1(promise, value);
      }, reason => {
        if (resolved) {
          return;
        }
        resolved = true;
        reject(promise, reason);
      });
    } catch (e) {
      reject(promise, e);
    }
  }
  function then(onFulfillment, onRejection, label) {
    var parent = this;
    var state = parent._state;
    if (state === FULFILLED && !onFulfillment || state === REJECTED && !onRejection) {
      config.instrument && instrument('chained', parent, parent);
      return parent;
    }
    parent._onError = null;
    var child = new parent.constructor(noop, label);
    var result = parent._result;
    config.instrument && instrument('chained', parent, child);
    if (state === PENDING) {
      subscribe(parent, child, onFulfillment, onRejection);
    } else {
      var callback = state === FULFILLED ? onFulfillment : onRejection;
      config.async(() => invokeCallback(state, child, callback, result));
    }
    return child;
  }
  class Enumerator {
    constructor(Constructor, input, abortOnReject, label) {
      this._instanceConstructor = Constructor;
      this.promise = new Constructor(noop, label);
      this._abortOnReject = abortOnReject;
      this._isUsingOwnPromise = Constructor === Promise;
      this._isUsingOwnResolve = Constructor.resolve === resolve$$1;
      this._init(...arguments);
    }
    _init(Constructor, input) {
      var len = input.length || 0;
      this.length = len;
      this._remaining = len;
      this._result = new Array(len);
      this._enumerate(input);
    }
    _enumerate(input) {
      var length = this.length;
      var promise = this.promise;
      for (var i = 0; promise._state === PENDING && i < length; i++) {
        this._eachEntry(input[i], i, true);
      }
      this._checkFullfillment();
    }
    _checkFullfillment() {
      if (this._remaining === 0) {
        var result = this._result;
        fulfill(this.promise, result);
        this._result = null;
      }
    }
    _settleMaybeThenable(entry, i, firstPass) {
      var c = this._instanceConstructor;
      if (this._isUsingOwnResolve) {
        var then$$1,
          error,
          succeeded = true;
        try {
          then$$1 = entry.then;
        } catch (e) {
          succeeded = false;
          error = e;
        }
        if (then$$1 === then && entry._state !== PENDING) {
          entry._onError = null;
          this._settledAt(entry._state, i, entry._result, firstPass);
        } else if (typeof then$$1 !== 'function') {
          this._settledAt(FULFILLED, i, entry, firstPass);
        } else if (this._isUsingOwnPromise) {
          var promise = new c(noop);
          if (succeeded === false) {
            reject(promise, error);
          } else {
            handleMaybeThenable(promise, entry, then$$1);
            this._willSettleAt(promise, i, firstPass);
          }
        } else {
          this._willSettleAt(new c(resolve => resolve(entry)), i, firstPass);
        }
      } else {
        this._willSettleAt(c.resolve(entry), i, firstPass);
      }
    }
    _eachEntry(entry, i, firstPass) {
      if (entry !== null && typeof entry === 'object') {
        this._settleMaybeThenable(entry, i, firstPass);
      } else {
        this._setResultAt(FULFILLED, i, entry, firstPass);
      }
    }
    _settledAt(state, i, value, firstPass) {
      var promise = this.promise;
      if (promise._state === PENDING) {
        if (this._abortOnReject && state === REJECTED) {
          reject(promise, value);
        } else {
          this._setResultAt(state, i, value, firstPass);
          this._checkFullfillment();
        }
      }
    }
    _setResultAt(state, i, value, firstPass) {
      this._remaining--;
      this._result[i] = value;
    }
    _willSettleAt(promise, i, firstPass) {
      subscribe(promise, undefined, value => this._settledAt(FULFILLED, i, value, firstPass), reason => this._settledAt(REJECTED, i, reason, firstPass));
    }
  }
  function setSettledResult(state, i, value) {
    this._remaining--;
    if (state === FULFILLED) {
      this._result[i] = {
        state: 'fulfilled',
        value: value
      };
    } else {
      this._result[i] = {
        state: 'rejected',
        reason: value
      };
    }
  }

  /**
    `Promise.all` accepts an array of promises, and returns a new promise which
    is fulfilled with an array of fulfillment values for the passed promises, or
    rejected with the reason of the first passed promise to be rejected. It casts all
    elements of the passed iterable to promises as it runs this algorithm.
  
    Example:
  
    ```javascript
    import Promise, { resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = resolve(2);
    let promise3 = resolve(3);
    let promises = [ promise1, promise2, promise3 ];
  
    Promise.all(promises).then(function(array){
      // The array here would be [ 1, 2, 3 ];
    });
    ```
  
    If any of the `promises` given to `RSVP.all` are rejected, the first promise
    that is rejected will be given as an argument to the returned promises's
    rejection handler. For example:
  
    Example:
  
    ```javascript
    import Promise, { resolve, reject } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = reject(new Error("2"));
    let promise3 = reject(new Error("3"));
    let promises = [ promise1, promise2, promise3 ];
  
    Promise.all(promises).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(error) {
      // error.message === "2"
    });
    ```
  
    @method all
    @for Promise
    @param {Array} entries array of promises
    @param {String} [label] optional string for labeling the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled when all `promises` have been
    fulfilled, or rejected if any of them become rejected.
    @static
  */
  function all(entries, label) {
    if (!Array.isArray(entries)) {
      return this.reject(new TypeError("Promise.all must be called with an array"), label);
    }
    return new Enumerator(this, entries, true /* abort on reject */, label).promise;
  }

  /**
    `Promise.race` returns a new promise which is settled in the same way as the
    first passed promise to settle.
  
    Example:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise1 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });
  
    let promise2 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 2');
      }, 100);
    });
  
    Promise.race([promise1, promise2]).then(function(result){
      // result === 'promise 2' because it was resolved before promise1
      // was resolved.
    });
    ```
  
    `Promise.race` is deterministic in that only the state of the first
    settled promise matters. For example, even if other promises given to the
    `promises` array argument are resolved, but the first settled promise has
    become rejected before the other promises became fulfilled, the returned
    promise will become rejected:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise1 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });
  
    let promise2 = new Promise(function(resolve, reject){
      setTimeout(function(){
        reject(new Error('promise 2'));
      }, 100);
    });
  
    Promise.race([promise1, promise2]).then(function(result){
      // Code here never runs
    }, function(reason){
      // reason.message === 'promise 2' because promise 2 became rejected before
      // promise 1 became fulfilled
    });
    ```
  
    An example real-world use case is implementing timeouts:
  
    ```javascript
    import Promise from 'rsvp';
  
    Promise.race([ajax('foo.json'), timeout(5000)])
    ```
  
    @method race
    @for Promise
    @static
    @param {Array} entries array of promises to observe
    @param {String} [label] optional string for describing the promise returned.
    Useful for tooling.
    @return {Promise} a promise which settles in the same way as the first passed
    promise to settle.
  */
  function race(entries, label) {
    /*jshint validthis:true */
    var Constructor = this;
    var promise = new Constructor(noop, label);
    if (!Array.isArray(entries)) {
      reject(promise, new TypeError('Promise.race must be called with an array'));
      return promise;
    }
    for (var i = 0; promise._state === PENDING && i < entries.length; i++) {
      subscribe(Constructor.resolve(entries[i]), undefined, value => resolve$1(promise, value), reason => reject(promise, reason));
    }
    return promise;
  }

  /**
    `Promise.reject` returns a promise rejected with the passed `reason`.
    It is shorthand for the following:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise = new Promise(function(resolve, reject){
      reject(new Error('WHOOPS'));
    });
  
    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```
  
    Instead of writing the above, your code now simply becomes the following:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise = Promise.reject(new Error('WHOOPS'));
  
    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```
  
    @method reject
    @for Promise
    @static
    @param {*} reason value that the returned promise will be rejected with.
    @param {String} [label] optional string for identifying the returned promise.
    Useful for tooling.
    @return {Promise} a promise rejected with the given `reason`.
  */
  function reject$1(reason, label) {
    /*jshint validthis:true */
    var Constructor = this;
    var promise = new Constructor(noop, label);
    reject(promise, reason);
    return promise;
  }
  var guidKey = 'rsvp_' + Date.now() + '-';
  var counter = 0;
  function needsResolver() {
    throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
  }
  function needsNew() {
    throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
  }

  /**
    Promise objects represent the eventual result of an asynchronous operation. The
    primary way of interacting with a promise is through its `then` method, which
    registers callbacks to receive either a promise’s eventual value or the reason
    why the promise cannot be fulfilled.
  
    Terminology
    -----------
  
    - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
    - `thenable` is an object or function that defines a `then` method.
    - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
    - `exception` is a value that is thrown using the throw statement.
    - `reason` is a value that indicates why a promise was rejected.
    - `settled` the final resting state of a promise, fulfilled or rejected.
  
    A promise can be in one of three states: pending, fulfilled, or rejected.
  
    Promises that are fulfilled have a fulfillment value and are in the fulfilled
    state.  Promises that are rejected have a rejection reason and are in the
    rejected state.  A fulfillment value is never a thenable.
  
    Promises can also be said to *resolve* a value.  If this value is also a
    promise, then the original promise's settled state will match the value's
    settled state.  So a promise that *resolves* a promise that rejects will
    itself reject, and a promise that *resolves* a promise that fulfills will
    itself fulfill.
  
  
    Basic Usage:
    ------------
  
    ```js
    let promise = new Promise(function(resolve, reject) {
      // on success
      resolve(value);
  
      // on failure
      reject(reason);
    });
  
    promise.then(function(value) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```
  
    Advanced Usage:
    ---------------
  
    Promises shine when abstracting away asynchronous interactions such as
    `XMLHttpRequest`s.
  
    ```js
    function getJSON(url) {
      return new Promise(function(resolve, reject){
        let xhr = new XMLHttpRequest();
  
        xhr.open('GET', url);
        xhr.onreadystatechange = handler;
        xhr.responseType = 'json';
        xhr.setRequestHeader('Accept', 'application/json');
        xhr.send();
  
        function handler() {
          if (this.readyState === this.DONE) {
            if (this.status === 200) {
              resolve(this.response);
            } else {
              reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
            }
          }
        };
      });
    }
  
    getJSON('/posts.json').then(function(json) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```
  
    Unlike callbacks, promises are great composable primitives.
  
    ```js
    Promise.all([
      getJSON('/posts'),
      getJSON('/comments')
    ]).then(function(values){
      values[0] // => postsJSON
      values[1] // => commentsJSON
  
      return values;
    });
    ```
  
    @class Promise
    @public
    @param {function} resolver
    @param {String} [label] optional string for labeling the promise.
    Useful for tooling.
    @constructor
  */
  class Promise {
    constructor(resolver, label) {
      this._id = counter++;
      this._label = label;
      this._state = undefined;
      this._result = undefined;
      this._subscribers = [];
      config.instrument && instrument('created', this);
      if (noop !== resolver) {
        typeof resolver !== 'function' && needsResolver();
        this instanceof Promise ? initializePromise(this, resolver) : needsNew();
      }
    }
    _onError(reason) {
      config.after(() => {
        if (this._onError) {
          config.trigger('error', reason, this._label);
        }
      });
    }

    /**
      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
      as the catch block of a try/catch statement.
    
      ```js
      function findAuthor(){
        throw new Error('couldn\'t find that author');
      }
    
      // synchronous
      try {
        findAuthor();
      } catch(reason) {
        // something went wrong
      }
    
      // async with promises
      findAuthor().catch(function(reason){
        // something went wrong
      });
      ```
    
      @method catch
      @param {Function} onRejection
      @param {String} [label] optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
    */
    catch(onRejection, label) {
      return this.then(undefined, onRejection, label);
    }

    /**
      `finally` will be invoked regardless of the promise's fate just as native
      try/catch/finally behaves
    
      Synchronous example:
    
      ```js
      findAuthor() {
        if (Math.random() > 0.5) {
          throw new Error();
        }
        return new Author();
      }
    
      try {
        return findAuthor(); // succeed or fail
      } catch(error) {
        return findOtherAuthor();
      } finally {
        // always runs
        // doesn't affect the return value
      }
      ```
    
      Asynchronous example:
    
      ```js
      findAuthor().catch(function(reason){
        return findOtherAuthor();
      }).finally(function(){
        // author was either found, or not
      });
      ```
    
      @method finally
      @param {Function} callback
      @param {String} [label] optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
    */
    finally(callback, label) {
      var promise = this;
      var constructor = promise.constructor;
      if (typeof callback === 'function') {
        return promise.then(value => constructor.resolve(callback()).then(() => value), reason => constructor.resolve(callback()).then(() => {
          throw reason;
        }));
      }
      return promise.then(callback, callback);
    }
  }
  _exports.Promise = Promise;
  Promise.cast = resolve$$1; // deprecated
  Promise.all = all;
  Promise.race = race;
  Promise.resolve = resolve$$1;
  Promise.reject = reject$1;
  Promise.prototype._guidKey = guidKey;

  /**
    The primary way of interacting with a promise is through its `then` method,
    which registers callbacks to receive either a promise's eventual value or the
    reason why the promise cannot be fulfilled.
  
    ```js
    findUser().then(function(user){
      // user is available
    }, function(reason){
      // user is unavailable, and you are given the reason why
    });
    ```
  
    Chaining
    --------
  
    The return value of `then` is itself a promise.  This second, 'downstream'
    promise is resolved with the return value of the first promise's fulfillment
    or rejection handler, or rejected if the handler throws an exception.
  
    ```js
    findUser().then(function (user) {
      return user.name;
    }, function (reason) {
      return 'default name';
    }).then(function (userName) {
      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
      // will be `'default name'`
    });
  
    findUser().then(function (user) {
      throw new Error('Found user, but still unhappy');
    }, function (reason) {
      throw new Error('`findUser` rejected and we\'re unhappy');
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
      // If `findUser` rejected, `reason` will be '`findUser` rejected and we\'re unhappy'.
    });
    ```
    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
  
    ```js
    findUser().then(function (user) {
      throw new PedagogicalException('Upstream error');
    }).then(function (value) {
      // never reached
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // The `PedgagocialException` is propagated all the way down to here
    });
    ```
  
    Assimilation
    ------------
  
    Sometimes the value you want to propagate to a downstream promise can only be
    retrieved asynchronously. This can be achieved by returning a promise in the
    fulfillment or rejection handler. The downstream promise will then be pending
    until the returned promise is settled. This is called *assimilation*.
  
    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // The user's comments are now available
    });
    ```
  
    If the assimliated promise rejects, then the downstream promise will also reject.
  
    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // If `findCommentsByAuthor` fulfills, we'll have the value here
    }, function (reason) {
      // If `findCommentsByAuthor` rejects, we'll have the reason here
    });
    ```
  
    Simple Example
    --------------
  
    Synchronous Example
  
    ```javascript
    let result;
  
    try {
      result = findResult();
      // success
    } catch(reason) {
      // failure
    }
    ```
  
    Errback Example
  
    ```js
    findResult(function(result, err){
      if (err) {
        // failure
      } else {
        // success
      }
    });
    ```
  
    Promise Example;
  
    ```javascript
    findResult().then(function(result){
      // success
    }, function(reason){
      // failure
    });
    ```
  
    Advanced Example
    --------------
  
    Synchronous Example
  
    ```javascript
    let author, books;
  
    try {
      author = findAuthor();
      books  = findBooksByAuthor(author);
      // success
    } catch(reason) {
      // failure
    }
    ```
  
    Errback Example
  
    ```js
  
    function foundBooks(books) {
  
    }
  
    function failure(reason) {
  
    }
  
    findAuthor(function(author, err){
      if (err) {
        failure(err);
        // failure
      } else {
        try {
          findBoooksByAuthor(author, function(books, err) {
            if (err) {
              failure(err);
            } else {
              try {
                foundBooks(books);
              } catch(reason) {
                failure(reason);
              }
            }
          });
        } catch(error) {
          failure(err);
        }
        // success
      }
    });
    ```
  
    Promise Example;
  
    ```javascript
    findAuthor().
      then(findBooksByAuthor).
      then(function(books){
        // found books
    }).catch(function(reason){
      // something went wrong
    });
    ```
  
    @method then
    @param {Function} onFulfillment
    @param {Function} onRejection
    @param {String} [label] optional string for labeling the promise.
    Useful for tooling.
    @return {Promise}
  */
  Promise.prototype.then = then;
  function makeObject(_, argumentNames) {
    var obj = {};
    var length = _.length;
    var args = new Array(length);
    for (var x = 0; x < length; x++) {
      args[x] = _[x];
    }
    for (var i = 0; i < argumentNames.length; i++) {
      var name = argumentNames[i];
      obj[name] = args[i + 1];
    }
    return obj;
  }
  function arrayResult(_) {
    var length = _.length;
    var args = new Array(length - 1);
    for (var i = 1; i < length; i++) {
      args[i - 1] = _[i];
    }
    return args;
  }
  function wrapThenable(then, promise) {
    return {
      then(onFulFillment, onRejection) {
        return then.call(promise, onFulFillment, onRejection);
      }
    };
  }

  /**
    `denodeify` takes a 'node-style' function and returns a function that
    will return an `Promise`. You can use `denodeify` in Node.js or the
    browser when you'd prefer to use promises over using callbacks. For example,
    `denodeify` transforms the following:
  
    ```javascript
    let fs = require('fs');
  
    fs.readFile('myfile.txt', function(err, data){
      if (err) return handleError(err);
      handleData(data);
    });
    ```
  
    into:
  
    ```javascript
    let fs = require('fs');
    let readFile = denodeify(fs.readFile);
  
    readFile('myfile.txt').then(handleData, handleError);
    ```
  
    If the node function has multiple success parameters, then `denodeify`
    just returns the first one:
  
    ```javascript
    let request = denodeify(require('request'));
  
    request('http://example.com').then(function(res) {
      // ...
    });
    ```
  
    However, if you need all success parameters, setting `denodeify`'s
    second parameter to `true` causes it to return all success parameters
    as an array:
  
    ```javascript
    let request = denodeify(require('request'), true);
  
    request('http://example.com').then(function(result) {
      // result[0] -> res
      // result[1] -> body
    });
    ```
  
    Or if you pass it an array with names it returns the parameters as a hash:
  
    ```javascript
    let request = denodeify(require('request'), ['res', 'body']);
  
    request('http://example.com').then(function(result) {
      // result.res
      // result.body
    });
    ```
  
    Sometimes you need to retain the `this`:
  
    ```javascript
    let app = require('express')();
    let render = denodeify(app.render.bind(app));
    ```
  
    The denodified function inherits from the original function. It works in all
    environments, except IE 10 and below. Consequently all properties of the original
    function are available to you. However, any properties you change on the
    denodeified function won't be changed on the original function. Example:
  
    ```javascript
    let request = denodeify(require('request')),
        cookieJar = request.jar(); // <- Inheritance is used here
  
    request('http://example.com', {jar: cookieJar}).then(function(res) {
      // cookieJar.cookies holds now the cookies returned by example.com
    });
    ```
  
    Using `denodeify` makes it easier to compose asynchronous operations instead
    of using callbacks. For example, instead of:
  
    ```javascript
    let fs = require('fs');
  
    fs.readFile('myfile.txt', function(err, data){
      if (err) { ... } // Handle error
      fs.writeFile('myfile2.txt', data, function(err){
        if (err) { ... } // Handle error
        console.log('done')
      });
    });
    ```
  
    you can chain the operations together using `then` from the returned promise:
  
    ```javascript
    let fs = require('fs');
    let readFile = denodeify(fs.readFile);
    let writeFile = denodeify(fs.writeFile);
  
    readFile('myfile.txt').then(function(data){
      return writeFile('myfile2.txt', data);
    }).then(function(){
      console.log('done')
    }).catch(function(error){
      // Handle error
    });
    ```
  
    @method denodeify
    @public
    @static
    @for rsvp
    @param {Function} nodeFunc a 'node-style' function that takes a callback as
    its last argument. The callback expects an error to be passed as its first
    argument (if an error occurred, otherwise null), and the value from the
    operation as its second argument ('function(err, value){ }').
    @param {Boolean|Array} [options] An optional paramter that if set
    to `true` causes the promise to fulfill with the callback's success arguments
    as an array. This is useful if the node function has multiple success
    paramters. If you set this paramter to an array with names, the promise will
    fulfill with a hash with these names as keys and the success parameters as
    values.
    @return {Function} a function that wraps `nodeFunc` to return a `Promise`
  */
  function denodeify(nodeFunc, options) {
    var fn = function () {
      var l = arguments.length;
      var args = new Array(l + 1);
      var promiseInput = false;
      for (var i = 0; i < l; ++i) {
        var arg = arguments[i];

        // TODO: this code really needs to be cleaned up
        if (!promiseInput) {
          if (arg !== null && typeof arg === 'object') {
            if (arg.constructor === Promise) {
              promiseInput = true;
            } else {
              try {
                promiseInput = arg.then;
              } catch (error) {
                var p = new Promise(noop);
                reject(p, error);
                return p;
              }
            }
          } else {
            promiseInput = false;
          }
          if (promiseInput && promiseInput !== true) {
            arg = wrapThenable(promiseInput, arg);
          }
        }
        args[i] = arg;
      }
      var promise = new Promise(noop);
      args[l] = function (err, val) {
        if (err) {
          reject(promise, err);
        } else if (options === undefined) {
          resolve$1(promise, val);
        } else if (options === true) {
          resolve$1(promise, arrayResult(arguments));
        } else if (Array.isArray(options)) {
          resolve$1(promise, makeObject(arguments, options));
        } else {
          resolve$1(promise, val);
        }
      };
      if (promiseInput) {
        return handlePromiseInput(promise, args, nodeFunc, this);
      } else {
        return handleValueInput(promise, args, nodeFunc, this);
      }
    };
    fn.__proto__ = nodeFunc;
    return fn;
  }
  function handleValueInput(promise, args, nodeFunc, self) {
    try {
      nodeFunc.apply(self, args);
    } catch (error) {
      reject(promise, error);
    }
    return promise;
  }
  function handlePromiseInput(promise, args, nodeFunc, self) {
    return Promise.all(args).then(args => handleValueInput(promise, args, nodeFunc, self));
  }

  /**
    This is a convenient alias for `Promise.all`.
  
    @method all
    @public
    @static
    @for rsvp
    @param {Array} array Array of promises.
    @param {String} [label] An optional label. This is useful
    for tooling.
  */
  function all$1(array, label) {
    return Promise.all(array, label);
  }

  /**
  @module rsvp
  @public
  **/

  class AllSettled extends Enumerator {
    constructor(Constructor, entries, label) {
      super(Constructor, entries, false /* don't abort on reject */, label);
    }
  }
  AllSettled.prototype._setResultAt = setSettledResult;

  /**
  `RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing
  a fail-fast method, it waits until all the promises have returned and
  shows you all the results. This is useful if you want to handle multiple
  promises' failure states together as a set.
   Returns a promise that is fulfilled when all the given promises have been
  settled. The return promise is fulfilled with an array of the states of
  the promises passed into the `promises` array argument.
   Each state object will either indicate fulfillment or rejection, and
  provide the corresponding value or reason. The states will take one of
  the following formats:
   ```javascript
  { state: 'fulfilled', value: value }
    or
  { state: 'rejected', reason: reason }
  ```
   Example:
   ```javascript
  let promise1 = RSVP.Promise.resolve(1);
  let promise2 = RSVP.Promise.reject(new Error('2'));
  let promise3 = RSVP.Promise.reject(new Error('3'));
  let promises = [ promise1, promise2, promise3 ];
   RSVP.allSettled(promises).then(function(array){
    // array == [
    //   { state: 'fulfilled', value: 1 },
    //   { state: 'rejected', reason: Error },
    //   { state: 'rejected', reason: Error }
    // ]
    // Note that for the second item, reason.message will be '2', and for the
    // third item, reason.message will be '3'.
  }, function(error) {
    // Not run. (This block would only be called if allSettled had failed,
    // for instance if passed an incorrect argument type.)
  });
  ```
   @method allSettled
  @public
  @static
  @for rsvp
  @param {Array} entries
  @param {String} [label] - optional string that describes the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled with an array of the settled
  states of the constituent promises.
  */

  function allSettled(entries, label) {
    if (!Array.isArray(entries)) {
      return Promise.reject(new TypeError("Promise.allSettled must be called with an array"), label);
    }
    return new AllSettled(Promise, entries, label).promise;
  }

  /**
    This is a convenient alias for `Promise.race`.
  
    @method race
    @public
    @static
    @for rsvp
    @param {Array} array Array of promises.
    @param {String} [label] An optional label. This is useful
    for tooling.
   */
  function race$1(array, label) {
    return Promise.race(array, label);
  }
  class PromiseHash extends Enumerator {
    constructor(Constructor, object, abortOnReject = true, label) {
      super(Constructor, object, abortOnReject, label);
    }
    _init(Constructor, object) {
      this._result = {};
      this._enumerate(object);
    }
    _enumerate(input) {
      var keys = Object.keys(input);
      var length = keys.length;
      var promise = this.promise;
      this._remaining = length;
      var key, val;
      for (var i = 0; promise._state === PENDING && i < length; i++) {
        key = keys[i];
        val = input[key];
        this._eachEntry(val, key, true);
      }
      this._checkFullfillment();
    }
  }

  /**
    `hash` is similar to `all`, but takes an object instead of an array
    for its `promises` argument.
  
    Returns a promise that is fulfilled when all the given promises have been
    fulfilled, or rejected if any of them become rejected. The returned promise
    is fulfilled with a hash that has the same key names as the `promises` object
    argument. If any of the values in the object are not promises, they will
    simply be copied over to the fulfilled object.
  
    Example:
  
    ```javascript
    let promises = {
      myPromise: resolve(1),
      yourPromise: resolve(2),
      theirPromise: resolve(3),
      notAPromise: 4
    };
  
    hash(promises).then(function(hash){
      // hash here is an object that looks like:
      // {
      //   myPromise: 1,
      //   yourPromise: 2,
      //   theirPromise: 3,
      //   notAPromise: 4
      // }
    });
    ```
  
    If any of the `promises` given to `hash` are rejected, the first promise
    that is rejected will be given as the reason to the rejection handler.
  
    Example:
  
    ```javascript
    let promises = {
      myPromise: resolve(1),
      rejectedPromise: reject(new Error('rejectedPromise')),
      anotherRejectedPromise: reject(new Error('anotherRejectedPromise')),
    };
  
    hash(promises).then(function(hash){
      // Code here never runs because there are rejected promises!
    }, function(reason) {
      // reason.message === 'rejectedPromise'
    });
    ```
  
    An important note: `hash` is intended for plain JavaScript objects that
    are just a set of keys and values. `hash` will NOT preserve prototype
    chains.
  
    Example:
  
    ```javascript
    import { hash, resolve } from 'rsvp';
    function MyConstructor(){
      this.example = resolve('Example');
    }
  
    MyConstructor.prototype = {
      protoProperty: resolve('Proto Property')
    };
  
    let myObject = new MyConstructor();
  
    hash(myObject).then(function(hash){
      // protoProperty will not be present, instead you will just have an
      // object that looks like:
      // {
      //   example: 'Example'
      // }
      //
      // hash.hasOwnProperty('protoProperty'); // false
      // 'undefined' === typeof hash.protoProperty
    });
    ```
  
    @method hash
    @public
    @static
    @for rsvp
    @param {Object} object
    @param {String} [label] optional string that describes the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled when all properties of `promises`
    have been fulfilled, or rejected if any of them become rejected.
  */
  function hash(object, label) {
    return Promise.resolve(object, label).then(function (object) {
      if (object === null || typeof object !== 'object') {
        throw new TypeError("Promise.hash must be called with an object");
      }
      return new PromiseHash(Promise, object, label).promise;
    });
  }
  class HashSettled extends PromiseHash {
    constructor(Constructor, object, label) {
      super(Constructor, object, false, label);
    }
  }
  HashSettled.prototype._setResultAt = setSettledResult;

  /**
    `hashSettled` is similar to `allSettled`, but takes an object
    instead of an array for its `promises` argument.
  
    Unlike `all` or `hash`, which implement a fail-fast method,
    but like `allSettled`, `hashSettled` waits until all the
    constituent promises have returned and then shows you all the results
    with their states and values/reasons. This is useful if you want to
    handle multiple promises' failure states together as a set.
  
    Returns a promise that is fulfilled when all the given promises have been
    settled, or rejected if the passed parameters are invalid.
  
    The returned promise is fulfilled with a hash that has the same key names as
    the `promises` object argument. If any of the values in the object are not
    promises, they will be copied over to the fulfilled object and marked with state
    'fulfilled'.
  
    Example:
  
    ```javascript
    import { hashSettled, resolve } from 'rsvp';
  
    let promises = {
      myPromise: resolve(1),
      yourPromise: resolve(2),
      theirPromise: resolve(3),
      notAPromise: 4
    };
  
    hashSettled(promises).then(function(hash){
      // hash here is an object that looks like:
      // {
      //   myPromise: { state: 'fulfilled', value: 1 },
      //   yourPromise: { state: 'fulfilled', value: 2 },
      //   theirPromise: { state: 'fulfilled', value: 3 },
      //   notAPromise: { state: 'fulfilled', value: 4 }
      // }
    });
    ```
  
    If any of the `promises` given to `hash` are rejected, the state will
    be set to 'rejected' and the reason for rejection provided.
  
    Example:
  
    ```javascript
    import { hashSettled, reject, resolve } from 'rsvp';
  
    let promises = {
      myPromise: resolve(1),
      rejectedPromise: reject(new Error('rejection')),
      anotherRejectedPromise: reject(new Error('more rejection')),
    };
  
    hashSettled(promises).then(function(hash){
      // hash here is an object that looks like:
      // {
      //   myPromise:              { state: 'fulfilled', value: 1 },
      //   rejectedPromise:        { state: 'rejected', reason: Error },
      //   anotherRejectedPromise: { state: 'rejected', reason: Error },
      // }
      // Note that for rejectedPromise, reason.message == 'rejection',
      // and for anotherRejectedPromise, reason.message == 'more rejection'.
    });
    ```
  
    An important note: `hashSettled` is intended for plain JavaScript objects that
    are just a set of keys and values. `hashSettled` will NOT preserve prototype
    chains.
  
    Example:
  
    ```javascript
    import Promise, { hashSettled, resolve } from 'rsvp';
  
    function MyConstructor(){
      this.example = resolve('Example');
    }
  
    MyConstructor.prototype = {
      protoProperty: Promise.resolve('Proto Property')
    };
  
    let myObject = new MyConstructor();
  
    hashSettled(myObject).then(function(hash){
      // protoProperty will not be present, instead you will just have an
      // object that looks like:
      // {
      //   example: { state: 'fulfilled', value: 'Example' }
      // }
      //
      // hash.hasOwnProperty('protoProperty'); // false
      // 'undefined' === typeof hash.protoProperty
    });
    ```
  
    @method hashSettled
    @public
    @for rsvp
    @param {Object} object
    @param {String} [label] optional string that describes the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled when when all properties of `promises`
    have been settled.
    @static
  */

  function hashSettled(object, label) {
    return Promise.resolve(object, label).then(function (object) {
      if (object === null || typeof object !== 'object') {
        throw new TypeError("hashSettled must be called with an object");
      }
      return new HashSettled(Promise, object, false, label).promise;
    });
  }

  /**
    `rethrow` will rethrow an error on the next turn of the JavaScript event
    loop in order to aid debugging.
  
    Promises A+ specifies that any exceptions that occur with a promise must be
    caught by the promises implementation and bubbled to the last handler. For
    this reason, it is recommended that you always specify a second rejection
    handler function to `then`. However, `rethrow` will throw the exception
    outside of the promise, so it bubbles up to your console if in the browser,
    or domain/cause uncaught exception in Node. `rethrow` will also throw the
    error again so the error can be handled by the promise per the spec.
  
    ```javascript
    import { rethrow } from 'rsvp';
  
    function throws(){
      throw new Error('Whoops!');
    }
  
    let promise = new Promise(function(resolve, reject){
      throws();
    });
  
    promise.catch(rethrow).then(function(){
      // Code here doesn't run because the promise became rejected due to an
      // error!
    }, function (err){
      // handle the error here
    });
    ```
  
    The 'Whoops' error will be thrown on the next turn of the event loop
    and you can watch for it in your console. You can also handle it using a
    rejection handler given to `.then` or `.catch` on the returned promise.
  
    @method rethrow
    @public
    @static
    @for rsvp
    @param {Error} reason reason the promise became rejected.
    @throws Error
    @static
  */
  function rethrow(reason) {
    setTimeout(() => {
      throw reason;
    });
    throw reason;
  }

  /**
    `defer` returns an object similar to jQuery's `$.Deferred`.
    `defer` should be used when porting over code reliant on `$.Deferred`'s
    interface. New code should use the `Promise` constructor instead.
  
    The object returned from `defer` is a plain object with three properties:
  
    * promise - an `Promise`.
    * reject - a function that causes the `promise` property on this object to
      become rejected
    * resolve - a function that causes the `promise` property on this object to
      become fulfilled.
  
    Example:
  
     ```javascript
     let deferred = defer();
  
     deferred.resolve("Success!");
  
     deferred.promise.then(function(value){
       // value here is "Success!"
     });
     ```
  
    @method defer
    @public
    @static
    @for rsvp
    @param {String} [label] optional string for labeling the promise.
    Useful for tooling.
    @return {Object}
   */

  function defer(label) {
    var deferred = {
      resolve: undefined,
      reject: undefined
    };
    deferred.promise = new Promise((resolve, reject) => {
      deferred.resolve = resolve;
      deferred.reject = reject;
    }, label);
    return deferred;
  }
  class MapEnumerator extends Enumerator {
    constructor(Constructor, entries, mapFn, label) {
      super(Constructor, entries, true, label, mapFn);
    }
    _init(Constructor, input, bool, label, mapFn) {
      var len = input.length || 0;
      this.length = len;
      this._remaining = len;
      this._result = new Array(len);
      this._mapFn = mapFn;
      this._enumerate(input);
    }
    _setResultAt(state, i, value, firstPass) {
      if (firstPass) {
        try {
          this._eachEntry(this._mapFn(value, i), i, false);
        } catch (error) {
          this._settledAt(REJECTED, i, error, false);
        }
      } else {
        this._remaining--;
        this._result[i] = value;
      }
    }
  }

  /**
   `map` is similar to JavaScript's native `map` method. `mapFn` is eagerly called
    meaning that as soon as any promise resolves its value will be passed to `mapFn`.
    `map` returns a promise that will become fulfilled with the result of running
    `mapFn` on the values the promises become fulfilled with.
  
    For example:
  
    ```javascript
    import { map, resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = resolve(2);
    let promise3 = resolve(3);
    let promises = [ promise1, promise2, promise3 ];
  
    let mapFn = function(item){
      return item + 1;
    };
  
    map(promises, mapFn).then(function(result){
      // result is [ 2, 3, 4 ]
    });
    ```
  
    If any of the `promises` given to `map` are rejected, the first promise
    that is rejected will be given as an argument to the returned promise's
    rejection handler. For example:
  
    ```javascript
    import { map, reject, resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = reject(new Error('2'));
    let promise3 = reject(new Error('3'));
    let promises = [ promise1, promise2, promise3 ];
  
    let mapFn = function(item){
      return item + 1;
    };
  
    map(promises, mapFn).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(reason) {
      // reason.message === '2'
    });
    ```
  
    `map` will also wait if a promise is returned from `mapFn`. For example,
    say you want to get all comments from a set of blog posts, but you need
    the blog posts first because they contain a url to those comments.
  
    ```javscript
    import { map } from 'rsvp';
  
    let mapFn = function(blogPost){
      // getComments does some ajax and returns an Promise that is fulfilled
      // with some comments data
      return getComments(blogPost.comments_url);
    };
  
    // getBlogPosts does some ajax and returns an Promise that is fulfilled
    // with some blog post data
    map(getBlogPosts(), mapFn).then(function(comments){
      // comments is the result of asking the server for the comments
      // of all blog posts returned from getBlogPosts()
    });
    ```
  
    @method map
    @public
    @static
    @for rsvp
    @param {Array} promises
    @param {Function} mapFn function to be called on each fulfilled promise.
    @param {String} [label] optional string for labeling the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled with the result of calling
    `mapFn` on each fulfilled promise or value when they become fulfilled.
     The promise will be rejected if any of the given `promises` become rejected.
  */
  function map(promises, mapFn, label) {
    if (typeof mapFn !== 'function') {
      return Promise.reject(new TypeError("map expects a function as a second argument"), label);
    }
    return Promise.resolve(promises, label).then(function (promises) {
      if (!Array.isArray(promises)) {
        throw new TypeError("map must be called with an array");
      }
      return new MapEnumerator(Promise, promises, mapFn, label).promise;
    });
  }

  /**
    This is a convenient alias for `Promise.resolve`.
  
    @method resolve
    @public
    @static
    @for rsvp
    @param {*} value value that the returned promise will be resolved with
    @param {String} [label] optional string for identifying the returned promise.
    Useful for tooling.
    @return {Promise} a promise that will become fulfilled with the given
    `value`
  */
  function resolve$2(value, label) {
    return Promise.resolve(value, label);
  }

  /**
    This is a convenient alias for `Promise.reject`.
  
    @method reject
    @public
    @static
    @for rsvp
    @param {*} reason value that the returned promise will be rejected with.
    @param {String} [label] optional string for identifying the returned promise.
    Useful for tooling.
    @return {Promise} a promise rejected with the given `reason`.
  */
  function reject$2(reason, label) {
    return Promise.reject(reason, label);
  }
  var EMPTY_OBJECT = {};
  class FilterEnumerator extends MapEnumerator {
    _checkFullfillment() {
      if (this._remaining === 0 && this._result !== null) {
        var result = this._result.filter(val => val !== EMPTY_OBJECT);
        fulfill(this.promise, result);
        this._result = null;
      }
    }
    _setResultAt(state, i, value, firstPass) {
      if (firstPass) {
        this._result[i] = value;
        var val,
          succeeded = true;
        try {
          val = this._mapFn(value, i);
        } catch (error) {
          succeeded = false;
          this._settledAt(REJECTED, i, error, false);
        }
        if (succeeded) {
          this._eachEntry(val, i, false);
        }
      } else {
        this._remaining--;
        if (!value) {
          this._result[i] = EMPTY_OBJECT;
        }
      }
    }
  }

  /**
   `filter` is similar to JavaScript's native `filter` method.
   `filterFn` is eagerly called meaning that as soon as any promise
    resolves its value will be passed to `filterFn`. `filter` returns
    a promise that will become fulfilled with the result of running
    `filterFn` on the values the promises become fulfilled with.
  
    For example:
  
    ```javascript
    import { filter, resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = resolve(2);
    let promise3 = resolve(3);
  
    let promises = [promise1, promise2, promise3];
  
    let filterFn = function(item){
      return item > 1;
    };
  
    filter(promises, filterFn).then(function(result){
      // result is [ 2, 3 ]
    });
    ```
  
    If any of the `promises` given to `filter` are rejected, the first promise
    that is rejected will be given as an argument to the returned promise's
    rejection handler. For example:
  
    ```javascript
    import { filter, reject, resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = reject(new Error('2'));
    let promise3 = reject(new Error('3'));
    let promises = [ promise1, promise2, promise3 ];
  
    let filterFn = function(item){
      return item > 1;
    };
  
    filter(promises, filterFn).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(reason) {
      // reason.message === '2'
    });
    ```
  
    `filter` will also wait for any promises returned from `filterFn`.
    For instance, you may want to fetch a list of users then return a subset
    of those users based on some asynchronous operation:
  
    ```javascript
    import { filter, resolve } from 'rsvp';
  
    let alice = { name: 'alice' };
    let bob   = { name: 'bob' };
    let users = [ alice, bob ];
  
    let promises = users.map(function(user){
      return resolve(user);
    });
  
    let filterFn = function(user){
      // Here, Alice has permissions to create a blog post, but Bob does not.
      return getPrivilegesForUser(user).then(function(privs){
        return privs.can_create_blog_post === true;
      });
    };
    filter(promises, filterFn).then(function(users){
      // true, because the server told us only Alice can create a blog post.
      users.length === 1;
      // false, because Alice is the only user present in `users`
      users[0] === bob;
    });
    ```
  
    @method filter
    @public
    @static
    @for rsvp
    @param {Array} promises
    @param {Function} filterFn - function to be called on each resolved value to
    filter the final results.
    @param {String} [label] optional string describing the promise. Useful for
    tooling.
    @return {Promise}
  */

  function filter(promises, filterFn, label) {
    if (typeof filterFn !== 'function') {
      return Promise.reject(new TypeError("filter expects function as a second argument"), label);
    }
    return Promise.resolve(promises, label).then(function (promises) {
      if (!Array.isArray(promises)) {
        throw new TypeError("filter must be called with an array");
      }
      return new FilterEnumerator(Promise, promises, filterFn, label).promise;
    });
  }
  var len = 0;
  var vertxNext;
  function asap(callback, arg) {
    queue$1[len] = callback;
    queue$1[len + 1] = arg;
    len += 2;
    if (len === 2) {
      // If len is 1, that means that we need to schedule an async flush.
      // If additional callbacks are queued before the queue is flushed, they
      // will be processed by this flush that we are scheduling.
      scheduleFlush$1();
    }
  }
  var browserWindow = typeof window !== 'undefined' ? window : undefined;
  var browserGlobal = browserWindow || {};
  var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
  var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

  // test for web worker but not in IE10
  var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

  // node
  function useNextTick() {
    var nextTick = process.nextTick;
    // node version 0.10.x displays a deprecation warning when nextTick is used recursively
    // setImmediate should be used instead instead
    var version = process.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);
    if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {
      nextTick = setImmediate;
    }
    return () => nextTick(flush);
  }

  // vertx
  function useVertxTimer() {
    if (typeof vertxNext !== 'undefined') {
      return function () {
        vertxNext(flush);
      };
    }
    return useSetTimeout();
  }
  function useMutationObserver() {
    var iterations = 0;
    var observer = new BrowserMutationObserver(flush);
    var node = document.createTextNode('');
    observer.observe(node, {
      characterData: true
    });
    return () => node.data = iterations = ++iterations % 2;
  }

  // web worker
  function useMessageChannel() {
    var channel = new MessageChannel();
    channel.port1.onmessage = flush;
    return () => channel.port2.postMessage(0);
  }
  function useSetTimeout() {
    return () => setTimeout(flush, 1);
  }
  var queue$1 = new Array(1000);
  function flush() {
    for (var i = 0; i < len; i += 2) {
      var callback = queue$1[i];
      var arg = queue$1[i + 1];
      callback(arg);
      queue$1[i] = undefined;
      queue$1[i + 1] = undefined;
    }
    len = 0;
  }
  function attemptVertex() {
    try {
      var vertx = Function('return this')().require('vertx');
      vertxNext = vertx.runOnLoop || vertx.runOnContext;
      return useVertxTimer();
    } catch (e) {
      return useSetTimeout();
    }
  }
  var scheduleFlush$1;
  // Decide what async method to use to triggering processing of queued callbacks:
  if (isNode) {
    scheduleFlush$1 = useNextTick();
  } else if (BrowserMutationObserver) {
    scheduleFlush$1 = useMutationObserver();
  } else if (isWorker) {
    scheduleFlush$1 = useMessageChannel();
  } else if (browserWindow === undefined && typeof require === 'function') {
    scheduleFlush$1 = attemptVertex();
  } else {
    scheduleFlush$1 = useSetTimeout();
  }

  // defaults
  config.async = asap;
  config.after = cb => setTimeout(cb, 0);
  var cast = _exports.cast = resolve$2;
  var async = (callback, arg) => config.async(callback, arg);
  _exports.async = async;
  function on() {
    config.on(...arguments);
  }
  function off() {
    config.off(...arguments);
  }

  // Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`
  if (typeof window !== 'undefined' && typeof window['__PROMISE_INSTRUMENTATION__'] === 'object') {
    var callbacks = window['__PROMISE_INSTRUMENTATION__'];
    configure('instrument', true);
    for (var eventName in callbacks) {
      if (callbacks.hasOwnProperty(eventName)) {
        on(eventName, callbacks[eventName]);
      }
    }
  }

  // the default export here is for backwards compat:
  //   https://github.com/tildeio/rsvp.js/issues/434
  var rsvp = {
    asap,
    cast,
    Promise,
    EventTarget,
    all: all$1,
    allSettled,
    race: race$1,
    hash,
    hashSettled,
    rethrow,
    defer,
    denodeify,
    configure,
    on,
    off,
    resolve: resolve$2,
    reject: reject$2,
    map,
    async,
    filter
  };
  var _default = _exports.default = rsvp;
});
require('@ember/-internals/bootstrap')
}());

;if (typeof FastBoot === 'undefined') {
      var preferNative = false;
      (function (originalGlobal) {
  define('fetch', ['exports', 'ember', 'rsvp'], function (exports, Ember__module, RSVP__module) {
    'use strict';

    var Ember = 'default' in Ember__module ? Ember__module['default'] : Ember__module;
    var RSVP = 'default' in RSVP__module ? RSVP__module['default'] : RSVP__module;
    var Promise = RSVP.Promise;
    var supportProps = ['FormData', 'FileReader', 'Blob', 'URLSearchParams', 'Symbol', 'ArrayBuffer'];
    var polyfillProps = ['fetch', 'Headers', 'Request', 'Response', 'AbortController'];
    var combinedProps = supportProps;
    if (preferNative) {
      combinedProps = supportProps.concat(polyfillProps);
    }
    combinedProps.forEach(function (prop) {
      if (originalGlobal[prop]) {
        Object.defineProperty(exports, prop, {
          configurable: true,
          get: function () {
            return originalGlobal[prop];
          },
          set: function (v) {
            originalGlobal[prop] = v;
          }
        });
      }
    });

    // shadow github/fetch global object
    // https://github.com/github/fetch/blob/v3.4.0/fetch.js
    var globalThis = exports;
    // shadow mo/abortcontroller-polyfill global object
    // https://github.com/mo/abortcontroller-polyfill/blob/v1.4.0/src/abortcontroller-polyfill.js
    var self = exports;
    (function () {
      'use strict';

      class Emitter {
        constructor() {
          Object.defineProperty(this, 'listeners', {
            value: {},
            writable: true,
            configurable: true
          });
        }
        addEventListener(type, callback, options) {
          if (!(type in this.listeners)) {
            this.listeners[type] = [];
          }
          this.listeners[type].push({
            callback,
            options
          });
        }
        removeEventListener(type, callback) {
          if (!(type in this.listeners)) {
            return;
          }
          const stack = this.listeners[type];
          for (let i = 0, l = stack.length; i < l; i++) {
            if (stack[i].callback === callback) {
              stack.splice(i, 1);
              return;
            }
          }
        }
        dispatchEvent(event) {
          if (!(event.type in this.listeners)) {
            return;
          }
          const stack = this.listeners[event.type];
          const stackToCall = stack.slice();
          for (let i = 0, l = stackToCall.length; i < l; i++) {
            const listener = stackToCall[i];
            try {
              listener.callback.call(this, event);
            } catch (e) {
              Promise.resolve().then(() => {
                throw e;
              });
            }
            if (listener.options && listener.options.once) {
              this.removeEventListener(event.type, listener.callback);
            }
          }
          return !event.defaultPrevented;
        }
      }
      class AbortSignal extends Emitter {
        constructor() {
          super();
          // Some versions of babel does not transpile super() correctly for IE <= 10, if the parent
          // constructor has failed to run, then "this.listeners" will still be undefined and then we call
          // the parent constructor directly instead as a workaround. For general details, see babel bug:
          // https://github.com/babel/babel/issues/3041
          // This hack was added as a fix for the issue described here:
          // https://github.com/Financial-Times/polyfill-library/pull/59#issuecomment-477558042
          if (!this.listeners) {
            Emitter.call(this);
          }

          // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
          // we want Object.keys(new AbortController().signal) to be [] for compat with the native impl
          Object.defineProperty(this, 'aborted', {
            value: false,
            writable: true,
            configurable: true
          });
          Object.defineProperty(this, 'onabort', {
            value: null,
            writable: true,
            configurable: true
          });
          Object.defineProperty(this, 'reason', {
            value: undefined,
            writable: true,
            configurable: true
          });
        }
        toString() {
          return '[object AbortSignal]';
        }
        dispatchEvent(event) {
          if (event.type === 'abort') {
            this.aborted = true;
            if (typeof this.onabort === 'function') {
              this.onabort.call(this, event);
            }
          }
          super.dispatchEvent(event);
        }
      }
      class AbortController {
        constructor() {
          // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
          // we want Object.keys(new AbortController()) to be [] for compat with the native impl
          Object.defineProperty(this, 'signal', {
            value: new AbortSignal(),
            writable: true,
            configurable: true
          });
        }
        abort(reason) {
          let event;
          try {
            event = new Event('abort');
          } catch (e) {
            if (typeof document !== 'undefined') {
              if (!document.createEvent) {
                // For Internet Explorer 8:
                event = document.createEventObject();
                event.type = 'abort';
              } else {
                // For Internet Explorer 11:
                event = document.createEvent('Event');
                event.initEvent('abort', false, false);
              }
            } else {
              // Fallback where document isn't available:
              event = {
                type: 'abort',
                bubbles: false,
                cancelable: false
              };
            }
          }
          let signalReason = reason;
          if (signalReason === undefined) {
            if (typeof document === 'undefined') {
              signalReason = new Error('This operation was aborted');
              signalReason.name = 'AbortError';
            } else {
              try {
                signalReason = new DOMException('signal is aborted without reason');
              } catch (err) {
                // IE 11 does not support calling the DOMException constructor, use a
                // regular error object on it instead.
                signalReason = new Error('This operation was aborted');
                signalReason.name = 'AbortError';
              }
            }
          }
          this.signal.reason = signalReason;
          this.signal.dispatchEvent(event);
        }
        toString() {
          return '[object AbortController]';
        }
      }
      if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
        // These are necessary to make sure that we get correct output for:
        // Object.prototype.toString.call(new AbortController())
        AbortController.prototype[Symbol.toStringTag] = 'AbortController';
        AbortSignal.prototype[Symbol.toStringTag] = 'AbortSignal';
      }
      function polyfillNeeded(self) {
        if (self.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {
          console.log('__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill');
          return true;
        }

        // Note that the "unfetch" minimal fetch polyfill defines fetch() without
        // defining window.Request, and this polyfill need to work on top of unfetch
        // so the below feature detection needs the !self.AbortController part.
        // The Request.prototype check is also needed because Safari versions 11.1.2
        // up to and including 12.1.x has a window.AbortController present but still
        // does NOT correctly implement abortable fetch:
        // https://bugs.webkit.org/show_bug.cgi?id=174980#c2
        return typeof self.Request === 'function' && !self.Request.prototype.hasOwnProperty('signal') || !self.AbortController;
      }
      (function (self) {
        if (!polyfillNeeded(self)) {
          return;
        }
        self.AbortController = AbortController;
        self.AbortSignal = AbortSignal;
      })(typeof self !== 'undefined' ? self : global);
    })();
    var WHATWGFetch = function (exports) {
      'use strict';

      /* eslint-disable no-prototype-builtins */
      var g = typeof globalThis !== 'undefined' && globalThis || typeof self !== 'undefined' && self ||
      // eslint-disable-next-line no-undef
      typeof global !== 'undefined' && global || {};
      var support = {
        searchParams: 'URLSearchParams' in g,
        iterable: 'Symbol' in g && 'iterator' in Symbol,
        blob: 'FileReader' in g && 'Blob' in g && function () {
          try {
            new Blob();
            return true;
          } catch (e) {
            return false;
          }
        }(),
        formData: 'FormData' in g,
        arrayBuffer: 'ArrayBuffer' in g
      };
      function isDataView(obj) {
        return obj && DataView.prototype.isPrototypeOf(obj);
      }
      if (support.arrayBuffer) {
        var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];
        var isArrayBufferView = ArrayBuffer.isView || function (obj) {
          return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
        };
      }
      function normalizeName(name) {
        if (typeof name !== 'string') {
          name = String(name);
        }
        if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
          throw new TypeError('Invalid character in header field name: "' + name + '"');
        }
        return name.toLowerCase();
      }
      function normalizeValue(value) {
        if (typeof value !== 'string') {
          value = String(value);
        }
        return value;
      }

      // Build a destructive iterator for the value list
      function iteratorFor(items) {
        var iterator = {
          next: function () {
            var value = items.shift();
            return {
              done: value === undefined,
              value: value
            };
          }
        };
        if (support.iterable) {
          iterator[Symbol.iterator] = function () {
            return iterator;
          };
        }
        return iterator;
      }
      function Headers(headers) {
        this.map = {};
        if (headers instanceof Headers) {
          headers.forEach(function (value, name) {
            this.append(name, value);
          }, this);
        } else if (Array.isArray(headers)) {
          headers.forEach(function (header) {
            if (header.length != 2) {
              throw new TypeError('Headers constructor: expected name/value pair to be length 2, found' + header.length);
            }
            this.append(header[0], header[1]);
          }, this);
        } else if (headers) {
          Object.getOwnPropertyNames(headers).forEach(function (name) {
            this.append(name, headers[name]);
          }, this);
        }
      }
      Headers.prototype.append = function (name, value) {
        name = normalizeName(name);
        value = normalizeValue(value);
        var oldValue = this.map[name];
        this.map[name] = oldValue ? oldValue + ', ' + value : value;
      };
      Headers.prototype['delete'] = function (name) {
        delete this.map[normalizeName(name)];
      };
      Headers.prototype.get = function (name) {
        name = normalizeName(name);
        return this.has(name) ? this.map[name] : null;
      };
      Headers.prototype.has = function (name) {
        return this.map.hasOwnProperty(normalizeName(name));
      };
      Headers.prototype.set = function (name, value) {
        this.map[normalizeName(name)] = normalizeValue(value);
      };
      Headers.prototype.forEach = function (callback, thisArg) {
        for (var name in this.map) {
          if (this.map.hasOwnProperty(name)) {
            callback.call(thisArg, this.map[name], name, this);
          }
        }
      };
      Headers.prototype.keys = function () {
        var items = [];
        this.forEach(function (value, name) {
          items.push(name);
        });
        return iteratorFor(items);
      };
      Headers.prototype.values = function () {
        var items = [];
        this.forEach(function (value) {
          items.push(value);
        });
        return iteratorFor(items);
      };
      Headers.prototype.entries = function () {
        var items = [];
        this.forEach(function (value, name) {
          items.push([name, value]);
        });
        return iteratorFor(items);
      };
      if (support.iterable) {
        Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
      }
      function consumed(body) {
        if (body._noBody) return;
        if (body.bodyUsed) {
          return Promise.reject(new TypeError('Already read'));
        }
        body.bodyUsed = true;
      }
      function fileReaderReady(reader) {
        return new Promise(function (resolve, reject) {
          reader.onload = function () {
            resolve(reader.result);
          };
          reader.onerror = function () {
            reject(reader.error);
          };
        });
      }
      function readBlobAsArrayBuffer(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        reader.readAsArrayBuffer(blob);
        return promise;
      }
      function readBlobAsText(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
        var encoding = match ? match[1] : 'utf-8';
        reader.readAsText(blob, encoding);
        return promise;
      }
      function readArrayBufferAsText(buf) {
        var view = new Uint8Array(buf);
        var chars = new Array(view.length);
        for (var i = 0; i < view.length; i++) {
          chars[i] = String.fromCharCode(view[i]);
        }
        return chars.join('');
      }
      function bufferClone(buf) {
        if (buf.slice) {
          return buf.slice(0);
        } else {
          var view = new Uint8Array(buf.byteLength);
          view.set(new Uint8Array(buf));
          return view.buffer;
        }
      }
      function Body() {
        this.bodyUsed = false;
        this._initBody = function (body) {
          /*
            fetch-mock wraps the Response object in an ES6 Proxy to
            provide useful test harness features such as flush. However, on
            ES5 browsers without fetch or Proxy support pollyfills must be used;
            the proxy-pollyfill is unable to proxy an attribute unless it exists
            on the object before the Proxy is created. This change ensures
            Response.bodyUsed exists on the instance, while maintaining the
            semantic of setting Request.bodyUsed in the constructor before
            _initBody is called.
          */
          // eslint-disable-next-line no-self-assign
          this.bodyUsed = this.bodyUsed;
          this._bodyInit = body;
          if (!body) {
            this._noBody = true;
            this._bodyText = '';
          } else if (typeof body === 'string') {
            this._bodyText = body;
          } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
            this._bodyBlob = body;
          } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
            this._bodyFormData = body;
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this._bodyText = body.toString();
          } else if (support.arrayBuffer && support.blob && isDataView(body)) {
            this._bodyArrayBuffer = bufferClone(body.buffer);
            // IE 10-11 can't handle a DataView body.
            this._bodyInit = new Blob([this._bodyArrayBuffer]);
          } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
            this._bodyArrayBuffer = bufferClone(body);
          } else {
            this._bodyText = body = Object.prototype.toString.call(body);
          }
          if (!this.headers.get('content-type')) {
            if (typeof body === 'string') {
              this.headers.set('content-type', 'text/plain;charset=UTF-8');
            } else if (this._bodyBlob && this._bodyBlob.type) {
              this.headers.set('content-type', this._bodyBlob.type);
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
            }
          }
        };
        if (support.blob) {
          this.blob = function () {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return Promise.resolve(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(new Blob([this._bodyArrayBuffer]));
            } else if (this._bodyFormData) {
              throw new Error('could not read FormData body as blob');
            } else {
              return Promise.resolve(new Blob([this._bodyText]));
            }
          };
        }
        this.arrayBuffer = function () {
          if (this._bodyArrayBuffer) {
            var isConsumed = consumed(this);
            if (isConsumed) {
              return isConsumed;
            } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
              return Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset, this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength));
            } else {
              return Promise.resolve(this._bodyArrayBuffer);
            }
          } else if (support.blob) {
            return this.blob().then(readBlobAsArrayBuffer);
          } else {
            throw new Error('could not read as ArrayBuffer');
          }
        };
        this.text = function () {
          var rejected = consumed(this);
          if (rejected) {
            return rejected;
          }
          if (this._bodyBlob) {
            return readBlobAsText(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as text');
          } else {
            return Promise.resolve(this._bodyText);
          }
        };
        if (support.formData) {
          this.formData = function () {
            return this.text().then(decode);
          };
        }
        this.json = function () {
          return this.text().then(JSON.parse);
        };
        return this;
      }

      // HTTP methods whose capitalization should be normalized
      var methods = ['CONNECT', 'DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT', 'TRACE'];
      function normalizeMethod(method) {
        var upcased = method.toUpperCase();
        return methods.indexOf(upcased) > -1 ? upcased : method;
      }
      function Request(input, options) {
        if (!(this instanceof Request)) {
          throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
        }
        options = options || {};
        var body = options.body;
        if (input instanceof Request) {
          if (input.bodyUsed) {
            throw new TypeError('Already read');
          }
          this.url = input.url;
          this.credentials = input.credentials;
          if (!options.headers) {
            this.headers = new Headers(input.headers);
          }
          this.method = input.method;
          this.mode = input.mode;
          this.signal = input.signal;
          if (!body && input._bodyInit != null) {
            body = input._bodyInit;
            input.bodyUsed = true;
          }
        } else {
          this.url = String(input);
        }
        this.credentials = options.credentials || this.credentials || 'same-origin';
        if (options.headers || !this.headers) {
          this.headers = new Headers(options.headers);
        }
        this.method = normalizeMethod(options.method || this.method || 'GET');
        this.mode = options.mode || this.mode || null;
        this.signal = options.signal || this.signal || function () {
          if ('AbortController' in g) {
            var ctrl = new AbortController();
            return ctrl.signal;
          }
        }();
        this.referrer = null;
        if ((this.method === 'GET' || this.method === 'HEAD') && body) {
          throw new TypeError('Body not allowed for GET or HEAD requests');
        }
        this._initBody(body);
        if (this.method === 'GET' || this.method === 'HEAD') {
          if (options.cache === 'no-store' || options.cache === 'no-cache') {
            // Search for a '_' parameter in the query string
            var reParamSearch = /([?&])_=[^&]*/;
            if (reParamSearch.test(this.url)) {
              // If it already exists then set the value with the current time
              this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
            } else {
              // Otherwise add a new '_' parameter to the end with the current time
              var reQueryString = /\?/;
              this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
            }
          }
        }
      }
      Request.prototype.clone = function () {
        return new Request(this, {
          body: this._bodyInit
        });
      };
      function decode(body) {
        var form = new FormData();
        body.trim().split('&').forEach(function (bytes) {
          if (bytes) {
            var split = bytes.split('=');
            var name = split.shift().replace(/\+/g, ' ');
            var value = split.join('=').replace(/\+/g, ' ');
            form.append(decodeURIComponent(name), decodeURIComponent(value));
          }
        });
        return form;
      }
      function parseHeaders(rawHeaders) {
        var headers = new Headers();
        // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
        // https://tools.ietf.org/html/rfc7230#section-3.2
        var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
        // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
        // https://github.com/github/fetch/issues/748
        // https://github.com/zloirock/core-js/issues/751
        preProcessedHeaders.split('\r').map(function (header) {
          return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header;
        }).forEach(function (line) {
          var parts = line.split(':');
          var key = parts.shift().trim();
          if (key) {
            var value = parts.join(':').trim();
            try {
              headers.append(key, value);
            } catch (error) {
              console.warn('Response ' + error.message);
            }
          }
        });
        return headers;
      }
      Body.call(Request.prototype);
      function Response(bodyInit, options) {
        if (!(this instanceof Response)) {
          throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
        }
        if (!options) {
          options = {};
        }
        this.type = 'default';
        this.status = options.status === undefined ? 200 : options.status;
        if (this.status < 200 || this.status > 599) {
          throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
        }
        this.ok = this.status >= 200 && this.status < 300;
        this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
        this.headers = new Headers(options.headers);
        this.url = options.url || '';
        this._initBody(bodyInit);
      }
      Body.call(Response.prototype);
      Response.prototype.clone = function () {
        return new Response(this._bodyInit, {
          status: this.status,
          statusText: this.statusText,
          headers: new Headers(this.headers),
          url: this.url
        });
      };
      Response.error = function () {
        var response = new Response(null, {
          status: 200,
          statusText: ''
        });
        response.status = 0;
        response.type = 'error';
        return response;
      };
      var redirectStatuses = [301, 302, 303, 307, 308];
      Response.redirect = function (url, status) {
        if (redirectStatuses.indexOf(status) === -1) {
          throw new RangeError('Invalid status code');
        }
        return new Response(null, {
          status: status,
          headers: {
            location: url
          }
        });
      };
      exports.DOMException = g.DOMException;
      try {
        new exports.DOMException();
      } catch (err) {
        exports.DOMException = function (message, name) {
          this.message = message;
          this.name = name;
          var error = Error(message);
          this.stack = error.stack;
        };
        exports.DOMException.prototype = Object.create(Error.prototype);
        exports.DOMException.prototype.constructor = exports.DOMException;
      }
      function fetch(input, init) {
        return new Promise(function (resolve, reject) {
          var request = new Request(input, init);
          if (request.signal && request.signal.aborted) {
            return reject(new exports.DOMException('Aborted', 'AbortError'));
          }
          var xhr = new XMLHttpRequest();
          function abortXhr() {
            xhr.abort();
          }
          xhr.onload = function () {
            var options = {
              statusText: xhr.statusText,
              headers: parseHeaders(xhr.getAllResponseHeaders() || '')
            };
            // This check if specifically for when a user fetches a file locally from the file system
            // Only if the status is out of a normal range
            if (request.url.startsWith('file://') && (xhr.status < 200 || xhr.status > 599)) {
              options.status = 200;
            } else {
              options.status = xhr.status;
            }
            options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
            var body = 'response' in xhr ? xhr.response : xhr.responseText;
            setTimeout(function () {
              resolve(new Response(body, options));
            }, 0);
          };
          xhr.onerror = function () {
            setTimeout(function () {
              reject(new TypeError('Network request failed'));
            }, 0);
          };
          xhr.ontimeout = function () {
            setTimeout(function () {
              reject(new TypeError('Network request timed out'));
            }, 0);
          };
          xhr.onabort = function () {
            setTimeout(function () {
              reject(new exports.DOMException('Aborted', 'AbortError'));
            }, 0);
          };
          function fixUrl(url) {
            try {
              return url === '' && g.location.href ? g.location.href : url;
            } catch (e) {
              return url;
            }
          }
          xhr.open(request.method, fixUrl(request.url), true);
          if (request.credentials === 'include') {
            xhr.withCredentials = true;
          } else if (request.credentials === 'omit') {
            xhr.withCredentials = false;
          }
          if ('responseType' in xhr) {
            if (support.blob) {
              xhr.responseType = 'blob';
            } else if (support.arrayBuffer) {
              xhr.responseType = 'arraybuffer';
            }
          }
          if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers || g.Headers && init.headers instanceof g.Headers)) {
            var names = [];
            Object.getOwnPropertyNames(init.headers).forEach(function (name) {
              names.push(normalizeName(name));
              xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
            });
            request.headers.forEach(function (value, name) {
              if (names.indexOf(name) === -1) {
                xhr.setRequestHeader(name, value);
              }
            });
          } else {
            request.headers.forEach(function (value, name) {
              xhr.setRequestHeader(name, value);
            });
          }
          if (request.signal) {
            request.signal.addEventListener('abort', abortXhr);
            xhr.onreadystatechange = function () {
              // DONE (success or failure)
              if (xhr.readyState === 4) {
                request.signal.removeEventListener('abort', abortXhr);
              }
            };
          }
          xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
        });
      }
      fetch.polyfill = true;
      if (!g.fetch) {
        g.fetch = fetch;
        g.Headers = Headers;
        g.Request = Request;
        g.Response = Response;
      }
      exports.Headers = Headers;
      exports.Request = Request;
      exports.Response = Response;
      exports.fetch = fetch;
      return exports;
    }({});
    if (!globalThis.fetch) {
      throw new Error('fetch is not defined - maybe your browser targets are not covering everything you need?');
    }
    var pending = 0;
    function decrement(result) {
      pending--;
      return result;
    }
    if (Ember.Test) {
      Ember.Test.registerWaiter(function () {
        return pending === 0;
      });
      exports['default'] = function () {
        pending++;
        return exports.fetch.apply(originalGlobal, arguments).then(function (response) {
          response.clone().blob().then(decrement, decrement);
          return response;
        }, function (reason) {
          decrement(reason);
          throw reason;
        });
      };
    } else {
      exports['default'] = exports.fetch;
    }
    supportProps.forEach(function (prop) {
      delete exports[prop];
    });
  });
})(typeof window !== 'undefined' && window || typeof globalThis !== 'undefined' && globalThis || typeof self !== 'undefined' && self || typeof global !== 'undefined' && global);
    }
;(function(define){
/**
 * lunr - http://lunrjs.com - A bit like Solr, but much smaller and not as bright - 2.3.9
 * Copyright (C) 2020 Oliver Nightingale
 * @license MIT
 */

;(function(){

/**
 * A convenience function for configuring and constructing
 * a new lunr Index.
 *
 * A lunr.Builder instance is created and the pipeline setup
 * with a trimmer, stop word filter and stemmer.
 *
 * This builder object is yielded to the configuration function
 * that is passed as a parameter, allowing the list of fields
 * and other builder parameters to be customised.
 *
 * All documents _must_ be added within the passed config function.
 *
 * @example
 * var idx = lunr(function () {
 *   this.field('title')
 *   this.field('body')
 *   this.ref('id')
 *
 *   documents.forEach(function (doc) {
 *     this.add(doc)
 *   }, this)
 * })
 *
 * @see {@link lunr.Builder}
 * @see {@link lunr.Pipeline}
 * @see {@link lunr.trimmer}
 * @see {@link lunr.stopWordFilter}
 * @see {@link lunr.stemmer}
 * @namespace {function} lunr
 */
var lunr = function (config) {
  var builder = new lunr.Builder

  builder.pipeline.add(
    lunr.trimmer,
    lunr.stopWordFilter,
    lunr.stemmer
  )

  builder.searchPipeline.add(
    lunr.stemmer
  )

  config.call(builder, builder)
  return builder.build()
}

lunr.version = "2.3.9"
/*!
 * lunr.utils
 * Copyright (C) 2020 Oliver Nightingale
 */

/**
 * A namespace containing utils for the rest of the lunr library
 * @namespace lunr.utils
 */
lunr.utils = {}

/**
 * Print a warning message to the console.
 *
 * @param {String} message The message to be printed.
 * @memberOf lunr.utils
 * @function
 */
lunr.utils.warn = (function (global) {
  /* eslint-disable no-console */
  return function (message) {
    if (global.console && console.warn) {
      console.warn(message)
    }
  }
  /* eslint-enable no-console */
})(this)

/**
 * Convert an object to a string.
 *
 * In the case of `null` and `undefined` the function returns
 * the empty string, in all other cases the result of calling
 * `toString` on the passed object is returned.
 *
 * @param {Any} obj The object to convert to a string.
 * @return {String} string representation of the passed object.
 * @memberOf lunr.utils
 */
lunr.utils.asString = function (obj) {
  if (obj === void 0 || obj === null) {
    return ""
  } else {
    return obj.toString()
  }
}

/**
 * Clones an object.
 *
 * Will create a copy of an existing object such that any mutations
 * on the copy cannot affect the original.
 *
 * Only shallow objects are supported, passing a nested object to this
 * function will cause a TypeError.
 *
 * Objects with primitives, and arrays of primitives are supported.
 *
 * @param {Object} obj The object to clone.
 * @return {Object} a clone of the passed object.
 * @throws {TypeError} when a nested object is passed.
 * @memberOf Utils
 */
lunr.utils.clone = function (obj) {
  if (obj === null || obj === undefined) {
    return obj
  }

  var clone = Object.create(null),
      keys = Object.keys(obj)

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i],
        val = obj[key]

    if (Array.isArray(val)) {
      clone[key] = val.slice()
      continue
    }

    if (typeof val === 'string' ||
        typeof val === 'number' ||
        typeof val === 'boolean') {
      clone[key] = val
      continue
    }

    throw new TypeError("clone is not deep and does not support nested objects")
  }

  return clone
}
lunr.FieldRef = function (docRef, fieldName, stringValue) {
  this.docRef = docRef
  this.fieldName = fieldName
  this._stringValue = stringValue
}

lunr.FieldRef.joiner = "/"

lunr.FieldRef.fromString = function (s) {
  var n = s.indexOf(lunr.FieldRef.joiner)

  if (n === -1) {
    throw "malformed field ref string"
  }

  var fieldRef = s.slice(0, n),
      docRef = s.slice(n + 1)

  return new lunr.FieldRef (docRef, fieldRef, s)
}

lunr.FieldRef.prototype.toString = function () {
  if (this._stringValue == undefined) {
    this._stringValue = this.fieldName + lunr.FieldRef.joiner + this.docRef
  }

  return this._stringValue
}
/*!
 * lunr.Set
 * Copyright (C) 2020 Oliver Nightingale
 */

/**
 * A lunr set.
 *
 * @constructor
 */
lunr.Set = function (elements) {
  this.elements = Object.create(null)

  if (elements) {
    this.length = elements.length

    for (var i = 0; i < this.length; i++) {
      this.elements[elements[i]] = true
    }
  } else {
    this.length = 0
  }
}

/**
 * A complete set that contains all elements.
 *
 * @static
 * @readonly
 * @type {lunr.Set}
 */
lunr.Set.complete = {
  intersect: function (other) {
    return other
  },

  union: function () {
    return this
  },

  contains: function () {
    return true
  }
}

/**
 * An empty set that contains no elements.
 *
 * @static
 * @readonly
 * @type {lunr.Set}
 */
lunr.Set.empty = {
  intersect: function () {
    return this
  },

  union: function (other) {
    return other
  },

  contains: function () {
    return false
  }
}

/**
 * Returns true if this set contains the specified object.
 *
 * @param {object} object - Object whose presence in this set is to be tested.
 * @returns {boolean} - True if this set contains the specified object.
 */
lunr.Set.prototype.contains = function (object) {
  return !!this.elements[object]
}

/**
 * Returns a new set containing only the elements that are present in both
 * this set and the specified set.
 *
 * @param {lunr.Set} other - set to intersect with this set.
 * @returns {lunr.Set} a new set that is the intersection of this and the specified set.
 */

lunr.Set.prototype.intersect = function (other) {
  var a, b, elements, intersection = []

  if (other === lunr.Set.complete) {
    return this
  }

  if (other === lunr.Set.empty) {
    return other
  }

  if (this.length < other.length) {
    a = this
    b = other
  } else {
    a = other
    b = this
  }

  elements = Object.keys(a.elements)

  for (var i = 0; i < elements.length; i++) {
    var element = elements[i]
    if (element in b.elements) {
      intersection.push(element)
    }
  }

  return new lunr.Set (intersection)
}

/**
 * Returns a new set combining the elements of this and the specified set.
 *
 * @param {lunr.Set} other - set to union with this set.
 * @return {lunr.Set} a new set that is the union of this and the specified set.
 */

lunr.Set.prototype.union = function (other) {
  if (other === lunr.Set.complete) {
    return lunr.Set.complete
  }

  if (other === lunr.Set.empty) {
    return this
  }

  return new lunr.Set(Object.keys(this.elements).concat(Object.keys(other.elements)))
}
/**
 * A function to calculate the inverse document frequency for
 * a posting. This is shared between the builder and the index
 *
 * @private
 * @param {object} posting - The posting for a given term
 * @param {number} documentCount - The total number of documents.
 */
lunr.idf = function (posting, documentCount) {
  var documentsWithTerm = 0

  for (var fieldName in posting) {
    if (fieldName == '_index') continue // Ignore the term index, its not a field
    documentsWithTerm += Object.keys(posting[fieldName]).length
  }

  var x = (documentCount - documentsWithTerm + 0.5) / (documentsWithTerm + 0.5)

  return Math.log(1 + Math.abs(x))
}

/**
 * A token wraps a string representation of a token
 * as it is passed through the text processing pipeline.
 *
 * @constructor
 * @param {string} [str=''] - The string token being wrapped.
 * @param {object} [metadata={}] - Metadata associated with this token.
 */
lunr.Token = function (str, metadata) {
  this.str = str || ""
  this.metadata = metadata || {}
}

/**
 * Returns the token string that is being wrapped by this object.
 *
 * @returns {string}
 */
lunr.Token.prototype.toString = function () {
  return this.str
}

/**
 * A token update function is used when updating or optionally
 * when cloning a token.
 *
 * @callback lunr.Token~updateFunction
 * @param {string} str - The string representation of the token.
 * @param {Object} metadata - All metadata associated with this token.
 */

/**
 * Applies the given function to the wrapped string token.
 *
 * @example
 * token.update(function (str, metadata) {
 *   return str.toUpperCase()
 * })
 *
 * @param {lunr.Token~updateFunction} fn - A function to apply to the token string.
 * @returns {lunr.Token}
 */
lunr.Token.prototype.update = function (fn) {
  this.str = fn(this.str, this.metadata)
  return this
}

/**
 * Creates a clone of this token. Optionally a function can be
 * applied to the cloned token.
 *
 * @param {lunr.Token~updateFunction} [fn] - An optional function to apply to the cloned token.
 * @returns {lunr.Token}
 */
lunr.Token.prototype.clone = function (fn) {
  fn = fn || function (s) { return s }
  return new lunr.Token (fn(this.str, this.metadata), this.metadata)
}
/*!
 * lunr.tokenizer
 * Copyright (C) 2020 Oliver Nightingale
 */

/**
 * A function for splitting a string into tokens ready to be inserted into
 * the search index. Uses `lunr.tokenizer.separator` to split strings, change
 * the value of this property to change how strings are split into tokens.
 *
 * This tokenizer will convert its parameter to a string by calling `toString` and
 * then will split this string on the character in `lunr.tokenizer.separator`.
 * Arrays will have their elements converted to strings and wrapped in a lunr.Token.
 *
 * Optional metadata can be passed to the tokenizer, this metadata will be cloned and
 * added as metadata to every token that is created from the object to be tokenized.
 *
 * @static
 * @param {?(string|object|object[])} obj - The object to convert into tokens
 * @param {?object} metadata - Optional metadata to associate with every token
 * @returns {lunr.Token[]}
 * @see {@link lunr.Pipeline}
 */
lunr.tokenizer = function (obj, metadata) {
  if (obj == null || obj == undefined) {
    return []
  }

  if (Array.isArray(obj)) {
    return obj.map(function (t) {
      return new lunr.Token(
        lunr.utils.asString(t).toLowerCase(),
        lunr.utils.clone(metadata)
      )
    })
  }

  var str = obj.toString().toLowerCase(),
      len = str.length,
      tokens = []

  for (var sliceEnd = 0, sliceStart = 0; sliceEnd <= len; sliceEnd++) {
    var char = str.charAt(sliceEnd),
        sliceLength = sliceEnd - sliceStart

    if ((char.match(lunr.tokenizer.separator) || sliceEnd == len)) {

      if (sliceLength > 0) {
        var tokenMetadata = lunr.utils.clone(metadata) || {}
        tokenMetadata["position"] = [sliceStart, sliceLength]
        tokenMetadata["index"] = tokens.length

        tokens.push(
          new lunr.Token (
            str.slice(sliceStart, sliceEnd),
            tokenMetadata
          )
        )
      }

      sliceStart = sliceEnd + 1
    }

  }

  return tokens
}

/**
 * The separator used to split a string into tokens. Override this property to change the behaviour of
 * `lunr.tokenizer` behaviour when tokenizing strings. By default this splits on whitespace and hyphens.
 *
 * @static
 * @see lunr.tokenizer
 */
lunr.tokenizer.separator = /[\s\-]+/
/*!
 * lunr.Pipeline
 * Copyright (C) 2020 Oliver Nightingale
 */

/**
 * lunr.Pipelines maintain an ordered list of functions to be applied to all
 * tokens in documents entering the search index and queries being ran against
 * the index.
 *
 * An instance of lunr.Index created with the lunr shortcut will contain a
 * pipeline with a stop word filter and an English language stemmer. Extra
 * functions can be added before or after either of these functions or these
 * default functions can be removed.
 *
 * When run the pipeline will call each function in turn, passing a token, the
 * index of that token in the original list of all tokens and finally a list of
 * all the original tokens.
 *
 * The output of functions in the pipeline will be passed to the next function
 * in the pipeline. To exclude a token from entering the index the function
 * should return undefined, the rest of the pipeline will not be called with
 * this token.
 *
 * For serialisation of pipelines to work, all functions used in an instance of
 * a pipeline should be registered with lunr.Pipeline. Registered functions can
 * then be loaded. If trying to load a serialised pipeline that uses functions
 * that are not registered an error will be thrown.
 *
 * If not planning on serialising the pipeline then registering pipeline functions
 * is not necessary.
 *
 * @constructor
 */
lunr.Pipeline = function () {
  this._stack = []
}

lunr.Pipeline.registeredFunctions = Object.create(null)

/**
 * A pipeline function maps lunr.Token to lunr.Token. A lunr.Token contains the token
 * string as well as all known metadata. A pipeline function can mutate the token string
 * or mutate (or add) metadata for a given token.
 *
 * A pipeline function can indicate that the passed token should be discarded by returning
 * null, undefined or an empty string. This token will not be passed to any downstream pipeline
 * functions and will not be added to the index.
 *
 * Multiple tokens can be returned by returning an array of tokens. Each token will be passed
 * to any downstream pipeline functions and all will returned tokens will be added to the index.
 *
 * Any number of pipeline functions may be chained together using a lunr.Pipeline.
 *
 * @interface lunr.PipelineFunction
 * @param {lunr.Token} token - A token from the document being processed.
 * @param {number} i - The index of this token in the complete list of tokens for this document/field.
 * @param {lunr.Token[]} tokens - All tokens for this document/field.
 * @returns {(?lunr.Token|lunr.Token[])}
 */

/**
 * Register a function with the pipeline.
 *
 * Functions that are used in the pipeline should be registered if the pipeline
 * needs to be serialised, or a serialised pipeline needs to be loaded.
 *
 * Registering a function does not add it to a pipeline, functions must still be
 * added to instances of the pipeline for them to be used when running a pipeline.
 *
 * @param {lunr.PipelineFunction} fn - The function to check for.
 * @param {String} label - The label to register this function with
 */
lunr.Pipeline.registerFunction = function (fn, label) {
  if (label in this.registeredFunctions) {
    lunr.utils.warn('Overwriting existing registered function: ' + label)
  }

  fn.label = label
  lunr.Pipeline.registeredFunctions[fn.label] = fn
}

/**
 * Warns if the function is not registered as a Pipeline function.
 *
 * @param {lunr.PipelineFunction} fn - The function to check for.
 * @private
 */
lunr.Pipeline.warnIfFunctionNotRegistered = function (fn) {
  var isRegistered = fn.label && (fn.label in this.registeredFunctions)

  if (!isRegistered) {
    lunr.utils.warn('Function is not registered with pipeline. This may cause problems when serialising the index.\n', fn)
  }
}

/**
 * Loads a previously serialised pipeline.
 *
 * All functions to be loaded must already be registered with lunr.Pipeline.
 * If any function from the serialised data has not been registered then an
 * error will be thrown.
 *
 * @param {Object} serialised - The serialised pipeline to load.
 * @returns {lunr.Pipeline}
 */
lunr.Pipeline.load = function (serialised) {
  var pipeline = new lunr.Pipeline

  serialised.forEach(function (fnName) {
    var fn = lunr.Pipeline.registeredFunctions[fnName]

    if (fn) {
      pipeline.add(fn)
    } else {
      throw new Error('Cannot load unregistered function: ' + fnName)
    }
  })

  return pipeline
}

/**
 * Adds new functions to the end of the pipeline.
 *
 * Logs a warning if the function has not been registered.
 *
 * @param {lunr.PipelineFunction[]} functions - Any number of functions to add to the pipeline.
 */
lunr.Pipeline.prototype.add = function () {
  var fns = Array.prototype.slice.call(arguments)

  fns.forEach(function (fn) {
    lunr.Pipeline.warnIfFunctionNotRegistered(fn)
    this._stack.push(fn)
  }, this)
}

/**
 * Adds a single function after a function that already exists in the
 * pipeline.
 *
 * Logs a warning if the function has not been registered.
 *
 * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.
 * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.
 */
lunr.Pipeline.prototype.after = function (existingFn, newFn) {
  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)

  var pos = this._stack.indexOf(existingFn)
  if (pos == -1) {
    throw new Error('Cannot find existingFn')
  }

  pos = pos + 1
  this._stack.splice(pos, 0, newFn)
}

/**
 * Adds a single function before a function that already exists in the
 * pipeline.
 *
 * Logs a warning if the function has not been registered.
 *
 * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.
 * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.
 */
lunr.Pipeline.prototype.before = function (existingFn, newFn) {
  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)

  var pos = this._stack.indexOf(existingFn)
  if (pos == -1) {
    throw new Error('Cannot find existingFn')
  }

  this._stack.splice(pos, 0, newFn)
}

/**
 * Removes a function from the pipeline.
 *
 * @param {lunr.PipelineFunction} fn The function to remove from the pipeline.
 */
lunr.Pipeline.prototype.remove = function (fn) {
  var pos = this._stack.indexOf(fn)
  if (pos == -1) {
    return
  }

  this._stack.splice(pos, 1)
}

/**
 * Runs the current list of functions that make up the pipeline against the
 * passed tokens.
 *
 * @param {Array} tokens The tokens to run through the pipeline.
 * @returns {Array}
 */
lunr.Pipeline.prototype.run = function (tokens) {
  var stackLength = this._stack.length

  for (var i = 0; i < stackLength; i++) {
    var fn = this._stack[i]
    var memo = []

    for (var j = 0; j < tokens.length; j++) {
      var result = fn(tokens[j], j, tokens)

      if (result === null || result === void 0 || result === '') continue

      if (Array.isArray(result)) {
        for (var k = 0; k < result.length; k++) {
          memo.push(result[k])
        }
      } else {
        memo.push(result)
      }
    }

    tokens = memo
  }

  return tokens
}

/**
 * Convenience method for passing a string through a pipeline and getting
 * strings out. This method takes care of wrapping the passed string in a
 * token and mapping the resulting tokens back to strings.
 *
 * @param {string} str - The string to pass through the pipeline.
 * @param {?object} metadata - Optional metadata to associate with the token
 * passed to the pipeline.
 * @returns {string[]}
 */
lunr.Pipeline.prototype.runString = function (str, metadata) {
  var token = new lunr.Token (str, metadata)

  return this.run([token]).map(function (t) {
    return t.toString()
  })
}

/**
 * Resets the pipeline by removing any existing processors.
 *
 */
lunr.Pipeline.prototype.reset = function () {
  this._stack = []
}

/**
 * Returns a representation of the pipeline ready for serialisation.
 *
 * Logs a warning if the function has not been registered.
 *
 * @returns {Array}
 */
lunr.Pipeline.prototype.toJSON = function () {
  return this._stack.map(function (fn) {
    lunr.Pipeline.warnIfFunctionNotRegistered(fn)

    return fn.label
  })
}
/*!
 * lunr.Vector
 * Copyright (C) 2020 Oliver Nightingale
 */

/**
 * A vector is used to construct the vector space of documents and queries. These
 * vectors support operations to determine the similarity between two documents or
 * a document and a query.
 *
 * Normally no parameters are required for initializing a vector, but in the case of
 * loading a previously dumped vector the raw elements can be provided to the constructor.
 *
 * For performance reasons vectors are implemented with a flat array, where an elements
 * index is immediately followed by its value. E.g. [index, value, index, value]. This
 * allows the underlying array to be as sparse as possible and still offer decent
 * performance when being used for vector calculations.
 *
 * @constructor
 * @param {Number[]} [elements] - The flat list of element index and element value pairs.
 */
lunr.Vector = function (elements) {
  this._magnitude = 0
  this.elements = elements || []
}


/**
 * Calculates the position within the vector to insert a given index.
 *
 * This is used internally by insert and upsert. If there are duplicate indexes then
 * the position is returned as if the value for that index were to be updated, but it
 * is the callers responsibility to check whether there is a duplicate at that index
 *
 * @param {Number} insertIdx - The index at which the element should be inserted.
 * @returns {Number}
 */
lunr.Vector.prototype.positionForIndex = function (index) {
  // For an empty vector the tuple can be inserted at the beginning
  if (this.elements.length == 0) {
    return 0
  }

  var start = 0,
      end = this.elements.length / 2,
      sliceLength = end - start,
      pivotPoint = Math.floor(sliceLength / 2),
      pivotIndex = this.elements[pivotPoint * 2]

  while (sliceLength > 1) {
    if (pivotIndex < index) {
      start = pivotPoint
    }

    if (pivotIndex > index) {
      end = pivotPoint
    }

    if (pivotIndex == index) {
      break
    }

    sliceLength = end - start
    pivotPoint = start + Math.floor(sliceLength / 2)
    pivotIndex = this.elements[pivotPoint * 2]
  }

  if (pivotIndex == index) {
    return pivotPoint * 2
  }

  if (pivotIndex > index) {
    return pivotPoint * 2
  }

  if (pivotIndex < index) {
    return (pivotPoint + 1) * 2
  }
}

/**
 * Inserts an element at an index within the vector.
 *
 * Does not allow duplicates, will throw an error if there is already an entry
 * for this index.
 *
 * @param {Number} insertIdx - The index at which the element should be inserted.
 * @param {Number} val - The value to be inserted into the vector.
 */
lunr.Vector.prototype.insert = function (insertIdx, val) {
  this.upsert(insertIdx, val, function () {
    throw "duplicate index"
  })
}

/**
 * Inserts or updates an existing index within the vector.
 *
 * @param {Number} insertIdx - The index at which the element should be inserted.
 * @param {Number} val - The value to be inserted into the vector.
 * @param {function} fn - A function that is called for updates, the existing value and the
 * requested value are passed as arguments
 */
lunr.Vector.prototype.upsert = function (insertIdx, val, fn) {
  this._magnitude = 0
  var position = this.positionForIndex(insertIdx)

  if (this.elements[position] == insertIdx) {
    this.elements[position + 1] = fn(this.elements[position + 1], val)
  } else {
    this.elements.splice(position, 0, insertIdx, val)
  }
}

/**
 * Calculates the magnitude of this vector.
 *
 * @returns {Number}
 */
lunr.Vector.prototype.magnitude = function () {
  if (this._magnitude) return this._magnitude

  var sumOfSquares = 0,
      elementsLength = this.elements.length

  for (var i = 1; i < elementsLength; i += 2) {
    var val = this.elements[i]
    sumOfSquares += val * val
  }

  return this._magnitude = Math.sqrt(sumOfSquares)
}

/**
 * Calculates the dot product of this vector and another vector.
 *
 * @param {lunr.Vector} otherVector - The vector to compute the dot product with.
 * @returns {Number}
 */
lunr.Vector.prototype.dot = function (otherVector) {
  var dotProduct = 0,
      a = this.elements, b = otherVector.elements,
      aLen = a.length, bLen = b.length,
      aVal = 0, bVal = 0,
      i = 0, j = 0

  while (i < aLen && j < bLen) {
    aVal = a[i], bVal = b[j]
    if (aVal < bVal) {
      i += 2
    } else if (aVal > bVal) {
      j += 2
    } else if (aVal == bVal) {
      dotProduct += a[i + 1] * b[j + 1]
      i += 2
      j += 2
    }
  }

  return dotProduct
}

/**
 * Calculates the similarity between this vector and another vector.
 *
 * @param {lunr.Vector} otherVector - The other vector to calculate the
 * similarity with.
 * @returns {Number}
 */
lunr.Vector.prototype.similarity = function (otherVector) {
  return this.dot(otherVector) / this.magnitude() || 0
}

/**
 * Converts the vector to an array of the elements within the vector.
 *
 * @returns {Number[]}
 */
lunr.Vector.prototype.toArray = function () {
  var output = new Array (this.elements.length / 2)

  for (var i = 1, j = 0; i < this.elements.length; i += 2, j++) {
    output[j] = this.elements[i]
  }

  return output
}

/**
 * A JSON serializable representation of the vector.
 *
 * @returns {Number[]}
 */
lunr.Vector.prototype.toJSON = function () {
  return this.elements
}
/* eslint-disable */
/*!
 * lunr.stemmer
 * Copyright (C) 2020 Oliver Nightingale
 * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt
 */

/**
 * lunr.stemmer is an english language stemmer, this is a JavaScript
 * implementation of the PorterStemmer taken from http://tartarus.org/~martin
 *
 * @static
 * @implements {lunr.PipelineFunction}
 * @param {lunr.Token} token - The string to stem
 * @returns {lunr.Token}
 * @see {@link lunr.Pipeline}
 * @function
 */
lunr.stemmer = (function(){
  var step2list = {
      "ational" : "ate",
      "tional" : "tion",
      "enci" : "ence",
      "anci" : "ance",
      "izer" : "ize",
      "bli" : "ble",
      "alli" : "al",
      "entli" : "ent",
      "eli" : "e",
      "ousli" : "ous",
      "ization" : "ize",
      "ation" : "ate",
      "ator" : "ate",
      "alism" : "al",
      "iveness" : "ive",
      "fulness" : "ful",
      "ousness" : "ous",
      "aliti" : "al",
      "iviti" : "ive",
      "biliti" : "ble",
      "logi" : "log"
    },

    step3list = {
      "icate" : "ic",
      "ative" : "",
      "alize" : "al",
      "iciti" : "ic",
      "ical" : "ic",
      "ful" : "",
      "ness" : ""
    },

    c = "[^aeiou]",          // consonant
    v = "[aeiouy]",          // vowel
    C = c + "[^aeiouy]*",    // consonant sequence
    V = v + "[aeiou]*",      // vowel sequence

    mgr0 = "^(" + C + ")?" + V + C,               // [C]VC... is m>0
    meq1 = "^(" + C + ")?" + V + C + "(" + V + ")?$",  // [C]VC[V] is m=1
    mgr1 = "^(" + C + ")?" + V + C + V + C,       // [C]VCVC... is m>1
    s_v = "^(" + C + ")?" + v;                   // vowel in stem

  var re_mgr0 = new RegExp(mgr0);
  var re_mgr1 = new RegExp(mgr1);
  var re_meq1 = new RegExp(meq1);
  var re_s_v = new RegExp(s_v);

  var re_1a = /^(.+?)(ss|i)es$/;
  var re2_1a = /^(.+?)([^s])s$/;
  var re_1b = /^(.+?)eed$/;
  var re2_1b = /^(.+?)(ed|ing)$/;
  var re_1b_2 = /.$/;
  var re2_1b_2 = /(at|bl|iz)$/;
  var re3_1b_2 = new RegExp("([^aeiouylsz])\\1$");
  var re4_1b_2 = new RegExp("^" + C + v + "[^aeiouwxy]$");

  var re_1c = /^(.+?[^aeiou])y$/;
  var re_2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;

  var re_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;

  var re_4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;
  var re2_4 = /^(.+?)(s|t)(ion)$/;

  var re_5 = /^(.+?)e$/;
  var re_5_1 = /ll$/;
  var re3_5 = new RegExp("^" + C + v + "[^aeiouwxy]$");

  var porterStemmer = function porterStemmer(w) {
    var stem,
      suffix,
      firstch,
      re,
      re2,
      re3,
      re4;

    if (w.length < 3) { return w; }

    firstch = w.substr(0,1);
    if (firstch == "y") {
      w = firstch.toUpperCase() + w.substr(1);
    }

    // Step 1a
    re = re_1a
    re2 = re2_1a;

    if (re.test(w)) { w = w.replace(re,"$1$2"); }
    else if (re2.test(w)) { w = w.replace(re2,"$1$2"); }

    // Step 1b
    re = re_1b;
    re2 = re2_1b;
    if (re.test(w)) {
      var fp = re.exec(w);
      re = re_mgr0;
      if (re.test(fp[1])) {
        re = re_1b_2;
        w = w.replace(re,"");
      }
    } else if (re2.test(w)) {
      var fp = re2.exec(w);
      stem = fp[1];
      re2 = re_s_v;
      if (re2.test(stem)) {
        w = stem;
        re2 = re2_1b_2;
        re3 = re3_1b_2;
        re4 = re4_1b_2;
        if (re2.test(w)) { w = w + "e"; }
        else if (re3.test(w)) { re = re_1b_2; w = w.replace(re,""); }
        else if (re4.test(w)) { w = w + "e"; }
      }
    }

    // Step 1c - replace suffix y or Y by i if preceded by a non-vowel which is not the first letter of the word (so cry -> cri, by -> by, say -> say)
    re = re_1c;
    if (re.test(w)) {
      var fp = re.exec(w);
      stem = fp[1];
      w = stem + "i";
    }

    // Step 2
    re = re_2;
    if (re.test(w)) {
      var fp = re.exec(w);
      stem = fp[1];
      suffix = fp[2];
      re = re_mgr0;
      if (re.test(stem)) {
        w = stem + step2list[suffix];
      }
    }

    // Step 3
    re = re_3;
    if (re.test(w)) {
      var fp = re.exec(w);
      stem = fp[1];
      suffix = fp[2];
      re = re_mgr0;
      if (re.test(stem)) {
        w = stem + step3list[suffix];
      }
    }

    // Step 4
    re = re_4;
    re2 = re2_4;
    if (re.test(w)) {
      var fp = re.exec(w);
      stem = fp[1];
      re = re_mgr1;
      if (re.test(stem)) {
        w = stem;
      }
    } else if (re2.test(w)) {
      var fp = re2.exec(w);
      stem = fp[1] + fp[2];
      re2 = re_mgr1;
      if (re2.test(stem)) {
        w = stem;
      }
    }

    // Step 5
    re = re_5;
    if (re.test(w)) {
      var fp = re.exec(w);
      stem = fp[1];
      re = re_mgr1;
      re2 = re_meq1;
      re3 = re3_5;
      if (re.test(stem) || (re2.test(stem) && !(re3.test(stem)))) {
        w = stem;
      }
    }

    re = re_5_1;
    re2 = re_mgr1;
    if (re.test(w) && re2.test(w)) {
      re = re_1b_2;
      w = w.replace(re,"");
    }

    // and turn initial Y back to y

    if (firstch == "y") {
      w = firstch.toLowerCase() + w.substr(1);
    }

    return w;
  };

  return function (token) {
    return token.update(porterStemmer);
  }
})();

lunr.Pipeline.registerFunction(lunr.stemmer, 'stemmer')
/*!
 * lunr.stopWordFilter
 * Copyright (C) 2020 Oliver Nightingale
 */

/**
 * lunr.generateStopWordFilter builds a stopWordFilter function from the provided
 * list of stop words.
 *
 * The built in lunr.stopWordFilter is built using this generator and can be used
 * to generate custom stopWordFilters for applications or non English languages.
 *
 * @function
 * @param {Array} token The token to pass through the filter
 * @returns {lunr.PipelineFunction}
 * @see lunr.Pipeline
 * @see lunr.stopWordFilter
 */
lunr.generateStopWordFilter = function (stopWords) {
  var words = stopWords.reduce(function (memo, stopWord) {
    memo[stopWord] = stopWord
    return memo
  }, {})

  return function (token) {
    if (token && words[token.toString()] !== token.toString()) return token
  }
}

/**
 * lunr.stopWordFilter is an English language stop word list filter, any words
 * contained in the list will not be passed through the filter.
 *
 * This is intended to be used in the Pipeline. If the token does not pass the
 * filter then undefined will be returned.
 *
 * @function
 * @implements {lunr.PipelineFunction}
 * @params {lunr.Token} token - A token to check for being a stop word.
 * @returns {lunr.Token}
 * @see {@link lunr.Pipeline}
 */
lunr.stopWordFilter = lunr.generateStopWordFilter([
  'a',
  'able',
  'about',
  'across',
  'after',
  'all',
  'almost',
  'also',
  'am',
  'among',
  'an',
  'and',
  'any',
  'are',
  'as',
  'at',
  'be',
  'because',
  'been',
  'but',
  'by',
  'can',
  'cannot',
  'could',
  'dear',
  'did',
  'do',
  'does',
  'either',
  'else',
  'ever',
  'every',
  'for',
  'from',
  'get',
  'got',
  'had',
  'has',
  'have',
  'he',
  'her',
  'hers',
  'him',
  'his',
  'how',
  'however',
  'i',
  'if',
  'in',
  'into',
  'is',
  'it',
  'its',
  'just',
  'least',
  'let',
  'like',
  'likely',
  'may',
  'me',
  'might',
  'most',
  'must',
  'my',
  'neither',
  'no',
  'nor',
  'not',
  'of',
  'off',
  'often',
  'on',
  'only',
  'or',
  'other',
  'our',
  'own',
  'rather',
  'said',
  'say',
  'says',
  'she',
  'should',
  'since',
  'so',
  'some',
  'than',
  'that',
  'the',
  'their',
  'them',
  'then',
  'there',
  'these',
  'they',
  'this',
  'tis',
  'to',
  'too',
  'twas',
  'us',
  'wants',
  'was',
  'we',
  'were',
  'what',
  'when',
  'where',
  'which',
  'while',
  'who',
  'whom',
  'why',
  'will',
  'with',
  'would',
  'yet',
  'you',
  'your'
])

lunr.Pipeline.registerFunction(lunr.stopWordFilter, 'stopWordFilter')
/*!
 * lunr.trimmer
 * Copyright (C) 2020 Oliver Nightingale
 */

/**
 * lunr.trimmer is a pipeline function for trimming non word
 * characters from the beginning and end of tokens before they
 * enter the index.
 *
 * This implementation may not work correctly for non latin
 * characters and should either be removed or adapted for use
 * with languages with non-latin characters.
 *
 * @static
 * @implements {lunr.PipelineFunction}
 * @param {lunr.Token} token The token to pass through the filter
 * @returns {lunr.Token}
 * @see lunr.Pipeline
 */
lunr.trimmer = function (token) {
  return token.update(function (s) {
    return s.replace(/^\W+/, '').replace(/\W+$/, '')
  })
}

lunr.Pipeline.registerFunction(lunr.trimmer, 'trimmer')
/*!
 * lunr.TokenSet
 * Copyright (C) 2020 Oliver Nightingale
 */

/**
 * A token set is used to store the unique list of all tokens
 * within an index. Token sets are also used to represent an
 * incoming query to the index, this query token set and index
 * token set are then intersected to find which tokens to look
 * up in the inverted index.
 *
 * A token set can hold multiple tokens, as in the case of the
 * index token set, or it can hold a single token as in the
 * case of a simple query token set.
 *
 * Additionally token sets are used to perform wildcard matching.
 * Leading, contained and trailing wildcards are supported, and
 * from this edit distance matching can also be provided.
 *
 * Token sets are implemented as a minimal finite state automata,
 * where both common prefixes and suffixes are shared between tokens.
 * This helps to reduce the space used for storing the token set.
 *
 * @constructor
 */
lunr.TokenSet = function () {
  this.final = false
  this.edges = {}
  this.id = lunr.TokenSet._nextId
  lunr.TokenSet._nextId += 1
}

/**
 * Keeps track of the next, auto increment, identifier to assign
 * to a new tokenSet.
 *
 * TokenSets require a unique identifier to be correctly minimised.
 *
 * @private
 */
lunr.TokenSet._nextId = 1

/**
 * Creates a TokenSet instance from the given sorted array of words.
 *
 * @param {String[]} arr - A sorted array of strings to create the set from.
 * @returns {lunr.TokenSet}
 * @throws Will throw an error if the input array is not sorted.
 */
lunr.TokenSet.fromArray = function (arr) {
  var builder = new lunr.TokenSet.Builder

  for (var i = 0, len = arr.length; i < len; i++) {
    builder.insert(arr[i])
  }

  builder.finish()
  return builder.root
}

/**
 * Creates a token set from a query clause.
 *
 * @private
 * @param {Object} clause - A single clause from lunr.Query.
 * @param {string} clause.term - The query clause term.
 * @param {number} [clause.editDistance] - The optional edit distance for the term.
 * @returns {lunr.TokenSet}
 */
lunr.TokenSet.fromClause = function (clause) {
  if ('editDistance' in clause) {
    return lunr.TokenSet.fromFuzzyString(clause.term, clause.editDistance)
  } else {
    return lunr.TokenSet.fromString(clause.term)
  }
}

/**
 * Creates a token set representing a single string with a specified
 * edit distance.
 *
 * Insertions, deletions, substitutions and transpositions are each
 * treated as an edit distance of 1.
 *
 * Increasing the allowed edit distance will have a dramatic impact
 * on the performance of both creating and intersecting these TokenSets.
 * It is advised to keep the edit distance less than 3.
 *
 * @param {string} str - The string to create the token set from.
 * @param {number} editDistance - The allowed edit distance to match.
 * @returns {lunr.Vector}
 */
lunr.TokenSet.fromFuzzyString = function (str, editDistance) {
  var root = new lunr.TokenSet

  var stack = [{
    node: root,
    editsRemaining: editDistance,
    str: str
  }]

  while (stack.length) {
    var frame = stack.pop()

    // no edit
    if (frame.str.length > 0) {
      var char = frame.str.charAt(0),
          noEditNode

      if (char in frame.node.edges) {
        noEditNode = frame.node.edges[char]
      } else {
        noEditNode = new lunr.TokenSet
        frame.node.edges[char] = noEditNode
      }

      if (frame.str.length == 1) {
        noEditNode.final = true
      }

      stack.push({
        node: noEditNode,
        editsRemaining: frame.editsRemaining,
        str: frame.str.slice(1)
      })
    }

    if (frame.editsRemaining == 0) {
      continue
    }

    // insertion
    if ("*" in frame.node.edges) {
      var insertionNode = frame.node.edges["*"]
    } else {
      var insertionNode = new lunr.TokenSet
      frame.node.edges["*"] = insertionNode
    }

    if (frame.str.length == 0) {
      insertionNode.final = true
    }

    stack.push({
      node: insertionNode,
      editsRemaining: frame.editsRemaining - 1,
      str: frame.str
    })

    // deletion
    // can only do a deletion if we have enough edits remaining
    // and if there are characters left to delete in the string
    if (frame.str.length > 1) {
      stack.push({
        node: frame.node,
        editsRemaining: frame.editsRemaining - 1,
        str: frame.str.slice(1)
      })
    }

    // deletion
    // just removing the last character from the str
    if (frame.str.length == 1) {
      frame.node.final = true
    }

    // substitution
    // can only do a substitution if we have enough edits remaining
    // and if there are characters left to substitute
    if (frame.str.length >= 1) {
      if ("*" in frame.node.edges) {
        var substitutionNode = frame.node.edges["*"]
      } else {
        var substitutionNode = new lunr.TokenSet
        frame.node.edges["*"] = substitutionNode
      }

      if (frame.str.length == 1) {
        substitutionNode.final = true
      }

      stack.push({
        node: substitutionNode,
        editsRemaining: frame.editsRemaining - 1,
        str: frame.str.slice(1)
      })
    }

    // transposition
    // can only do a transposition if there are edits remaining
    // and there are enough characters to transpose
    if (frame.str.length > 1) {
      var charA = frame.str.charAt(0),
          charB = frame.str.charAt(1),
          transposeNode

      if (charB in frame.node.edges) {
        transposeNode = frame.node.edges[charB]
      } else {
        transposeNode = new lunr.TokenSet
        frame.node.edges[charB] = transposeNode
      }

      if (frame.str.length == 1) {
        transposeNode.final = true
      }

      stack.push({
        node: transposeNode,
        editsRemaining: frame.editsRemaining - 1,
        str: charA + frame.str.slice(2)
      })
    }
  }

  return root
}

/**
 * Creates a TokenSet from a string.
 *
 * The string may contain one or more wildcard characters (*)
 * that will allow wildcard matching when intersecting with
 * another TokenSet.
 *
 * @param {string} str - The string to create a TokenSet from.
 * @returns {lunr.TokenSet}
 */
lunr.TokenSet.fromString = function (str) {
  var node = new lunr.TokenSet,
      root = node

  /*
   * Iterates through all characters within the passed string
   * appending a node for each character.
   *
   * When a wildcard character is found then a self
   * referencing edge is introduced to continually match
   * any number of any characters.
   */
  for (var i = 0, len = str.length; i < len; i++) {
    var char = str[i],
        final = (i == len - 1)

    if (char == "*") {
      node.edges[char] = node
      node.final = final

    } else {
      var next = new lunr.TokenSet
      next.final = final

      node.edges[char] = next
      node = next
    }
  }

  return root
}

/**
 * Converts this TokenSet into an array of strings
 * contained within the TokenSet.
 *
 * This is not intended to be used on a TokenSet that
 * contains wildcards, in these cases the results are
 * undefined and are likely to cause an infinite loop.
 *
 * @returns {string[]}
 */
lunr.TokenSet.prototype.toArray = function () {
  var words = []

  var stack = [{
    prefix: "",
    node: this
  }]

  while (stack.length) {
    var frame = stack.pop(),
        edges = Object.keys(frame.node.edges),
        len = edges.length

    if (frame.node.final) {
      /* In Safari, at this point the prefix is sometimes corrupted, see:
       * https://github.com/olivernn/lunr.js/issues/279 Calling any
       * String.prototype method forces Safari to "cast" this string to what
       * it's supposed to be, fixing the bug. */
      frame.prefix.charAt(0)
      words.push(frame.prefix)
    }

    for (var i = 0; i < len; i++) {
      var edge = edges[i]

      stack.push({
        prefix: frame.prefix.concat(edge),
        node: frame.node.edges[edge]
      })
    }
  }

  return words
}

/**
 * Generates a string representation of a TokenSet.
 *
 * This is intended to allow TokenSets to be used as keys
 * in objects, largely to aid the construction and minimisation
 * of a TokenSet. As such it is not designed to be a human
 * friendly representation of the TokenSet.
 *
 * @returns {string}
 */
lunr.TokenSet.prototype.toString = function () {
  // NOTE: Using Object.keys here as this.edges is very likely
  // to enter 'hash-mode' with many keys being added
  //
  // avoiding a for-in loop here as it leads to the function
  // being de-optimised (at least in V8). From some simple
  // benchmarks the performance is comparable, but allowing
  // V8 to optimize may mean easy performance wins in the future.

  if (this._str) {
    return this._str
  }

  var str = this.final ? '1' : '0',
      labels = Object.keys(this.edges).sort(),
      len = labels.length

  for (var i = 0; i < len; i++) {
    var label = labels[i],
        node = this.edges[label]

    str = str + label + node.id
  }

  return str
}

/**
 * Returns a new TokenSet that is the intersection of
 * this TokenSet and the passed TokenSet.
 *
 * This intersection will take into account any wildcards
 * contained within the TokenSet.
 *
 * @param {lunr.TokenSet} b - An other TokenSet to intersect with.
 * @returns {lunr.TokenSet}
 */
lunr.TokenSet.prototype.intersect = function (b) {
  var output = new lunr.TokenSet,
      frame = undefined

  var stack = [{
    qNode: b,
    output: output,
    node: this
  }]

  while (stack.length) {
    frame = stack.pop()

    // NOTE: As with the #toString method, we are using
    // Object.keys and a for loop instead of a for-in loop
    // as both of these objects enter 'hash' mode, causing
    // the function to be de-optimised in V8
    var qEdges = Object.keys(frame.qNode.edges),
        qLen = qEdges.length,
        nEdges = Object.keys(frame.node.edges),
        nLen = nEdges.length

    for (var q = 0; q < qLen; q++) {
      var qEdge = qEdges[q]

      for (var n = 0; n < nLen; n++) {
        var nEdge = nEdges[n]

        if (nEdge == qEdge || qEdge == '*') {
          var node = frame.node.edges[nEdge],
              qNode = frame.qNode.edges[qEdge],
              final = node.final && qNode.final,
              next = undefined

          if (nEdge in frame.output.edges) {
            // an edge already exists for this character
            // no need to create a new node, just set the finality
            // bit unless this node is already final
            next = frame.output.edges[nEdge]
            next.final = next.final || final

          } else {
            // no edge exists yet, must create one
            // set the finality bit and insert it
            // into the output
            next = new lunr.TokenSet
            next.final = final
            frame.output.edges[nEdge] = next
          }

          stack.push({
            qNode: qNode,
            output: next,
            node: node
          })
        }
      }
    }
  }

  return output
}
lunr.TokenSet.Builder = function () {
  this.previousWord = ""
  this.root = new lunr.TokenSet
  this.uncheckedNodes = []
  this.minimizedNodes = {}
}

lunr.TokenSet.Builder.prototype.insert = function (word) {
  var node,
      commonPrefix = 0

  if (word < this.previousWord) {
    throw new Error ("Out of order word insertion")
  }

  for (var i = 0; i < word.length && i < this.previousWord.length; i++) {
    if (word[i] != this.previousWord[i]) break
    commonPrefix++
  }

  this.minimize(commonPrefix)

  if (this.uncheckedNodes.length == 0) {
    node = this.root
  } else {
    node = this.uncheckedNodes[this.uncheckedNodes.length - 1].child
  }

  for (var i = commonPrefix; i < word.length; i++) {
    var nextNode = new lunr.TokenSet,
        char = word[i]

    node.edges[char] = nextNode

    this.uncheckedNodes.push({
      parent: node,
      char: char,
      child: nextNode
    })

    node = nextNode
  }

  node.final = true
  this.previousWord = word
}

lunr.TokenSet.Builder.prototype.finish = function () {
  this.minimize(0)
}

lunr.TokenSet.Builder.prototype.minimize = function (downTo) {
  for (var i = this.uncheckedNodes.length - 1; i >= downTo; i--) {
    var node = this.uncheckedNodes[i],
        childKey = node.child.toString()

    if (childKey in this.minimizedNodes) {
      node.parent.edges[node.char] = this.minimizedNodes[childKey]
    } else {
      // Cache the key for this node since
      // we know it can't change anymore
      node.child._str = childKey

      this.minimizedNodes[childKey] = node.child
    }

    this.uncheckedNodes.pop()
  }
}
/*!
 * lunr.Index
 * Copyright (C) 2020 Oliver Nightingale
 */

/**
 * An index contains the built index of all documents and provides a query interface
 * to the index.
 *
 * Usually instances of lunr.Index will not be created using this constructor, instead
 * lunr.Builder should be used to construct new indexes, or lunr.Index.load should be
 * used to load previously built and serialized indexes.
 *
 * @constructor
 * @param {Object} attrs - The attributes of the built search index.
 * @param {Object} attrs.invertedIndex - An index of term/field to document reference.
 * @param {Object<string, lunr.Vector>} attrs.fieldVectors - Field vectors
 * @param {lunr.TokenSet} attrs.tokenSet - An set of all corpus tokens.
 * @param {string[]} attrs.fields - The names of indexed document fields.
 * @param {lunr.Pipeline} attrs.pipeline - The pipeline to use for search terms.
 */
lunr.Index = function (attrs) {
  this.invertedIndex = attrs.invertedIndex
  this.fieldVectors = attrs.fieldVectors
  this.tokenSet = attrs.tokenSet
  this.fields = attrs.fields
  this.pipeline = attrs.pipeline
}

/**
 * A result contains details of a document matching a search query.
 * @typedef {Object} lunr.Index~Result
 * @property {string} ref - The reference of the document this result represents.
 * @property {number} score - A number between 0 and 1 representing how similar this document is to the query.
 * @property {lunr.MatchData} matchData - Contains metadata about this match including which term(s) caused the match.
 */

/**
 * Although lunr provides the ability to create queries using lunr.Query, it also provides a simple
 * query language which itself is parsed into an instance of lunr.Query.
 *
 * For programmatically building queries it is advised to directly use lunr.Query, the query language
 * is best used for human entered text rather than program generated text.
 *
 * At its simplest queries can just be a single term, e.g. `hello`, multiple terms are also supported
 * and will be combined with OR, e.g `hello world` will match documents that contain either 'hello'
 * or 'world', though those that contain both will rank higher in the results.
 *
 * Wildcards can be included in terms to match one or more unspecified characters, these wildcards can
 * be inserted anywhere within the term, and more than one wildcard can exist in a single term. Adding
 * wildcards will increase the number of documents that will be found but can also have a negative
 * impact on query performance, especially with wildcards at the beginning of a term.
 *
 * Terms can be restricted to specific fields, e.g. `title:hello`, only documents with the term
 * hello in the title field will match this query. Using a field not present in the index will lead
 * to an error being thrown.
 *
 * Modifiers can also be added to terms, lunr supports edit distance and boost modifiers on terms. A term
 * boost will make documents matching that term score higher, e.g. `foo^5`. Edit distance is also supported
 * to provide fuzzy matching, e.g. 'hello~2' will match documents with hello with an edit distance of 2.
 * Avoid large values for edit distance to improve query performance.
 *
 * Each term also supports a presence modifier. By default a term's presence in document is optional, however
 * this can be changed to either required or prohibited. For a term's presence to be required in a document the
 * term should be prefixed with a '+', e.g. `+foo bar` is a search for documents that must contain 'foo' and
 * optionally contain 'bar'. Conversely a leading '-' sets the terms presence to prohibited, i.e. it must not
 * appear in a document, e.g. `-foo bar` is a search for documents that do not contain 'foo' but may contain 'bar'.
 *
 * To escape special characters the backslash character '\' can be used, this allows searches to include
 * characters that would normally be considered modifiers, e.g. `foo\~2` will search for a term "foo~2" instead
 * of attempting to apply a boost of 2 to the search term "foo".
 *
 * @typedef {string} lunr.Index~QueryString
 * @example <caption>Simple single term query</caption>
 * hello
 * @example <caption>Multiple term query</caption>
 * hello world
 * @example <caption>term scoped to a field</caption>
 * title:hello
 * @example <caption>term with a boost of 10</caption>
 * hello^10
 * @example <caption>term with an edit distance of 2</caption>
 * hello~2
 * @example <caption>terms with presence modifiers</caption>
 * -foo +bar baz
 */

/**
 * Performs a search against the index using lunr query syntax.
 *
 * Results will be returned sorted by their score, the most relevant results
 * will be returned first.  For details on how the score is calculated, please see
 * the {@link https://lunrjs.com/guides/searching.html#scoring|guide}.
 *
 * For more programmatic querying use lunr.Index#query.
 *
 * @param {lunr.Index~QueryString} queryString - A string containing a lunr query.
 * @throws {lunr.QueryParseError} If the passed query string cannot be parsed.
 * @returns {lunr.Index~Result[]}
 */
lunr.Index.prototype.search = function (queryString) {
  return this.query(function (query) {
    var parser = new lunr.QueryParser(queryString, query)
    parser.parse()
  })
}

/**
 * A query builder callback provides a query object to be used to express
 * the query to perform on the index.
 *
 * @callback lunr.Index~queryBuilder
 * @param {lunr.Query} query - The query object to build up.
 * @this lunr.Query
 */

/**
 * Performs a query against the index using the yielded lunr.Query object.
 *
 * If performing programmatic queries against the index, this method is preferred
 * over lunr.Index#search so as to avoid the additional query parsing overhead.
 *
 * A query object is yielded to the supplied function which should be used to
 * express the query to be run against the index.
 *
 * Note that although this function takes a callback parameter it is _not_ an
 * asynchronous operation, the callback is just yielded a query object to be
 * customized.
 *
 * @param {lunr.Index~queryBuilder} fn - A function that is used to build the query.
 * @returns {lunr.Index~Result[]}
 */
lunr.Index.prototype.query = function (fn) {
  // for each query clause
  // * process terms
  // * expand terms from token set
  // * find matching documents and metadata
  // * get document vectors
  // * score documents

  var query = new lunr.Query(this.fields),
      matchingFields = Object.create(null),
      queryVectors = Object.create(null),
      termFieldCache = Object.create(null),
      requiredMatches = Object.create(null),
      prohibitedMatches = Object.create(null)

  /*
   * To support field level boosts a query vector is created per
   * field. An empty vector is eagerly created to support negated
   * queries.
   */
  for (var i = 0; i < this.fields.length; i++) {
    queryVectors[this.fields[i]] = new lunr.Vector
  }

  fn.call(query, query)

  for (var i = 0; i < query.clauses.length; i++) {
    /*
     * Unless the pipeline has been disabled for this term, which is
     * the case for terms with wildcards, we need to pass the clause
     * term through the search pipeline. A pipeline returns an array
     * of processed terms. Pipeline functions may expand the passed
     * term, which means we may end up performing multiple index lookups
     * for a single query term.
     */
    var clause = query.clauses[i],
        terms = null,
        clauseMatches = lunr.Set.empty

    if (clause.usePipeline) {
      terms = this.pipeline.runString(clause.term, {
        fields: clause.fields
      })
    } else {
      terms = [clause.term]
    }

    for (var m = 0; m < terms.length; m++) {
      var term = terms[m]

      /*
       * Each term returned from the pipeline needs to use the same query
       * clause object, e.g. the same boost and or edit distance. The
       * simplest way to do this is to re-use the clause object but mutate
       * its term property.
       */
      clause.term = term

      /*
       * From the term in the clause we create a token set which will then
       * be used to intersect the indexes token set to get a list of terms
       * to lookup in the inverted index
       */
      var termTokenSet = lunr.TokenSet.fromClause(clause),
          expandedTerms = this.tokenSet.intersect(termTokenSet).toArray()

      /*
       * If a term marked as required does not exist in the tokenSet it is
       * impossible for the search to return any matches. We set all the field
       * scoped required matches set to empty and stop examining any further
       * clauses.
       */
      if (expandedTerms.length === 0 && clause.presence === lunr.Query.presence.REQUIRED) {
        for (var k = 0; k < clause.fields.length; k++) {
          var field = clause.fields[k]
          requiredMatches[field] = lunr.Set.empty
        }

        break
      }

      for (var j = 0; j < expandedTerms.length; j++) {
        /*
         * For each term get the posting and termIndex, this is required for
         * building the query vector.
         */
        var expandedTerm = expandedTerms[j],
            posting = this.invertedIndex[expandedTerm],
            termIndex = posting._index

        for (var k = 0; k < clause.fields.length; k++) {
          /*
           * For each field that this query term is scoped by (by default
           * all fields are in scope) we need to get all the document refs
           * that have this term in that field.
           *
           * The posting is the entry in the invertedIndex for the matching
           * term from above.
           */
          var field = clause.fields[k],
              fieldPosting = posting[field],
              matchingDocumentRefs = Object.keys(fieldPosting),
              termField = expandedTerm + "/" + field,
              matchingDocumentsSet = new lunr.Set(matchingDocumentRefs)

          /*
           * if the presence of this term is required ensure that the matching
           * documents are added to the set of required matches for this clause.
           *
           */
          if (clause.presence == lunr.Query.presence.REQUIRED) {
            clauseMatches = clauseMatches.union(matchingDocumentsSet)

            if (requiredMatches[field] === undefined) {
              requiredMatches[field] = lunr.Set.complete
            }
          }

          /*
           * if the presence of this term is prohibited ensure that the matching
           * documents are added to the set of prohibited matches for this field,
           * creating that set if it does not yet exist.
           */
          if (clause.presence == lunr.Query.presence.PROHIBITED) {
            if (prohibitedMatches[field] === undefined) {
              prohibitedMatches[field] = lunr.Set.empty
            }

            prohibitedMatches[field] = prohibitedMatches[field].union(matchingDocumentsSet)

            /*
             * Prohibited matches should not be part of the query vector used for
             * similarity scoring and no metadata should be extracted so we continue
             * to the next field
             */
            continue
          }

          /*
           * The query field vector is populated using the termIndex found for
           * the term and a unit value with the appropriate boost applied.
           * Using upsert because there could already be an entry in the vector
           * for the term we are working with. In that case we just add the scores
           * together.
           */
          queryVectors[field].upsert(termIndex, clause.boost, function (a, b) { return a + b })

          /**
           * If we've already seen this term, field combo then we've already collected
           * the matching documents and metadata, no need to go through all that again
           */
          if (termFieldCache[termField]) {
            continue
          }

          for (var l = 0; l < matchingDocumentRefs.length; l++) {
            /*
             * All metadata for this term/field/document triple
             * are then extracted and collected into an instance
             * of lunr.MatchData ready to be returned in the query
             * results
             */
            var matchingDocumentRef = matchingDocumentRefs[l],
                matchingFieldRef = new lunr.FieldRef (matchingDocumentRef, field),
                metadata = fieldPosting[matchingDocumentRef],
                fieldMatch

            if ((fieldMatch = matchingFields[matchingFieldRef]) === undefined) {
              matchingFields[matchingFieldRef] = new lunr.MatchData (expandedTerm, field, metadata)
            } else {
              fieldMatch.add(expandedTerm, field, metadata)
            }

          }

          termFieldCache[termField] = true
        }
      }
    }

    /**
     * If the presence was required we need to update the requiredMatches field sets.
     * We do this after all fields for the term have collected their matches because
     * the clause terms presence is required in _any_ of the fields not _all_ of the
     * fields.
     */
    if (clause.presence === lunr.Query.presence.REQUIRED) {
      for (var k = 0; k < clause.fields.length; k++) {
        var field = clause.fields[k]
        requiredMatches[field] = requiredMatches[field].intersect(clauseMatches)
      }
    }
  }

  /**
   * Need to combine the field scoped required and prohibited
   * matching documents into a global set of required and prohibited
   * matches
   */
  var allRequiredMatches = lunr.Set.complete,
      allProhibitedMatches = lunr.Set.empty

  for (var i = 0; i < this.fields.length; i++) {
    var field = this.fields[i]

    if (requiredMatches[field]) {
      allRequiredMatches = allRequiredMatches.intersect(requiredMatches[field])
    }

    if (prohibitedMatches[field]) {
      allProhibitedMatches = allProhibitedMatches.union(prohibitedMatches[field])
    }
  }

  var matchingFieldRefs = Object.keys(matchingFields),
      results = [],
      matches = Object.create(null)

  /*
   * If the query is negated (contains only prohibited terms)
   * we need to get _all_ fieldRefs currently existing in the
   * index. This is only done when we know that the query is
   * entirely prohibited terms to avoid any cost of getting all
   * fieldRefs unnecessarily.
   *
   * Additionally, blank MatchData must be created to correctly
   * populate the results.
   */
  if (query.isNegated()) {
    matchingFieldRefs = Object.keys(this.fieldVectors)

    for (var i = 0; i < matchingFieldRefs.length; i++) {
      var matchingFieldRef = matchingFieldRefs[i]
      var fieldRef = lunr.FieldRef.fromString(matchingFieldRef)
      matchingFields[matchingFieldRef] = new lunr.MatchData
    }
  }

  for (var i = 0; i < matchingFieldRefs.length; i++) {
    /*
     * Currently we have document fields that match the query, but we
     * need to return documents. The matchData and scores are combined
     * from multiple fields belonging to the same document.
     *
     * Scores are calculated by field, using the query vectors created
     * above, and combined into a final document score using addition.
     */
    var fieldRef = lunr.FieldRef.fromString(matchingFieldRefs[i]),
        docRef = fieldRef.docRef

    if (!allRequiredMatches.contains(docRef)) {
      continue
    }

    if (allProhibitedMatches.contains(docRef)) {
      continue
    }

    var fieldVector = this.fieldVectors[fieldRef],
        score = queryVectors[fieldRef.fieldName].similarity(fieldVector),
        docMatch

    if ((docMatch = matches[docRef]) !== undefined) {
      docMatch.score += score
      docMatch.matchData.combine(matchingFields[fieldRef])
    } else {
      var match = {
        ref: docRef,
        score: score,
        matchData: matchingFields[fieldRef]
      }
      matches[docRef] = match
      results.push(match)
    }
  }

  /*
   * Sort the results objects by score, highest first.
   */
  return results.sort(function (a, b) {
    return b.score - a.score
  })
}

/**
 * Prepares the index for JSON serialization.
 *
 * The schema for this JSON blob will be described in a
 * separate JSON schema file.
 *
 * @returns {Object}
 */
lunr.Index.prototype.toJSON = function () {
  var invertedIndex = Object.keys(this.invertedIndex)
    .sort()
    .map(function (term) {
      return [term, this.invertedIndex[term]]
    }, this)

  var fieldVectors = Object.keys(this.fieldVectors)
    .map(function (ref) {
      return [ref, this.fieldVectors[ref].toJSON()]
    }, this)

  return {
    version: lunr.version,
    fields: this.fields,
    fieldVectors: fieldVectors,
    invertedIndex: invertedIndex,
    pipeline: this.pipeline.toJSON()
  }
}

/**
 * Loads a previously serialized lunr.Index
 *
 * @param {Object} serializedIndex - A previously serialized lunr.Index
 * @returns {lunr.Index}
 */
lunr.Index.load = function (serializedIndex) {
  var attrs = {},
      fieldVectors = {},
      serializedVectors = serializedIndex.fieldVectors,
      invertedIndex = Object.create(null),
      serializedInvertedIndex = serializedIndex.invertedIndex,
      tokenSetBuilder = new lunr.TokenSet.Builder,
      pipeline = lunr.Pipeline.load(serializedIndex.pipeline)

  if (serializedIndex.version != lunr.version) {
    lunr.utils.warn("Version mismatch when loading serialised index. Current version of lunr '" + lunr.version + "' does not match serialized index '" + serializedIndex.version + "'")
  }

  for (var i = 0; i < serializedVectors.length; i++) {
    var tuple = serializedVectors[i],
        ref = tuple[0],
        elements = tuple[1]

    fieldVectors[ref] = new lunr.Vector(elements)
  }

  for (var i = 0; i < serializedInvertedIndex.length; i++) {
    var tuple = serializedInvertedIndex[i],
        term = tuple[0],
        posting = tuple[1]

    tokenSetBuilder.insert(term)
    invertedIndex[term] = posting
  }

  tokenSetBuilder.finish()

  attrs.fields = serializedIndex.fields

  attrs.fieldVectors = fieldVectors
  attrs.invertedIndex = invertedIndex
  attrs.tokenSet = tokenSetBuilder.root
  attrs.pipeline = pipeline

  return new lunr.Index(attrs)
}
/*!
 * lunr.Builder
 * Copyright (C) 2020 Oliver Nightingale
 */

/**
 * lunr.Builder performs indexing on a set of documents and
 * returns instances of lunr.Index ready for querying.
 *
 * All configuration of the index is done via the builder, the
 * fields to index, the document reference, the text processing
 * pipeline and document scoring parameters are all set on the
 * builder before indexing.
 *
 * @constructor
 * @property {string} _ref - Internal reference to the document reference field.
 * @property {string[]} _fields - Internal reference to the document fields to index.
 * @property {object} invertedIndex - The inverted index maps terms to document fields.
 * @property {object} documentTermFrequencies - Keeps track of document term frequencies.
 * @property {object} documentLengths - Keeps track of the length of documents added to the index.
 * @property {lunr.tokenizer} tokenizer - Function for splitting strings into tokens for indexing.
 * @property {lunr.Pipeline} pipeline - The pipeline performs text processing on tokens before indexing.
 * @property {lunr.Pipeline} searchPipeline - A pipeline for processing search terms before querying the index.
 * @property {number} documentCount - Keeps track of the total number of documents indexed.
 * @property {number} _b - A parameter to control field length normalization, setting this to 0 disabled normalization, 1 fully normalizes field lengths, the default value is 0.75.
 * @property {number} _k1 - A parameter to control how quickly an increase in term frequency results in term frequency saturation, the default value is 1.2.
 * @property {number} termIndex - A counter incremented for each unique term, used to identify a terms position in the vector space.
 * @property {array} metadataWhitelist - A list of metadata keys that have been whitelisted for entry in the index.
 */
lunr.Builder = function () {
  this._ref = "id"
  this._fields = Object.create(null)
  this._documents = Object.create(null)
  this.invertedIndex = Object.create(null)
  this.fieldTermFrequencies = {}
  this.fieldLengths = {}
  this.tokenizer = lunr.tokenizer
  this.pipeline = new lunr.Pipeline
  this.searchPipeline = new lunr.Pipeline
  this.documentCount = 0
  this._b = 0.75
  this._k1 = 1.2
  this.termIndex = 0
  this.metadataWhitelist = []
}

/**
 * Sets the document field used as the document reference. Every document must have this field.
 * The type of this field in the document should be a string, if it is not a string it will be
 * coerced into a string by calling toString.
 *
 * The default ref is 'id'.
 *
 * The ref should _not_ be changed during indexing, it should be set before any documents are
 * added to the index. Changing it during indexing can lead to inconsistent results.
 *
 * @param {string} ref - The name of the reference field in the document.
 */
lunr.Builder.prototype.ref = function (ref) {
  this._ref = ref
}

/**
 * A function that is used to extract a field from a document.
 *
 * Lunr expects a field to be at the top level of a document, if however the field
 * is deeply nested within a document an extractor function can be used to extract
 * the right field for indexing.
 *
 * @callback fieldExtractor
 * @param {object} doc - The document being added to the index.
 * @returns {?(string|object|object[])} obj - The object that will be indexed for this field.
 * @example <caption>Extracting a nested field</caption>
 * function (doc) { return doc.nested.field }
 */

/**
 * Adds a field to the list of document fields that will be indexed. Every document being
 * indexed should have this field. Null values for this field in indexed documents will
 * not cause errors but will limit the chance of that document being retrieved by searches.
 *
 * All fields should be added before adding documents to the index. Adding fields after
 * a document has been indexed will have no effect on already indexed documents.
 *
 * Fields can be boosted at build time. This allows terms within that field to have more
 * importance when ranking search results. Use a field boost to specify that matches within
 * one field are more important than other fields.
 *
 * @param {string} fieldName - The name of a field to index in all documents.
 * @param {object} attributes - Optional attributes associated with this field.
 * @param {number} [attributes.boost=1] - Boost applied to all terms within this field.
 * @param {fieldExtractor} [attributes.extractor] - Function to extract a field from a document.
 * @throws {RangeError} fieldName cannot contain unsupported characters '/'
 */
lunr.Builder.prototype.field = function (fieldName, attributes) {
  if (/\//.test(fieldName)) {
    throw new RangeError ("Field '" + fieldName + "' contains illegal character '/'")
  }

  this._fields[fieldName] = attributes || {}
}

/**
 * A parameter to tune the amount of field length normalisation that is applied when
 * calculating relevance scores. A value of 0 will completely disable any normalisation
 * and a value of 1 will fully normalise field lengths. The default is 0.75. Values of b
 * will be clamped to the range 0 - 1.
 *
 * @param {number} number - The value to set for this tuning parameter.
 */
lunr.Builder.prototype.b = function (number) {
  if (number < 0) {
    this._b = 0
  } else if (number > 1) {
    this._b = 1
  } else {
    this._b = number
  }
}

/**
 * A parameter that controls the speed at which a rise in term frequency results in term
 * frequency saturation. The default value is 1.2. Setting this to a higher value will give
 * slower saturation levels, a lower value will result in quicker saturation.
 *
 * @param {number} number - The value to set for this tuning parameter.
 */
lunr.Builder.prototype.k1 = function (number) {
  this._k1 = number
}

/**
 * Adds a document to the index.
 *
 * Before adding fields to the index the index should have been fully setup, with the document
 * ref and all fields to index already having been specified.
 *
 * The document must have a field name as specified by the ref (by default this is 'id') and
 * it should have all fields defined for indexing, though null or undefined values will not
 * cause errors.
 *
 * Entire documents can be boosted at build time. Applying a boost to a document indicates that
 * this document should rank higher in search results than other documents.
 *
 * @param {object} doc - The document to add to the index.
 * @param {object} attributes - Optional attributes associated with this document.
 * @param {number} [attributes.boost=1] - Boost applied to all terms within this document.
 */
lunr.Builder.prototype.add = function (doc, attributes) {
  var docRef = doc[this._ref],
      fields = Object.keys(this._fields)

  this._documents[docRef] = attributes || {}
  this.documentCount += 1

  for (var i = 0; i < fields.length; i++) {
    var fieldName = fields[i],
        extractor = this._fields[fieldName].extractor,
        field = extractor ? extractor(doc) : doc[fieldName],
        tokens = this.tokenizer(field, {
          fields: [fieldName]
        }),
        terms = this.pipeline.run(tokens),
        fieldRef = new lunr.FieldRef (docRef, fieldName),
        fieldTerms = Object.create(null)

    this.fieldTermFrequencies[fieldRef] = fieldTerms
    this.fieldLengths[fieldRef] = 0

    // store the length of this field for this document
    this.fieldLengths[fieldRef] += terms.length

    // calculate term frequencies for this field
    for (var j = 0; j < terms.length; j++) {
      var term = terms[j]

      if (fieldTerms[term] == undefined) {
        fieldTerms[term] = 0
      }

      fieldTerms[term] += 1

      // add to inverted index
      // create an initial posting if one doesn't exist
      if (this.invertedIndex[term] == undefined) {
        var posting = Object.create(null)
        posting["_index"] = this.termIndex
        this.termIndex += 1

        for (var k = 0; k < fields.length; k++) {
          posting[fields[k]] = Object.create(null)
        }

        this.invertedIndex[term] = posting
      }

      // add an entry for this term/fieldName/docRef to the invertedIndex
      if (this.invertedIndex[term][fieldName][docRef] == undefined) {
        this.invertedIndex[term][fieldName][docRef] = Object.create(null)
      }

      // store all whitelisted metadata about this token in the
      // inverted index
      for (var l = 0; l < this.metadataWhitelist.length; l++) {
        var metadataKey = this.metadataWhitelist[l],
            metadata = term.metadata[metadataKey]

        if (this.invertedIndex[term][fieldName][docRef][metadataKey] == undefined) {
          this.invertedIndex[term][fieldName][docRef][metadataKey] = []
        }

        this.invertedIndex[term][fieldName][docRef][metadataKey].push(metadata)
      }
    }

  }
}

/**
 * Calculates the average document length for this index
 *
 * @private
 */
lunr.Builder.prototype.calculateAverageFieldLengths = function () {

  var fieldRefs = Object.keys(this.fieldLengths),
      numberOfFields = fieldRefs.length,
      accumulator = {},
      documentsWithField = {}

  for (var i = 0; i < numberOfFields; i++) {
    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),
        field = fieldRef.fieldName

    documentsWithField[field] || (documentsWithField[field] = 0)
    documentsWithField[field] += 1

    accumulator[field] || (accumulator[field] = 0)
    accumulator[field] += this.fieldLengths[fieldRef]
  }

  var fields = Object.keys(this._fields)

  for (var i = 0; i < fields.length; i++) {
    var fieldName = fields[i]
    accumulator[fieldName] = accumulator[fieldName] / documentsWithField[fieldName]
  }

  this.averageFieldLength = accumulator
}

/**
 * Builds a vector space model of every document using lunr.Vector
 *
 * @private
 */
lunr.Builder.prototype.createFieldVectors = function () {
  var fieldVectors = {},
      fieldRefs = Object.keys(this.fieldTermFrequencies),
      fieldRefsLength = fieldRefs.length,
      termIdfCache = Object.create(null)

  for (var i = 0; i < fieldRefsLength; i++) {
    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),
        fieldName = fieldRef.fieldName,
        fieldLength = this.fieldLengths[fieldRef],
        fieldVector = new lunr.Vector,
        termFrequencies = this.fieldTermFrequencies[fieldRef],
        terms = Object.keys(termFrequencies),
        termsLength = terms.length


    var fieldBoost = this._fields[fieldName].boost || 1,
        docBoost = this._documents[fieldRef.docRef].boost || 1

    for (var j = 0; j < termsLength; j++) {
      var term = terms[j],
          tf = termFrequencies[term],
          termIndex = this.invertedIndex[term]._index,
          idf, score, scoreWithPrecision

      if (termIdfCache[term] === undefined) {
        idf = lunr.idf(this.invertedIndex[term], this.documentCount)
        termIdfCache[term] = idf
      } else {
        idf = termIdfCache[term]
      }

      score = idf * ((this._k1 + 1) * tf) / (this._k1 * (1 - this._b + this._b * (fieldLength / this.averageFieldLength[fieldName])) + tf)
      score *= fieldBoost
      score *= docBoost
      scoreWithPrecision = Math.round(score * 1000) / 1000
      // Converts 1.23456789 to 1.234.
      // Reducing the precision so that the vectors take up less
      // space when serialised. Doing it now so that they behave
      // the same before and after serialisation. Also, this is
      // the fastest approach to reducing a number's precision in
      // JavaScript.

      fieldVector.insert(termIndex, scoreWithPrecision)
    }

    fieldVectors[fieldRef] = fieldVector
  }

  this.fieldVectors = fieldVectors
}

/**
 * Creates a token set of all tokens in the index using lunr.TokenSet
 *
 * @private
 */
lunr.Builder.prototype.createTokenSet = function () {
  this.tokenSet = lunr.TokenSet.fromArray(
    Object.keys(this.invertedIndex).sort()
  )
}

/**
 * Builds the index, creating an instance of lunr.Index.
 *
 * This completes the indexing process and should only be called
 * once all documents have been added to the index.
 *
 * @returns {lunr.Index}
 */
lunr.Builder.prototype.build = function () {
  this.calculateAverageFieldLengths()
  this.createFieldVectors()
  this.createTokenSet()

  return new lunr.Index({
    invertedIndex: this.invertedIndex,
    fieldVectors: this.fieldVectors,
    tokenSet: this.tokenSet,
    fields: Object.keys(this._fields),
    pipeline: this.searchPipeline
  })
}

/**
 * Applies a plugin to the index builder.
 *
 * A plugin is a function that is called with the index builder as its context.
 * Plugins can be used to customise or extend the behaviour of the index
 * in some way. A plugin is just a function, that encapsulated the custom
 * behaviour that should be applied when building the index.
 *
 * The plugin function will be called with the index builder as its argument, additional
 * arguments can also be passed when calling use. The function will be called
 * with the index builder as its context.
 *
 * @param {Function} plugin The plugin to apply.
 */
lunr.Builder.prototype.use = function (fn) {
  var args = Array.prototype.slice.call(arguments, 1)
  args.unshift(this)
  fn.apply(this, args)
}
/**
 * Contains and collects metadata about a matching document.
 * A single instance of lunr.MatchData is returned as part of every
 * lunr.Index~Result.
 *
 * @constructor
 * @param {string} term - The term this match data is associated with
 * @param {string} field - The field in which the term was found
 * @param {object} metadata - The metadata recorded about this term in this field
 * @property {object} metadata - A cloned collection of metadata associated with this document.
 * @see {@link lunr.Index~Result}
 */
lunr.MatchData = function (term, field, metadata) {
  var clonedMetadata = Object.create(null),
      metadataKeys = Object.keys(metadata || {})

  // Cloning the metadata to prevent the original
  // being mutated during match data combination.
  // Metadata is kept in an array within the inverted
  // index so cloning the data can be done with
  // Array#slice
  for (var i = 0; i < metadataKeys.length; i++) {
    var key = metadataKeys[i]
    clonedMetadata[key] = metadata[key].slice()
  }

  this.metadata = Object.create(null)

  if (term !== undefined) {
    this.metadata[term] = Object.create(null)
    this.metadata[term][field] = clonedMetadata
  }
}

/**
 * An instance of lunr.MatchData will be created for every term that matches a
 * document. However only one instance is required in a lunr.Index~Result. This
 * method combines metadata from another instance of lunr.MatchData with this
 * objects metadata.
 *
 * @param {lunr.MatchData} otherMatchData - Another instance of match data to merge with this one.
 * @see {@link lunr.Index~Result}
 */
lunr.MatchData.prototype.combine = function (otherMatchData) {
  var terms = Object.keys(otherMatchData.metadata)

  for (var i = 0; i < terms.length; i++) {
    var term = terms[i],
        fields = Object.keys(otherMatchData.metadata[term])

    if (this.metadata[term] == undefined) {
      this.metadata[term] = Object.create(null)
    }

    for (var j = 0; j < fields.length; j++) {
      var field = fields[j],
          keys = Object.keys(otherMatchData.metadata[term][field])

      if (this.metadata[term][field] == undefined) {
        this.metadata[term][field] = Object.create(null)
      }

      for (var k = 0; k < keys.length; k++) {
        var key = keys[k]

        if (this.metadata[term][field][key] == undefined) {
          this.metadata[term][field][key] = otherMatchData.metadata[term][field][key]
        } else {
          this.metadata[term][field][key] = this.metadata[term][field][key].concat(otherMatchData.metadata[term][field][key])
        }

      }
    }
  }
}

/**
 * Add metadata for a term/field pair to this instance of match data.
 *
 * @param {string} term - The term this match data is associated with
 * @param {string} field - The field in which the term was found
 * @param {object} metadata - The metadata recorded about this term in this field
 */
lunr.MatchData.prototype.add = function (term, field, metadata) {
  if (!(term in this.metadata)) {
    this.metadata[term] = Object.create(null)
    this.metadata[term][field] = metadata
    return
  }

  if (!(field in this.metadata[term])) {
    this.metadata[term][field] = metadata
    return
  }

  var metadataKeys = Object.keys(metadata)

  for (var i = 0; i < metadataKeys.length; i++) {
    var key = metadataKeys[i]

    if (key in this.metadata[term][field]) {
      this.metadata[term][field][key] = this.metadata[term][field][key].concat(metadata[key])
    } else {
      this.metadata[term][field][key] = metadata[key]
    }
  }
}
/**
 * A lunr.Query provides a programmatic way of defining queries to be performed
 * against a {@link lunr.Index}.
 *
 * Prefer constructing a lunr.Query using the {@link lunr.Index#query} method
 * so the query object is pre-initialized with the right index fields.
 *
 * @constructor
 * @property {lunr.Query~Clause[]} clauses - An array of query clauses.
 * @property {string[]} allFields - An array of all available fields in a lunr.Index.
 */
lunr.Query = function (allFields) {
  this.clauses = []
  this.allFields = allFields
}

/**
 * Constants for indicating what kind of automatic wildcard insertion will be used when constructing a query clause.
 *
 * This allows wildcards to be added to the beginning and end of a term without having to manually do any string
 * concatenation.
 *
 * The wildcard constants can be bitwise combined to select both leading and trailing wildcards.
 *
 * @constant
 * @default
 * @property {number} wildcard.NONE - The term will have no wildcards inserted, this is the default behaviour
 * @property {number} wildcard.LEADING - Prepend the term with a wildcard, unless a leading wildcard already exists
 * @property {number} wildcard.TRAILING - Append a wildcard to the term, unless a trailing wildcard already exists
 * @see lunr.Query~Clause
 * @see lunr.Query#clause
 * @see lunr.Query#term
 * @example <caption>query term with trailing wildcard</caption>
 * query.term('foo', { wildcard: lunr.Query.wildcard.TRAILING })
 * @example <caption>query term with leading and trailing wildcard</caption>
 * query.term('foo', {
 *   wildcard: lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING
 * })
 */

lunr.Query.wildcard = new String ("*")
lunr.Query.wildcard.NONE = 0
lunr.Query.wildcard.LEADING = 1
lunr.Query.wildcard.TRAILING = 2

/**
 * Constants for indicating what kind of presence a term must have in matching documents.
 *
 * @constant
 * @enum {number}
 * @see lunr.Query~Clause
 * @see lunr.Query#clause
 * @see lunr.Query#term
 * @example <caption>query term with required presence</caption>
 * query.term('foo', { presence: lunr.Query.presence.REQUIRED })
 */
lunr.Query.presence = {
  /**
   * Term's presence in a document is optional, this is the default value.
   */
  OPTIONAL: 1,

  /**
   * Term's presence in a document is required, documents that do not contain
   * this term will not be returned.
   */
  REQUIRED: 2,

  /**
   * Term's presence in a document is prohibited, documents that do contain
   * this term will not be returned.
   */
  PROHIBITED: 3
}

/**
 * A single clause in a {@link lunr.Query} contains a term and details on how to
 * match that term against a {@link lunr.Index}.
 *
 * @typedef {Object} lunr.Query~Clause
 * @property {string[]} fields - The fields in an index this clause should be matched against.
 * @property {number} [boost=1] - Any boost that should be applied when matching this clause.
 * @property {number} [editDistance] - Whether the term should have fuzzy matching applied, and how fuzzy the match should be.
 * @property {boolean} [usePipeline] - Whether the term should be passed through the search pipeline.
 * @property {number} [wildcard=lunr.Query.wildcard.NONE] - Whether the term should have wildcards appended or prepended.
 * @property {number} [presence=lunr.Query.presence.OPTIONAL] - The terms presence in any matching documents.
 */

/**
 * Adds a {@link lunr.Query~Clause} to this query.
 *
 * Unless the clause contains the fields to be matched all fields will be matched. In addition
 * a default boost of 1 is applied to the clause.
 *
 * @param {lunr.Query~Clause} clause - The clause to add to this query.
 * @see lunr.Query~Clause
 * @returns {lunr.Query}
 */
lunr.Query.prototype.clause = function (clause) {
  if (!('fields' in clause)) {
    clause.fields = this.allFields
  }

  if (!('boost' in clause)) {
    clause.boost = 1
  }

  if (!('usePipeline' in clause)) {
    clause.usePipeline = true
  }

  if (!('wildcard' in clause)) {
    clause.wildcard = lunr.Query.wildcard.NONE
  }

  if ((clause.wildcard & lunr.Query.wildcard.LEADING) && (clause.term.charAt(0) != lunr.Query.wildcard)) {
    clause.term = "*" + clause.term
  }

  if ((clause.wildcard & lunr.Query.wildcard.TRAILING) && (clause.term.slice(-1) != lunr.Query.wildcard)) {
    clause.term = "" + clause.term + "*"
  }

  if (!('presence' in clause)) {
    clause.presence = lunr.Query.presence.OPTIONAL
  }

  this.clauses.push(clause)

  return this
}

/**
 * A negated query is one in which every clause has a presence of
 * prohibited. These queries require some special processing to return
 * the expected results.
 *
 * @returns boolean
 */
lunr.Query.prototype.isNegated = function () {
  for (var i = 0; i < this.clauses.length; i++) {
    if (this.clauses[i].presence != lunr.Query.presence.PROHIBITED) {
      return false
    }
  }

  return true
}

/**
 * Adds a term to the current query, under the covers this will create a {@link lunr.Query~Clause}
 * to the list of clauses that make up this query.
 *
 * The term is used as is, i.e. no tokenization will be performed by this method. Instead conversion
 * to a token or token-like string should be done before calling this method.
 *
 * The term will be converted to a string by calling `toString`. Multiple terms can be passed as an
 * array, each term in the array will share the same options.
 *
 * @param {object|object[]} term - The term(s) to add to the query.
 * @param {object} [options] - Any additional properties to add to the query clause.
 * @returns {lunr.Query}
 * @see lunr.Query#clause
 * @see lunr.Query~Clause
 * @example <caption>adding a single term to a query</caption>
 * query.term("foo")
 * @example <caption>adding a single term to a query and specifying search fields, term boost and automatic trailing wildcard</caption>
 * query.term("foo", {
 *   fields: ["title"],
 *   boost: 10,
 *   wildcard: lunr.Query.wildcard.TRAILING
 * })
 * @example <caption>using lunr.tokenizer to convert a string to tokens before using them as terms</caption>
 * query.term(lunr.tokenizer("foo bar"))
 */
lunr.Query.prototype.term = function (term, options) {
  if (Array.isArray(term)) {
    term.forEach(function (t) { this.term(t, lunr.utils.clone(options)) }, this)
    return this
  }

  var clause = options || {}
  clause.term = term.toString()

  this.clause(clause)

  return this
}
lunr.QueryParseError = function (message, start, end) {
  this.name = "QueryParseError"
  this.message = message
  this.start = start
  this.end = end
}

lunr.QueryParseError.prototype = new Error
lunr.QueryLexer = function (str) {
  this.lexemes = []
  this.str = str
  this.length = str.length
  this.pos = 0
  this.start = 0
  this.escapeCharPositions = []
}

lunr.QueryLexer.prototype.run = function () {
  var state = lunr.QueryLexer.lexText

  while (state) {
    state = state(this)
  }
}

lunr.QueryLexer.prototype.sliceString = function () {
  var subSlices = [],
      sliceStart = this.start,
      sliceEnd = this.pos

  for (var i = 0; i < this.escapeCharPositions.length; i++) {
    sliceEnd = this.escapeCharPositions[i]
    subSlices.push(this.str.slice(sliceStart, sliceEnd))
    sliceStart = sliceEnd + 1
  }

  subSlices.push(this.str.slice(sliceStart, this.pos))
  this.escapeCharPositions.length = 0

  return subSlices.join('')
}

lunr.QueryLexer.prototype.emit = function (type) {
  this.lexemes.push({
    type: type,
    str: this.sliceString(),
    start: this.start,
    end: this.pos
  })

  this.start = this.pos
}

lunr.QueryLexer.prototype.escapeCharacter = function () {
  this.escapeCharPositions.push(this.pos - 1)
  this.pos += 1
}

lunr.QueryLexer.prototype.next = function () {
  if (this.pos >= this.length) {
    return lunr.QueryLexer.EOS
  }

  var char = this.str.charAt(this.pos)
  this.pos += 1
  return char
}

lunr.QueryLexer.prototype.width = function () {
  return this.pos - this.start
}

lunr.QueryLexer.prototype.ignore = function () {
  if (this.start == this.pos) {
    this.pos += 1
  }

  this.start = this.pos
}

lunr.QueryLexer.prototype.backup = function () {
  this.pos -= 1
}

lunr.QueryLexer.prototype.acceptDigitRun = function () {
  var char, charCode

  do {
    char = this.next()
    charCode = char.charCodeAt(0)
  } while (charCode > 47 && charCode < 58)

  if (char != lunr.QueryLexer.EOS) {
    this.backup()
  }
}

lunr.QueryLexer.prototype.more = function () {
  return this.pos < this.length
}

lunr.QueryLexer.EOS = 'EOS'
lunr.QueryLexer.FIELD = 'FIELD'
lunr.QueryLexer.TERM = 'TERM'
lunr.QueryLexer.EDIT_DISTANCE = 'EDIT_DISTANCE'
lunr.QueryLexer.BOOST = 'BOOST'
lunr.QueryLexer.PRESENCE = 'PRESENCE'

lunr.QueryLexer.lexField = function (lexer) {
  lexer.backup()
  lexer.emit(lunr.QueryLexer.FIELD)
  lexer.ignore()
  return lunr.QueryLexer.lexText
}

lunr.QueryLexer.lexTerm = function (lexer) {
  if (lexer.width() > 1) {
    lexer.backup()
    lexer.emit(lunr.QueryLexer.TERM)
  }

  lexer.ignore()

  if (lexer.more()) {
    return lunr.QueryLexer.lexText
  }
}

lunr.QueryLexer.lexEditDistance = function (lexer) {
  lexer.ignore()
  lexer.acceptDigitRun()
  lexer.emit(lunr.QueryLexer.EDIT_DISTANCE)
  return lunr.QueryLexer.lexText
}

lunr.QueryLexer.lexBoost = function (lexer) {
  lexer.ignore()
  lexer.acceptDigitRun()
  lexer.emit(lunr.QueryLexer.BOOST)
  return lunr.QueryLexer.lexText
}

lunr.QueryLexer.lexEOS = function (lexer) {
  if (lexer.width() > 0) {
    lexer.emit(lunr.QueryLexer.TERM)
  }
}

// This matches the separator used when tokenising fields
// within a document. These should match otherwise it is
// not possible to search for some tokens within a document.
//
// It is possible for the user to change the separator on the
// tokenizer so it _might_ clash with any other of the special
// characters already used within the search string, e.g. :.
//
// This means that it is possible to change the separator in
// such a way that makes some words unsearchable using a search
// string.
lunr.QueryLexer.termSeparator = lunr.tokenizer.separator

lunr.QueryLexer.lexText = function (lexer) {
  while (true) {
    var char = lexer.next()

    if (char == lunr.QueryLexer.EOS) {
      return lunr.QueryLexer.lexEOS
    }

    // Escape character is '\'
    if (char.charCodeAt(0) == 92) {
      lexer.escapeCharacter()
      continue
    }

    if (char == ":") {
      return lunr.QueryLexer.lexField
    }

    if (char == "~") {
      lexer.backup()
      if (lexer.width() > 0) {
        lexer.emit(lunr.QueryLexer.TERM)
      }
      return lunr.QueryLexer.lexEditDistance
    }

    if (char == "^") {
      lexer.backup()
      if (lexer.width() > 0) {
        lexer.emit(lunr.QueryLexer.TERM)
      }
      return lunr.QueryLexer.lexBoost
    }

    // "+" indicates term presence is required
    // checking for length to ensure that only
    // leading "+" are considered
    if (char == "+" && lexer.width() === 1) {
      lexer.emit(lunr.QueryLexer.PRESENCE)
      return lunr.QueryLexer.lexText
    }

    // "-" indicates term presence is prohibited
    // checking for length to ensure that only
    // leading "-" are considered
    if (char == "-" && lexer.width() === 1) {
      lexer.emit(lunr.QueryLexer.PRESENCE)
      return lunr.QueryLexer.lexText
    }

    if (char.match(lunr.QueryLexer.termSeparator)) {
      return lunr.QueryLexer.lexTerm
    }
  }
}

lunr.QueryParser = function (str, query) {
  this.lexer = new lunr.QueryLexer (str)
  this.query = query
  this.currentClause = {}
  this.lexemeIdx = 0
}

lunr.QueryParser.prototype.parse = function () {
  this.lexer.run()
  this.lexemes = this.lexer.lexemes

  var state = lunr.QueryParser.parseClause

  while (state) {
    state = state(this)
  }

  return this.query
}

lunr.QueryParser.prototype.peekLexeme = function () {
  return this.lexemes[this.lexemeIdx]
}

lunr.QueryParser.prototype.consumeLexeme = function () {
  var lexeme = this.peekLexeme()
  this.lexemeIdx += 1
  return lexeme
}

lunr.QueryParser.prototype.nextClause = function () {
  var completedClause = this.currentClause
  this.query.clause(completedClause)
  this.currentClause = {}
}

lunr.QueryParser.parseClause = function (parser) {
  var lexeme = parser.peekLexeme()

  if (lexeme == undefined) {
    return
  }

  switch (lexeme.type) {
    case lunr.QueryLexer.PRESENCE:
      return lunr.QueryParser.parsePresence
    case lunr.QueryLexer.FIELD:
      return lunr.QueryParser.parseField
    case lunr.QueryLexer.TERM:
      return lunr.QueryParser.parseTerm
    default:
      var errorMessage = "expected either a field or a term, found " + lexeme.type

      if (lexeme.str.length >= 1) {
        errorMessage += " with value '" + lexeme.str + "'"
      }

      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
  }
}

lunr.QueryParser.parsePresence = function (parser) {
  var lexeme = parser.consumeLexeme()

  if (lexeme == undefined) {
    return
  }

  switch (lexeme.str) {
    case "-":
      parser.currentClause.presence = lunr.Query.presence.PROHIBITED
      break
    case "+":
      parser.currentClause.presence = lunr.Query.presence.REQUIRED
      break
    default:
      var errorMessage = "unrecognised presence operator'" + lexeme.str + "'"
      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
  }

  var nextLexeme = parser.peekLexeme()

  if (nextLexeme == undefined) {
    var errorMessage = "expecting term or field, found nothing"
    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
  }

  switch (nextLexeme.type) {
    case lunr.QueryLexer.FIELD:
      return lunr.QueryParser.parseField
    case lunr.QueryLexer.TERM:
      return lunr.QueryParser.parseTerm
    default:
      var errorMessage = "expecting term or field, found '" + nextLexeme.type + "'"
      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)
  }
}

lunr.QueryParser.parseField = function (parser) {
  var lexeme = parser.consumeLexeme()

  if (lexeme == undefined) {
    return
  }

  if (parser.query.allFields.indexOf(lexeme.str) == -1) {
    var possibleFields = parser.query.allFields.map(function (f) { return "'" + f + "'" }).join(', '),
        errorMessage = "unrecognised field '" + lexeme.str + "', possible fields: " + possibleFields

    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
  }

  parser.currentClause.fields = [lexeme.str]

  var nextLexeme = parser.peekLexeme()

  if (nextLexeme == undefined) {
    var errorMessage = "expecting term, found nothing"
    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
  }

  switch (nextLexeme.type) {
    case lunr.QueryLexer.TERM:
      return lunr.QueryParser.parseTerm
    default:
      var errorMessage = "expecting term, found '" + nextLexeme.type + "'"
      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)
  }
}

lunr.QueryParser.parseTerm = function (parser) {
  var lexeme = parser.consumeLexeme()

  if (lexeme == undefined) {
    return
  }

  parser.currentClause.term = lexeme.str.toLowerCase()

  if (lexeme.str.indexOf("*") != -1) {
    parser.currentClause.usePipeline = false
  }

  var nextLexeme = parser.peekLexeme()

  if (nextLexeme == undefined) {
    parser.nextClause()
    return
  }

  switch (nextLexeme.type) {
    case lunr.QueryLexer.TERM:
      parser.nextClause()
      return lunr.QueryParser.parseTerm
    case lunr.QueryLexer.FIELD:
      parser.nextClause()
      return lunr.QueryParser.parseField
    case lunr.QueryLexer.EDIT_DISTANCE:
      return lunr.QueryParser.parseEditDistance
    case lunr.QueryLexer.BOOST:
      return lunr.QueryParser.parseBoost
    case lunr.QueryLexer.PRESENCE:
      parser.nextClause()
      return lunr.QueryParser.parsePresence
    default:
      var errorMessage = "Unexpected lexeme type '" + nextLexeme.type + "'"
      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)
  }
}

lunr.QueryParser.parseEditDistance = function (parser) {
  var lexeme = parser.consumeLexeme()

  if (lexeme == undefined) {
    return
  }

  var editDistance = parseInt(lexeme.str, 10)

  if (isNaN(editDistance)) {
    var errorMessage = "edit distance must be numeric"
    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
  }

  parser.currentClause.editDistance = editDistance

  var nextLexeme = parser.peekLexeme()

  if (nextLexeme == undefined) {
    parser.nextClause()
    return
  }

  switch (nextLexeme.type) {
    case lunr.QueryLexer.TERM:
      parser.nextClause()
      return lunr.QueryParser.parseTerm
    case lunr.QueryLexer.FIELD:
      parser.nextClause()
      return lunr.QueryParser.parseField
    case lunr.QueryLexer.EDIT_DISTANCE:
      return lunr.QueryParser.parseEditDistance
    case lunr.QueryLexer.BOOST:
      return lunr.QueryParser.parseBoost
    case lunr.QueryLexer.PRESENCE:
      parser.nextClause()
      return lunr.QueryParser.parsePresence
    default:
      var errorMessage = "Unexpected lexeme type '" + nextLexeme.type + "'"
      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)
  }
}

lunr.QueryParser.parseBoost = function (parser) {
  var lexeme = parser.consumeLexeme()

  if (lexeme == undefined) {
    return
  }

  var boost = parseInt(lexeme.str, 10)

  if (isNaN(boost)) {
    var errorMessage = "boost must be numeric"
    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
  }

  parser.currentClause.boost = boost

  var nextLexeme = parser.peekLexeme()

  if (nextLexeme == undefined) {
    parser.nextClause()
    return
  }

  switch (nextLexeme.type) {
    case lunr.QueryLexer.TERM:
      parser.nextClause()
      return lunr.QueryParser.parseTerm
    case lunr.QueryLexer.FIELD:
      parser.nextClause()
      return lunr.QueryParser.parseField
    case lunr.QueryLexer.EDIT_DISTANCE:
      return lunr.QueryParser.parseEditDistance
    case lunr.QueryLexer.BOOST:
      return lunr.QueryParser.parseBoost
    case lunr.QueryLexer.PRESENCE:
      parser.nextClause()
      return lunr.QueryParser.parsePresence
    default:
      var errorMessage = "Unexpected lexeme type '" + nextLexeme.type + "'"
      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)
  }
}

  /**
   * export the module via AMD, CommonJS or as a browser global
   * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js
   */
  ;(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
      // AMD. Register as an anonymous module.
      define(factory)
    } else if (typeof exports === 'object') {
      /**
       * Node. Does not work with strict CommonJS, but
       * only CommonJS-like enviroments that support module.exports,
       * like Node.
       */
      module.exports = factory()
    } else {
      // Browser globals (root is window)
      root.lunr = factory()
    }
  }(this, function () {
    /**
     * Just return a value to define the module export.
     * This example returns an object, but the module
     * can return a function as the exported value.
     */
    return lunr
  }))
})();

})((function(){ function newDefine(){ var args = Array.prototype.slice.call(arguments); args.unshift("lunr"); return define.apply(null, args); }; newDefine.amd = true; return newDefine; })());
;/* eslint-env node */
/* eslint-disable no-undef */

self.deprecationWorkflow = self.deprecationWorkflow || {};
self.deprecationWorkflow.config = {
  workflow: [
    { handler: 'silence', matchId: 'ember.built-in-components.import' },
    { handler: 'silence', matchId: 'ember-keyboard.first-responder-inputs' },
    { handler: 'silence', matchId: 'ember.built-in-components.reopen' },
  ],
};

;/* globals self */

const LOG_LIMIT = 100;

(function(){
  self.deprecationWorkflow = self.deprecationWorkflow || {};
  self.deprecationWorkflow.deprecationLog = {
    messages: { }
  };
  self.deprecationWorkflow.logCounts = {};

  function detectWorkflow(config, message, options) {
    if (!config || !config.workflow) {
      return;
    }

    let i, workflow, matcher, idMatcher;
    for (i=0; i<config.workflow.length; i++) {
      workflow = config.workflow[i];
      matcher = workflow.matchMessage;
      idMatcher = workflow.matchId;

      if (typeof idMatcher === 'string' && options && idMatcher === options.id) {
        return workflow;
      } else if (typeof matcher === 'string' && matcher === message) {
        return workflow;
      } else if (matcher instanceof RegExp && matcher.exec(message)) {
        return workflow;
      }
    }
  }

  let registerDeprecationHandler = require.has('@ember/debug') ? require('@ember/debug').registerDeprecationHandler : Ember.Debug.registerDeprecationHandler;

  registerDeprecationHandler(function handleDeprecationWorkflow(message, options, next){
    let config = self.deprecationWorkflow.config || {};

    let matchingWorkflow = detectWorkflow(config, message, options);
    if (!matchingWorkflow) {
      if (config && config.throwOnUnhandled) {
        throw new Error(message);
      } else {
        next(message, options);
      }
    } else {
      switch(matchingWorkflow.handler) {
        case 'silence':
          // no-op
          break;
        case 'log': {
          let key = (options && options.id) || message;
          let count = self.deprecationWorkflow.logCounts[key] || 0;
          self.deprecationWorkflow.logCounts[key] = ++count;

          if (count <= LOG_LIMIT) {
            console.warn('DEPRECATION: ' + message);
            if (count === LOG_LIMIT) {
              console.warn('To avoid console overflow, this deprecation will not be logged any more in this run.');
            }
          }

          break;
        }
        case 'throw':
          throw new Error(message);
        default:
          next(message, options);
          break;
      }
    }
  });

  registerDeprecationHandler(function deprecationCollector(message, options, next){
    let key = options && options.id || message;
    let matchKey = options && key === options.id ? 'matchId' : 'matchMessage';

    self.deprecationWorkflow.deprecationLog.messages[key] = '    { handler: "silence", ' + matchKey + ': ' + JSON.stringify(key) + ' }';
    next(message, options);
  });

  let preamble = [
    'self.deprecationWorkflow = self.deprecationWorkflow || {};',
    'self.deprecationWorkflow.config = {\n  workflow: [\n',
  ].join('\n');

  let postamble = [
    '  ]\n};'
  ].join('\n');

  self.deprecationWorkflow.flushDeprecations = function flushDeprecations() {
    let messages = self.deprecationWorkflow.deprecationLog.messages;
    let logs = [];

    for (let message in messages) {
      logs.push(messages[message]);
    }

    let deprecations = logs.join(',\n') + '\n';

    return preamble + deprecations + postamble;
  };
})();

;define("@ember-decorators/component/index", ["exports", "@ember/debug", "@ember-decorators/utils/collapse-proto", "@ember-decorators/utils/decorator"], function (_exports, _debug, _collapseProto, _decorator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.tagName = _exports.layout = _exports.classNames = _exports.classNameBindings = _exports.className = _exports.attributeBindings = _exports.attribute = void 0;
  /**
    Decorator which indicates that the field or computed should be bound
    to an attribute value on the component. This replaces `attributeBindings`
    by directly allowing you to specify which properties should be bound.
    ```js
    export default class AttributeDemoComponent extends Component {
      @attribute role = 'button';
      // With provided attribute name
      @attribute('data-foo') foo = 'lol';
      @attribute
      @computed
      get id() {
        // return generated id
      }
    }
    ```
    @function
    @param {string} name? - The name of the attribute to bind the value to if it is truthy
  */
  const attribute = _exports.attribute = (0, _decorator.decoratorWithParams)((target, key, desc, params = []) => {
    (true && !(params.length <= 1) && (0, _debug.assert)(`The @attribute decorator may take up to one parameter, the bound attribute name. Received: ${params.length}`, params.length <= 1));
    (true && !(params.every(s => typeof s === 'string')) && (0, _debug.assert)(`The @attribute decorator may only receive strings as parameters. Received: ${params}`, params.every(s => typeof s === 'string')));
    (0, _collapseProto.default)(target);
    if (!target.hasOwnProperty('attributeBindings')) {
      let parentValue = target.attributeBindings;
      target.attributeBindings = Array.isArray(parentValue) ? parentValue.slice() : [];
    }
    let binding = params[0] ? `${key}:${params[0]}` : key;
    target.attributeBindings.push(binding);
    if (desc) {
      // Decorated fields are currently not configurable in Babel for some reason, so ensure
      // that the field becomes configurable (else it messes with things)
      desc.configurable = true;
    }
    return desc;
  });

  /**
    Decorator which indicates that the field or computed should be bound to
    the component class names. This replaces `classNameBindings` by directly
    allowing you to specify which properties should be bound.
    ```js
    export default class ClassNameDemoComponent extends Component {
      @className boundField = 'default-class';
      // With provided true/false class names
      @className('active', 'inactive') isActive = true;
      @className
      @computed
      get boundComputed() {
        // return generated class
      }
    }
    ```
    @function
    @param {string} truthyName? - The class to be applied if the value the field
                                  is truthy, defaults to the name of the field.
    @param {string} falsyName? - The class to be applied if the value of the field
                                 is falsy.
  */
  const className = _exports.className = (0, _decorator.decoratorWithParams)((target, key, desc, params = []) => {
    (true && !(params.length <= 2) && (0, _debug.assert)(`The @className decorator may take up to two parameters, the truthy class and falsy class for the class binding. Received: ${params.length}`, params.length <= 2));
    (true && !(params.every(s => typeof s === 'string')) && (0, _debug.assert)(`The @className decorator may only receive strings as parameters. Received: ${params}`, params.every(s => typeof s === 'string')));
    (0, _collapseProto.default)(target);
    if (!target.hasOwnProperty('classNameBindings')) {
      let parentValue = target.classNameBindings;
      target.classNameBindings = Array.isArray(parentValue) ? parentValue.slice() : [];
    }
    let binding = params.length > 0 ? `${key}:${params.join(':')}` : key;
    target.classNameBindings.push(binding);
    if (desc) {
      // Decorated fields are currently not configurable in Babel for some reason, so ensure
      // that the field becomes configurable (else it messes with things)
      desc.configurable = true;
    }
    return desc;
  });
  function concattedPropDecorator(propName) {
    return (0, _decorator.decoratorWithRequiredParams)((target, propValues) => {
      (true && !(propValues.reduce((allStrings, name) => allStrings && typeof name === 'string', true)) && (0, _debug.assert)(`The @${propName} decorator must be provided strings, received: ${propValues}`, propValues.reduce((allStrings, name) => allStrings && typeof name === 'string', true)));
      (0, _collapseProto.default)(target.prototype);
      if (propName in target.prototype) {
        let parentValues = target.prototype[propName];
        propValues.unshift(...parentValues);
      }
      target.prototype[propName] = propValues;
      return target;
    }, propName);
  }

  /**
    Class decorator which specifies the class names to be applied to a component.
    This replaces the `classNames` property on components in the traditional Ember
    object model.
    ```js
    @classNames('a-static-class', 'another-static-class')
    export default class ClassNamesDemoComponent extends Component {}
    ```
    @function
    @param {...string} classNames - The list of classes to be applied to the component
  */
  const classNames = _exports.classNames = concattedPropDecorator('classNames');

  /**
    Class decorator which specifies the class name bindings to be applied to a
    component. This replaces the `classNameBindings` property on components in the
    traditional Ember object model.
    ```js
    @classNameBindings('aDynamicProperty:truthy-class-name:falsy-class-name')
    export default class ClassNamesDemoComponent extends Component {}
    ```
    @function
    @param {...string} classNameBindings - The list of class name bindings to be applied to the component
  */
  const classNameBindings = _exports.classNameBindings = concattedPropDecorator('classNameBindings');

  /**
    Class decorator which specifies the attribute bindings to be applied to a
    component. This replaces the `attributeBindings` property on components in the
    traditional Ember object model.
    ```js
    @attributeBindings('role', 'aProperty:a-different-attribute')
    export default class ClassNamesDemoComponent extends Component {}
    ```
    @function
    @param {...string} attributeBindings - The list of attribute bindings to be applied to the component
  */
  const attributeBindings = _exports.attributeBindings = concattedPropDecorator('attributeBindings');

  /**
    Class decorator which specifies the tag name of the component. This replaces
    the `tagName` property on components in the traditional Ember object model.
    ```js
    @tagName('button')
    export default class TagNameDemoComponent extends Component {}
    ```
    @function
    @param {string} tagName - The HTML tag to be used for the component
  */
  const tagName = _exports.tagName = (0, _decorator.decoratorWithRequiredParams)((target, params) => {
    let [tagName] = params;
    (true && !(params.length === 1) && (0, _debug.assert)(`The @tagName decorator must be provided exactly one argument, received: ${tagName}`, params.length === 1));
    (true && !(typeof tagName === 'string') && (0, _debug.assert)(`The @tagName decorator must be provided a string, received: ${tagName}`, typeof tagName === 'string'));
    target.prototype.tagName = tagName;
    return target;
  }, 'tagName');

  /**
    Class decorator which specifies the layout for the component. This replaces
    the `layout` property on components in the traditional Ember object model.
    ```js
    import template from '../templates/components/x-foo';
    @layout(template)
    export default class TagNameDemoComponent extends Component {}
    ```
    ```js
    import hbs from 'htmlbars-inline-precompile';
    @layout(hbs`<h1>Hello {{ name }}</h1>`)
    export default class TagNameDemoComponent extends Component {
      constructor() {
        super(...arguments);
        this.set('name', 'Tomster');
      }
    }
    ```
    @function
    @param {TemplateFactory} template - The compiled template to be used for the component
  */
  const layout = (...params) => target => {
    let [template] = params;
    (true && !(params.length === 1) && (0, _debug.assert)(`The @layout decorator must be provided exactly one argument, received: ${params.length}`, params.length === 1));
    (true && !(typeof template !== 'string') && (0, _debug.assert)(`The @layout decorator must be provided a template, received: ${template}. If you want to compile strings to templates, be sure to use 'htmlbars-inline-precompile'`, typeof template !== 'string'));
    (true && !(typeof template === 'function' || typeof template === 'object' && typeof template.indexOf === 'undefined') && (0, _debug.assert)(`The @layout decorator must be provided a template, received: ${template}`, typeof template === 'function' || typeof template === 'object' && typeof template.indexOf === 'undefined'));
    target.prototype.layout = template;
    return target;
  };
  _exports.layout = layout;
});
;define("@ember-decorators/object/index", ["exports", "@ember/debug", "@ember/object", "@ember/object/computed", "@ember/object/events", "@ember/object/observers", "@ember-decorators/utils/decorator"], function (_exports, _debug, _object, _computed, _events, _observers, _decorator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.unobserves = _exports.on = _exports.off = _exports.observes = void 0;
  /**
    Triggers the target function when the dependent properties have changed. Note,
    `@observes` _must_ be used on EmberObject based classes only, otherwise there
    may be subtle issues and breakage.
  
    ```javascript
    import { observes } from '@ember-decorators/object';
  
    class Foo {
      @observes('foo')
      bar() {
        //...
      }
    }
    ```
  
    @function
    @param {...String} propertyNames - Names of the properties that trigger the function
   */
  const observes = _exports.observes = (0, _decorator.decoratorWithRequiredParams)((target, key, desc, params) => {
    (true && !(desc && typeof desc.value === 'function') && (0, _debug.assert)('The @observes decorator must be applied to functions', desc && typeof desc.value === 'function'));
    (true && !(target instanceof _object.default) && (0, _debug.assert)(`You attempted to use @observes on ${target.constructor.name}#${key}, which does not extend from EmberObject. Unfortunately this does not work with stage 1 decorator transforms, and will break in subtle ways. You must rewrite your class to extend from EmberObject.`, target instanceof _object.default));
    for (let path of params) {
      (0, _computed.expandProperties)(path, expandedPath => {
        (0, _observers.addObserver)(target, expandedPath, null, key);
      });
    }
    return desc;
  }, 'observes');

  /**
    Removes observers from the target function.
  
    ```javascript
    import { observes, unobserves } from '@ember-decorators/object';
  
    class Foo {
      @observes('foo')
      bar() {
        //...
      }
    }
  
    class Bar extends Foo {
      @unobserves('foo') bar;
    }
    ```
  
    @function
    @param {...String} propertyNames - Names of the properties that no longer trigger the function
   */
  const unobserves = _exports.unobserves = (0, _decorator.decoratorWithRequiredParams)((target, key, desc, params) => {
    for (let path of params) {
      (0, _computed.expandProperties)(path, expandedPath => {
        (0, _observers.removeObserver)(target, expandedPath, null, key);
      });
    }
    return desc;
  }, 'unobserves');

  /**
    Adds an event listener to the target function.
  
    ```javascript
    import { on } from '@ember-decorators/object';
  
    class Foo {
      @on('fooEvent', 'barEvent')
      bar() {
        //...
      }
    }
    ```
  
    @function
    @param {...String} eventNames - Names of the events that trigger the function
   */
  const on = _exports.on = (0, _decorator.decoratorWithRequiredParams)((target, key, desc, params) => {
    (true && !(desc && typeof desc.value === 'function') && (0, _debug.assert)('The @on decorator must be applied to functions', desc && typeof desc.value === 'function'));
    for (let eventName of params) {
      (0, _events.addListener)(target, eventName, null, key);
    }
    return desc;
  }, 'on');

  /**
    Removes an event listener from the target function.
  
    ```javascript
    import { on, off } from '@ember-decorators/object';
  
    class Foo {
      @on('fooEvent', 'barEvent')
      bar() {
        //...
      }
    }
  
    class Bar extends Foo {
      @off('fooEvent', 'barEvent') bar;
    }
    ```
  
    @function
    @param {...String} eventNames - Names of the events that no longer trigger the function
   */
  const off = _exports.off = (0, _decorator.decoratorWithRequiredParams)((target, key, desc, params) => {
    for (let eventName of params) {
      (0, _events.removeListener)(target, eventName, null, key);
    }
    return desc;
  }, 'off');
});
;define("@ember-decorators/utils/-private/class-field-descriptor", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isDescriptor = isDescriptor;
  _exports.isFieldDescriptor = isFieldDescriptor;
  function isClassDescriptor(possibleDesc) {
    let [target] = possibleDesc;
    return possibleDesc.length === 1 && typeof target === 'function' && 'prototype' in target && !target.__isComputedDecorator;
  }
  function isFieldDescriptor(possibleDesc) {
    let [target, key, desc] = possibleDesc;
    return possibleDesc.length === 3 && typeof target === 'object' && target !== null && typeof key === 'string' && (typeof desc === 'object' && desc !== null && 'enumerable' in desc && 'configurable' in desc || desc === undefined) // TS compatibility
    ;
  }
  function isDescriptor(possibleDesc) {
    return isFieldDescriptor(possibleDesc) || isClassDescriptor(possibleDesc);
  }
});
;define("@ember-decorators/utils/collapse-proto", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = collapseProto;
  function collapseProto(target) {
    // We must collapse the superclass prototype to make sure that the `actions`
    // object will exist. Since collapsing doesn't generally happen until a class is
    // instantiated, we have to do it manually.
    if (typeof target.constructor.proto === 'function') {
      target.constructor.proto();
    }
  }
});
;define("@ember-decorators/utils/decorator", ["exports", "@ember/debug", "@ember-decorators/utils/-private/class-field-descriptor"], function (_exports, _debug, _classFieldDescriptor) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.decoratorWithParams = decoratorWithParams;
  _exports.decoratorWithRequiredParams = decoratorWithRequiredParams;
  /**
   * A macro that takes a decorator function and allows it to optionally
   * receive parameters
   *
   * ```js
   * let foo = decoratorWithParams((target, desc, key, params) => {
   *   console.log(params);
   * });
   *
   * class {
   *   @foo bar; // undefined
   *   @foo('bar') baz; // ['bar']
   * }
   * ```
   *
   * @param {Function} fn - decorator function
   */
  function decoratorWithParams(fn) {
    return function (...params) {
      // determine if user called as @computed('blah', 'blah') or @computed
      if ((0, _classFieldDescriptor.isDescriptor)(params)) {
        return fn(...params);
      } else {
        return (...desc) => fn(...desc, params);
      }
    };
  }

  /**
   * A macro that takes a decorator function and requires it to receive
   * parameters:
   *
   * ```js
   * let foo = decoratorWithRequiredParams((target, desc, key, params) => {
   *   console.log(params);
   * });
   *
   * class {
   *   @foo('bar') baz; // ['bar']
   *   @foo bar; // Error
   * }
   * ```
   *
   * @param {Function} fn - decorator function
   */
  function decoratorWithRequiredParams(fn, name) {
    return function (...params) {
      (true && !(!(0, _classFieldDescriptor.isDescriptor)(params) && params.length > 0) && (0, _debug.assert)(`The @${name || fn.name} decorator requires parameters`, !(0, _classFieldDescriptor.isDescriptor)(params) && params.length > 0));
      return (...desc) => fn(...desc, params);
    };
  }
});
;define("@ember/render-modifiers/modifiers/did-insert", ["exports", "@ember/modifier"], function (_exports, _modifier) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    The `{{did-insert}}` element modifier is activated when an element is
    inserted into the DOM.
  
    In this example, the `fadeIn` function receives the `div` DOM element as its
    first argument and is executed after the element is inserted into the DOM.
  
    ```handlebars
    <div {{did-insert this.fadeIn}} class="alert">
      {{yield}}
    </div>
    ```
  
    ```js
    export default Component.extend({
      fadeIn(element) {
        element.classList.add('fade-in');
      }
    });
    ```
  
    By default, the executed function will be unbound. If you would like to access
    the component context in your function, use the `action` decorator as follows:
  
    ```handlebars
    <div {{did-insert this.incrementCount}}>first</div>
    <div {{did-insert this.incrementCount}}>second</div>
  
    <p>{{this.count}} elements were rendered</p>
    ```
  
    ```js
    export default Component.extend({
      count: tracked({ value: 0 }),
  
      incrementCount: action(function() {
        this.count++;
      })
    });
    ```
  
    @method did-insert
    @public
  */
  var _default = _exports.default = (0, _modifier.setModifierManager)(() => ({
    capabilities: (0, _modifier.capabilities)('3.22', {
      disableAutoTracking: true
    }),
    createModifier() {},
    installModifier(_state, element, {
      positional: [fn, ...args],
      named
    }) {
      fn(element, args, named);
    },
    updateModifier() {},
    destroyModifier() {}
  }), class DidInsertModifier {});
});
;define("@ember/render-modifiers/modifiers/did-update", ["exports", "@ember/modifier", "@embroider/macros/es-compat2"], function (_exports, _modifier, _esCompat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const untrack = function () {
    {
      // ember-source@3.27 shipped "real modules" by default, so we can just use
      // importSync to get @glimmer/validator directly
      return (0, _esCompat.default)(require("@glimmer/validator")).untrack;
    }
  }();

  /**
    The `{{did-update}}` element modifier is activated when any of its arguments
    are updated. It does not run on initial render.
  
    In this example, the `resize` function receives the `textarea` DOM element as its
    first argument and is executed anytime the `@text` argument changes.
  
    ```handlebars
    <textarea {{did-update this.resize @text}} readonly style="padding: 0px;">
      {{@text}}
    </textarea>
    ```
  
    ```js
    export default Component.extend({
      resize(element) {
        element.style.height = `${element.scrollHeight}px`;
      }
    });
    ```
  
    In addition to the `element`, both named and positional arguments are passed to the
    executed function:
  
    ```handlebars
    <div {{did-update this.logArguments @first @second third=@third}} />
    ```
  
    ```js
    export default Component.extend({
      logArguments(element, [first, second], { third }) {
        console.log('element', element);
        console.log('positional args', first, second);
        console.log('names args', third);
      }
    });
    ```
  
    By default, the executed function will be unbound. If you would like to access
    the component context in your function, use the `action` decorator as follows:
  
    ```handlebars
    <div {{did-update this.someFunction @someArg} />
    ```
  
    ```js
    export default Component.extend({
      someFunction: action(function(element, [someArg]) {
        // the `this` context will be the component instance
      })
    });
    ```
  
    @method did-update
    @public
  */
  var _default = _exports.default = (0, _modifier.setModifierManager)(() => ({
    capabilities: (0, _modifier.capabilities)('3.22', {
      disableAutoTracking: false
    }),
    createModifier() {
      return {
        element: null
      };
    },
    installModifier(state, element, args) {
      // save element into state bucket
      state.element = element;
      {
        // Consume individual properties to entangle tracking.
        // https://github.com/emberjs/ember.js/issues/19277
        // https://github.com/ember-modifier/ember-modifier/pull/63#issuecomment-815908201
        args.positional.forEach(() => {});
        args.named && Object.values(args.named);
      }
    },
    updateModifier({
      element
    }, args) {
      let [fn, ...positional] = args.positional;
      {
        // Consume individual properties to entangle tracking.
        // https://github.com/emberjs/ember.js/issues/19277
        // https://github.com/ember-modifier/ember-modifier/pull/63#issuecomment-815908201
        args.positional.forEach(() => {});
        args.named && Object.values(args.named);
        untrack(() => {
          fn(element, positional, args.named);
        });
      }
    },
    destroyModifier() {}
  }), class DidUpdateModifier {});
});
;define("@ember/render-modifiers/modifiers/will-destroy", ["exports", "@ember/modifier"], function (_exports, _modifier) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    The `{{will-destroy}}` element modifier is activated immediately before the element
    is removed from the DOM.
  
    ```handlebars
    <div {{will-destroy this.teardownPlugin}}>
      {{yield}}
    </div>
    ```
  
    ```js
    export default Component.extend({
      teardownPlugin(element) {
        // teardown logic here
      }
    });
    ```
  
    By default, the executed function will be unbound. If you would like to access
    the component context in your function, use the `action` decorator as follows:
  
    ```handlebars
    <div {{will-destroy this.teardownPlugin}}>
      {{yield}}
    </div>
    ```
  
    ```js
    export default Component.extend({
      teardownPlugin: action(function(element) {
        // the `this` context will be the component instance
      })
    });
    ```
  
    @method will-destroy
    @public
  */
  var _default = _exports.default = (0, _modifier.setModifierManager)(() => ({
    capabilities: (0, _modifier.capabilities)('3.22', {
      disableAutoTracking: true
    }),
    createModifier() {
      return {
        element: null
      };
    },
    installModifier(state, element) {
      state.element = element;
    },
    updateModifier() {},
    destroyModifier({
      element
    }, args) {
      let [fn, ...positional] = args.positional;
      fn(element, positional, args.named);
    }
  }), class WillDestroyModifier {});
});
;define("@ember/string/cache", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  class Cache {
    constructor(limit, func, store) {
      _defineProperty(this, "size", 0);
      _defineProperty(this, "misses", 0);
      _defineProperty(this, "hits", 0);
      this.limit = limit;
      this.func = func;
      this.store = store;
      this.store = store || new Map();
    }
    get(key) {
      let value = this.store.get(key);
      if (this.store.has(key)) {
        this.hits++;
        return this.store.get(key);
      } else {
        this.misses++;
        value = this.set(key, this.func(key));
      }
      return value;
    }
    set(key, value) {
      if (this.limit > this.size) {
        this.size++;
        this.store.set(key, value);
      }
      return value;
    }
    purge() {
      this.store.clear();
      this.size = 0;
      this.hits = 0;
      this.misses = 0;
    }
  }
  _exports.default = Cache;
});
;define("@ember/string/index", ["exports", "@ember/string/cache"], function (_exports, _cache) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.camelize = camelize;
  _exports.capitalize = capitalize;
  _exports.classify = classify;
  _exports.dasherize = dasherize;
  _exports.decamelize = decamelize;
  _exports.getString = getString;
  _exports.getStrings = getStrings;
  _exports.htmlSafe = htmlSafe;
  _exports.isHTMLSafe = isHTMLSafe;
  _exports.setStrings = setStrings;
  _exports.underscore = underscore;
  _exports.w = w;
  /* eslint-disable no-useless-escape */

  /**
   @module @ember/string
   */

  // STATE within a module is frowned upon, this exists
  // to support Ember.STRINGS but shield ember internals from this legacy global
  // API.
  let STRINGS = {};
  function setStrings(strings) {
    STRINGS = strings;
  }
  function getStrings() {
    return STRINGS;
  }
  function getString(name) {
    return STRINGS[name];
  }
  const STRING_DASHERIZE_REGEXP = /[ _]/g;
  const STRING_DASHERIZE_CACHE = new _cache.default(1000, key => decamelize(key).replace(STRING_DASHERIZE_REGEXP, '-'));
  const STRING_CAMELIZE_REGEXP_1 = /(\-|\_|\.|\s)+(.)?/g;
  const STRING_CAMELIZE_REGEXP_2 = /(^|\/)([A-Z])/g;
  const CAMELIZE_CACHE = new _cache.default(1000, key => key.replace(STRING_CAMELIZE_REGEXP_1, (_match, _separator, chr) => chr ? chr.toUpperCase() : '').replace(STRING_CAMELIZE_REGEXP_2, (match
  /*, separator, chr */) => match.toLowerCase()));
  const STRING_CLASSIFY_REGEXP_1 = /^(\-|_)+(.)?/;
  const STRING_CLASSIFY_REGEXP_2 = /(.)(\-|\_|\.|\s)+(.)?/g;
  const STRING_CLASSIFY_REGEXP_3 = /(^|\/|\.)([a-z])/g;
  const CLASSIFY_CACHE = new _cache.default(1000, str => {
    const replace1 = (_match, _separator, chr) => chr ? `_${chr.toUpperCase()}` : '';
    const replace2 = (_match, initialChar, _separator, chr) => initialChar + (chr ? chr.toUpperCase() : '');
    const parts = str.split('/');
    for (let i = 0; i < parts.length; i++) {
      parts[i] = parts[i].replace(STRING_CLASSIFY_REGEXP_1, replace1).replace(STRING_CLASSIFY_REGEXP_2, replace2);
    }
    return parts.join('/').replace(STRING_CLASSIFY_REGEXP_3, (match
    /*, separator, chr */) => match.toUpperCase());
  });
  const STRING_UNDERSCORE_REGEXP_1 = /([a-z\d])([A-Z]+)/g;
  const STRING_UNDERSCORE_REGEXP_2 = /\-|\s+/g;
  const UNDERSCORE_CACHE = new _cache.default(1000, str => str.replace(STRING_UNDERSCORE_REGEXP_1, '$1_$2').replace(STRING_UNDERSCORE_REGEXP_2, '_').toLowerCase());
  const STRING_CAPITALIZE_REGEXP = /(^|\/)([a-z\u00C0-\u024F])/g;
  const CAPITALIZE_CACHE = new _cache.default(1000, str => str.replace(STRING_CAPITALIZE_REGEXP, (match
  /*, separator, chr */) => match.toUpperCase()));
  const STRING_DECAMELIZE_REGEXP = /([a-z\d])([A-Z])/g;
  const DECAMELIZE_CACHE = new _cache.default(1000, str => str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase());
  /**
    Splits a string into separate units separated by spaces, eliminating any
    empty strings in the process. This is a convenience method for split that
    is mostly useful when applied to the `String.prototype`.
  
    ```javascript
    import { w } from '@ember/string';
  
    w("alpha beta gamma").forEach(function(key) {
      console.log(key);
    });
  
    // > alpha
    // > beta
    // > gamma
    ```
  
    @method w
    @param {String} str The string to split
    @return {Array} array containing the split strings
    @public
  */

  function w(str) {
    return str.split(/\s+/);
  }
  /**
    Converts a camelized string into all lower case separated by underscores.
  
    ```javascript
    import { decamelize } from '@ember/string';
  
    decamelize('innerHTML');          // 'inner_html'
    decamelize('action_name');        // 'action_name'
    decamelize('css-class-name');     // 'css-class-name'
    decamelize('my favorite items');  // 'my favorite items'
    ```
  
    @method decamelize
    @param {String} str The string to decamelize.
    @return {String} the decamelized string.
    @public
  */

  function decamelize(str) {
    return DECAMELIZE_CACHE.get(str);
  }
  /**
    Replaces underscores, spaces, or camelCase with dashes.
  
    ```javascript
    import { dasherize } from '@ember/string';
  
    dasherize('innerHTML');                // 'inner-html'
    dasherize('action_name');              // 'action-name'
    dasherize('css-class-name');           // 'css-class-name'
    dasherize('my favorite items');        // 'my-favorite-items'
    dasherize('privateDocs/ownerInvoice';  // 'private-docs/owner-invoice'
    ```
  
    @method dasherize
    @param {String} str The string to dasherize.
    @return {String} the dasherized string.
    @public
  */

  function dasherize(str) {
    return STRING_DASHERIZE_CACHE.get(str);
  }
  /**
    Returns the lowerCamelCase form of a string.
  
    ```javascript
    import { camelize } from '@ember/string';
  
    camelize('innerHTML');                   // 'innerHTML'
    camelize('action_name');                 // 'actionName'
    camelize('css-class-name');              // 'cssClassName'
    camelize('my favorite items');           // 'myFavoriteItems'
    camelize('My Favorite Items');           // 'myFavoriteItems'
    camelize('private-docs/owner-invoice');  // 'privateDocs/ownerInvoice'
    ```
  
    @method camelize
    @param {String} str The string to camelize.
    @return {String} the camelized string.
    @public
  */

  function camelize(str) {
    return CAMELIZE_CACHE.get(str);
  }
  /**
    Returns the UpperCamelCase form of a string.
  
    ```javascript
    import { classify } from '@ember/string';
  
    classify('innerHTML');                   // 'InnerHTML'
    classify('action_name');                 // 'ActionName'
    classify('css-class-name');              // 'CssClassName'
    classify('my favorite items');           // 'MyFavoriteItems'
    classify('private-docs/owner-invoice');  // 'PrivateDocs/OwnerInvoice'
    ```
  
    @method classify
    @param {String} str the string to classify
    @return {String} the classified string
    @public
  */

  function classify(str) {
    return CLASSIFY_CACHE.get(str);
  }
  /**
    More general than decamelize. Returns the lower\_case\_and\_underscored
    form of a string.
  
    ```javascript
    import { underscore } from '@ember/string';
  
    underscore('innerHTML');                 // 'inner_html'
    underscore('action_name');               // 'action_name'
    underscore('css-class-name');            // 'css_class_name'
    underscore('my favorite items');         // 'my_favorite_items'
    underscore('privateDocs/ownerInvoice');  // 'private_docs/owner_invoice'
    ```
  
    @method underscore
    @param {String} str The string to underscore.
    @return {String} the underscored string.
    @public
  */

  function underscore(str) {
    return UNDERSCORE_CACHE.get(str);
  }
  /**
    Returns the Capitalized form of a string
  
    ```javascript
    import { capitalize } from '@ember/string';
  
    capitalize('innerHTML')                 // 'InnerHTML'
    capitalize('action_name')               // 'Action_name'
    capitalize('css-class-name')            // 'Css-class-name'
    capitalize('my favorite items')         // 'My favorite items'
    capitalize('privateDocs/ownerInvoice'); // 'PrivateDocs/ownerInvoice'
    ```
  
    @method capitalize
    @param {String} str The string to capitalize.
    @return {String} The capitalized string.
    @public
  */

  function capitalize(str) {
    return CAPITALIZE_CACHE.get(str);
  }
  /*
    The following are implemented here to give users adding `@ember/string` to
    their projects a useful error message. The `ember-source` implementation of
    `@ember/string` is clobbered by adding this addon, and so the deprecation of
    the import path is not triggered. This error message is intended to help
    users discover what they need to change.
  */

  function htmlSafe(str) {
    throw new Error('htmlSafe is not implemented in the `@ember/string` package. Please import from `@ember/template` instead.');
  }
  function isHTMLSafe(str) {
    throw new Error('isHTMLSafe is not implemented in the `@ember/string` package. Please import from `@ember/template` instead.');
  }
});
;define("@ember/test-waiters/build-waiter", ["exports", "@ember/debug", "@ember/test-waiters/token", "@ember/test-waiters/waiter-manager"], function (_exports, _debug, _token, _waiterManager) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports._resetWaiterNames = _resetWaiterNames;
  _exports.default = buildWaiter;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  const WAITER_NAME_PATTERN = /^[^:]*:?.*/;
  let WAITER_NAMES = true /* DEBUG */ ? new Set() : undefined;
  function _resetWaiterNames() {
    WAITER_NAMES = new Set();
  }
  function getNextToken() {
    return new _token.default();
  }
  class TestWaiterImpl {
    constructor(name, nextToken) {
      _defineProperty(this, "isRegistered", false);
      _defineProperty(this, "items", new Map());
      _defineProperty(this, "completedOperationsForTokens", new WeakMap());
      _defineProperty(this, "completedOperationsForPrimitives", new Map());
      this.name = name; // @ts-ignore

      this.nextToken = nextToken || getNextToken;
    }
    beginAsync(token = this.nextToken(), label) {
      this._register();
      if (this.items.has(token)) {
        throw new Error(`beginAsync called for ${token} but it is already pending.`);
      }
      let error = new Error();
      this.items.set(token, {
        get stack() {
          return error.stack;
        },
        label
      });
      return token;
    }
    endAsync(token) {
      if (!this.items.has(token) && !this._getCompletedOperations(token).has(token)) {
        throw new Error(`testWaiter.endAsync called with no preceding testWaiter.beginAsync call.
        Test waiter calls should always be paired. This can occur when a test waiter's paired calls are invoked in a non-deterministic order.

        See https://github.com/emberjs/ember-test-waiters#keep-beginasyncendasync-in-same-block-scope for more information.`);
      }
      this.items.delete(token); // Mark when a waiter operation has completed so we can distinguish
      // whether endAsync is being called before a prior beginAsync call above.

      this._getCompletedOperations(token).set(token, true);
    }
    waitUntil() {
      return this.items.size === 0;
    }
    debugInfo() {
      let result = [];
      this.items.forEach(value => {
        result.push(value);
      });
      return result;
    }
    reset() {
      this.items.clear();
    }
    _register() {
      if (!this.isRegistered) {
        (0, _waiterManager.register)(this);
        this.isRegistered = true;
      }
    }
    _getCompletedOperations(token) {
      let type = typeof token;
      let isFunction = type === 'function';
      let isObject = token !== null && type === 'object';
      let isPrimitive = !isFunction && !isObject;
      return isPrimitive ? this.completedOperationsForPrimitives : this.completedOperationsForTokens;
    }
  }
  class NoopTestWaiter {
    constructor(name) {
      this.name = name;
    }
    beginAsync() {
      return this;
    }
    endAsync() {}
    waitUntil() {
      return true;
    }
    debugInfo() {
      return [];
    }
    reset() {}
  }
  /**
   * Builds and returns a test waiter. The type of the
   * returned waiter is dependent on whether the app or
   * addon is in `DEBUG` mode or not.
   *
   * @public
   *
   * @param name {string} The name of the test waiter
   * @returns {TestWaiter}
   *
   * @example
   *
   * import Component from '@ember/component';
   * import { buildWaiter } from '@ember/test-waiters';
   *
   * if (DEBUG) {
   *   let waiter = buildWaiter('friend-waiter');
   * }
   *
   * export default class Friendz extends Component {
   *   didInsertElement() {
   *     let token = waiter.beginAsync(this);
   *
   *     someAsyncWork().then(() => {
   *       waiter.endAsync(token);
   *     });
   *   }
   * }
   */

  function buildWaiter(name) {
    if (true /* DEBUG */) {
      (true && (0, _debug.warn)(`The waiter name '${name}' is already in use`, !WAITER_NAMES.has(name), {
        id: '@ember/test-waiters.duplicate-waiter-name'
      }));
      WAITER_NAMES.add(name);
    }
    if (!true /* DEBUG */) {
      return new NoopTestWaiter(name);
    } else {
      (true && (0, _debug.warn)(`You must provide a name that contains a descriptive prefix separated by a colon.

        Example: ember-fictitious-addon:some-file

        You passed: ${name}`, WAITER_NAME_PATTERN.test(name), {
        id: '@ember/test-waiters.invalid-waiter-name'
      }));
      return new TestWaiterImpl(name);
    }
  }
});
;define("@ember/test-waiters/index", ["exports", "@ember/test-waiters/waiter-manager", "@ember/test-waiters/build-waiter", "@ember/test-waiters/wait-for-promise", "@ember/test-waiters/wait-for"], function (_exports, _waiterManager, _buildWaiter, _waitForPromise, _waitFor) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "_reset", {
    enumerable: true,
    get: function () {
      return _waiterManager._reset;
    }
  });
  Object.defineProperty(_exports, "_resetWaiterNames", {
    enumerable: true,
    get: function () {
      return _buildWaiter._resetWaiterNames;
    }
  });
  Object.defineProperty(_exports, "buildWaiter", {
    enumerable: true,
    get: function () {
      return _buildWaiter.default;
    }
  });
  Object.defineProperty(_exports, "getPendingWaiterState", {
    enumerable: true,
    get: function () {
      return _waiterManager.getPendingWaiterState;
    }
  });
  Object.defineProperty(_exports, "getWaiters", {
    enumerable: true,
    get: function () {
      return _waiterManager.getWaiters;
    }
  });
  Object.defineProperty(_exports, "hasPendingWaiters", {
    enumerable: true,
    get: function () {
      return _waiterManager.hasPendingWaiters;
    }
  });
  Object.defineProperty(_exports, "register", {
    enumerable: true,
    get: function () {
      return _waiterManager.register;
    }
  });
  Object.defineProperty(_exports, "unregister", {
    enumerable: true,
    get: function () {
      return _waiterManager.unregister;
    }
  });
  Object.defineProperty(_exports, "waitFor", {
    enumerable: true,
    get: function () {
      return _waitFor.default;
    }
  });
  Object.defineProperty(_exports, "waitForPromise", {
    enumerable: true,
    get: function () {
      return _waitForPromise.default;
    }
  });
});
;define("@ember/test-waiters/token", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
   * A class representing a test waiter token.
   *
   * @public
   * @class
   */
  class Token {}
  _exports.default = Token;
});
;define("@ember/test-waiters/types/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
});
;define("@ember/test-waiters/wait-for-promise", ["exports", "@ember/test-waiters/build-waiter"], function (_exports, _buildWaiter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = waitForPromise;
  const PROMISE_WAITER = (0, _buildWaiter.default)('@ember/test-waiters:promise-waiter');
  /**
   * A convenient utility function to simplify waiting for a promise.
   *
   * @public
   * @param promise {Promise<T> | RSVP.Promise<T>} The promise to track async operations for
   * @param label {string} An optional string to identify the promise
   *
   * @example
   *
   * import Component from '@ember/component';
   * import { waitForPromise } from '@ember/test-waiters';
   *
   * export default class Friendz extends Component {
   *   didInsertElement() {
   *     waitForPromise(new Promise(resolve => {
   *       doSomeWork();
   *       resolve();
   *     }));
   *   }
   * }
   */

  function waitForPromise(promise, label) {
    let result = promise;
    if (true /* DEBUG */) {
      PROMISE_WAITER.beginAsync(promise, label);
      result = promise.then(value => {
        PROMISE_WAITER.endAsync(promise);
        return value;
      }, error => {
        PROMISE_WAITER.endAsync(promise);
        throw error;
      });
    }
    return result;
  }
});
;define("@ember/test-waiters/wait-for", ["exports", "@ember/test-waiters/wait-for-promise", "@ember/test-waiters/build-waiter"], function (_exports, _waitForPromise, _buildWaiter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = waitFor;
  function waitFor(...args) {
    let isFunction = args.length < 3;
    if (isFunction) {
      let [fn, label] = args;
      return wrapFunction(fn, label);
    } else {
      let [,, descriptor, label] = args;
      if (!true /* DEBUG */) {
        return descriptor;
      }
      let fn = descriptor.value;
      descriptor.value = wrapFunction(fn, label);
      return descriptor;
    }
  }
  function wrapFunction(fn, label) {
    if (!true /* DEBUG */) {
      return fn;
    }
    return function (...args) {
      let result = fn.call(this, ...args);
      if (isThenable(result)) {
        return (0, _waitForPromise.default)(result, label);
      } else if (isGenerator(result)) {
        return waitForGenerator(result, label);
      } else {
        return result;
      }
    };
  }
  function isThenable(maybePromise) {
    let type = typeof maybePromise;
    return (maybePromise !== null && type === 'object' || type === 'function') && typeof maybePromise.then === 'function';
  }
  function isGenerator(maybeGenerator) {
    // Because we don't have Symbol.iterator in IE11
    return typeof maybeGenerator.next === 'function' && typeof maybeGenerator.return === 'function' && typeof maybeGenerator.throw === 'function';
  }
  const GENERATOR_WAITER = (0, _buildWaiter.default)('@ember/test-waiters:generator-waiter');
  function waitForGenerator(generator, label) {
    GENERATOR_WAITER.beginAsync(generator, label);
    let isWaiting = true;
    function stopWaiting() {
      if (isWaiting) {
        GENERATOR_WAITER.endAsync(generator);
        isWaiting = false;
      }
    }
    return {
      next(...args) {
        let hasErrored = true;
        try {
          let val = generator.next(...args);
          hasErrored = false;
          if (val.done) {
            stopWaiting();
          }
          return val;
        } finally {
          // If generator.next() throws, we need to stop waiting. But if we catch
          // and re-throw exceptions, it could move the location from which the
          // uncaught exception is thrown, interfering with the developer
          // debugging experience if they have break-on-exceptions enabled. So we
          // use a boolean flag and a finally block to emulate a catch block.
          if (hasErrored) {
            stopWaiting();
          }
        }
      },
      return(...args) {
        stopWaiting();
        return generator.return(...args);
      },
      throw(...args) {
        stopWaiting();
        return generator.throw(...args);
      }
    };
  }
});
;define("@ember/test-waiters/waiter-manager", ["exports", "ember", "@ember/test"], function (_exports, _ember, _test) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports._reset = _reset;
  _exports.getPendingWaiterState = getPendingWaiterState;
  _exports.getWaiters = getWaiters;
  _exports.hasPendingWaiters = hasPendingWaiters;
  _exports.register = register;
  _exports.unregister = unregister;
  // this ensures that if @ember/test-waiters exists in multiple places in the
  // build output we will still use a single map of waiters (there really should
  // only be one of them, or else `settled` will not work at all)
  const WAITERS = function () {
    const HAS_SYMBOL = typeof Symbol !== 'undefined';
    let symbolName = 'TEST_WAITERS';
    let symbol = HAS_SYMBOL ? Symbol.for(symbolName) : symbolName;
    let global = getGlobal();
    let waiters = global[symbol];
    if (waiters === undefined) {
      waiters = global[symbol] = new Map();
    }
    return waiters;
  }();
  function indexable(input) {
    return input;
  }
  function getGlobal() {
    // eslint-disable-next-line node/no-unsupported-features/es-builtins
    if (typeof globalThis !== 'undefined') return indexable(globalThis);
    if (typeof self !== 'undefined') return indexable(self);
    if (typeof window !== 'undefined') return indexable(window);
    if (typeof global !== 'undefined') return indexable(global);
    throw new Error('unable to locate global object');
  }
  /**
   * Backwards compatibility with legacy waiters system.
   *
   * We want to always register a waiter using the legacy waiter system, as right
   * now if consumers are not on the right version of @ember/test-helpers, using
   * this addon will result in none of these waiters waiting.
   */
  // eslint-disable-next-line ember/new-module-imports

  if (_ember.default.Test) {
    (0, _test.registerWaiter)(() => !hasPendingWaiters());
  }
  /**
   * Registers a waiter.
   *
   * @public
   * @param waiter {Waiter} A test waiter instance
   */

  function register(waiter) {
    WAITERS.set(waiter.name, waiter);
  }
  /**
   * Un-registers a waiter.
   *
   * @public
   * @param waiter {Waiter} A test waiter instance
   */

  function unregister(waiter) {
    WAITERS.delete(waiter.name);
  }
  /**
   * Gets an array of all waiters current registered.
   *
   * @public
   * @returns {Waiter[]}
   */

  function getWaiters() {
    let result = [];
    WAITERS.forEach(value => {
      result.push(value);
    });
    return result;
  }
  /**
   * Clears all waiters.
   *
   * @private
   */

  function _reset() {
    for (let waiter of getWaiters()) {
      waiter.isRegistered = false;
    }
    WAITERS.clear();
  }
  /**
   * Gets the current state of all waiters. Any waiters whose
   * `waitUntil` method returns false will be considered `pending`.
   *
   * @returns {PendingWaiterState} An object containing a count of all waiters
   * pending and a `waiters` object containing the name of all pending waiters
   * and their debug info.
   */

  function getPendingWaiterState() {
    let result = {
      pending: 0,
      waiters: {}
    };
    WAITERS.forEach(waiter => {
      if (!waiter.waitUntil()) {
        result.pending++;
        let debugInfo = waiter.debugInfo();
        result.waiters[waiter.name] = debugInfo || true;
      }
    });
    return result;
  }
  /**
   * Determines if there are any pending waiters.
   *
   * @returns {boolean} `true` if there are pending waiters, otherwise `false`.
   */

  function hasPendingWaiters() {
    let state = getPendingWaiterState();
    return state.pending > 0;
  }
});
;define("@embroider/macros/es-compat2", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = esCompat;
  function esCompat(m) {
    return m?.__esModule ? m : {
      default: m,
      ...m
    };
  }
});
;define("@embroider/macros/runtime", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.config = config;
  _exports.each = each;
  _exports.getGlobalConfig = getGlobalConfig;
  _exports.isTesting = isTesting;
  _exports.macroCondition = macroCondition;
  /*
    These are the runtime implementations for the javascript macros that have
    runtime implementations.
  
    Not every macro has a runtime implementation, some only make sense in the
    build and always run there.
  
    Even when we have runtime implementations, we are still careful to emit static
    errors during the build wherever possible, and runtime errors when necessary,
    so that you're not surprised when you switch from runtime-mode to compile-time
    mode.
  */

  /*
    CAUTION: in classic builds, this file gets shared by all present copies of
    @embroider/macros. If you want to change its public API, you need to rename it
    and update `pathToRuntime` in ../babel/state.ts to point at it, so that your
    babel plugin and runtime will match.
  */

  function each(array) {
    if (!Array.isArray(array)) {
      throw new Error(`the argument to the each() macro must be an array`);
    }
    return array;
  }
  function macroCondition(predicate) {
    return predicate;
  }

  // This is here as a compile target for `getConfig` and `getOwnConfig` when
  // we're in runtime mode. This is not public API to call from your own code.
  function config(packageRoot) {
    return runtimeConfig.packages[packageRoot];
  }
  function getGlobalConfig() {
    return runtimeConfig.global;
  }
  function isTesting() {
    let g = runtimeConfig.global;
    let e = g && g['@embroider/macros'];
    return Boolean(e && e.isTesting);
  }
  const runtimeConfig = initializeRuntimeMacrosConfig();

  // this exists to be targeted by our babel plugin
  function initializeRuntimeMacrosConfig() {
    return {
      "packages": {
        "/workspaces/ember-user-activity/node_modules/ember-get-config": {
          "modulePrefix": "test-app"
        }
      },
      "global": {
        "@embroider/macros": {
          "isTesting": false
        }
      }
    };
  }
  function updaterMethods() {
    return {
      config,
      getGlobalConfig,
      setConfig(packageRoot, value) {
        runtimeConfig.packages[packageRoot] = value;
      },
      setGlobalConfig(key, value) {
        runtimeConfig.global[key] = value;
      }
    };
  }

  // this is how runtime config can get injected at boot. I'm not sure yet if this
  // should be public API, but we certainly need it internally to set things like
  // the global fastboot.isRunning.
  //
  // consumers of this API push a function onto
  // window._embroider_macros_runtime_config. The function is given four methods
  // which allow it to read and write the per-package and global configs. The
  // reason for allowing both read & write is that merging strategies are up to
  // each consumers -- read first, then merge, then write.
  //
  // For an example user of this API, see where we generate
  // embroider_macros_fastboot_init.js' in @embroider/core.
  let updaters = typeof window !== 'undefined' ? window._embroider_macros_runtime_config : undefined;
  if (updaters) {
    let methods = updaterMethods();
    for (let updater of updaters) {
      updater(methods);
    }
  }
});
;define("@embroider/util/ember-private-api", ["exports", "@embroider/macros/es-compat2"], function (_exports, _esCompat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isCurriedComponentDefinition = void 0;
  _exports.lookupCurriedComponentDefinition = lookupCurriedComponentDefinition;
  let runtime;
  {
    // new enough ember has a real module we can import
    runtime = (0, _esCompat.default)(require("@glimmer/runtime"));
  }
  let {
    isCurriedComponentDefinition,
    CurriedComponentDefinition,
    curry,
    CurriedValue
  } = runtime;

  // older embers have isCurriedComponentDefinition, new ones have CurriedValue
  // and instanceof CurriedValue seems good enough.
  _exports.isCurriedComponentDefinition = isCurriedComponentDefinition;
  if (!isCurriedComponentDefinition) {
    _exports.isCurriedComponentDefinition = isCurriedComponentDefinition = function (value) {
      return value instanceof CurriedValue;
    };
  }
  function runtimeResolver(owner) {
    let resolver = owner.lookup('renderer:-dom')._runtimeResolver;
    if (resolver) {
      return resolver;
    }
    let entry = Object.entries(owner.__container__.cache).find(e => e[0].startsWith('template-compiler:main-'));
    if (entry) {
      return entry[1].resolver.resolver;
    }
    throw new Error(`@embroider/util couldn't locate the runtime resolver on this ember version`);
  }
  function lookupCurriedComponentDefinition(name, owner) {
    let resolver = runtimeResolver(owner);
    if (typeof resolver.lookupComponentHandle === 'function') {
      let handle = resolver.lookupComponentHandle(name, contextForLookup(owner));
      if (handle != null) {
        return new CurriedComponentDefinition(resolver.resolve(handle), null);
      }
    }

    // here we're doing the same thing the internal currying does, in order to
    // generate a sane error message (even though we don't actually use
    // resolvedDefinition as part of our return value).
    let resolvedDefinition = resolver.lookupComponent(name, owner);
    if (!resolvedDefinition) {
      throw new Error(`Attempted to resolve \`${name}\` via ensureSafeComponent, but nothing was found.`);
    }
    return curry(0, name, owner, {
      named: {},
      positional: []
    });
  }
  function contextForLookup(owner) {
    {
      return owner;
    }
  }
});
;define("@embroider/util/index", ["exports", "@ember/debug", "@ember/application", "@embroider/util/ember-private-api", "@ember/component/helper"], function (_exports, _debug, _application, _emberPrivateApi, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EnsureSafeComponentHelper = void 0;
  _exports.ensureSafeComponent = ensureSafeComponent;
  function ensureSafeComponent(value, thingWithOwner) {
    if (typeof value === 'string') {
      return handleString(value, thingWithOwner);
    } else if ((0, _emberPrivateApi.isCurriedComponentDefinition)(value)) {
      return value;
    } else if (value == null) {
      return value;
    } else {
      return handleClass(value, thingWithOwner);
    }
  }
  class EnsureSafeComponentHelper extends _helper.default {
    compute([value]) {
      return ensureSafeComponent(value, this);
    }
  }
  _exports.EnsureSafeComponentHelper = EnsureSafeComponentHelper;
  function handleString(name, thingWithOwner) {
    (true && !(false) && (0, _debug.deprecate)(`You're trying to invoke the component "${name}" by passing its name as a string. This won't work under Embroider.`, false, {
      id: 'ensure-safe-component.string',
      url: 'https://github.com/embroider-build/embroider/blob/main/docs/replacing-component-helper.md#when-youre-passing-a-component-to-someone-else',
      until: 'embroider',
      for: '@embroider/util',
      since: '0.27.0'
    }));
    let owner = (0, _application.getOwner)(thingWithOwner);
    return (0, _emberPrivateApi.lookupCurriedComponentDefinition)(name, owner);
  }
  function ensureRegistered(klass, owner) {
    let service = owner.lookup('service:-ensure-registered');
    (true && !(service) && (0, _debug.assert)('Could not lookup private -ensure-registered service', service));
    return service.register(klass, owner);
  }
  function handleClass(klass, thingWithOwner) {
    {
      return klass;
    }
  }
});
;define("@embroider/util/services/ensure-registered", ["exports", "@ember/service", "@ember/application"], function (_exports, _service, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  class EnsureRegisteredService extends _service.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "classNonces", new WeakMap());
      _defineProperty(this, "nonceCounter", 0);
    }
    register(klass, owner = (0, _application.getOwner)(this)) {
      let nonce = this.classNonces.get(klass);
      if (nonce == null) {
        nonce = `-ensure${this.nonceCounter++}`;
        this.classNonces.set(klass, nonce);
        owner.register(`component:${nonce}`, klass);
      }
      return nonce;
    }
  }
  _exports.default = EnsureRegisteredService;
});
;define("@glimmer/component/-private/base-component-manager", ["exports", "@glimmer/component/-private/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = BaseComponentManager;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  /**
   * This factory function returns a component manager class with common behavior
   * that can be extend to add Glimmer.js- or Ember.js-specific functionality. As
   * these environments converge, the need for two component manager
   * implementations (and thus this factory) should go away.
   */
  function BaseComponentManager(setOwner, getOwner, capabilities) {
    return class {
      static create(attrs) {
        let owner = getOwner(attrs);
        return new this(owner);
      }
      constructor(owner) {
        _defineProperty(this, "capabilities", capabilities);
        setOwner(this, owner);
      }
      createComponent(ComponentClass, args) {
        if (true /* DEBUG */) {
          _component.ARGS_SET.set(args.named, true);
        }
        return new ComponentClass(getOwner(this), args.named);
      }
      getContext(component) {
        return component;
      }
    };
  }
});
;define("@glimmer/component/-private/component", ["exports", "@glimmer/component/-private/owner", "@glimmer/component/-private/destroyables"], function (_exports, _owner, _destroyables) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.ARGS_SET = void 0;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  // This provides a type-safe `WeakMap`: the getter and setter link the key to a
  // specific value. This is how `WeakMap`s actually behave, but the TS type
  // system does not (yet!) have a good way to capture that for types like
  // `WeakMap` where the type is generic over another generic type (here, `Args`).

  // SAFETY: this only holds because we *only* acces this when `DEBUG` is `true`.
  // There is not a great way to connect that data in TS at present.
  let ARGS_SET = _exports.ARGS_SET = void 0;
  if (true /* DEBUG */) {
    _exports.ARGS_SET = ARGS_SET = new WeakMap();
  }

  // --- Type utilities for component signatures --- //
  // Type-only "symbol" to use with `EmptyObject` below, so that it is *not*
  // equivalent to an empty interface.

  /**
   * This provides us a way to have a "fallback" which represents an empty object,
   * without the downsides of how TS treats `{}`. Specifically: this will
   * correctly leverage "excess property checking" so that, given a component
   * which has no named args, if someone invokes it with any named args, they will
   * get a type error.
   *
   * @internal This is exported so declaration emit works (if it were not emitted,
   *   declarations which fall back to it would not work). It is *not* intended for
   *   public usage, and the specific mechanics it uses may change at any time.
   *   The location of this export *is* part of the public API, because moving it
   *   will break existing declarations, but is not legal for end users to import
   *   themselves, so ***DO NOT RELY ON IT***.
   */

  /** Given a signature `S`, get back the `Args` type. */

  /**
   * Given any allowed shorthand form of a signature, desugars it to its full
   * expanded type.
   *
   * @internal This is only exported so we can avoid duplicating it in
   *   [Glint](https://github.com/typed-ember/glint) or other such tooling. It is
   *   *not* intended for public usage, and the specific mechanics it uses may
   *   change at any time. Although the signature produced by is part of Glimmer's
   *   public API the existence and mechanics of this specific symbol are *not*,
   *   so ***DO NOT RELY ON IT***.
   */
  // The conditional type here is because TS applies conditional types
  // distributively. This means that for union types, checks like `keyof T` get
  // all the keys from all elements of the union, instead of ending up as `never`
  // and then always falling into the `Signature` path instead of falling back to
  // the legacy args handling path.

  /**
   * @internal we use this type for convenience internally; inference means users
   *   should not normally need to name it
   */

  /**
   * The `Component` class defines an encapsulated UI element that is rendered to
   * the DOM. A component is made up of a template and, optionally, this component
   * object.
   *
   * ## Defining a Component
   *
   * To define a component, subclass `Component` and add your own properties,
   * methods and lifecycle hooks:
   *
   * ```ts
   * import Component from '@glimmer/component';
   *
   * export default class extends Component {
   * }
   * ```
   *
   * ## Lifecycle Hooks
   *
   * Lifecycle hooks allow you to respond to changes to a component, such as when
   * it gets created, rendered, updated or destroyed. To add a lifecycle hook to a
   * component, implement the hook as a method on your component subclass.
   *
   * For example, to be notified when Glimmer has rendered your component so you
   * can attach a legacy jQuery plugin, implement the `didInsertElement()` method:
   *
   * ```ts
   * import Component from '@glimmer/component';
   *
   * export default class extends Component {
   *   didInsertElement() {
   *     $(this.element).pickadate();
   *   }
   * }
   * ```
   *
   * ## Data for Templates
   *
   * `Component`s have two different kinds of data, or state, that can be
   * displayed in templates:
   *
   * 1. Arguments
   * 2. Properties
   *
   * Arguments are data that is passed in to a component from its parent
   * component. For example, if I have a `UserGreeting` component, I can pass it
   * a name and greeting to use:
   *
   * ```hbs
   * <UserGreeting @name="Ricardo" @greeting="Olá" />
   * ```
   *
   * Inside my `UserGreeting` template, I can access the `@name` and `@greeting`
   * arguments that I've been given:
   *
   * ```hbs
   * {{@greeting}}, {{@name}}!
   * ```
   *
   * Arguments are also available inside my component:
   *
   * ```ts
   * console.log(this.args.greeting); // prints "Olá"
   * ```
   *
   * Properties, on the other hand, are internal to the component and declared in
   * the class. You can use properties to store data that you want to show in the
   * template, or pass to another component as an argument.
   *
   * ```ts
   * import Component from '@glimmer/component';
   *
   * export default class extends Component {
   *   user = {
   *     name: 'Robbie'
   *   }
   * }
   * ```
   *
   * In the above example, we've defined a component with a `user` property that
   * contains an object with its own `name` property.
   *
   * We can render that property in our template:
   *
   * ```hbs
   * Hello, {{user.name}}!
   * ```
   *
   * We can also take that property and pass it as an argument to the
   * `UserGreeting` component we defined above:
   *
   * ```hbs
   * <UserGreeting @greeting="Hello" @name={{user.name}} />
   * ```
   *
   * ## Arguments vs. Properties
   *
   * Remember, arguments are data that was given to your component by its parent
   * component, and properties are data your component has defined for itself.
   *
   * You can tell the difference between arguments and properties in templates
   * because arguments always start with an `@` sign (think "A is for arguments"):
   *
   * ```hbs
   * {{@firstName}}
   * ```
   *
   * We know that `@firstName` came from the parent component, not the current
   * component, because it starts with `@` and is therefore an argument.
   *
   * On the other hand, if we see:
   *
   * ```hbs
   * {{name}}
   * ```
   *
   * We know that `name` is a property on the component. If we want to know where
   * the data is coming from, we can go look at our component class to find out.
   *
   * Inside the component itself, arguments always show up inside the component's
   * `args` property. For example, if `{{@firstName}}` is `Tom` in the template,
   * inside the component `this.args.firstName` would also be `Tom`.
   */
  class BaseComponent {
    /**
     * Constructs a new component and assigns itself the passed properties. You
     * should not construct new components yourself. Instead, Glimmer will
     * instantiate new components automatically as it renders.
     *
     * @param owner
     * @param args
     */
    constructor(owner, args) {
      /**
       * Named arguments passed to the component from its parent component.
       * They can be accessed in JavaScript via `this.args.argumentName` and in the template via `@argumentName`.
       *
       * Say you have the following component, which will have two `args`, `firstName` and `lastName`:
       *
       * ```hbs
       * <my-component @firstName="Arthur" @lastName="Dent" />
       * ```
       *
       * If you needed to calculate `fullName` by combining both of them, you would do:
       *
       * ```ts
       * didInsertElement() {
       *   console.log(`Hi, my full name is ${this.args.firstName} ${this.args.lastName}`);
       * }
       * ```
       *
       * While in the template you could do:
       *
       * ```hbs
       * <p>Welcome, {{@firstName}} {{@lastName}}!</p>
       * ```
       */
      _defineProperty(this, "args", void 0);
      if (true /* DEBUG */ && !(owner !== null && typeof owner === 'object' && ARGS_SET.has(args))) {
        throw new Error(`You must pass both the owner and args to super() in your component: ${this.constructor.name}. You can pass them directly, or use ...arguments to pass all arguments through.`);
      }
      this.args = args;
      (0, _owner.setOwner)(this, owner);
    }
    get isDestroying() {
      return (0, _destroyables.isDestroying)(this);
    }
    get isDestroyed() {
      return (0, _destroyables.isDestroyed)(this);
    }

    /**
     * Called before the component has been removed from the DOM.
     */
    willDestroy() {}
  }
  _exports.default = BaseComponent;
});
;define("@glimmer/component/-private/destroyables", ["exports", "ember"], function (_exports, _ember) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isDestroying = _exports.isDestroyed = void 0;
  const isDestroying = _exports.isDestroying = _ember.default._isDestroying;
  const isDestroyed = _exports.isDestroyed = _ember.default._isDestroyed;
});
;define("@glimmer/component/-private/ember-component-manager", ["exports", "ember", "@ember/object", "@ember/application", "@ember/component", "@ember/runloop", "@glimmer/component/-private/base-component-manager", "@glimmer/component/-private/destroyables"], function (_exports, _ember, _object, _application, _component, _runloop, _baseComponentManager, destroyables) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const {
    setDestroyed,
    setDestroying
  } = destroyables;
  const CAPABILITIES = true // @ts-ignore
  // @ts-ignore
  ? (0, _component.capabilities)('3.13', {
    destructor: true,
    asyncLifecycleCallbacks: false,
    updateHook: false
  }) : (0, _component.capabilities)('3.4', {
    destructor: true,
    asyncLifecycleCallbacks: false
  });
  const scheduledDestroyComponent = true ? undefined : (component, meta) => {
    if (component.isDestroyed) {
      return;
    }
    _ember.default.destroy(component);
    meta.setSourceDestroyed();
    setDestroyed(component);
  };
  const destroy = true ? _ember.default.destroy : component => {
    if (component.isDestroying) {
      return;
    }
    let meta = _ember.default.meta(component);
    meta.setSourceDestroying();
    setDestroying(component);
    (0, _runloop.schedule)('actions', component, component.willDestroy);
    (0, _runloop.schedule)('destroy', void 0, scheduledDestroyComponent, component, meta);
  };
  const registerDestructor = true ? _ember.default._registerDestructor : true ? _ember.default.__loader.require('@glimmer/runtime').registerDestructor : undefined;

  /**
   * This component manager runs in Ember.js environments and extends the base component manager to:
   *
   * 1. Properly destroy the component's associated `meta` data structure
   * 2. Schedule destruction using Ember's runloop
   */
  class EmberGlimmerComponentManager extends (0, _baseComponentManager.default)(_application.setOwner, _application.getOwner, CAPABILITIES) {
    createComponent(ComponentClass, args) {
      const component = super.createComponent(ComponentClass, args);
      if (true) {
        registerDestructor(component, () => {
          component.willDestroy();
        });
      }
      return component;
    }
    destroyComponent(component) {
      destroy(component);
    }
  }
  // In Ember 3.12 and earlier, the updateComponent hook was mandatory.
  // As of Ember 3.13, the `args` object is stable and each property of the
  // object participates in the autotrack stack on its own. This means we do not
  // need to set the `args` property on the component instance to invalidate
  // tracked getters that rely on `args`, and therefore don't require the `updateComponent`
  // hook at all.
  if (!true) {
    EmberGlimmerComponentManager.prototype.updateComponent = function updateComponent(component, args) {
      let argSnapshot = args.named;
      if (true /* DEBUG */) {
        argSnapshot = Object.freeze(argSnapshot);
      }
      (0, _object.set)(component, 'args', argSnapshot);
    };
  }
  var _default = _exports.default = EmberGlimmerComponentManager;
});
;define("@glimmer/component/-private/owner", ["exports", "@ember/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "setOwner", {
    enumerable: true,
    get: function () {
      return _application.setOwner;
    }
  });
});
;define("@glimmer/component/index", ["exports", "@ember/component", "@glimmer/component/-private/ember-component-manager", "@glimmer/component/-private/component"], function (_exports, _component, _emberComponentManager, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Hax because the old version of `@types/ember__component` the `1.x` branch
  // uses does not provide any types for `setComponentManager` *and* because we
  // are using a very old version of `setComponentManager` for versions before
  // Ember 3.8.

  let GlimmerComponent = _component2.default;
  if (true /* DEBUG */) {
    // Add assertions against using Glimmer.js only APIs

    // TODO: Add GlimmerComponent API docs link to these messages once API docs are live
    function throwMethodUseError(methodName) {
      throw new Error(`You attempted to define the '${methodName}' method on a Glimmer Component, but that lifecycle hook does not exist in Ember.js applications, it only exists in Glimmer.js apps. You can rename this method, and you can trigger it using a modifier such as {{did-insert}} from '@ember/render-modifiers': https://github.com/emberjs/ember-render-modifiers.`);
    }
    function throwPropertyUseError(propertyName) {
      throw new Error(`You attempted to access the '${propertyName}' property on a Glimmer Component, but that property does not exist in Ember.js applications, it only exists in Glimmer.js apps. You define a class field with the same name on your component class and it will overwrite this error message, but it will not be used by the framework.`);
    }
    GlimmerComponent = class GlimmerDebugComponent extends GlimmerComponent {
      constructor(owner, args) {
        super(owner, args);
        if (typeof this['didInsertElement'] === 'function') {
          throwMethodUseError('didInsertElement');
        }
        if (typeof this['didUpdate'] === 'function') {
          throwMethodUseError('didUpdate');
        }
      }
    };
    let proto = GlimmerComponent.prototype;
    function defineErrorProp(proto, key, getterMethod) {
      Object.defineProperty(proto, key, {
        get: () => getterMethod(key),
        set(value) {
          Object.defineProperty(this, key, {
            value
          });
        }
      });
    }

    // Methods should still throw whenever they are accessed
    defineErrorProp(proto, 'bounds', throwPropertyUseError);
    defineErrorProp(proto, 'element', throwPropertyUseError);
    defineErrorProp(proto, 'debugName', throwPropertyUseError);
  }
  if (true) {
    (0, _component.setComponentManager)(owner => {
      return new _emberComponentManager.default(owner);
    }, GlimmerComponent);
  } else {
    (0, _component.setComponentManager)('glimmer', GlimmerComponent);
  }
  var _default = _exports.default = GlimmerComponent;
});
;define("ember-app-scheduler/helpers/route-idle", ["exports", "@ember/component/helper", "ember-app-scheduler/scheduler"], function (_exports, _helper, _scheduler) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class RouteIdle extends _helper.default {
    compute() {
      return _scheduler.default.isIdle;
    }
  }
  _exports.default = RouteIdle;
});
;define("ember-app-scheduler/index", ["exports", "ember-app-scheduler/scheduler"], function (_exports, _scheduler) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "beginTransition", {
    enumerable: true,
    get: function () {
      return _scheduler.beginTransition;
    }
  });
  Object.defineProperty(_exports, "endTransition", {
    enumerable: true,
    get: function () {
      return _scheduler.endTransition;
    }
  });
  Object.defineProperty(_exports, "reset", {
    enumerable: true,
    get: function () {
      return _scheduler.reset;
    }
  });
  Object.defineProperty(_exports, "routeSettled", {
    enumerable: true,
    get: function () {
      return _scheduler.routeSettled;
    }
  });
  Object.defineProperty(_exports, "setupRouter", {
    enumerable: true,
    get: function () {
      return _scheduler.setupRouter;
    }
  });
  Object.defineProperty(_exports, "whenRouteIdle", {
    enumerable: true,
    get: function () {
      return _scheduler.whenRouteIdle;
    }
  });
});
;define("ember-app-scheduler/scheduler", ["exports", "@ember/destroyable", "@ember/object/events", "@ember/runloop", "@ember/test-waiters", "@glimmer/tracking", "rsvp"], function (_exports, _destroyable, _events, _runloop, _testWaiters, _tracking, _rsvp) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.beginTransition = beginTransition;
  _exports.default = void 0;
  _exports.endTransition = endTransition;
  _exports.reset = reset;
  _exports.routeSettled = routeSettled;
  _exports.setupRouter = setupRouter;
  _exports.whenRouteIdle = whenRouteIdle;
  var _class, _descriptor;
  /** @documenter yuidoc */
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const APP_SCHEDULER_LABEL = 'ember-app-scheduler';
  const APP_SCHEDULER_HAS_SETUP = '__APP_SCHEDULER_HAS_SETUP__';
  let _whenRouteDidChange;
  let _whenRouteIdle;
  const IS_FASTBOOT = typeof window.FastBoot !== 'undefined';
  const waiter = (0, _testWaiters.buildWaiter)('ember-app-scheduler-waiter');
  reset();
  let Scheduler = (_class = class Scheduler {
    constructor() {
      _initializerDefineProperty(this, "isIdle", _descriptor, this);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "isIdle", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  })), _class);
  const scheduler = new Scheduler();
  var _default = _exports.default = scheduler;
  /**
   * Initializes the top level promise that initiates the post-render work.
   *
   * @public
   * @function beginTransition
   * @return {void}
   */
  function beginTransition() {
    if (_whenRouteDidChange.isResolved) {
      _whenRouteDidChange = _defer(APP_SCHEDULER_LABEL);
      _whenRouteIdle = _whenRouteDidChange.promise.then(() => {
        let scheduledWorkToken = waiter.beginAsync();
        return new _rsvp.Promise(resolve => {
          (0, _runloop.schedule)('afterRender', null, () => {
            requestAnimationFrame(() => {
              requestAnimationFrame(resolve);
            });
          });
        }).finally(() => {
          waiter.endAsync(scheduledWorkToken);
          mark('appSchedulerEnd');
          measure('appScheduler', 'appSchedulerStart', 'appSchedulerEnd');
        });
      });
      scheduler.isIdle = false;
    }
  }

  /**
   * Initiates the post-render work.
   *
   * @public
   * @function endTransition
   * @return {void}
   */
  function endTransition() {
    _whenRouteDidChange.resolve();
    scheduler.isIdle = true;
    mark('appSchedulerStart');
  }

  /**
   * Connects the router's transition events to
   * app scheduler's work.
   *
   * @public
   * @function setupRouter
   * @param {RouterService|Router} router An instance of a RouterService or an Ember Router.
   * @return {void}
   */
  function setupRouter(router) {
    if (IS_FASTBOOT || router[APP_SCHEDULER_HAS_SETUP]) {
      return;
    }
    router[APP_SCHEDULER_HAS_SETUP] = true;

    // @ts-ignore
    (0, _events.addListener)(router, 'routeWillChange', beginTransition);
    // @ts-ignore
    (0, _events.addListener)(router, 'routeDidChange', endTransition);
    (0, _destroyable.registerDestructor)(router, reset);
  }

  /**
   * Resets the state of app scheduler's top-level scheduled work promise.
   *
   * @public
   * @function reset
   * @return {void}
   */
  function reset() {
    _whenRouteDidChange = _defer(APP_SCHEDULER_LABEL);
    _whenRouteIdle = _whenRouteDidChange.promise.then();
    waiter.reset();
    if (!IS_FASTBOOT) {
      _whenRouteDidChange.resolve();
    }
  }

  /**
   * This promise, when resolved, approximates after content is painted.
   *
   * @public
   * @function whenRouteIdle
   * @return {Promise<any>} The scheduled work promise.
   */
  function whenRouteIdle() {
    return _whenRouteIdle;
  }

  /**
   * Allows for tests to pause until the scheduled work
   * promise is completed.
   *
   * @public
   * @function routeSettled
   * @return {Promise<any>} The scheduled work promise.
   */
  function routeSettled() {
    return _whenRouteIdle;
  }
  function _defer(label) {
    let _isResolved = false;
    let _resolve;
    let _reject;
    const promise = new _rsvp.Promise((resolve, reject) => {
      _resolve = () => {
        _isResolved = true;
        resolve();
      };
      _reject = reject;
    }, label);
    return {
      promise,
      resolve: _resolve,
      reject: _reject,
      get isResolved() {
        return _isResolved;
      }
    };
  }
  function mark(markName) {
    try {
      performance.mark(markName);
    } catch (ex) {
      console.warn(`performance.mark could not be executed because of ${ex.message}`);
    }
  }
  function measure(measureName, startMark, endMark) {
    try {
      performance.measure(measureName, startMark, endMark);
    } catch (ex) {
      console.warn(`performance.measure could not be executed because of ${ex.message}`);
    }
  }
});
;define("ember-arg-types/-private/closest-string", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.closest = void 0;
  0; //eaimeta@70e063a35619d71f0,"@embroider/macros"eaimeta@70e063a35619d71f
  /* eslint-disable no-inner-declarations */

  let closest = _exports.closest = void 0;
  {
    // https://stackoverflow.com/a/36566052
    function editDistance(s1, s2) {
      s1 = s1.toLowerCase();
      s2 = s2.toLowerCase();
      const costs = [];
      for (let i = 0; i <= s1.length; i++) {
        let lastValue = i;
        for (let j = 0; j <= s2.length; j++) {
          if (i == 0) costs[j] = j;else {
            if (j > 0) {
              let newValue = costs[j - 1];
              if (s1.charAt(i - 1) != s2.charAt(j - 1)) {
                newValue = Math.min(Math.min(newValue, lastValue), costs[j]) + 1;
              }
              costs[j - 1] = lastValue;
              lastValue = newValue;
            }
          }
        }
        if (i > 0) costs[s2.length] = lastValue;
      }
      return costs[s2.length];
    }
    function similar(s1, s2) {
      let longer = s1;
      let shorter = s2;
      if (s1.length < s2.length) {
        longer = s2;
        shorter = s1;
      }
      const longerLength = longer.length;
      if (longerLength == 0) {
        return 1.0;
      }
      return (longerLength - editDistance(longer, shorter)) / longerLength;
    }
    _exports.closest = closest = (str, options) => {
      let score = 0;
      let index = 0;
      for (let i = 0; i < options.length; i++) {
        const currentScore = similar(str, options[i]);
        if (currentScore > score) {
          index = i;
          score = currentScore;
        }
      }
      if (score > 0.4) {
        return options[index];
      }
      return undefined;
    };
  }
});
;define("ember-arg-types/-private/is-element-descriptor", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isElementDescriptor;
  0; //eaimeta@70e063a35619d71feaimeta@70e063a35619d71f
  //https://github.com/emberjs/ember.js/blob/d1ad76a2b22ce470639df3dfc6efb6864a70f588/packages/%40ember/-internals/metal/lib/decorator.ts

  function isElementDescriptor(...args) {
    const [maybeTarget, maybeKey, maybeDesc] = args;
    return (
      // Ensure we have the right number of args
      args.length === 3 && (
      // Make sure the target is a class or object (prototype)
      typeof maybeTarget === 'function' || typeof maybeTarget === 'object' && maybeTarget !== null) &&
      // Make sure the key is a string
      typeof maybeKey === 'string' && (
      // Make sure the descriptor is the right shape
      typeof maybeDesc === 'object' && maybeDesc !== null && 'enumerable' in maybeDesc && 'configurable' in maybeDesc ||
      // TS compatibility
      maybeDesc === undefined)
    );
  }
});
;define("ember-arg-types/-private/throw-console-error", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@embroider/macros"eaimeta@70e063a35619d71f
  let throwConsoleError;
  {
    throwConsoleError = (fn, enabled = true) => {
      const original = console.error;
      console.error = enabled ? msg => {
        const errorMsg = msg.replace(/^Warning: /, '');
        throw new Error(errorMsg);
      } : original;
      try {
        fn();
        // eslint-disable-next-line no-useless-catch
      } catch (e) {
        throw e;
      } finally {
        console.error = original;
      }
    };
  }
  var _default = _exports.default = throwConsoleError;
});
;define("ember-arg-types/decorator", ["exports", "ember-arg-types/-private/is-element-descriptor", "ember-arg-types/-private/throw-console-error", "prop-types", "ember-get-config", "@ember/utils", "ember-arg-types/-private/closest-string"], function (_exports, _isElementDescriptor, _throwConsoleError, PropTypes, _emberGetConfig, _utils, _closestString) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = arg;
  _exports.forbidExtraArgs = forbidExtraArgs;
  0; //eaimeta@70e063a35619d71f0,"ember-arg-types/-private/is-element-descriptor",0,"ember-arg-types/-private/throw-console-error",0,"prop-types",0,"ember-get-config",0,"@ember/utils",0,"ember-arg-types/-private/closest-string",0,"@embroider/macros"eaimeta@70e063a35619d71f
  /* eslint-disable @typescript-eslint/no-explicit-any */
  const REGISTERED_ARGS = Symbol('args');
  const INTERCEPT_CLASS = 'ForbidExtraArgsIntercept';
  function shouldThrowErrors() {
    const throwErrors = _emberGetConfig.default['ember-arg-types']?.throwErrors;
    return (0, _utils.isNone)(throwErrors) ? true : throwErrors;
  }
  function getClassName(instance) {
    return instance.constructor.name === INTERCEPT_CLASS // if the current class is this override
    ? Object.getPrototypeOf(instance.constructor).name // get parent class name
    : instance.constructor.name; // use current class name
  }
  function createGetter(target, key, descriptor, validator) {
    {
      const registeredArgs = target[REGISTERED_ARGS] ?? new Set();
      registeredArgs.add(key);
      target[REGISTERED_ARGS] = registeredArgs;
    }
    const defaultInitializer = descriptor.initializer || descriptor.get || (() => undefined);
    return {
      get() {
        const argValue = this.args[key];
        const returnValue = argValue !== undefined ? argValue : defaultInitializer.call(this);
        {
          const shouldThrow = shouldThrowErrors();
          if (validator) {
            (0, _throwConsoleError.default)(() => {
              PropTypes.checkPropTypes({
                [key]: validator
              }, {
                [key]: returnValue
              }, 'prop', getClassName(this));
            }, shouldThrow);
          }
        }
        return returnValue;
      }
    };
  }
  function arg(...args) {
    if ((0, _isElementDescriptor.default)(...args)) {
      return createGetter(...args);
    }
    const [validator] = args;
    return function argument(...args) {
      return createGetter(...[...args, validator]);
    };
  }
  function forbidExtraArgs(target) {
    let returnClass = target;

    // only subclass in debug mode
    {
      returnClass = class ForbidExtraArgsIntercept extends target {
        constructor(_owner, args) {
          // eslint-disable-next-line prefer-rest-params
          super(...arguments);
          const component = getClassName(this);
          const registeredArgs = this[REGISTERED_ARGS] ?? new Set();
          const unRegisteredArg = Object.keys(args).find(arg => !registeredArgs.has(arg));
          if (unRegisteredArg) {
            const guessedArg = (0, _closestString.closest)(unRegisteredArg, [...registeredArgs]);
            const suggestion = guessedArg ? `(did you mean \`@${guessedArg}\`?) ` : '';
            const expected = [...registeredArgs].map(arg => `'${arg}'`);
            const msg = `Failed extra args check: Invalid argument \`@${unRegisteredArg}\` ${suggestion}supplied to \`${component}\`, expected [${expected}]`;
            const shouldThrow = shouldThrowErrors();
            if (shouldThrow) {
              throw new Error(msg);
            } else {
              console.error(msg);
            }
          }
        }
      };
    }
    return returnClass;
  }
});
;define("ember-arg-types/index", ["exports", "ember-arg-types/decorator"], function (_exports, _decorator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "arg", {
    enumerable: true,
    get: function () {
      return _decorator.default;
    }
  });
  Object.defineProperty(_exports, "forbidExtraArgs", {
    enumerable: true,
    get: function () {
      return _decorator.forbidExtraArgs;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"ember-arg-types/decorator"eaimeta@70e063a35619d71f
});
;define("ember-cli-addon-docs/-private/config", ["exports", "@ember/application", "tracked-toolbox"], function (_exports, _application, _trackedToolbox) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.addonDocsConfig = addonDocsConfig;
  _exports.getAddonDocsConfig = getAddonDocsConfig;
  _exports.getRootURL = getRootURL;
  0; //eaimeta@70e063a35619d71f0,"@ember/application",0,"tracked-toolbox"eaimeta@70e063a35619d71f
  /**
   * Function to get the currently configured rootURL from the containers.
   *
   * @function getRootURL
   * @private
   * @param {*} target Instance of an ember class that has an owner
   * @returns {String} The currently configured rootURL
   */
  function getRootURL(target) {
    return (0, _application.getOwner)(target).resolveRegistration('config:environment').rootURL;
  }

  /**
   * Function to get the current configuration of `ember-cli-addon-docs` from the
   * container.
   *
   * @function getAddonDocsConfig
   * @private
   * @param {*} target Instance of an ember class that has an owner
   * @returns {Object} The `ember-cli-addon-docs` configuration object
   */
  function getAddonDocsConfig(target) {
    return (0, _application.getOwner)(target).resolveRegistration('config:environment')['ember-cli-addon-docs'];
  }

  /**
   * Decorator to use the `ember-cli-addon-docs` configuration object on a class.
   *
   * Usage:
   *
   * ```js
   * class MyComponent extends Component {
   *   @addonDocsConfig config;
   *
   *   get projectName() {
   *     // will return the value of `projectName` configured in the
   *     // `ember-cli-addon-docs` section of the host configuration
   *     return this.config.projectName:
   *   }
   * }
   * ```
   *
   * @function addonDocsConfig
   * @private
   */
  function addonDocsConfig(target, property, descriptor) {
    return (0, _trackedToolbox.cached)(target, property, {
      get() {
        return getAddonDocsConfig(this);
      }
    });
  }
});
;define("ember-cli-addon-docs/adapters/-addon-docs", ["exports", "@ember-data/adapter", "fetch", "ember-cli-addon-docs/-private/config"], function (_exports, _adapter, _fetch, _config) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember-data/adapter",0,"fetch",0,"ember-cli-addon-docs/-private/config"eaimeta@70e063a35619d71f
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  class AddonDocsAdapter extends _adapter.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "defaultSerializer", '-addon-docs');
    }
    get namespace() {
      return `${(0, _config.getRootURL)(this).replace(/\/$/, '')}/docs`;
    }
    shouldBackgroundReloadAll() {
      return false;
    }
    shouldBackgroundReloadRecord() {
      return false;
    }
    findRecord(store, modelClass, id, snapshot) {
      if (modelClass.modelName === 'project') {
        return (0, _fetch.default)(`${this.namespace}/${id}.json`).then(response => response.json());
      } else {
        return store.peekRecord(modelClass.modelName, id);
      }
    }
  }
  _exports.default = AddonDocsAdapter;
});
;define("ember-cli-addon-docs/adapters/class", ["exports", "ember-cli-addon-docs/adapters/-addon-docs"], function (_exports, _addonDocs) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _addonDocs.default;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"ember-cli-addon-docs/adapters/-addon-docs"eaimeta@70e063a35619d71f
});
;define("ember-cli-addon-docs/adapters/component", ["exports", "ember-cli-addon-docs/adapters/-addon-docs"], function (_exports, _addonDocs) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _addonDocs.default;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"ember-cli-addon-docs/adapters/-addon-docs"eaimeta@70e063a35619d71f
});
;define("ember-cli-addon-docs/adapters/module", ["exports", "ember-cli-addon-docs/adapters/-addon-docs"], function (_exports, _addonDocs) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _addonDocs.default;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"ember-cli-addon-docs/adapters/-addon-docs"eaimeta@70e063a35619d71f
});
;define("ember-cli-addon-docs/adapters/project", ["exports", "ember-cli-addon-docs/adapters/-addon-docs"], function (_exports, _addonDocs) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _addonDocs.default;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"ember-cli-addon-docs/adapters/-addon-docs"eaimeta@70e063a35619d71f
});
;define("ember-cli-addon-docs/addon-files", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71feaimeta@70e063a35619d71f
  var _default = _exports.default = [];
});
;define("ember-cli-addon-docs/app-files", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71feaimeta@70e063a35619d71f
  var _default = _exports.default = ["app.js", "components/.gitkeep", "components/event-display.hbs", "components/event-display.js", "components/idle-display.hbs", "components/idle-display.js", "controllers/.gitkeep", "controllers/index.js", "helpers/.gitkeep", "index.html", "models/.gitkeep", "router.js", "routes/.gitkeep", "routes/docs.js", "services/user-idle.js", "styles/app.css", "templates/application.hbs", "templates/index.hbs"];
});
;define("ember-cli-addon-docs/breakpoints", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71feaimeta@70e063a35619d71f
  var _default = _exports.default = {
    mobile: '(max-width: 767px)',
    tablet: '(min-width: 768px) and (max-width: 991px)',
    desktop: '(min-width: 992px) and (max-width: 1200px)'
  };
});
;define("ember-cli-addon-docs/components/api/x-class/index", ["exports", "@ember/component", "@glimmer/component", "@glimmer/tracking", "@ember/object/computed", "@ember/string", "ember-cli-addon-docs/utils/computed", "ember-cli-addon-docs/-private/config", "@ember/template-factory"], function (_exports, _component, _component2, _tracking, _computed, _string, _computed2, _config, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _dec4, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@glimmer/component",0,"@glimmer/tracking",0,"@ember/object/computed",0,"@ember/string",0,"ember-cli-addon-docs/utils/computed",0,"ember-cli-addon-docs/-private/config",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <h1 class="docs-h1" data-test-class-name>{{@class.name}}</h1>
  
  {{! wrapping in a div seems to work around https://github.com/ember-learn/ember-cli-addon-docs/issues/7 }}
  <div data-test-class-description>{{{@class.description}}}</div>
  
  {{#if (or (and @class.exportType this.config.showImportPaths) this.hasToggles)}}
    <Api::XMetaPanel as |panel|>
      {{#if @class.exportType}}
        <panel.header>
          Import Path
        </panel.header>
  
        <Api::XImportPath @item={{@class}} />
      {{/if}}
  
      {{#if @hasToggles}}
        <panel.header>
          Show
        </panel.header>
  
        {{#if @hasToggles}}
          <Api::XToggles @toggles={{hash
              inherited=(if @class.hasInherited this.showInherited)
              protected=(if @class.hasProtected this.showProtected)
              private=(if @class.hasPrivate this.showPrivate)
              deprecated=(if @class.hasDeprecated this.showDeprecated)
            }} />
        {{/if}}
      {{/if}}
    </Api::XMetaPanel>
  {{/if}}
  
  {{#if this.hasContents}}
    <Api::XSections @sections={{hash
        constructors=@class.constructors
        fields=@class.fields
        accessors=@class.accessors
        methods=@class.methods
      }} />
  {{/if}}
  
  */
  {
    "id": "JFEWYmOP",
    "block": "[[[10,\"h1\"],[14,0,\"docs-h1\"],[14,\"data-test-class-name\",\"\"],[12],[1,[30,1,[\"name\"]]],[13],[1,\"\\n\\n\"],[10,0],[14,\"data-test-class-description\",\"\"],[12],[2,[30,1,[\"description\"]]],[13],[1,\"\\n\\n\"],[41,[28,[37,1],[[28,[37,2],[[30,1,[\"exportType\"]],[30,0,[\"config\",\"showImportPaths\"]]],null],[30,0,[\"hasToggles\"]]],null],[[[1,\"  \"],[8,[39,3],null,null,[[\"default\"],[[[[1,\"\\n\"],[41,[30,1,[\"exportType\"]],[[[1,\"      \"],[8,[30,2,[\"header\"]],null,null,[[\"default\"],[[[[1,\"\\n        Import Path\\n      \"]],[]]]]],[1,\"\\n\\n      \"],[8,[39,4],null,[[\"@item\"],[[30,1]]],null],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[30,3],[[[1,\"      \"],[8,[30,2,[\"header\"]],null,null,[[\"default\"],[[[[1,\"\\n        Show\\n      \"]],[]]]]],[1,\"\\n\\n\"],[41,[30,3],[[[1,\"        \"],[8,[39,5],null,[[\"@toggles\"],[[28,[37,6],null,[[\"inherited\",\"protected\",\"private\",\"deprecated\"],[[52,[30,1,[\"hasInherited\"]],[30,0,[\"showInherited\"]]],[52,[30,1,[\"hasProtected\"]],[30,0,[\"showProtected\"]]],[52,[30,1,[\"hasPrivate\"]],[30,0,[\"showPrivate\"]]],[52,[30,1,[\"hasDeprecated\"]],[30,0,[\"showDeprecated\"]]]]]]]],null],[1,\"\\n\"]],[]],null]],[]],null],[1,\"  \"]],[2]]]]],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[30,0,[\"hasContents\"]],[[[1,\"  \"],[8,[39,7],null,[[\"@sections\"],[[28,[37,6],null,[[\"constructors\",\"fields\",\"accessors\",\"methods\"],[[30,1,[\"constructors\"]],[30,1,[\"fields\"]],[30,1,[\"accessors\"]],[30,1,[\"methods\"]]]]]]],null],[1,\"\\n\"]],[]],null]],[\"@class\",\"panel\",\"@hasToggles\"],false,[\"if\",\"or\",\"and\",\"api/x-meta-panel\",\"api/x-import-path\",\"api/x-toggles\",\"hash\",\"api/x-sections\"]]",
    "moduleName": "ember-cli-addon-docs/components/api/x-class/index.hbs",
    "isStrictMode": false
  });
  let XClass = _exports.default = (_dec = (0, _computed2.memberFilter)('args.class', 'accessors'), _dec2 = (0, _computed2.memberFilter)('args.class', 'methods'), _dec3 = (0, _computed2.memberFilter)('args.class', 'fields'), _dec4 = (0, _computed.or)('component.hasInherited', 'component.hasProtected', 'component.hasPrivate', 'component.hasDeprecated'), (_class = class XClass extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "config", _descriptor, this);
      _initializerDefineProperty(this, "showInherited", _descriptor2, this);
      _initializerDefineProperty(this, "showProtected", _descriptor3, this);
      _initializerDefineProperty(this, "showPrivate", _descriptor4, this);
      _initializerDefineProperty(this, "showDeprecated", _descriptor5, this);
      _initializerDefineProperty(this, "accessors", _descriptor6, this);
      _initializerDefineProperty(this, "methods", _descriptor7, this);
      _initializerDefineProperty(this, "fields", _descriptor8, this);
      _initializerDefineProperty(this, "hasToggles", _descriptor9, this);
    }
    get hasContents() {
      let klass = this.args.class;
      return klass.allFields.length > 0 || klass.allAccessors.length > 0 || klass.allMethods.length > 0;
    }
    updateFilter(filter, {
      target: {
        checked
      }
    }) {
      this[`show${(0, _string.capitalize)(filter)}`] = checked;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_config.addonDocsConfig], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "showInherited", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "showProtected", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "showPrivate", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "showDeprecated", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "accessors", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "methods", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "fields", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "hasToggles", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, XClass);
});
;define("ember-cli-addon-docs/components/api/x-component/index", ["exports", "@ember/component", "@glimmer/component", "@glimmer/tracking", "@ember/object", "@ember/object/computed", "@ember/string", "ember-cli-addon-docs/utils/computed", "@ember/template-factory"], function (_exports, _component, _component2, _tracking, _object, _computed, _string, _computed2, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@glimmer/component",0,"@glimmer/tracking",0,"@ember/object",0,"@ember/object/computed",0,"@ember/string",0,"ember-cli-addon-docs/utils/computed",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <h1 class="docs-h1" data-test-component-name>{{@component.name}}</h1>
  
  {{! wrapping in a div seems to work around https://github.com/ember-learn/ember-cli-addon-docs/issues/7 }}
  <div data-test-component-name>{{{@component.description}}}</div>
  
  {{#if this.hasToggles}}
    <Api::XMetaPanel as |panel|>
      <panel.header>
        Show
      </panel.header>
  
      {{#if this.hasToggles}}
        <Api::XToggles @toggles={{hash
            inherited=(if @component.hasInherited this.showInherited)
            internal=(if @component.hasInternal this.showInternal)
            protected=(if @component.hasProtected this.showProtected)
            private=(if @component.hasPrivate this.showPrivate)
            deprecated=(if @component.hasDeprecated this.showDeprecated)
          }} @onToggle={{this.updateFilter}} />
      {{/if}}
    </Api::XMetaPanel>
  {{/if}}
  
  
  {{#if this.hasContents}}
    <Api::XSections @sections={{hash
        constructors=this.constructors
        yields=this.yields
        arguments=this.arguments
        fields=this.fields
        accessors=this.accessors
        methods=this.methods
      }} />
  {{/if}}
  
  */
  {
    "id": "U6TZZDbq",
    "block": "[[[10,\"h1\"],[14,0,\"docs-h1\"],[14,\"data-test-component-name\",\"\"],[12],[1,[30,1,[\"name\"]]],[13],[1,\"\\n\\n\"],[10,0],[14,\"data-test-component-name\",\"\"],[12],[2,[30,1,[\"description\"]]],[13],[1,\"\\n\\n\"],[41,[30,0,[\"hasToggles\"]],[[[1,\"  \"],[8,[39,1],null,null,[[\"default\"],[[[[1,\"\\n    \"],[8,[30,2,[\"header\"]],null,null,[[\"default\"],[[[[1,\"\\n      Show\\n    \"]],[]]]]],[1,\"\\n\\n\"],[41,[30,0,[\"hasToggles\"]],[[[1,\"      \"],[8,[39,2],null,[[\"@toggles\",\"@onToggle\"],[[28,[37,3],null,[[\"inherited\",\"internal\",\"protected\",\"private\",\"deprecated\"],[[52,[30,1,[\"hasInherited\"]],[30,0,[\"showInherited\"]]],[52,[30,1,[\"hasInternal\"]],[30,0,[\"showInternal\"]]],[52,[30,1,[\"hasProtected\"]],[30,0,[\"showProtected\"]]],[52,[30,1,[\"hasPrivate\"]],[30,0,[\"showPrivate\"]]],[52,[30,1,[\"hasDeprecated\"]],[30,0,[\"showDeprecated\"]]]]]],[30,0,[\"updateFilter\"]]]],null],[1,\"\\n\"]],[]],null],[1,\"  \"]],[2]]]]],[1,\"\\n\"]],[]],null],[1,\"\\n\\n\"],[41,[30,0,[\"hasContents\"]],[[[1,\"  \"],[8,[39,4],null,[[\"@sections\"],[[28,[37,3],null,[[\"constructors\",\"yields\",\"arguments\",\"fields\",\"accessors\",\"methods\"],[[30,0,[\"constructors\"]],[30,0,[\"yields\"]],[30,0,[\"arguments\"]],[30,0,[\"fields\"]],[30,0,[\"accessors\"]],[30,0,[\"methods\"]]]]]]],null],[1,\"\\n\"]],[]],null]],[\"@component\",\"panel\"],false,[\"if\",\"api/x-meta-panel\",\"api/x-toggles\",\"hash\",\"api/x-sections\"]]",
    "moduleName": "ember-cli-addon-docs/components/api/x-component/index.hbs",
    "isStrictMode": false
  });
  let XComponent = _exports.default = (_dec = (0, _computed.alias)('args.component.overloadedYields'), _dec2 = (0, _computed2.memberFilter)('args.component', 'arguments'), _dec3 = (0, _computed2.memberFilter)('args.component', 'accessors'), _dec4 = (0, _computed2.memberFilter)('args.component', 'methods'), _dec5 = (0, _computed2.memberFilter)('args.component', 'fields'), _dec6 = (0, _computed.or)('args.component.hasInherited', 'args.component.hasInternal', 'args.component.hasProtected', 'args.component.hasPrivate', 'args.component.hasDeprecated'), (_class = class XComponent extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "showInherited", _descriptor, this);
      _initializerDefineProperty(this, "showInternal", _descriptor2, this);
      _initializerDefineProperty(this, "showProtected", _descriptor3, this);
      _initializerDefineProperty(this, "showPrivate", _descriptor4, this);
      _initializerDefineProperty(this, "showDeprecated", _descriptor5, this);
      _initializerDefineProperty(this, "yields", _descriptor6, this);
      _initializerDefineProperty(this, "arguments", _descriptor7, this);
      _initializerDefineProperty(this, "accessors", _descriptor8, this);
      _initializerDefineProperty(this, "methods", _descriptor9, this);
      _initializerDefineProperty(this, "fields", _descriptor10, this);
      _initializerDefineProperty(this, "hasToggles", _descriptor11, this);
    }
    get hasContents() {
      let component = this.args.component;
      return component.overloadedYields.length > 0 || component.arguments.length > 0 || component.fields.length > 0 || component.accessors.length > 0 || component.methods.length > 0;
    }
    updateFilter(filter, {
      target: {
        checked
      }
    }) {
      this[`show${(0, _string.capitalize)(filter)}`] = checked;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "showInherited", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "showInternal", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "showProtected", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "showPrivate", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "showDeprecated", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "yields", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "arguments", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "accessors", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "methods", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "fields", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "hasToggles", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "updateFilter", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "updateFilter"), _class.prototype)), _class));
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, XComponent);
});
;define("ember-cli-addon-docs/components/api/x-import-path", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div class="import-path docs-mb-6" data-test-import-path ...attributes>
    <pre class="docs-md__code docs-whitespace-no-wrap">
      <span class="hljs-keyword">
        import
      </span>
  
      {{#if (eq @item.exportType "default")}}
        {{@item.name}}
      {{else}}
        { {{@item.name}} }
      {{/if}}
  
      <span class="hljs-keyword">
        from
      </span>
      <span class="hljs-string">'{{@item.file}}'</span>;
    </pre>
  </div>
  */
  {
    "id": "cTtMMTE/",
    "block": "[[[11,0],[24,0,\"import-path docs-mb-6\"],[24,\"data-test-import-path\",\"\"],[17,1],[12],[1,\"\\n  \"],[10,\"pre\"],[14,0,\"docs-md__code docs-whitespace-no-wrap\"],[12],[1,\"    \"],[10,1],[14,0,\"hljs-keyword\"],[12],[1,\"\\n      import\\n    \"],[13],[1,\"\\n\\n\"],[41,[28,[37,1],[[30,2,[\"exportType\"]],\"default\"],null],[[[1,\"      \"],[1,[30,2,[\"name\"]]],[1,\"\\n\"]],[]],[[[1,\"      { \"],[1,[30,2,[\"name\"]]],[1,\" }\\n\"]],[]]],[1,\"\\n    \"],[10,1],[14,0,\"hljs-keyword\"],[12],[1,\"\\n      from\\n    \"],[13],[1,\"\\n    \"],[10,1],[14,0,\"hljs-string\"],[12],[1,\"'\"],[1,[30,2,[\"file\"]]],[1,\"'\"],[13],[1,\";\\n  \"],[13],[1,\"\\n\"],[13]],[\"&attrs\",\"@item\"],false,[\"if\",\"eq\"]]",
    "moduleName": "ember-cli-addon-docs/components/api/x-import-path.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-cli-addon-docs/components/api/x-meta-panel/header", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
        <h4 class="docs-mb-2 docs-text-grey docs-font-bold docs-tracking-wide docs-uppercase docs-text-xxs" ...attributes>
        {{yield}}
      </h4>
  */
  {
    "id": "osnTTt2i",
    "block": "[[[1,\"    \"],[11,\"h4\"],[24,0,\"docs-mb-2 docs-text-grey docs-font-bold docs-tracking-wide docs-uppercase docs-text-xxs\"],[17,1],[12],[1,\"\\n      \"],[18,2,null],[1,\"\\n    \"],[13]],[\"&attrs\",\"&default\"],false,[\"yield\"]]",
    "moduleName": "ember-cli-addon-docs/components/api/x-meta-panel/header.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-cli-addon-docs/components/api/x-meta-panel/index", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
        <div class="docs-px-6 docs-pt-3 docs-mt-4 docs-border docs-border-grey-light docs-rounded docs-text-xs" ...attributes>
        {{yield (hash
          header=(component 'api/x-meta-panel/header')
        )}}
      </div>
  */
  {
    "id": "6d6HWZV4",
    "block": "[[[1,\"    \"],[11,0],[24,0,\"docs-px-6 docs-pt-3 docs-mt-4 docs-border docs-border-grey-light docs-rounded docs-text-xs\"],[17,1],[12],[1,\"\\n      \"],[18,2,[[28,[37,1],null,[[\"header\"],[[50,\"api/x-meta-panel/header\",0,null,null]]]]]],[1,\"\\n    \"],[13]],[\"&attrs\",\"&default\"],false,[\"yield\",\"hash\",\"component\"]]",
    "moduleName": "ember-cli-addon-docs/components/api/x-meta-panel/index.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-cli-addon-docs/components/api/x-module/index", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <Api::XSections
    @sections={{
      hash
      classes=@module.classes
      components=@module.components
      functions=@module.functions
      variables=@module.variables
    }}
    ...attributes
  />
  */
  {
    "id": "8vqJOol0",
    "block": "[[[8,[39,0],[[17,1]],[[\"@sections\"],[[28,[37,1],null,[[\"classes\",\"components\",\"functions\",\"variables\"],[[30,2,[\"classes\"]],[30,2,[\"components\"]],[30,2,[\"functions\"]],[30,2,[\"variables\"]]]]]]],null]],[\"&attrs\",\"@module\"],false,[\"api/x-sections\",\"hash\"]]",
    "moduleName": "ember-cli-addon-docs/components/api/x-module/index.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-cli-addon-docs/components/api/x-section/index", ["exports", "@ember/component", "@glimmer/component", "ember-cli-addon-docs/-private/config", "@ember/template-factory"], function (_exports, _component, _component2, _config, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@glimmer/component",0,"ember-cli-addon-docs/-private/config",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div data-test-item class="docs-pb-8" ...attributes>
    <h3
      id={{@item.name}}
      data-text={{@item.name}}
      data-test-item-header
      class="docs-h3 docs-font-mono docs-font-normal"
    >
      {{#if (eq @item.exportType "default")}}
        <span class="docs-border docs-border-grey-light docs-align-text-top docs-leading-loose docs-text-xxs docs-pl-2 docs-mr-2 docs-py-1 docs-rounded">
          Default
        </span>
      {{/if}}
  
      {{#if (or @item.isClass @item.isComponent)}}
        <LinkTo @route="docs.api.item" @model={{concat "modules/" @item.id}} class="hover:underline">
          <strong>{{@item.name}}</strong>
        </LinkTo>
      {{else}}
        <a href="#{{@item.name}}" class="heading-anchor">
          {{type-signature @item}}
        </a>
      {{/if}}
    </h3>
  
    <p data-test-item-description>
      {{{@item.description}}}
    </p>
  
    {{#if (or (and @item.exportType this.config.showImportPaths) this.shouldDisplayParams)}}
      <Api::XMetaPanel as |panel|>
        {{#if @item.exportType}}
          <panel.header>
            Import Path
          </panel.header>
  
          <Api::XImportPath @item={{@item}} />
        {{/if}}
  
        {{#if this.shouldDisplayParams}}
          <panel.header>
            Params
          </panel.header>
  
          <table class="docs-mb-6" data-test-item-params>
            <tbody>
              {{#each @item.params as |param|}}
                <tr data-test-item-param>
                  <td><span class="docs-font-mono docs-font-bold docs-border-r docs-border-grey-light docs-pr-2">{{param.name}}</span></td>
                  <td><span class="docs-font-mono docs-border-r docs-border-grey-light docs-px-2">{{param.type}}</span></td>
                  <td class="docs-pl-2">{{param.description}}</td>
                </tr>
              {{/each}}
            </tbody>
          </table>
        {{/if}}
      </Api::XMetaPanel>
    {{/if}}
  </div>
  
  */
  {
    "id": "0og8AKw0",
    "block": "[[[11,0],[24,\"data-test-item\",\"\"],[24,0,\"docs-pb-8\"],[17,1],[12],[1,\"\\n  \"],[10,\"h3\"],[15,1,[30,2,[\"name\"]]],[15,\"data-text\",[30,2,[\"name\"]]],[14,\"data-test-item-header\",\"\"],[14,0,\"docs-h3 docs-font-mono docs-font-normal\"],[12],[1,\"\\n\"],[41,[28,[37,1],[[30,2,[\"exportType\"]],\"default\"],null],[[[1,\"      \"],[10,1],[14,0,\"docs-border docs-border-grey-light docs-align-text-top docs-leading-loose docs-text-xxs docs-pl-2 docs-mr-2 docs-py-1 docs-rounded\"],[12],[1,\"\\n        Default\\n      \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[28,[37,2],[[30,2,[\"isClass\"]],[30,2,[\"isComponent\"]]],null],[[[1,\"      \"],[8,[39,3],[[24,0,\"hover:underline\"]],[[\"@route\",\"@model\"],[\"docs.api.item\",[28,[37,4],[\"modules/\",[30,2,[\"id\"]]],null]]],[[\"default\"],[[[[1,\"\\n        \"],[10,\"strong\"],[12],[1,[30,2,[\"name\"]]],[13],[1,\"\\n      \"]],[]]]]],[1,\"\\n\"]],[]],[[[1,\"      \"],[10,3],[15,6,[29,[\"#\",[30,2,[\"name\"]]]]],[14,0,\"heading-anchor\"],[12],[1,\"\\n        \"],[1,[28,[35,5],[[30,2]],null]],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]]],[1,\"  \"],[13],[1,\"\\n\\n  \"],[10,2],[14,\"data-test-item-description\",\"\"],[12],[1,\"\\n    \"],[2,[30,2,[\"description\"]]],[1,\"\\n  \"],[13],[1,\"\\n\\n\"],[41,[28,[37,2],[[28,[37,6],[[30,2,[\"exportType\"]],[30,0,[\"config\",\"showImportPaths\"]]],null],[30,0,[\"shouldDisplayParams\"]]],null],[[[1,\"    \"],[8,[39,7],null,null,[[\"default\"],[[[[1,\"\\n\"],[41,[30,2,[\"exportType\"]],[[[1,\"        \"],[8,[30,3,[\"header\"]],null,null,[[\"default\"],[[[[1,\"\\n          Import Path\\n        \"]],[]]]]],[1,\"\\n\\n        \"],[8,[39,8],null,[[\"@item\"],[[30,2]]],null],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[30,0,[\"shouldDisplayParams\"]],[[[1,\"        \"],[8,[30,3,[\"header\"]],null,null,[[\"default\"],[[[[1,\"\\n          Params\\n        \"]],[]]]]],[1,\"\\n\\n        \"],[10,\"table\"],[14,0,\"docs-mb-6\"],[14,\"data-test-item-params\",\"\"],[12],[1,\"\\n          \"],[10,\"tbody\"],[12],[1,\"\\n\"],[42,[28,[37,10],[[28,[37,10],[[30,2,[\"params\"]]],null]],null],null,[[[1,\"              \"],[10,\"tr\"],[14,\"data-test-item-param\",\"\"],[12],[1,\"\\n                \"],[10,\"td\"],[12],[10,1],[14,0,\"docs-font-mono docs-font-bold docs-border-r docs-border-grey-light docs-pr-2\"],[12],[1,[30,4,[\"name\"]]],[13],[13],[1,\"\\n                \"],[10,\"td\"],[12],[10,1],[14,0,\"docs-font-mono docs-border-r docs-border-grey-light docs-px-2\"],[12],[1,[30,4,[\"type\"]]],[13],[13],[1,\"\\n                \"],[10,\"td\"],[14,0,\"docs-pl-2\"],[12],[1,[30,4,[\"description\"]]],[13],[1,\"\\n              \"],[13],[1,\"\\n\"]],[4]],null],[1,\"          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n\"]],[]],null],[1,\"    \"]],[3]]]]],[1,\"\\n\"]],[]],null],[13],[1,\"\\n\"]],[\"&attrs\",\"@item\",\"panel\",\"param\"],false,[\"if\",\"eq\",\"or\",\"link-to\",\"concat\",\"type-signature\",\"and\",\"api/x-meta-panel\",\"api/x-import-path\",\"each\",\"-track-array\"]]",
    "moduleName": "ember-cli-addon-docs/components/api/x-section/index.hbs",
    "isStrictMode": false
  });

  /**
    @class Api/XSection
    @hide
  */
  let XSection = _exports.default = (_class = class XSection extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "config", _descriptor, this);
    }
    /**
     * Params shouldn't be displayed when there are no descriptions and no subparams,
     * because the information is already displayed in the type signature and redundant
     *
     * @function
     * @hide
     */
    get shouldDisplayParams() {
      let params = this.args.item?.params || [];
      return params.some(p => p.description || p.name.includes('.'));
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_config.addonDocsConfig], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, XSection);
});
;define("ember-cli-addon-docs/components/api/x-sections", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#each-in @sections as |sectionName items|}}
    {{#if items}}
      <section data-test-api-section class="item-section">
        <h2 data-test-section-header={{sectionName}} class="docs-h2">
          {{capitalize sectionName}}
        </h2>
  
        {{#each items as |item|}}
          <Api::XSection @item={{item}} />
        {{/each}}
      </section>
    {{/if}}
  {{/each-in}}
  */
  {
    "id": "C8xY70lK",
    "block": "[[[42,[28,[37,1],[[30,1]],null],null,[[[41,[30,2],[[[1,\"    \"],[10,\"section\"],[14,\"data-test-api-section\",\"\"],[14,0,\"item-section\"],[12],[1,\"\\n      \"],[10,\"h2\"],[15,\"data-test-section-header\",[30,3]],[14,0,\"docs-h2\"],[12],[1,\"\\n        \"],[1,[28,[35,3],[[30,3]],null]],[1,\"\\n      \"],[13],[1,\"\\n\\n\"],[42,[28,[37,4],[[28,[37,4],[[30,2]],null]],null],null,[[[1,\"        \"],[8,[39,5],null,[[\"@item\"],[[30,4]]],null],[1,\"\\n\"]],[4]],null],[1,\"    \"],[13],[1,\"\\n\"]],[]],null]],[2,3]],null]],[\"@sections\",\"items\",\"sectionName\",\"item\"],false,[\"each\",\"-each-in\",\"if\",\"capitalize\",\"-track-array\",\"api/x-section\"]]",
    "moduleName": "ember-cli-addon-docs/components/api/x-sections.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-cli-addon-docs/components/api/x-toggles", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <ul class="docs-mb-6" ...attributes>
    {{#each-in @toggles as |key toggle|}}
      {{#if (not-eq toggle undefined)}}
        <li class="docs-inline docs-ml-4">
          <label data-test-toggle>
            <input type="checkbox"
              checked={{toggle}}
              onclick={{fn @onToggle key}}
              class="docs-mr-1"
            >
  
            {{capitalize key}}
          </label>
        </li>
      {{/if}}
    {{/each-in}}
  </ul>
  
  */
  {
    "id": "2OTs/kyz",
    "block": "[[[11,\"ul\"],[24,0,\"docs-mb-6\"],[17,1],[12],[1,\"\\n\"],[42,[28,[37,1],[[30,2]],null],null,[[[41,[28,[37,3],[[30,3],[27]],null],[[[1,\"      \"],[10,\"li\"],[14,0,\"docs-inline docs-ml-4\"],[12],[1,\"\\n        \"],[10,\"label\"],[14,\"data-test-toggle\",\"\"],[12],[1,\"\\n          \"],[10,\"input\"],[15,\"checked\",[30,3]],[15,\"onclick\",[28,[37,4],[[30,5],[30,4]],null]],[14,0,\"docs-mr-1\"],[14,4,\"checkbox\"],[12],[13],[1,\"\\n\\n          \"],[1,[28,[35,5],[[30,4]],null]],[1,\"\\n        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],null]],[3,4]],null],[13],[1,\"\\n\"]],[\"&attrs\",\"@toggles\",\"toggle\",\"key\",\"@onToggle\"],false,[\"each\",\"-each-in\",\"if\",\"not-eq\",\"fn\",\"capitalize\"]]",
    "moduleName": "ember-cli-addon-docs/components/api/x-toggles.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-cli-addon-docs/components/docs-code-highlight/index", ["exports", "@ember/component", "@glimmer/component", "highlight.js/lib/core", "highlight.js/lib/languages/javascript", "highlight.js/lib/languages/css", "highlight.js/lib/languages/handlebars", "highlight.js/lib/languages/json", "highlight.js/lib/languages/xml", "highlight.js/lib/languages/diff", "highlight.js/lib/languages/shell", "highlight.js/lib/languages/typescript", "@ember/template-factory"], function (_exports, _component, _component2, _core, _javascript, _css, _handlebars, _json, _xml, _diff, _shell, _typescript, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@glimmer/component",0,"highlight.js/lib/core",0,"highlight.js/lib/languages/javascript",0,"highlight.js/lib/languages/css",0,"highlight.js/lib/languages/handlebars",0,"highlight.js/lib/languages/json",0,"highlight.js/lib/languages/xml",0,"highlight.js/lib/languages/diff",0,"highlight.js/lib/languages/shell",0,"highlight.js/lib/languages/typescript",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <pre
    class={{@language}}
    {{did-insert this.setupElement}}
    ...attributes
  >{{yield}}</pre>
  */
  {
    "id": "cbpaTHEj",
    "block": "[[[11,\"pre\"],[16,0,[30,1]],[17,2],[4,[38,0],[[30,0,[\"setupElement\"]]],null],[12],[18,3,null],[13]],[\"@language\",\"&attrs\",\"&default\"],false,[\"did-insert\",\"yield\"]]",
    "moduleName": "ember-cli-addon-docs/components/docs-code-highlight/index.hbs",
    "isStrictMode": false
  });

  // Installed languages

  _core.default.registerLanguage('javascript', _javascript.default);
  _core.default.registerLanguage('js', _javascript.default);
  _core.default.registerLanguage('css', _css.default);
  _core.default.registerLanguage('handlebars', _handlebars.default);
  _core.default.registerLanguage('htmlbars', _handlebars.default);
  _core.default.registerLanguage('hbs', _handlebars.default);
  _core.default.registerLanguage('json', _json.default);
  _core.default.registerLanguage('xml', _xml.default);
  _core.default.registerLanguage('diff', _diff.default);
  _core.default.registerLanguage('shell', _shell.default);
  _core.default.registerLanguage('sh', _shell.default);
  _core.default.registerLanguage('typescript', _typescript.default);
  _core.default.registerLanguage('ts', _typescript.default);
  class DocsCodeHighlight extends _component2.default {
    setupElement(element) {
      _core.default.highlightElement(element);
    }
  }
  _exports.default = DocsCodeHighlight;
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, DocsCodeHighlight);
});
;define("ember-cli-addon-docs/components/docs-demo/index", ["exports", "@ember/component", "@ember/object", "@ember/array", "@glimmer/component", "@glimmer/tracking", "@ember/template-factory"], function (_exports, _component, _object, _array, _component2, _tracking, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/object",0,"@ember/array",0,"@glimmer/component",0,"@glimmer/tracking",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div class="docs-rounded docs-border docs-border-grey-lighter docs-my-8" ...attributes>
  
    {{yield (hash
      example=(component "docs-demo/x-example")
      snippet=(component "docs-demo/x-snippet" didInit=this.registerSnippet activeSnippet=this.activeSnippet)
    )}}
  
    <div>
      {{#if (and this.snippets (gt this.snippets.length 1))}}
        <nav class="
          docs-demo__snippets-nav docs-py-2 docs-px-4 docs-font-medium
          docs-bg-black docs-tracking-tight docs-border-b
          docs-border-grey-darkest
        ">
          {{#each this.snippets as |snippet|}}
            <button {{on "click" (fn this.selectSnippet snippet)}}
              class="
                docs-mr-4 docs-text-xs docs-no-underline outline-none
                hover:docs-text-grey-lighter
                {{if snippet.isActive
                  "docs-text-grey-lighter"
                  "docs-text-grey-dark"
                }}
              "
            >
              {{snippet.label}}
            </button>
          {{/each}}
        </nav>
      {{/if}}
  
      {{#each this.snippets as |snippet|}}
        {{#if snippet.isActive}}
          <div class="
            docs-demo__snippet-wrapper docs-bg-code-base docs-rounded-b
          ">
            <DocsSnippet @name={{snippet.name}} @unindent={{true}} @language={{snippet.language}} />
          </div>
        {{/if}}
      {{/each}}
    </div>
  
  </div>
  
  */
  {
    "id": "qGOhVh7Q",
    "block": "[[[11,0],[24,0,\"docs-rounded docs-border docs-border-grey-lighter docs-my-8\"],[17,1],[12],[1,\"\\n\\n  \"],[18,4,[[28,[37,1],null,[[\"example\",\"snippet\"],[[50,\"docs-demo/x-example\",0,null,null],[50,\"docs-demo/x-snippet\",0,null,[[\"didInit\",\"activeSnippet\"],[[30,0,[\"registerSnippet\"]],[30,0,[\"activeSnippet\"]]]]]]]]]],[1,\"\\n\\n  \"],[10,0],[12],[1,\"\\n\"],[41,[28,[37,4],[[30,0,[\"snippets\"]],[28,[37,5],[[30,0,[\"snippets\",\"length\"]],1],null]],null],[[[1,\"      \"],[10,\"nav\"],[14,0,\"\\n        docs-demo__snippets-nav docs-py-2 docs-px-4 docs-font-medium\\n        docs-bg-black docs-tracking-tight docs-border-b\\n        docs-border-grey-darkest\\n      \"],[12],[1,\"\\n\"],[42,[28,[37,7],[[28,[37,7],[[30,0,[\"snippets\"]]],null]],null],null,[[[1,\"          \"],[11,\"button\"],[16,0,[29,[\"\\n              docs-mr-4 docs-text-xs docs-no-underline outline-none\\n              hover:docs-text-grey-lighter\\n              \",[52,[30,2,[\"isActive\"]],\"docs-text-grey-lighter\",\"docs-text-grey-dark\"],\"\\n            \"]]],[4,[38,8],[\"click\",[28,[37,9],[[30,0,[\"selectSnippet\"]],[30,2]],null]],null],[12],[1,\"\\n            \"],[1,[30,2,[\"label\"]]],[1,\"\\n          \"],[13],[1,\"\\n\"]],[2]],null],[1,\"      \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[42,[28,[37,7],[[28,[37,7],[[30,0,[\"snippets\"]]],null]],null],null,[[[41,[30,3,[\"isActive\"]],[[[1,\"        \"],[10,0],[14,0,\"\\n          docs-demo__snippet-wrapper docs-bg-code-base docs-rounded-b\\n        \"],[12],[1,\"\\n          \"],[8,[39,10],null,[[\"@name\",\"@unindent\",\"@language\"],[[30,3,[\"name\"]],true,[30,3,[\"language\"]]]],null],[1,\"\\n        \"],[13],[1,\"\\n\"]],[]],null]],[3]],null],[1,\"  \"],[13],[1,\"\\n\\n\"],[13],[1,\"\\n\"]],[\"&attrs\",\"snippet\",\"snippet\",\"&default\"],false,[\"yield\",\"hash\",\"component\",\"if\",\"and\",\"gt\",\"each\",\"-track-array\",\"on\",\"fn\",\"docs-snippet\"]]",
    "moduleName": "ember-cli-addon-docs/components/docs-demo/index.hbs",
    "isStrictMode": false
  });

  /**
    A demo component that can be used to demonstrate code samples. Comes
    with built in snippet handling, so you don't have to write code twice!
  
    ```hbs
    <DocsDemo as |demo|>
      <demo.example @name="docs-demo-basic.hbs">
        <p>I am a <strong>handlebars</strong> template!</p>
        <p>The value is: {{this.val}}</p>
        <div>
          <Input @value={{this.val}}/>
        </div>
      </demo.example>
  
      <demo.snippet @name="docs-demo-basic.hbs"/>
    </DocsDemo>
    ```
  
    @class DocsDemo
    @yield {Hash} demo
    @yield {Component} demo.example
    @yield {Component} demo.snippet
    @yield {Component} demo.liveExample
  */
  let DocsDemo = _exports.default = (_class = class DocsDemo extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "activeSnippet", _descriptor, this);
      /**
        The snippets registered with this demo component
         @field snippetRegistrations
        @type Array<Object>
      */
      _defineProperty(this, "snippetRegistrations", (0, _array.A)());
    }
    /**
      The finalized snippets complete with name (or default), language,
      and whether or not it is active.
       @computed snippets
      @private
      @type Array<Object>
      @readOnly
     */
    get snippets() {
      let activeSnippet = this.activeSnippet;
      return this.snippetRegistrations.map(({
        name,
        label,
        language
      }) => {
        let defaults = this.defaultsFromName(name);
        return {
          name,
          isActive: activeSnippet === name,
          label: label || defaults.label,
          language: language || defaults.language
        };
      });
    }

    /**
      Returns the default label and language based on snippet file name
       @method defaultsFromName
      @param {String} name
      @return {Object}
    */
    defaultsFromName(name) {
      let label, language;
      switch (name.split('.').pop()) {
        case 'js':
          label = 'controller.js';
          language = 'javascript';
          break;
        case 'css':
          label = 'styles.css';
          language = 'css';
          break;
        case 'scss':
          label = 'styles.scss';
          language = 'sass';
          break;
        case 'hbs':
        case 'md':
          label = 'template.hbs';
          language = 'handlebars';
          break;
        default:
          label = 'script.js';
          break;
      }
      return {
        label,
        language
      };
    }

    /**
      Registers snippets with the demo component and sets it to the active
      snippet if it's the only one
       @action registerSnippet
      @param {Object} snippet
    */
    registerSnippet(snippet) {
      this.snippetRegistrations.pushObject(snippet);
      if (this.snippetRegistrations.length === 1) {
        this.activeSnippet = snippet.name;
      }
    }

    /**
      Sets the active snippet
       @action selectSnippet
      @param {Object} snippet
    */
    selectSnippet(snippet) {
      this.activeSnippet = snippet.name;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "activeSnippet", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "registerSnippet", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "registerSnippet"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "selectSnippet", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "selectSnippet"), _class.prototype)), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, DocsDemo);
});
;define("ember-cli-addon-docs/components/docs-demo/x-example/index", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div id="example-{{@name}}" class="docs-p-4" ...attributes>
    {{yield}}
  </div>
  */
  {
    "id": "WqS/BMxo",
    "block": "[[[11,0],[16,1,[29,[\"example-\",[30,1]]]],[24,0,\"docs-p-4\"],[17,2],[12],[1,\"\\n  \"],[18,3,null],[1,\"\\n\"],[13]],[\"@name\",\"&attrs\",\"&default\"],false,[\"yield\"]]",
    "moduleName": "ember-cli-addon-docs/components/docs-demo/x-example/index.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-cli-addon-docs/components/docs-demo/x-snippet", ["exports", "@ember/runloop", "@glimmer/component"], function (_exports, _runloop, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember/runloop",0,"@glimmer/component"eaimeta@70e063a35619d71f
  class XSnippet extends _component.default {
    constructor() {
      super(...arguments);
      (0, _runloop.scheduleOnce)('afterRender', () => {
        this.args.didInit({
          name: this.args.name,
          label: this.args.label,
          language: this.args.language
        });
      });
    }
  }
  _exports.default = XSnippet;
});
;define("ember-cli-addon-docs/components/docs-header/index", ["exports", "@ember/component", "@glimmer/component", "@glimmer/tracking", "@ember/string", "ember-cli-addon-docs/utils/computed", "@ember/service", "@ember/object/computed", "@ember/object", "ember-cli-addon-docs/-private/config", "@ember/template-factory"], function (_exports, _component, _component2, _tracking, _string, _computed, _service, _computed2, _object, _config, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@glimmer/component",0,"@glimmer/tracking",0,"@ember/string",0,"ember-cli-addon-docs/utils/computed",0,"@ember/service",0,"@ember/object/computed",0,"@ember/object",0,"ember-cli-addon-docs/-private/config",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <header class="docs-shadow docs-relative docs-z-40 docs-bg-white" ...attributes>
    <div class="docs-flex docs-items-center docs-max-w-site-container docs-mx-auto md:docs-px-2">
  
      <DocsHeader::Link @route="index">
        <span class="docs-leading-none docs-font-title docs-text-large-2 docs-font-normal docs-normal-case docs-block docs-mr-6">
          {{#if this.prefix}}
            <div class="docs-text-xxs">
              {{this.prefix}}
            </div>
          {{/if}}
          {{this.name}}
        </span>
      </DocsHeader::Link>
  
      <div class="docs-flex-1 docs-flex docs-items-center docs-overflow-auto docs-scrolling-touch docs-mask-image md:docs-no-mask-image">
        <DocsHeader::Link @route="docs">
          Documentation
        </DocsHeader::Link>
  
        {{yield (hash
          link=(component "docs-header/link")
        )}}
  
        <DocsHeader::SearchBox @query={{this.query}} @onInput={{set this "query"}} />
  
        <DocsHeader::Link @onClick={{toggle "isShowingVersionSelector" this}}>
          <span data-test-id="current-version" data-version-selector class="docs-flex docs-items-center">
  
            {{#if (eq this.currentVersion.key this.config.latestVersionName)}}
              {{#if this.currentVersion.tag}}
                {{this.currentVersion.tag}}
              {{else}}
                Latest
              {{/if}}
            {{else}}
              {{this.currentVersion.name}}
            {{/if}}
  
            {{svg-jar "caret" height=12 width=12}}
          </span>
        </DocsHeader::Link>
  
        {{#if this.config.projectHref}}
          <DocsHeader::Link @href={{this.config.projectHref}}>
            <span class="docs-flex">
              {{svg-jar "github" width=24 height=24}}
            </span>
          </DocsHeader::Link>
        {{/if}}
  
        {{!-- Something to take up space on mobile, so the scrolling nav isn't hugging the edge --}}
        <div class="docs-h-px docs-px-3 sm:docs-hidden"></div>
      </div>
    </div>
  </header>
  
  {{#if this.query}}
    <DocsHeader::SearchResults @query={{this.query}} @onClose={{set this "query" null}} @onVisit={{this.didVisitPage}} />
  {{/if}}
  
  {{#if this.isShowingVersionSelector}}
    <DocsHeader::VersionSelector @onClose={{set this "isShowingVersionSelector" false}} />
  {{/if}}
  
  */
  {
    "id": "p8XoN5Fj",
    "block": "[[[11,\"header\"],[24,0,\"docs-shadow docs-relative docs-z-40 docs-bg-white\"],[17,1],[12],[1,\"\\n  \"],[10,0],[14,0,\"docs-flex docs-items-center docs-max-w-site-container docs-mx-auto md:docs-px-2\"],[12],[1,\"\\n\\n    \"],[8,[39,0],null,[[\"@route\"],[\"index\"]],[[\"default\"],[[[[1,\"\\n      \"],[10,1],[14,0,\"docs-leading-none docs-font-title docs-text-large-2 docs-font-normal docs-normal-case docs-block docs-mr-6\"],[12],[1,\"\\n\"],[41,[30,0,[\"prefix\"]],[[[1,\"          \"],[10,0],[14,0,\"docs-text-xxs\"],[12],[1,\"\\n            \"],[1,[30,0,[\"prefix\"]]],[1,\"\\n          \"],[13],[1,\"\\n\"]],[]],null],[1,\"        \"],[1,[30,0,[\"name\"]]],[1,\"\\n      \"],[13],[1,\"\\n    \"]],[]]]]],[1,\"\\n\\n    \"],[10,0],[14,0,\"docs-flex-1 docs-flex docs-items-center docs-overflow-auto docs-scrolling-touch docs-mask-image md:docs-no-mask-image\"],[12],[1,\"\\n      \"],[8,[39,0],null,[[\"@route\"],[\"docs\"]],[[\"default\"],[[[[1,\"\\n        Documentation\\n      \"]],[]]]]],[1,\"\\n\\n      \"],[18,2,[[28,[37,3],null,[[\"link\"],[[50,\"docs-header/link\",0,null,null]]]]]],[1,\"\\n\\n      \"],[8,[39,5],null,[[\"@query\",\"@onInput\"],[[30,0,[\"query\"]],[28,[37,6],[[30,0],\"query\"],null]]],null],[1,\"\\n\\n      \"],[8,[39,0],null,[[\"@onClick\"],[[28,[37,7],[\"isShowingVersionSelector\",[30,0]],null]]],[[\"default\"],[[[[1,\"\\n        \"],[10,1],[14,\"data-test-id\",\"current-version\"],[14,\"data-version-selector\",\"\"],[14,0,\"docs-flex docs-items-center\"],[12],[1,\"\\n\\n\"],[41,[28,[37,8],[[30,0,[\"currentVersion\",\"key\"]],[30,0,[\"config\",\"latestVersionName\"]]],null],[[[41,[30,0,[\"currentVersion\",\"tag\"]],[[[1,\"              \"],[1,[30,0,[\"currentVersion\",\"tag\"]]],[1,\"\\n\"]],[]],[[[1,\"              Latest\\n\"]],[]]]],[]],[[[1,\"            \"],[1,[30,0,[\"currentVersion\",\"name\"]]],[1,\"\\n\"]],[]]],[1,\"\\n          \"],[1,[28,[35,9],[\"caret\"],[[\"height\",\"width\"],[12,12]]]],[1,\"\\n        \"],[13],[1,\"\\n      \"]],[]]]]],[1,\"\\n\\n\"],[41,[30,0,[\"config\",\"projectHref\"]],[[[1,\"        \"],[8,[39,0],null,[[\"@href\"],[[30,0,[\"config\",\"projectHref\"]]]],[[\"default\"],[[[[1,\"\\n          \"],[10,1],[14,0,\"docs-flex\"],[12],[1,\"\\n            \"],[1,[28,[35,9],[\"github\"],[[\"width\",\"height\"],[24,24]]]],[1,\"\\n          \"],[13],[1,\"\\n        \"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[1,\"      \"],[10,0],[14,0,\"docs-h-px docs-px-3 sm:docs-hidden\"],[12],[13],[1,\"\\n    \"],[13],[1,\"\\n  \"],[13],[1,\"\\n\"],[13],[1,\"\\n\\n\"],[41,[30,0,[\"query\"]],[[[1,\"  \"],[8,[39,10],null,[[\"@query\",\"@onClose\",\"@onVisit\"],[[30,0,[\"query\"]],[28,[37,6],[[30,0],\"query\",null],null],[30,0,[\"didVisitPage\"]]]],null],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[30,0,[\"isShowingVersionSelector\"]],[[[1,\"  \"],[8,[39,11],null,[[\"@onClose\"],[[28,[37,6],[[30,0],\"isShowingVersionSelector\",false],null]]],null],[1,\"\\n\"]],[]],null]],[\"&attrs\",\"&default\"],false,[\"docs-header/link\",\"if\",\"yield\",\"hash\",\"component\",\"docs-header/search-box\",\"set\",\"toggle\",\"eq\",\"svg-jar\",\"docs-header/search-results\",\"docs-header/version-selector\"]]",
    "moduleName": "ember-cli-addon-docs/components/docs-header/index.hbs",
    "isStrictMode": false
  });

  /**
    Render a header showing a link to your documentation, your project logo, a
    search bar, and a link to your repo on GitHub.
  
    Yields a `link` contextual component which can be used to add additional
    header links.
  
    ```hbs
    <DocsHeader as |header|>
      <header.link @route="sandbox">
        Sandbox
      </header.link>
    </DocsHeader>
    ```
  
    @class DocsHeader
    @public
    @yield {Hash} header
    @yield {Component} header.link
  */
  let DocsHeader = _exports.default = (_dec = (0, _computed2.reads)('projectVersion.currentVersion'), (_class = class DocsHeader extends _component2.default {
    constructor() {
      super(...arguments);
      _initializerDefineProperty(this, "projectVersion", _descriptor, this);
      _initializerDefineProperty(this, "config", _descriptor2, this);
      _initializerDefineProperty(this, "query", _descriptor3, this);
      _initializerDefineProperty(this, "currentVersion", _descriptor4, this);
      this.projectVersion.loadAvailableVersions();
    }

    /**
      The prefix of your project, typically "Ember", "EmberCLI" or "EmberData".
       By default the prefix will be autodiscovered from the `name` field of your addon's package.json.
       ```hbs
      <DocsHeader @prefix="EmberData"/>
      ```
       @argument prefix
      @type String?
    */
    get prefix() {
      return this.args.prefix ?? (0, _computed.addonPrefix)(this.config.projectName);
    }

    /**
      The name of your project (without the "ember", "ember-cli" or "ember-data" prefix).
       By default the name will be autodiscovered from the `name` field of your addon's package.json.
       ```hbs
      <DocsHeader @name="MyProject"/>
      ```
       @argument name
      @type String?
    */
    get name() {
      if (this.args.name) {
        return this.args.name;
      } else {
        let name = this.config.projectName;
        name = name.replace('ember-data-', '');
        name = name.replace('ember-cli-', '');
        name = name.replace('ember-', '');
        return (0, _string.classify)(name);
      }
    }
    didVisitPage() {
      this.query = null;
      let search = document.querySelector('[data-search-box-input]');
      search.blur();
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "projectVersion", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "config", [_config.addonDocsConfig], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "query", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "currentVersion", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "didVisitPage", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "didVisitPage"), _class.prototype)), _class));
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, DocsHeader);
});
;define("ember-cli-addon-docs/components/docs-header/link/index", ["exports", "@ember/component", "@glimmer/component", "@ember/service", "@ember/template-factory"], function (_exports, _component, _component2, _service, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@glimmer/component",0,"@ember/service",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#if @href}}
  
    <a
      href={{@href}}
      class="docs-px-4 docs-py-5 docs-transition docs-uppercase docs-text-xxs docs-font-bold docs-text-grey-darkest docs-no-underline hover:docs-text-brand
        {{if @push 'docs-ml-auto'}}
        "
      ...attributes
    >
      {{yield}}
    </a>
  
  {{else if @onClick}}
  
    <a
      {{on "click" @onClick}}
      href="#"
      class="docs-px-4 docs-py-5 docs-transition docs-uppercase docs-text-xxs docs-font-bold docs-text-grey-darkest docs-no-underline hover:docs-text-brand
        {{if @push 'docs-ml-auto'}}"
      ...attributes
    >
      {{yield}}
    </a>
  
  {{else}}
  
    <LinkTo
      @route={{@route}}
      class={{concat
        "docs-px-4 docs-py-5 docs-transition docs-uppercase docs-text-xxs
        docs-font-bold docs-no-underline "
        (if
          (not (eq @route "index"))
          (if
            this.isActive
            "docs-text-brand"
            "docs-text-grey-darkest hover:docs-text-brand"
          )
          "docs-text-grey-darkest"
        )
      }}
      ...attributes
    >
      {{yield}}
    </LinkTo>
  
  {{/if}}
  */
  {
    "id": "sN9vAp6v",
    "block": "[[[41,[30,1],[[[1,\"\\n  \"],[11,3],[16,6,[30,1]],[16,0,[29,[\"docs-px-4 docs-py-5 docs-transition docs-uppercase docs-text-xxs docs-font-bold docs-text-grey-darkest docs-no-underline hover:docs-text-brand\\n      \",[52,[30,2],\"docs-ml-auto\"],\"\\n      \"]]],[17,3],[12],[1,\"\\n    \"],[18,6,null],[1,\"\\n  \"],[13],[1,\"\\n\\n\"]],[]],[[[41,[30,4],[[[1,\"\\n  \"],[11,3],[24,6,\"#\"],[16,0,[29,[\"docs-px-4 docs-py-5 docs-transition docs-uppercase docs-text-xxs docs-font-bold docs-text-grey-darkest docs-no-underline hover:docs-text-brand\\n      \",[52,[30,2],\"docs-ml-auto\"]]]],[17,3],[4,[38,2],[\"click\",[30,4]],null],[12],[1,\"\\n    \"],[18,6,null],[1,\"\\n  \"],[13],[1,\"\\n\\n\"]],[]],[[[1,\"\\n  \"],[8,[39,3],[[16,0,[28,[37,4],[\"docs-px-4 docs-py-5 docs-transition docs-uppercase docs-text-xxs\\n      docs-font-bold docs-no-underline \",[52,[28,[37,5],[[28,[37,6],[[30,5],\"index\"],null]],null],[52,[30,0,[\"isActive\"]],\"docs-text-brand\",\"docs-text-grey-darkest hover:docs-text-brand\"],\"docs-text-grey-darkest\"]],null]],[17,3]],[[\"@route\"],[[30,5]]],[[\"default\"],[[[[1,\"\\n    \"],[18,6,null],[1,\"\\n  \"]],[]]]]],[1,\"\\n\\n\"]],[]]]],[]]]],[\"@href\",\"@push\",\"&attrs\",\"@onClick\",\"@route\",\"&default\"],false,[\"if\",\"yield\",\"on\",\"link-to\",\"concat\",\"not\",\"eq\"]]",
    "moduleName": "ember-cli-addon-docs/components/docs-header/link/index.hbs",
    "isStrictMode": false
  });
  let DocsHeaderLink = _exports.default = (_class = class DocsHeaderLink extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "router", _descriptor, this);
    }
    get isActive() {
      return this.router.isActive(this.args.route);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, DocsHeaderLink);
});
;define("ember-cli-addon-docs/components/docs-header/search-box/index", ["exports", "@ember/component", "@glimmer/component", "ember-concurrency", "@ember/object", "@ember/service", "ember-cli-addon-docs/keyboard-config", "ember-cli-addon-docs/-private/config", "@ember/template-factory"], function (_exports, _component, _component2, _emberConcurrency, _object, _service, _keyboardConfig, _config, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@glimmer/component",0,"ember-concurrency",0,"@ember/object",0,"@ember/service",0,"ember-cli-addon-docs/keyboard-config",0,"ember-cli-addon-docs/-private/config",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div class="docs-ml-auto" ...attributes>
    <div class="docs-relative docs-text-grey-darkest" data-search-box>
      {{svg-jar
        "search"
        width=12
        height=12
        class="docs-absolute docs-top-0 docs-h-full docs-ml-1"
      }}
  
      {{!--
        This is a dumb input - so why not use the <Input/> helper? Because apparently
        it takes over enter and ctrl+n/p keys. We are using those for our own shortcuts
        so we stick with the dumb html element. Maybe there's a way to disable them
        and get the convenient two-way binding.
      --}}
      <input
        {{on "input" this.handleInput}}
        value={{@query}}
        type="text"
        disabled={{this.fetchProject.isRunning}}
        placeholder="SEARCH"
        class="outline-none docs-w-24 docs-text-xxs docs-p-2 docs-pl-6 docs-rounded focus:docs-bg-grey-lighter"
        data-search-box-input
        data-test-search-box-input
        aria-label="search"
      />
    </div>
  </div>
  
  {{on-key "/" this.focusSearch event="keyup"}}
  {{on-key "Escape" this.unfocusSearch event="keyup"}}
  */
  {
    "id": "T2KvT/zz",
    "block": "[[[11,0],[24,0,\"docs-ml-auto\"],[17,1],[12],[1,\"\\n  \"],[10,0],[14,0,\"docs-relative docs-text-grey-darkest\"],[14,\"data-search-box\",\"\"],[12],[1,\"\\n    \"],[1,[28,[35,0],[\"search\"],[[\"width\",\"height\",\"class\"],[12,12,\"docs-absolute docs-top-0 docs-h-full docs-ml-1\"]]]],[1,\"\\n\\n\"],[1,\"    \"],[11,\"input\"],[16,2,[30,2]],[16,\"disabled\",[30,0,[\"fetchProject\",\"isRunning\"]]],[24,\"placeholder\",\"SEARCH\"],[24,0,\"outline-none docs-w-24 docs-text-xxs docs-p-2 docs-pl-6 docs-rounded focus:docs-bg-grey-lighter\"],[24,\"data-search-box-input\",\"\"],[24,\"data-test-search-box-input\",\"\"],[24,\"aria-label\",\"search\"],[24,4,\"text\"],[4,[38,1],[\"input\",[30,0,[\"handleInput\"]]],null],[12],[13],[1,\"\\n  \"],[13],[1,\"\\n\"],[13],[1,\"\\n\\n\"],[1,[28,[35,2],[\"/\",[30,0,[\"focusSearch\"]]],[[\"event\"],[\"keyup\"]]]],[1,\"\\n\"],[1,[28,[35,2],[\"Escape\",[30,0,[\"unfocusSearch\"]]],[[\"event\"],[\"keyup\"]]]]],[\"&attrs\",\"@query\"],false,[\"svg-jar\",\"on\",\"on-key\"]]",
    "moduleName": "ember-cli-addon-docs/components/docs-header/search-box/index.hbs",
    "isStrictMode": false
  });
  let DocsHeaderSearchBox = _exports.default = (_class = class DocsHeaderSearchBox extends _component2.default {
    constructor() {
      super(...arguments);
      _initializerDefineProperty(this, "store", _descriptor, this);
      _initializerDefineProperty(this, "config", _descriptor2, this);
      this.fetchProject.perform();
    }
    // TODO: The searchbox doesn't work without the project being fetched.
    // We should move this logic (and everywhere else in the code that's fetching
    // the project) within a new addonDocs service that wires all that up together.
    // I think it's fine if our Docs-* components assume there is a single global
    // project.
    *fetchProject() {
      yield this.store.findRecord('project', this.config.projectName);
    }
    focusSearch() {
      if (!(0, _keyboardConfig.formElementHasFocus)()) {
        this.element.querySelector('input').focus();
      }
    }
    unfocusSearch() {
      this.args.onInput?.(null);
    }
    handleInput(event) {
      this.args.onInput?.(event.target.value);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "store", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "config", [_config.addonDocsConfig], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "fetchProject", [_emberConcurrency.task], Object.getOwnPropertyDescriptor(_class.prototype, "fetchProject"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "focusSearch", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "focusSearch"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "unfocusSearch", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "unfocusSearch"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleInput", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "handleInput"), _class.prototype)), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, DocsHeaderSearchBox);
});
;define("ember-cli-addon-docs/components/docs-header/search-result/index", ["exports", "@ember/component", "@glimmer/component", "tracked-toolbox", "@ember/object/computed", "@ember/template-factory"], function (_exports, _component, _component2, _trackedToolbox, _computed, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class, _descriptor;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@glimmer/component",0,"tracked-toolbox",0,"@ember/object/computed",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div
    {{on "click" @onClick}}
    {{on "mouseenter" @onMouseEnter}}
    data-test-search-result
    ...attributes
  >
    <LinkTo
      class="docs-block docs-py-2 docs-px-3 docs-text-black docs-no-underline hover:docs-bg-grey-lighter
        {{if @selected 'docs-bg-grey-lighter'}}"
      @route={{this.linkArgs.route}}
      @models={{this.linkArgs.models}}
    >
      <div class="docs-flex docs-items-center">
        {{svg-jar
          this.icon
          height=28
          width=28
          class="docs-mr-2 docs-flex-no-shrink"
        }}
        <span class="docs-truncate">
          {{#if this.titleMatchesQuery}}
            {{{this.highlightedTitle}}}
          {{else}}
            {{@result.document.title}}
          {{/if}}
        </span>
      </div>
  
      {{#if (not this.titleMatchesQuery)}}
        <small class="docs-text-grey-dark docs-inline-block">
          {{{this.bestMatch}}}
        </small>
      {{/if}}
    </LinkTo>
  </div>
  */
  {
    "id": "r+bDyyZE",
    "block": "[[[11,0],[24,\"data-test-search-result\",\"\"],[17,1],[4,[38,0],[\"click\",[30,2]],null],[4,[38,0],[\"mouseenter\",[30,3]],null],[12],[1,\"\\n  \"],[8,[39,1],[[16,0,[29,[\"docs-block docs-py-2 docs-px-3 docs-text-black docs-no-underline hover:docs-bg-grey-lighter\\n      \",[52,[30,4],\"docs-bg-grey-lighter\"]]]]],[[\"@route\",\"@models\"],[[30,0,[\"linkArgs\",\"route\"]],[30,0,[\"linkArgs\",\"models\"]]]],[[\"default\"],[[[[1,\"\\n    \"],[10,0],[14,0,\"docs-flex docs-items-center\"],[12],[1,\"\\n      \"],[1,[28,[35,3],[[30,0,[\"icon\"]]],[[\"height\",\"width\",\"class\"],[28,28,\"docs-mr-2 docs-flex-no-shrink\"]]]],[1,\"\\n      \"],[10,1],[14,0,\"docs-truncate\"],[12],[1,\"\\n\"],[41,[30,0,[\"titleMatchesQuery\"]],[[[1,\"          \"],[2,[30,0,[\"highlightedTitle\"]]],[1,\"\\n\"]],[]],[[[1,\"          \"],[1,[30,5,[\"document\",\"title\"]]],[1,\"\\n\"]],[]]],[1,\"      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n\\n\"],[41,[28,[37,4],[[30,0,[\"titleMatchesQuery\"]]],null],[[[1,\"      \"],[10,\"small\"],[14,0,\"docs-text-grey-dark docs-inline-block\"],[12],[1,\"\\n        \"],[2,[30,0,[\"bestMatch\"]]],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"]],[]]]]],[1,\"\\n\"],[13]],[\"&attrs\",\"@onClick\",\"@onMouseEnter\",\"@selected\",\"@result\"],false,[\"on\",\"link-to\",\"if\",\"svg-jar\",\"not\"]]",
    "moduleName": "ember-cli-addon-docs/components/docs-header/search-result/index.hbs",
    "isStrictMode": false
  });
  let DocsHeaderSearchResult = _exports.default = (_dec = (0, _computed.bool)('highlightedTitle'), (_class = class DocsHeaderSearchResult extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "titleMatchesQuery", _descriptor, this);
    }
    get linkArgs() {
      let type = this.args.result.document.type;
      if (type === 'template') {
        return {
          route: this.args.result.document.route,
          models: []
        };
      } else {
        return {
          route: 'docs.api.item',
          models: [this.args.result.model.routingId]
        };
      }
    }
    get icon() {
      if (this.args.result.document.type === 'template') {
        return 'guide';
      } else {
        return 'api-item';
      }
    }
    get matches() {
      let metadata = this.args.result.resultInfo.matchData.metadata;
      return Object.keys(metadata).reduce((matches, term) => {
        let match = metadata[term];
        let query = this.args.query;
        let normalizedQuery = query.toLowerCase();
        Object.keys(match).forEach(key => {
          if (key === 'text') {
            let text = this.args.result.document.text;
            let spaceIndices = text.split('').map((char, index) => char === ' ' ? index : null).filter(val => val > 0);
            match.text.position.forEach(([wordStart, length]) => {
              let spaceAfterWord = spaceIndices.find(i => i > wordStart);
              let indexOfSpaceAfterWord = spaceIndices.indexOf(spaceAfterWord);
              let indexOfSpaceBeforeWord = indexOfSpaceAfterWord - 1;
              let indexOfStartingSpace = indexOfSpaceBeforeWord > 3 ? indexOfSpaceBeforeWord - 3 : 0;
              let indexOfEndingSpace = indexOfSpaceAfterWord + 3 < spaceIndices.length ? indexOfSpaceAfterWord + 3 : spaceIndices.length;
              let matchingText = text.slice(spaceIndices[indexOfStartingSpace], spaceIndices[indexOfEndingSpace]);
              matchingText = this._highlight(matchingText, matchingText.indexOf(query), query.length);
              matches.push(matchingText);
            });
          } else {
            let normalizedTerm = term.toLowerCase();
            this.args.result.document.keywords.forEach(keyword => {
              let normalizedKeyword = keyword.toLowerCase();
              if (keyword.toLowerCase().indexOf(normalizedTerm) !== -1) {
                let index = normalizedKeyword.indexOf(normalizedQuery);
                matches.push(this._highlight(keyword, index, normalizedQuery.length));
              }
            });
          }
        });
        return matches;
      }, []);
    }
    get bestMatch() {
      // Right now this is arbitrarily returning the first match. Needs more work to find the "best" match on the page.
      return this.matches[0];
    }
    get highlightedTitle() {
      let title = this.args.result.document.title || '';
      let match = title.match(new RegExp(this.args.query, 'i'));
      if (match) {
        let start = match.index;
        let length = this.args.query.length;
        return `${title.slice(0, start)}<span class='docs-border-b-2 docs-border-brand'>${title.slice(start, start + length)}</span>${title.slice(start + length)}`;
      }
      return null;
    }
    _highlight(text, start, length) {
      return `${text.slice(0, start)}<span class='docs-border-b-2 docs-border-brand'>${text.slice(start, start + length)}</span>${text.slice(start + length)}`;
    }
  }, (_applyDecoratedDescriptor(_class.prototype, "matches", [_trackedToolbox.cached], Object.getOwnPropertyDescriptor(_class.prototype, "matches"), _class.prototype), _descriptor = _applyDecoratedDescriptor(_class.prototype, "titleMatchesQuery", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, DocsHeaderSearchResult);
});
;define("ember-cli-addon-docs/components/docs-header/search-results/index", ["exports", "@ember/component", "@ember/service", "@glimmer/component", "@glimmer/tracking", "@ember/object", "ember-keyboard", "ember-concurrency", "ember-cli-addon-docs/-private/config", "@ember/template-factory"], function (_exports, _component, _service, _component2, _tracking, _object, _emberKeyboard, _emberConcurrency, _config, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/service",0,"@glimmer/component",0,"@glimmer/tracking",0,"@ember/object",0,"ember-keyboard",0,"ember-concurrency",0,"ember-cli-addon-docs/-private/config",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div {{did-insert (perform this.search)}} {{did-update (perform this.search) @query}} ...attributes>
    {{#if (and this.trimmedQuery this.search.isIdle)}}
      <ModalDialog
        @tetherTarget="[data-search-box]"
        @attachment="top left"
        @clickOutsideToClose={{true}}
        @onClose={{@onClose}}
        @targetAttachment="bottom left"
        @constraints={{array (hash to="window" attachment="together" pin=true)}}
      >
        <ul
          class="docs-w-76 docs-bg-white docs-shadow-md"
          data-test-search-result-list
        >
          {{#each (take 5 this.searchResults) as |result index|}}
            <li>
              <DocsHeader::SearchResult
                @result={{result}}
                @query={{@query}}
                @selected={{eq index this.selectedIndex}}
                @onMouseEnter={{fn this.selectResult index}}
                @onClick={{@onClose}}
              />
            </li>
          {{else}}
            <li
              class="docs-block docs-py-1 docs-px-3 docs-text-grey-dark docs-no-underline"
            >
              No results.
            </li>
          {{/each}}
        </ul>
      </ModalDialog>
    {{/if}}
  </div>
  */
  {
    "id": "J57fXFEC",
    "block": "[[[11,0],[17,1],[4,[38,0],[[28,[37,1],[[30,0,[\"search\"]]],null]],null],[4,[38,2],[[28,[37,1],[[30,0,[\"search\"]]],null],[30,2]],null],[12],[1,\"\\n\"],[41,[28,[37,4],[[30,0,[\"trimmedQuery\"]],[30,0,[\"search\",\"isIdle\"]]],null],[[[1,\"    \"],[8,[39,5],null,[[\"@tetherTarget\",\"@attachment\",\"@clickOutsideToClose\",\"@onClose\",\"@targetAttachment\",\"@constraints\"],[\"[data-search-box]\",\"top left\",true,[30,3],\"bottom left\",[28,[37,6],[[28,[37,7],null,[[\"to\",\"attachment\",\"pin\"],[\"window\",\"together\",true]]]],null]]],[[\"default\"],[[[[1,\"\\n      \"],[10,\"ul\"],[14,0,\"docs-w-76 docs-bg-white docs-shadow-md\"],[14,\"data-test-search-result-list\",\"\"],[12],[1,\"\\n\"],[42,[28,[37,9],[[28,[37,9],[[28,[37,10],[5,[30,0,[\"searchResults\"]]],null]],null]],null],null,[[[1,\"          \"],[10,\"li\"],[12],[1,\"\\n            \"],[8,[39,11],null,[[\"@result\",\"@query\",\"@selected\",\"@onMouseEnter\",\"@onClick\"],[[30,4],[30,2],[28,[37,12],[[30,5],[30,0,[\"selectedIndex\"]]],null],[28,[37,13],[[30,0,[\"selectResult\"]],[30,5]],null],[30,3]]],null],[1,\"\\n          \"],[13],[1,\"\\n\"]],[4,5]],[[[1,\"          \"],[10,\"li\"],[14,0,\"docs-block docs-py-1 docs-px-3 docs-text-grey-dark docs-no-underline\"],[12],[1,\"\\n            No results.\\n          \"],[13],[1,\"\\n\"]],[]]],[1,\"      \"],[13],[1,\"\\n    \"]],[]]]]],[1,\"\\n\"]],[]],null],[13]],[\"&attrs\",\"@query\",\"@onClose\",\"result\",\"index\"],false,[\"did-insert\",\"perform\",\"did-update\",\"if\",\"and\",\"modal-dialog\",\"array\",\"hash\",\"each\",\"-track-array\",\"take\",\"docs-header/search-result\",\"eq\",\"fn\"]]",
    "moduleName": "ember-cli-addon-docs/components/docs-header/search-results/index.hbs",
    "isStrictMode": false
  });
  let DocsHeaderSearchResults = _exports.default = (_dec = (0, _emberKeyboard.onKey)('Enter', {
    event: 'keyup'
  }), _dec2 = (0, _emberKeyboard.onKey)('ctrl+KeyN'), _dec3 = (0, _emberKeyboard.onKey)('ArrowDown'), _dec4 = (0, _emberKeyboard.onKey)('ctrl+KeyP'), _dec5 = (0, _emberKeyboard.onKey)('ArrowUp'), (0, _emberKeyboard.keyResponder)(_class = (_class2 = class DocsHeaderSearchResults extends _component2.default {
    constructor() {
      super(...arguments);

      // Start downloading the search index immediately
      _initializerDefineProperty(this, "docsSearch", _descriptor, this);
      _initializerDefineProperty(this, "router", _descriptor2, this);
      _initializerDefineProperty(this, "store", _descriptor3, this);
      _initializerDefineProperty(this, "selectedIndex", _descriptor4, this);
      _initializerDefineProperty(this, "rawSearchResults", _descriptor5, this);
      _initializerDefineProperty(this, "config", _descriptor6, this);
      this.docsSearch.loadSearchIndex();
    }
    get project() {
      return this.store.peekRecord('project', this.config.projectName);
    }
    get trimmedQuery() {
      return this.args.query.trim();
    }
    *search() {
      let results;
      if (this.trimmedQuery) {
        results = yield this.docsSearch.search(this.trimmedQuery);
      }
      this.selectedIndex = results.length ? 0 : null;
      this.rawSearchResults = results;
    }
    get searchResults() {
      let rawSearchResults = this.rawSearchResults;
      let router = this.router;
      let routerMicrolib = router._router._routerMicrolib || router._router.router;
      if (rawSearchResults) {
        return this.rawSearchResults
        // If the doc has a route, ensure it exists
        .filter(({
          document
        }) => {
          if (document.route) {
            let routeExists = routerMicrolib.recognizer.names[document.route];
            return routeExists && document.route !== 'not-found' && document.route !== 'application';
          } else {
            return true;
          }
        })

        // Filter out the templates of the API items' pages, since we handle them separately
        .filter(({
          document
        }) => {
          let isApiItemTemplate = document.route === 'docs.api.item' && document.type === 'template';
          return !isApiItemTemplate;
        })

        // Filter out modules that are not in the navigationIndex
        .filter(({
          document
        }) => {
          if (document.type === 'module') {
            let navigableModules = this.project.navigationIndex.find(section => section.type === 'modules');
            let navigableModuleIds = navigableModules ? navigableModules.items.map(item => item.id) : [];
            return navigableModuleIds.includes(document.title);
          } else {
            return true;
          }
        })

        // Add a reference to the Ember Data model to each API item search result
        .map(searchResult => {
          let {
            document
          } = searchResult;
          if (document.type !== 'template') {
            let store = this.store;
            searchResult.model = store.peekRecord(document.type, document.item.id);
          }
          return searchResult;
        });
      }
      return undefined;
    }
    gotoSelectedItem() {
      if (this.selectedIndex !== null) {
        let selectedResult = this.searchResults[this.selectedIndex];
        if (selectedResult.document.type === 'template') {
          this.router.transitionTo(selectedResult.document.route);
        } else {
          this.router.transitionTo('docs.api.item', selectedResult.model.routingId);
        }
      }
      this.args.onVisit?.();
    }
    nextSearchResult() {
      let hasSearchResults = this.searchResults.length;
      let lastResultIsSelected = this.selectedIndex + 1 === this.searchResults.length;
      if (hasSearchResults && !lastResultIsSelected) {
        this.selectedIndex = this.selectedIndex + 1;
      }
    }
    previousSearchResult() {
      let hasSearchResults = this.searchResults.length;
      let firstResultIsSelected = this.selectedIndex === 0;
      if (hasSearchResults && !firstResultIsSelected) {
        this.selectedIndex = this.selectedIndex - 1;
      }
    }
    selectResult(index) {
      this.selectedIndex = index;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "docsSearch", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "store", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "selectedIndex", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "rawSearchResults", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "config", [_config.addonDocsConfig], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, "search", [_emberConcurrency.restartableTask], Object.getOwnPropertyDescriptor(_class2.prototype, "search"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "gotoSelectedItem", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "gotoSelectedItem"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "nextSearchResult", [_dec2, _dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "nextSearchResult"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "previousSearchResult", [_dec4, _dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "previousSearchResult"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "selectResult", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "selectResult"), _class2.prototype)), _class2)) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, DocsHeaderSearchResults);
});
;define("ember-cli-addon-docs/components/docs-header/version-selector/index", ["exports", "@ember/component", "@glimmer/component", "@ember/service", "@ember/object/computed", "@ember/object", "@ember/array", "tracked-toolbox", "ember-cli-addon-docs/-private/config", "@ember/template-factory"], function (_exports, _component, _component2, _service, _computed, _object, _array, _trackedToolbox, _config, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class, _descriptor, _descriptor2, _descriptor3;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@glimmer/component",0,"@ember/service",0,"@ember/object/computed",0,"@ember/object",0,"@ember/array",0,"tracked-toolbox",0,"ember-cli-addon-docs/-private/config",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <ModalDialog
    @tetherTarget="[data-version-selector]"
    @attachment="top right"
    @clickOutsideToClose={{true}}
    @onClose={{@onClose}}
    @targetAttachment="bottom right"
    ...attributes
  >
    <ul
      class="docs-mt-2 docs-bg-white docs-shadow-md docs-text-xs docs-rounded docs-z-10"
    >
      {{#each this.sortedVersions as |version index|}}
        <li data-test-id="version">
          <a
            {{on "click" (fn this.changeVersion version)}}
            href="#"
            class={{concat
              "docs-text-black docs-no-underline docs-flex docs-items-center
              docs-px-4 docs-py-3 hover:docs-bg-brand hover:docs-text-white group "
              (if (eq index 0) "docs-rounded-t")
              (if (eq version this.lastVersion) "docs-rounded-b")
            }}
          >
            <span class="flex docs-w-6">
              {{#if (eq version.key this.currentVersion.key)}}
                {{svg-jar "check" height=16 width=16}}
              {{/if}}
            </span>
            <span class="docs-font-medium">
              {{version.name}}
            </span>
  
            <span
              class="docs-ml-auto docs-pl-8 docs-flex docs-items-center docs-opacity-50 group-hover:docs-opacity-100"
            >
              {{#if
                (or
                  (eq version.key this.config.latestVersionName)
                  (eq version.key this.config.primaryBranch)
                )
              }}
                {{svg-jar
                  (if version.tag "git-tag" "git-sha")
                  height=16
                  width=16
                }}
              {{else}}
                {{svg-jar "git-sha" height=16 width=16}}
              {{/if}}
  
              <span class="docs-text-xxs docs-font-mono docs-pl-1">
                {{#if
                  (or
                    (eq version.key this.config.latestVersionName)
                    (eq version.key this.config.primaryBranch)
                  )
                }}
                  {{#if version.tag}}
                    {{version.tag}}
                  {{else}}
                    {{version.truncatedSha}}
                  {{/if}}
                {{else}}
                  {{version.truncatedSha}}
                {{/if}}
              </span>
            </span>
          </a>
        </li>
      {{/each}}
    </ul>
  </ModalDialog>
  */
  {
    "id": "19KWgC6G",
    "block": "[[[8,[39,0],[[17,1]],[[\"@tetherTarget\",\"@attachment\",\"@clickOutsideToClose\",\"@onClose\",\"@targetAttachment\"],[\"[data-version-selector]\",\"top right\",true,[30,2],\"bottom right\"]],[[\"default\"],[[[[1,\"\\n  \"],[10,\"ul\"],[14,0,\"docs-mt-2 docs-bg-white docs-shadow-md docs-text-xs docs-rounded docs-z-10\"],[12],[1,\"\\n\"],[42,[28,[37,2],[[28,[37,2],[[30,0,[\"sortedVersions\"]]],null]],null],null,[[[1,\"      \"],[10,\"li\"],[14,\"data-test-id\",\"version\"],[12],[1,\"\\n        \"],[11,3],[24,6,\"#\"],[16,0,[28,[37,3],[\"docs-text-black docs-no-underline docs-flex docs-items-center\\n            docs-px-4 docs-py-3 hover:docs-bg-brand hover:docs-text-white group \",[52,[28,[37,5],[[30,4],0],null],\"docs-rounded-t\"],[52,[28,[37,5],[[30,3],[30,0,[\"lastVersion\"]]],null],\"docs-rounded-b\"]],null]],[4,[38,6],[\"click\",[28,[37,7],[[30,0,[\"changeVersion\"]],[30,3]],null]],null],[12],[1,\"\\n          \"],[10,1],[14,0,\"flex docs-w-6\"],[12],[1,\"\\n\"],[41,[28,[37,5],[[30,3,[\"key\"]],[30,0,[\"currentVersion\",\"key\"]]],null],[[[1,\"              \"],[1,[28,[35,8],[\"check\"],[[\"height\",\"width\"],[16,16]]]],[1,\"\\n\"]],[]],null],[1,\"          \"],[13],[1,\"\\n          \"],[10,1],[14,0,\"docs-font-medium\"],[12],[1,\"\\n            \"],[1,[30,3,[\"name\"]]],[1,\"\\n          \"],[13],[1,\"\\n\\n          \"],[10,1],[14,0,\"docs-ml-auto docs-pl-8 docs-flex docs-items-center docs-opacity-50 group-hover:docs-opacity-100\"],[12],[1,\"\\n\"],[41,[28,[37,9],[[28,[37,5],[[30,3,[\"key\"]],[30,0,[\"config\",\"latestVersionName\"]]],null],[28,[37,5],[[30,3,[\"key\"]],[30,0,[\"config\",\"primaryBranch\"]]],null]],null],[[[1,\"              \"],[1,[28,[35,8],[[52,[30,3,[\"tag\"]],\"git-tag\",\"git-sha\"]],[[\"height\",\"width\"],[16,16]]]],[1,\"\\n\"]],[]],[[[1,\"              \"],[1,[28,[35,8],[\"git-sha\"],[[\"height\",\"width\"],[16,16]]]],[1,\"\\n\"]],[]]],[1,\"\\n            \"],[10,1],[14,0,\"docs-text-xxs docs-font-mono docs-pl-1\"],[12],[1,\"\\n\"],[41,[28,[37,9],[[28,[37,5],[[30,3,[\"key\"]],[30,0,[\"config\",\"latestVersionName\"]]],null],[28,[37,5],[[30,3,[\"key\"]],[30,0,[\"config\",\"primaryBranch\"]]],null]],null],[[[41,[30,3,[\"tag\"]],[[[1,\"                  \"],[1,[30,3,[\"tag\"]]],[1,\"\\n\"]],[]],[[[1,\"                  \"],[1,[30,3,[\"truncatedSha\"]]],[1,\"\\n\"]],[]]]],[]],[[[1,\"                \"],[1,[30,3,[\"truncatedSha\"]]],[1,\"\\n\"]],[]]],[1,\"            \"],[13],[1,\"\\n          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n\"]],[3,4]],null],[1,\"  \"],[13],[1,\"\\n\"]],[]]]]]],[\"&attrs\",\"@onClose\",\"version\",\"index\"],false,[\"modal-dialog\",\"each\",\"-track-array\",\"concat\",\"if\",\"eq\",\"on\",\"fn\",\"svg-jar\",\"or\"]]",
    "moduleName": "ember-cli-addon-docs/components/docs-header/version-selector/index.hbs",
    "isStrictMode": false
  });
  let VersionSelector = _exports.default = (_dec = (0, _computed.reads)('projectVersion.currentVersion'), (_class = class VersionSelector extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "projectVersion", _descriptor, this);
      _initializerDefineProperty(this, "config", _descriptor2, this);
      _initializerDefineProperty(this, "currentVersion", _descriptor3, this);
    }
    get sortedVersions() {
      let versions = (0, _array.A)(this.projectVersion.versions);
      let latest = versions.findBy('key', this.config.latestVersionName);
      let primary = versions.findBy('key', this.config.primaryBranch);
      let otherTags = versions.reject(v => [latest, primary].includes(v)).sort((tagA, tagB) => {
        let keyA = tagA.key;
        let keyB = tagB.key;
        if (keyA > keyB) {
          return -1;
        }
        if (keyA < keyB) {
          return 1;
        }

        // names must be equal
        return 0;
      });
      return [latest, primary, ...otherTags].filter(Boolean);
    }
    get lastVersion() {
      return this.sortedVersions[this.sortedVersions.length - 1];
    }
    changeVersion(version) {
      this.projectVersion.redirectTo(version);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "projectVersion", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "config", [_config.addonDocsConfig], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "currentVersion", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "sortedVersions", [_trackedToolbox.cached], Object.getOwnPropertyDescriptor(_class.prototype, "sortedVersions"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "changeVersion", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "changeVersion"), _class.prototype)), _class));
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, VersionSelector);
});
;define("ember-cli-addon-docs/components/docs-hero/index", ["exports", "@ember/component", "@glimmer/component", "ember-cli-addon-docs/utils/computed", "@ember/string", "ember-cli-addon-docs/-private/config", "@ember/template-factory"], function (_exports, _component, _component2, _computed, _string, _config, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@glimmer/component",0,"ember-cli-addon-docs/utils/computed",0,"@ember/string",0,"ember-cli-addon-docs/-private/config",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div class="
    docs-bg-brand docs-text-white
    docs-px-4 docs-py-16 docs-text-center
  " ...attributes>
    <div class="docs-max-w-sm docs-mx-auto">
      <h1 class="
        docs-font-title docs-font-normal docs-text-jumbo-1 md:docs-text-jumbo-2 xl:docs-text-jumbo-3
        docs-leading-none docs-tracking-tight
      ">
        {{#if this.prefix}}
          <span class="docs-block docs-text-large-5 md:docs-text-large-6 xl:docs-text-large-7">
            {{this.prefix}}
          </span>
        {{/if}}
  
        {{this.heading}}
      </h1>
  
      <p class="
        docs-mt-4 xl:docs-mt-6 docs-mb-2 docs-leading-small docs-mx-auto docs-tracking-tight
        docs-text-large-1 md:docs-text-large-2 xl:docs-text-large-3
      ">
        {{this.byline}}
      </p>
  
      <div class="docs-mt-8">
        <LinkTo @route="docs" class="
          docs-no-underline docs-bg-white docs-text-brand docs-text-xs docs-px-3 docs-py-2
          docs-rounded docs-mt-4 docs-shadow-md hover:docs-shadow-lg
          docs-transition hover:docs-nudge-t docs-font-bold docs-inline-block docs-uppercase
        ">
          Read the docs
        </LinkTo>
      </div>
  
      {{yield}}
    </div>
  </div>
  
  */
  {
    "id": "/tV4kgYF",
    "block": "[[[11,0],[24,0,\"\\n  docs-bg-brand docs-text-white\\n  docs-px-4 docs-py-16 docs-text-center\\n\"],[17,1],[12],[1,\"\\n  \"],[10,0],[14,0,\"docs-max-w-sm docs-mx-auto\"],[12],[1,\"\\n    \"],[10,\"h1\"],[14,0,\"\\n      docs-font-title docs-font-normal docs-text-jumbo-1 md:docs-text-jumbo-2 xl:docs-text-jumbo-3\\n      docs-leading-none docs-tracking-tight\\n    \"],[12],[1,\"\\n\"],[41,[30,0,[\"prefix\"]],[[[1,\"        \"],[10,1],[14,0,\"docs-block docs-text-large-5 md:docs-text-large-6 xl:docs-text-large-7\"],[12],[1,\"\\n          \"],[1,[30,0,[\"prefix\"]]],[1,\"\\n        \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n      \"],[1,[30,0,[\"heading\"]]],[1,\"\\n    \"],[13],[1,\"\\n\\n    \"],[10,2],[14,0,\"\\n      docs-mt-4 xl:docs-mt-6 docs-mb-2 docs-leading-small docs-mx-auto docs-tracking-tight\\n      docs-text-large-1 md:docs-text-large-2 xl:docs-text-large-3\\n    \"],[12],[1,\"\\n      \"],[1,[30,0,[\"byline\"]]],[1,\"\\n    \"],[13],[1,\"\\n\\n    \"],[10,0],[14,0,\"docs-mt-8\"],[12],[1,\"\\n      \"],[8,[39,1],[[24,0,\"\\n        docs-no-underline docs-bg-white docs-text-brand docs-text-xs docs-px-3 docs-py-2\\n        docs-rounded docs-mt-4 docs-shadow-md hover:docs-shadow-lg\\n        docs-transition hover:docs-nudge-t docs-font-bold docs-inline-block docs-uppercase\\n      \"]],[[\"@route\"],[\"docs\"]],[[\"default\"],[[[[1,\"\\n        Read the docs\\n      \"]],[]]]]],[1,\"\\n    \"],[13],[1,\"\\n\\n    \"],[18,2,null],[1,\"\\n  \"],[13],[1,\"\\n\"],[13],[1,\"\\n\"]],[\"&attrs\",\"&default\"],false,[\"if\",\"link-to\",\"yield\"]]",
    "moduleName": "ember-cli-addon-docs/components/docs-hero/index.hbs",
    "isStrictMode": false
  });

  /**
    A component that renders a hero banner. Useful for your docs site's homepage.
  
    ```hbs
    <DocsHero
      @prefix="Ember"
      @heading="SuperAddon"
      @byline="The best addon ever. Now playing in theaters."
    />
    ```
  
    @class DocsHero
    @public
  */
  let DocsHeroComponent = _exports.default = (_class = class DocsHeroComponent extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "config", _descriptor, this);
    }
    /**
      The prefix to show, typically of: 'Ember', 'EmberCLI', or 'EmberData'
       @argument prefix
      @type String
    */
    get prefix() {
      return this.args.prefix ?? (0, _computed.addonPrefix)(this.config.projectName);
    }

    /**
      The logo's main heading
       @argument heading
      @type String
    */
    get heading() {
      return this.args.heading ?? (0, _string.classify)((0, _computed.unprefixedAddonName)(this.config.projectName));
    }

    /**
      Byline for the logo
       @argument byline
      @type String
    */
    get byline() {
      return this.args.byline ?? this.config.projectDescription;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_config.addonDocsConfig], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, DocsHeroComponent);
});
;define("ember-cli-addon-docs/components/docs-keyboard-shortcuts/index", ["exports", "@ember/component", "@glimmer/component", "@glimmer/tracking", "@ember/object", "@ember/runloop", "ember-keyboard", "@ember/service", "ember-cli-addon-docs/keyboard-config", "@ember/template-factory"], function (_exports, _component, _component2, _tracking, _object, _runloop, _emberKeyboard, _service, _keyboardConfig, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@glimmer/component",0,"@glimmer/tracking",0,"@ember/object",0,"@ember/runloop",0,"ember-keyboard",0,"@ember/service",0,"ember-cli-addon-docs/keyboard-config",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#if this.isShowingKeyboardShortcuts}}
    <ModalDialog
      @animatable={{true}}
      @overlay={{true}}
      @wrapperClass="docs-fullscreen-modal docs-keyboard-shortcuts-modal modal-fade"
      @clickOutsideToClose={{true}}
      @onClose={{this.toggleKeyboardShortcuts}}
      ...attributes
    >
      <div class="docs-fullscreen-modal__header">
        <h2 class="docs-fullscreen-modal__title">
          Keyboard shortcuts
        </h2>
        <a
          href="#"
          class="docs-fullscreen-modal__close-button"
          {{on "click" this.toggleKeyboardShortcuts}}
        >
          &times;
        </a>
      </div>
  
      <div class="docs-fullscreen-modal__body">
        <table class="docs-keyboard-shortcut-modal">
          <tbody>
            <tr>
              <th></th>
              <th>
                <h3 class="docs-fullscreen-modal__subtitle">
                  Site wide shortcuts
                </h3>
              </th>
            </tr>
            <tr>
              <td>
                <code class="docs__keyboard-key">
                  g
                </code>
                <code class="docs__keyboard-key">
                  h
                </code>
              </td>
              <td>
                Go to Home
              </td>
            </tr>
            <tr>
              <td>
                <code class="docs__keyboard-key">
                  g
                </code>
                <code class="docs__keyboard-key">
                  d
                </code>
              </td>
              <td>
                Go to Docs
              </td>
            </tr>
            <tr>
              <td>
                <code class="docs__keyboard-key">
                  ?
                </code>
              </td>
              <td>
                Bring up this help dialog
              </td>
            </tr>
            <tr>
              <td>
                <code class="docs__keyboard-key">
                  esc
                </code>
              </td>
              <td>
                Hide this help dialog
              </td>
            </tr>
  
            <tr>
              <th></th>
              <th>
                <h3 class="docs-fullscreen-modal__subtitle">
                  Docs search
                </h3>
              </th>
            </tr>
            <tr>
              <td>
                <code class="docs__keyboard-key">
                  /
                </code>
                or
                <code class="docs__keyboard-key">
                  s
                </code>
              </td>
              <td>
                Focus search bar
              </td>
            </tr>
            <tr>
              <td>
                <code class="docs__keyboard-key">
                  ctrl
                </code>
                <code class="docs__keyboard-key">
                  n
                </code>
                or
                <code class="docs__keyboard-key">
                  ↓
                </code>
              </td>
              <td>
                Select next search result
              </td>
            </tr>
            <tr>
              <td>
                <code class="docs__keyboard-key">
                  ctrl
                </code>
                <code class="docs__keyboard-key">
                  p
                </code>
                or
                <code class="docs__keyboard-key">
                  ↑
                </code>
              </td>
              <td>
                Select previous search result
              </td>
            </tr>
            <tr>
              <td>
                <code class="docs__keyboard-key">
                  enter
                </code>
              </td>
              <td>
                Navigate to selected search result
              </td>
            </tr>
  
            <tr>
              <th></th>
              <th>
                <h3 class="docs-fullscreen-modal__subtitle">
                  Docs nav
                </h3>
              </th>
            </tr>
            <tr>
              <td>
                <code class="docs__keyboard-key">
                  j
                </code>
                or
                <code class="docs__keyboard-key">
                  →
                </code>
              </td>
              <td>
                Navigate to next page
              </td>
            </tr>
            <tr>
              <td>
                <code class="docs__keyboard-key">
                  k
                </code>
                or
                <code class="docs__keyboard-key">
                  ←
                </code>
              </td>
              <td>
                Navigate to previous page
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </ModalDialog>
  {{/if}}
  */
  {
    "id": "jmKT9/vy",
    "block": "[[[41,[30,0,[\"isShowingKeyboardShortcuts\"]],[[[1,\"  \"],[8,[39,1],[[17,1]],[[\"@animatable\",\"@overlay\",\"@wrapperClass\",\"@clickOutsideToClose\",\"@onClose\"],[true,true,\"docs-fullscreen-modal docs-keyboard-shortcuts-modal modal-fade\",true,[30,0,[\"toggleKeyboardShortcuts\"]]]],[[\"default\"],[[[[1,\"\\n    \"],[10,0],[14,0,\"docs-fullscreen-modal__header\"],[12],[1,\"\\n      \"],[10,\"h2\"],[14,0,\"docs-fullscreen-modal__title\"],[12],[1,\"\\n        Keyboard shortcuts\\n      \"],[13],[1,\"\\n      \"],[11,3],[24,6,\"#\"],[24,0,\"docs-fullscreen-modal__close-button\"],[4,[38,2],[\"click\",[30,0,[\"toggleKeyboardShortcuts\"]]],null],[12],[1,\"\\n        ×\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n\\n    \"],[10,0],[14,0,\"docs-fullscreen-modal__body\"],[12],[1,\"\\n      \"],[10,\"table\"],[14,0,\"docs-keyboard-shortcut-modal\"],[12],[1,\"\\n        \"],[10,\"tbody\"],[12],[1,\"\\n          \"],[10,\"tr\"],[12],[1,\"\\n            \"],[10,\"th\"],[12],[13],[1,\"\\n            \"],[10,\"th\"],[12],[1,\"\\n              \"],[10,\"h3\"],[14,0,\"docs-fullscreen-modal__subtitle\"],[12],[1,\"\\n                Site wide shortcuts\\n              \"],[13],[1,\"\\n            \"],[13],[1,\"\\n          \"],[13],[1,\"\\n          \"],[10,\"tr\"],[12],[1,\"\\n            \"],[10,\"td\"],[12],[1,\"\\n              \"],[10,\"code\"],[14,0,\"docs__keyboard-key\"],[12],[1,\"\\n                g\\n              \"],[13],[1,\"\\n              \"],[10,\"code\"],[14,0,\"docs__keyboard-key\"],[12],[1,\"\\n                h\\n              \"],[13],[1,\"\\n            \"],[13],[1,\"\\n            \"],[10,\"td\"],[12],[1,\"\\n              Go to Home\\n            \"],[13],[1,\"\\n          \"],[13],[1,\"\\n          \"],[10,\"tr\"],[12],[1,\"\\n            \"],[10,\"td\"],[12],[1,\"\\n              \"],[10,\"code\"],[14,0,\"docs__keyboard-key\"],[12],[1,\"\\n                g\\n              \"],[13],[1,\"\\n              \"],[10,\"code\"],[14,0,\"docs__keyboard-key\"],[12],[1,\"\\n                d\\n              \"],[13],[1,\"\\n            \"],[13],[1,\"\\n            \"],[10,\"td\"],[12],[1,\"\\n              Go to Docs\\n            \"],[13],[1,\"\\n          \"],[13],[1,\"\\n          \"],[10,\"tr\"],[12],[1,\"\\n            \"],[10,\"td\"],[12],[1,\"\\n              \"],[10,\"code\"],[14,0,\"docs__keyboard-key\"],[12],[1,\"\\n                ?\\n              \"],[13],[1,\"\\n            \"],[13],[1,\"\\n            \"],[10,\"td\"],[12],[1,\"\\n              Bring up this help dialog\\n            \"],[13],[1,\"\\n          \"],[13],[1,\"\\n          \"],[10,\"tr\"],[12],[1,\"\\n            \"],[10,\"td\"],[12],[1,\"\\n              \"],[10,\"code\"],[14,0,\"docs__keyboard-key\"],[12],[1,\"\\n                esc\\n              \"],[13],[1,\"\\n            \"],[13],[1,\"\\n            \"],[10,\"td\"],[12],[1,\"\\n              Hide this help dialog\\n            \"],[13],[1,\"\\n          \"],[13],[1,\"\\n\\n          \"],[10,\"tr\"],[12],[1,\"\\n            \"],[10,\"th\"],[12],[13],[1,\"\\n            \"],[10,\"th\"],[12],[1,\"\\n              \"],[10,\"h3\"],[14,0,\"docs-fullscreen-modal__subtitle\"],[12],[1,\"\\n                Docs search\\n              \"],[13],[1,\"\\n            \"],[13],[1,\"\\n          \"],[13],[1,\"\\n          \"],[10,\"tr\"],[12],[1,\"\\n            \"],[10,\"td\"],[12],[1,\"\\n              \"],[10,\"code\"],[14,0,\"docs__keyboard-key\"],[12],[1,\"\\n                /\\n              \"],[13],[1,\"\\n              or\\n              \"],[10,\"code\"],[14,0,\"docs__keyboard-key\"],[12],[1,\"\\n                s\\n              \"],[13],[1,\"\\n            \"],[13],[1,\"\\n            \"],[10,\"td\"],[12],[1,\"\\n              Focus search bar\\n            \"],[13],[1,\"\\n          \"],[13],[1,\"\\n          \"],[10,\"tr\"],[12],[1,\"\\n            \"],[10,\"td\"],[12],[1,\"\\n              \"],[10,\"code\"],[14,0,\"docs__keyboard-key\"],[12],[1,\"\\n                ctrl\\n              \"],[13],[1,\"\\n              \"],[10,\"code\"],[14,0,\"docs__keyboard-key\"],[12],[1,\"\\n                n\\n              \"],[13],[1,\"\\n              or\\n              \"],[10,\"code\"],[14,0,\"docs__keyboard-key\"],[12],[1,\"\\n                ↓\\n              \"],[13],[1,\"\\n            \"],[13],[1,\"\\n            \"],[10,\"td\"],[12],[1,\"\\n              Select next search result\\n            \"],[13],[1,\"\\n          \"],[13],[1,\"\\n          \"],[10,\"tr\"],[12],[1,\"\\n            \"],[10,\"td\"],[12],[1,\"\\n              \"],[10,\"code\"],[14,0,\"docs__keyboard-key\"],[12],[1,\"\\n                ctrl\\n              \"],[13],[1,\"\\n              \"],[10,\"code\"],[14,0,\"docs__keyboard-key\"],[12],[1,\"\\n                p\\n              \"],[13],[1,\"\\n              or\\n              \"],[10,\"code\"],[14,0,\"docs__keyboard-key\"],[12],[1,\"\\n                ↑\\n              \"],[13],[1,\"\\n            \"],[13],[1,\"\\n            \"],[10,\"td\"],[12],[1,\"\\n              Select previous search result\\n            \"],[13],[1,\"\\n          \"],[13],[1,\"\\n          \"],[10,\"tr\"],[12],[1,\"\\n            \"],[10,\"td\"],[12],[1,\"\\n              \"],[10,\"code\"],[14,0,\"docs__keyboard-key\"],[12],[1,\"\\n                enter\\n              \"],[13],[1,\"\\n            \"],[13],[1,\"\\n            \"],[10,\"td\"],[12],[1,\"\\n              Navigate to selected search result\\n            \"],[13],[1,\"\\n          \"],[13],[1,\"\\n\\n          \"],[10,\"tr\"],[12],[1,\"\\n            \"],[10,\"th\"],[12],[13],[1,\"\\n            \"],[10,\"th\"],[12],[1,\"\\n              \"],[10,\"h3\"],[14,0,\"docs-fullscreen-modal__subtitle\"],[12],[1,\"\\n                Docs nav\\n              \"],[13],[1,\"\\n            \"],[13],[1,\"\\n          \"],[13],[1,\"\\n          \"],[10,\"tr\"],[12],[1,\"\\n            \"],[10,\"td\"],[12],[1,\"\\n              \"],[10,\"code\"],[14,0,\"docs__keyboard-key\"],[12],[1,\"\\n                j\\n              \"],[13],[1,\"\\n              or\\n              \"],[10,\"code\"],[14,0,\"docs__keyboard-key\"],[12],[1,\"\\n                →\\n              \"],[13],[1,\"\\n            \"],[13],[1,\"\\n            \"],[10,\"td\"],[12],[1,\"\\n              Navigate to next page\\n            \"],[13],[1,\"\\n          \"],[13],[1,\"\\n          \"],[10,\"tr\"],[12],[1,\"\\n            \"],[10,\"td\"],[12],[1,\"\\n              \"],[10,\"code\"],[14,0,\"docs__keyboard-key\"],[12],[1,\"\\n                k\\n              \"],[13],[1,\"\\n              or\\n              \"],[10,\"code\"],[14,0,\"docs__keyboard-key\"],[12],[1,\"\\n                ←\\n              \"],[13],[1,\"\\n            \"],[13],[1,\"\\n            \"],[10,\"td\"],[12],[1,\"\\n              Navigate to previous page\\n            \"],[13],[1,\"\\n          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[]]]]],[1,\"\\n\"]],[]],null]],[\"&attrs\"],false,[\"if\",\"modal-dialog\",\"on\"]]",
    "moduleName": "ember-cli-addon-docs/components/docs-keyboard-shortcuts/index.hbs",
    "isStrictMode": false
  });

  /**
    A component that enables keyboard shortcuts. Press '?' to toggle the keyboard shortcuts dialog.
  
    @class DocsKeyboardShortcuts
    @public
  */
  let DocsKeyboardShortcutsComponent = _exports.default = (_dec = (0, _emberKeyboard.onKey)('KeyG', {
    event: 'keyup'
  }), _dec2 = (0, _emberKeyboard.onKey)('KeyD', {
    event: 'keyup'
  }), _dec3 = (0, _emberKeyboard.onKey)('KeyH', {
    event: 'keyup'
  }), _dec4 = (0, _emberKeyboard.onKey)('shift+Slash', {
    event: 'keyup'
  }), _dec5 = (0, _emberKeyboard.onKey)('Escape', {
    event: 'keyup'
  }), (0, _emberKeyboard.keyResponder)(_class = (_class2 = class DocsKeyboardShortcutsComponent extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "router", _descriptor, this);
      _initializerDefineProperty(this, "isShowingKeyboardShortcuts", _descriptor2, this);
    }
    goto() {
      if (!(0, _keyboardConfig.formElementHasFocus)()) {
        this.isGoingTo = true;
        (0, _runloop.later)(() => {
          this.isGoingTo = false;
        }, 500);
      }
    }
    gotoDocs() {
      if (!(0, _keyboardConfig.formElementHasFocus)()) {
        if (this.isGoingTo) {
          this.router.transitionTo('docs');
        }
      }
    }
    gotoHome() {
      if (!(0, _keyboardConfig.formElementHasFocus)()) {
        if (this.isGoingTo) {
          this.router.transitionTo('index');
        }
      }
    }
    toggleKeyboardShortcutsWithKeyboard() {
      if (!(0, _keyboardConfig.formElementHasFocus)()) {
        this.isShowingKeyboardShortcuts = !this.isShowingKeyboardShortcuts;
      }
    }
    hideKeyboardShortcuts() {
      if (!(0, _keyboardConfig.formElementHasFocus)() && this.isShowingKeyboardShortcuts) {
        this.isShowingKeyboardShortcuts = false;
      }
    }
    toggleKeyboardShortcuts() {
      this.isShowingKeyboardShortcuts = !this.isShowingKeyboardShortcuts;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "isShowingKeyboardShortcuts", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "goto", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "goto"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "gotoDocs", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "gotoDocs"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "gotoHome", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "gotoHome"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "toggleKeyboardShortcutsWithKeyboard", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "toggleKeyboardShortcutsWithKeyboard"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hideKeyboardShortcuts", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "hideKeyboardShortcuts"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "toggleKeyboardShortcuts", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "toggleKeyboardShortcuts"), _class2.prototype)), _class2)) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, DocsKeyboardShortcutsComponent);
});
;define("ember-cli-addon-docs/components/docs-link/index", ["exports", "@ember/component", "@glimmer/component", "@ember/template-factory"], function (_exports, _component, _component2, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@glimmer/component",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#let
    (if
      this.isRouteOnly
      (component "link-to" route=@route)
      (if
        this.isRouteAndModelOnly
        (component "link-to" route=@route model=@model)
        (if
          this.isRouteAndModelsOnly
          (component "link-to" route=@route models=@models)
          (component "link-to")
        )
      )
    )
    as |DocsLinkTo|
  ~}}
    <DocsLinkTo
      class="docs-md__a"
      @query={{or @query (hash)}}
      @disabled={{@disabled}}
      @activeClass={{@activeClass}}
      @current-when={{@current-when}}
      ...attributes
    >
      {{~yield~}}
    </DocsLinkTo>
  {{~/let}}
  */
  {
    "id": "Ql+ylxZl",
    "block": "[[[44,[[52,[30,0,[\"isRouteOnly\"]],[50,\"link-to\",0,null,[[\"route\"],[[30,1]]]],[52,[30,0,[\"isRouteAndModelOnly\"]],[50,\"link-to\",0,null,[[\"route\",\"model\"],[[30,1],[30,2]]]],[52,[30,0,[\"isRouteAndModelsOnly\"]],[50,\"link-to\",0,null,[[\"route\",\"models\"],[[30,1],[30,3]]]],[50,\"link-to\",0,null,null]]]]],[[[8,[30,4],[[24,0,\"docs-md__a\"],[17,5]],[[\"@query\",\"@disabled\",\"@activeClass\",\"@current-when\"],[[28,[37,3],[[30,6],[28,[37,4],null,null]],null],[30,7],[30,8],[30,9]]],[[\"default\"],[[[[18,10,null]],[]]]]]],[4]]]],[\"@route\",\"@model\",\"@models\",\"DocsLinkTo\",\"&attrs\",\"@query\",\"@disabled\",\"@activeClass\",\"@current-when\",\"&default\"],false,[\"let\",\"if\",\"component\",\"or\",\"hash\",\"yield\"]]",
    "moduleName": "ember-cli-addon-docs/components/docs-link/index.hbs",
    "isStrictMode": false
  });

  /**
    A `<LinkTo>` styled alternative. See [ember docs](https://api.emberjs.com/ember/release/classes/Ember.Templates.components/methods/input?anchor=LinkTo) on how to use it.
  
  
    ```hbs
    <DocsLink @route="post" @model={{post.id}}>
      Go to post
    </DocsLink>
    ```
  
    @class DocsLink
    @public
  */
  class DocsLink extends _component2.default {
    get isRouteOnly() {
      return 'route' in this.args && !('model' in this.args) && !('models' in this.args);
    }
    get isRouteAndModelOnly() {
      return 'route' in this.args && 'model' in this.args && !('models' in this.args);
    }
    get isRouteAndModelsOnly() {
      return 'route' in this.args && !('model' in this.args) && 'models' in this.args;
    }
  }
  _exports.default = DocsLink;
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, DocsLink);
});
;define("ember-cli-addon-docs/components/docs-logo/index", ["exports", "@ember/component", "@ember/object/computed", "@ember/debug", "@glimmer/component", "tracked-toolbox", "@ember/template-factory"], function (_exports, _component, _computed, _debug, _component2, _trackedToolbox, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _dec4, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/object/computed",0,"@ember/debug",0,"@glimmer/component",0,"tracked-toolbox",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{svg-jar this.logo class="docs-h-full docs-w-auto docs-max-w-full docs-fill-current"}}
  
  */
  {
    "id": "D1hlYcCB",
    "block": "[[[1,[28,[35,0],[[30,0,[\"logo\"]]],[[\"class\"],[\"docs-h-full docs-w-auto docs-max-w-full docs-fill-current\"]]]],[1,\"\\n\"]],[],false,[\"svg-jar\"]]",
    "moduleName": "ember-cli-addon-docs/components/docs-logo/index.hbs",
    "isStrictMode": false
  });

  /**
    A simple component to render an Ember, Ember CLI or Ember Data logo.
  
    @class DocsLogo
    @public
  */
  let DocsLogo = _exports.default = (_dec = (0, _trackedToolbox.localCopy)('args.logo', 'ember'), _dec2 = (0, _computed.equal)('logo', 'ember'), _dec3 = (0, _computed.equal)('logo', 'ember-cli'), _dec4 = (0, _computed.equal)('logo', 'ember-data'), (_class = class DocsLogo extends _component2.default {
    constructor() {
      super(...arguments);
      /**
        Render either the 'ember', 'ember-cli' or 'ember-data' logo:
         ```handlebars
        {{docs-logo logo='ember'}}
        {{docs-logo logo='ember-cli'}}
        {{docs-logo logo='ember-data'}}
        ```
         @argument logo
        @type String
      */
      _initializerDefineProperty(this, "logo", _descriptor, this);
      _initializerDefineProperty(this, "showEmber", _descriptor2, this);
      _initializerDefineProperty(this, "showEmberCli", _descriptor3, this);
      _initializerDefineProperty(this, "showEmberData", _descriptor4, this);
      let logo = this.logo;
      let validLogos = ['ember', 'ember-cli', 'ember-data'];
      (true && !(validLogos.includes(logo)) && (0, _debug.assert)(`You passed "${logo}" to the docs-logo component, but the only valid options are [${validLogos}].`, validLogos.includes(logo)));
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "logo", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "showEmber", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "showEmberCli", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "showEmberData", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, DocsLogo);
});
;define("ember-cli-addon-docs/components/docs-snippet/index", ["exports", "@ember/component", "@glimmer/component", "tracked-toolbox", "@ember/template-factory"], function (_exports, _component, _component2, _trackedToolbox, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _class, _descriptor, _descriptor2;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@glimmer/component",0,"tracked-toolbox",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#if @title}}
    <div class="
      docs-bg-black docs-text-grey-lighter docs-text-xs
      docs-font-medium docs-py-2 docs-px-4 docs-rounded-t
      docs-border-b docs-border-grey-darkest
      docs-subpixel-antialiased
    ">
      {{@title}}
    </div>
  {{/if}}
  
  <div class="
      docs-text-xs docs-px-2 docs-py-1 docs-bg-code-base
      docs-relative docs-subpixel-antialiased
      {{if @title "docs-rounded-b" "docs-rounded"}}
    "
    data-test-id={{or @data-test-id @name}}
    ...attributes
  >
    {{#let (get-code-snippet @name unindent=this.unindent) as |snippet|}}
      {{#if this.showCopy}}
        <CopyButton
          @text={{snippet.source}}
          title="copy to clipboard"
          class="
            docs-absolute docs-top-0 docs-right-0 docs-bg-transparent hover:docs-bg-transparent
            docs-border-none docs-opacity-50 hover:docs-opacity-100 docs-p-3 docs-text-white
          "
        >
          Copy
        </CopyButton>
      {{/if}}
  
      <DocsCodeHighlight @language={{@language}}>{{snippet.source}}</DocsCodeHighlight>
    {{/let}}
  </div>
  
  */
  {
    "id": "bka6l7A/",
    "block": "[[[41,[30,1],[[[1,\"  \"],[10,0],[14,0,\"\\n    docs-bg-black docs-text-grey-lighter docs-text-xs\\n    docs-font-medium docs-py-2 docs-px-4 docs-rounded-t\\n    docs-border-b docs-border-grey-darkest\\n    docs-subpixel-antialiased\\n  \"],[12],[1,\"\\n    \"],[1,[30,1]],[1,\"\\n  \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[11,0],[16,0,[29,[\"\\n    docs-text-xs docs-px-2 docs-py-1 docs-bg-code-base\\n    docs-relative docs-subpixel-antialiased\\n    \",[52,[30,1],\"docs-rounded-b\",\"docs-rounded\"],\"\\n  \"]]],[16,\"data-test-id\",[28,[37,1],[[30,2],[30,3]],null]],[17,4],[12],[1,\"\\n\"],[44,[[28,[37,3],[[30,3]],[[\"unindent\"],[[30,0,[\"unindent\"]]]]]],[[[41,[30,0,[\"showCopy\"]],[[[1,\"      \"],[8,[39,4],[[24,\"title\",\"copy to clipboard\"],[24,0,\"\\n          docs-absolute docs-top-0 docs-right-0 docs-bg-transparent hover:docs-bg-transparent\\n          docs-border-none docs-opacity-50 hover:docs-opacity-100 docs-p-3 docs-text-white\\n        \"]],[[\"@text\"],[[30,5,[\"source\"]]]],[[\"default\"],[[[[1,\"\\n        Copy\\n      \"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"\\n    \"],[8,[39,5],null,[[\"@language\"],[[30,6]]],[[\"default\"],[[[[1,[30,5,[\"source\"]]]],[]]]]],[1,\"\\n\"]],[5]]],[13],[1,\"\\n\"]],[\"@title\",\"@data-test-id\",\"@name\",\"&attrs\",\"snippet\",\"@language\"],false,[\"if\",\"or\",\"let\",\"get-code-snippet\",\"copy-button\",\"docs-code-highlight\"]]",
    "moduleName": "ember-cli-addon-docs/components/docs-snippet/index.hbs",
    "isStrictMode": false
  });

  /**
    A snippet component for demonstrating some code
  
    ```hbs
    <DocsSnippet @name={{snippet.name}} @unindent={{true}} @language={{snippet.language}} />
    ```
  
    @class DocsSnippet
    @public
  */
  let DocsSnippet = _exports.default = (_dec = (0, _trackedToolbox.localCopy)('args.showCopy', true), _dec2 = (0, _trackedToolbox.localCopy)('args.unindent', true), (_class = class DocsSnippet extends _component2.default {
    constructor(...args) {
      super(...args);
      /**
        The name of the snippet
         @argument name
        @type String?
      */
      /**
        The language of the snippet
         @argument language
        @type String?
      */
      /**
        The title of the snippet
         @argument title
        @type String?
      */
      /**
        Whether or not to show the copy button for this snippet
         @argument showCopy
        @type Boolean
        @default true
      */
      _initializerDefineProperty(this, "showCopy", _descriptor, this);
      /**
        Whether or not the snippet should be unindented
         @argument unindent
        @type Boolean
        @default true
      */
      _initializerDefineProperty(this, "unindent", _descriptor2, this);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "showCopy", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "unindent", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, DocsSnippet);
});
;define("ember-cli-addon-docs/components/docs-viewer/index", ["exports", "@ember/component", "@ember/service", "@glimmer/component", "@glimmer/tracking", "ember-keyboard", "ember-cli-addon-docs/keyboard-config", "@ember/template-factory"], function (_exports, _component, _service, _component2, _tracking, _emberKeyboard, _keyboardConfig, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/service",0,"@glimmer/component",0,"@glimmer/tracking",0,"ember-keyboard",0,"ember-cli-addon-docs/keyboard-config",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div class="docs-viewer docs-flex docs-flex-1" ...attributes>
    <div class="md:docs-flex docs-w-full">
      {{yield
        (hash
          nav=(component "docs-viewer/x-nav")
          main=(component "docs-viewer/x-main" onReindex=(set this "pageIndex"))
        )
      }}
  
      <DocsViewer::XCurrentPageIndex @pageIndex={{this.pageIndex}} />
    </div>
  </div>
  */
  {
    "id": "hCeY4DvT",
    "block": "[[[11,0],[24,0,\"docs-viewer docs-flex docs-flex-1\"],[17,1],[12],[1,\"\\n  \"],[10,0],[14,0,\"md:docs-flex docs-w-full\"],[12],[1,\"\\n    \"],[18,2,[[28,[37,1],null,[[\"nav\",\"main\"],[[50,\"docs-viewer/x-nav\",0,null,null],[50,\"docs-viewer/x-main\",0,null,[[\"onReindex\"],[[28,[37,3],[[30,0],\"pageIndex\"],null]]]]]]]]],[1,\"\\n\\n    \"],[8,[39,4],null,[[\"@pageIndex\"],[[30,0,[\"pageIndex\"]]]],null],[1,\"\\n  \"],[13],[1,\"\\n\"],[13]],[\"&attrs\",\"&default\"],false,[\"yield\",\"hash\",\"component\",\"set\",\"docs-viewer/x-current-page-index\"]]",
    "moduleName": "ember-cli-addon-docs/components/docs-viewer/index.hbs",
    "isStrictMode": false
  });

  /**
    The main docs viewer component for EmberCLI AddonDocs. This component must be placed
  
  
    ```hbs
    <DocsViewer as |viewer|>
      <viewer.nav as |nav|>
        <nav.item @label="Introduction" @route="docs.index"/>
  
        <nav.subnav as |nav|>
          <nav.item @label="Subitem" @route="docs.items.subitem"/>
        </nav.subnav>
      </viewer.nav>
  
      <viewer.main>
        {{outlet}}
      </viewer.main>
    </DocsViewer>
    ```
  
    @class DocsViewer
    @yield {Hash} viewer
    @yield {Component} viewer.nav
    @yield {Component} viewer.main
    @public
  */
  let DocsViewerComponent = _exports.default = (_dec = (0, _emberKeyboard.onKey)('KeyJ'), _dec2 = (0, _emberKeyboard.onKey)('ArrowRight'), _dec3 = (0, _emberKeyboard.onKey)('KeyK'), _dec4 = (0, _emberKeyboard.onKey)('ArrowLeft'), (0, _emberKeyboard.keyResponder)(_class = (_class2 = class DocsViewerComponent extends _component2.default {
    constructor() {
      super(...arguments);

      // for some reason the glimmer willDestroy hook was not
      // being ran when switching to the sandbox app but the contructor was.
      // If we're rendering a new docs-viewer, it's safe to assume we want
      // to reset the doc routes
      _initializerDefineProperty(this, "docsRoutes", _descriptor, this);
      _initializerDefineProperty(this, "router", _descriptor2, this);
      _initializerDefineProperty(this, "pageIndex", _descriptor3, this);
      this.docsRoutes.resetState();
    }
    nextPage() {
      if (!(0, _keyboardConfig.formElementHasFocus)()) {
        if (this.docsRoutes.next) {
          const {
            route,
            model
          } = this.docsRoutes.next;
          this.router.transitionTo(route, model);
        }
      }
    }
    previousPage() {
      if (!(0, _keyboardConfig.formElementHasFocus)()) {
        if (this.docsRoutes.previous) {
          const {
            route,
            model
          } = this.docsRoutes.previous;
          this.router.transitionTo(route, model);
        }
      }
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "docsRoutes", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "pageIndex", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, "nextPage", [_dec, _dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "nextPage"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "previousPage", [_dec3, _dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "previousPage"), _class2.prototype)), _class2)) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, DocsViewerComponent);
});
;define("ember-cli-addon-docs/components/docs-viewer/x-autogenerated-api-docs/index", ["exports", "@ember/component", "@ember/service", "@ember/object/computed", "@glimmer/component", "lodash", "@ember/template-factory"], function (_exports, _component, _service, _computed, _component2, _lodash, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class, _descriptor, _descriptor2;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/service",0,"@ember/object/computed",0,"@glimmer/component",0,"lodash",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#if (gt @project.modules.length 0)}}
    <DocsViewer::XSection @label="API Reference" @style="large" />
  
    {{#each this.resolvedTypeSections as |section|}}
      <DocsViewer::XSection @label={{section.type}} />
  
      {{#each section.items as |item|}}
        <DocsViewer::XNavItem
          @label={{break-on item.name "/"}}
          @route={{concat @root ".api.item"}}
          @model={{item.path}}
        />
      {{/each}}
    {{/each}}
  
    {{#if this.moduleIndex}}
      <DocsViewer::XSection @label="Modules" />
  
      <DocsViewer::XAutogeneratedApiDocs::ModuleNav
        @node={{this.moduleIndex}}
        @root={{@root}}
      />
    {{/if}}
  
  {{/if}}
  */
  {
    "id": "WCsDh5XP",
    "block": "[[[41,[28,[37,1],[[30,1,[\"modules\",\"length\"]],0],null],[[[1,\"  \"],[8,[39,2],null,[[\"@label\",\"@style\"],[\"API Reference\",\"large\"]],null],[1,\"\\n\\n\"],[42,[28,[37,4],[[28,[37,4],[[30,0,[\"resolvedTypeSections\"]]],null]],null],null,[[[1,\"    \"],[8,[39,2],null,[[\"@label\"],[[30,2,[\"type\"]]]],null],[1,\"\\n\\n\"],[42,[28,[37,4],[[28,[37,4],[[30,2,[\"items\"]]],null]],null],null,[[[1,\"      \"],[8,[39,5],null,[[\"@label\",\"@route\",\"@model\"],[[28,[37,6],[[30,3,[\"name\"]],\"/\"],null],[28,[37,7],[[30,4],\".api.item\"],null],[30,3,[\"path\"]]]],null],[1,\"\\n\"]],[3]],null]],[2]],null],[1,\"\\n\"],[41,[30,0,[\"moduleIndex\"]],[[[1,\"    \"],[8,[39,2],null,[[\"@label\"],[\"Modules\"]],null],[1,\"\\n\\n    \"],[8,[39,8],null,[[\"@node\",\"@root\"],[[30,0,[\"moduleIndex\"]],[30,4]]],null],[1,\"\\n\"]],[]],null],[1,\"\\n\"]],[]],null]],[\"@project\",\"section\",\"item\",\"@root\"],false,[\"if\",\"gt\",\"docs-viewer/x-section\",\"each\",\"-track-array\",\"docs-viewer/x-nav-item\",\"break-on\",\"concat\",\"docs-viewer/x-autogenerated-api-docs/module-nav\"]]",
    "moduleName": "ember-cli-addon-docs/components/docs-viewer/x-autogenerated-api-docs/index.hbs",
    "isStrictMode": false
  });
  let XAutogeneratedApiDocs = _exports.default = (_dec = (0, _computed.readOnly)('args.project.navigationIndex'), (_class = class XAutogeneratedApiDocs extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "store", _descriptor, this);
      _initializerDefineProperty(this, "sections", _descriptor2, this);
    }
    /*
      Autogenerated sections include "resolved types", by which we mean things like
      Components and Helpers, as well as generic "modules", which is any other
      public JavaScript export from this library.
       These are the sections for the resolved types.
    */
    get resolvedTypeSections() {
      return this.sections.filter(section => section.type !== 'modules');
    }

    /*
      Autogenerated sections include "resolved types", by which we mean things like
      Components and Helpers, as well as generic "modules", which is any other
      public JavaScript export from this library.
       This is the index of nodes for generic modules. We transform the raw array
      of modules that look like this
       ```
      [
        {id: "ember-cli-addon-docs/keyboard-config", path: "modules/ember-cli-addon-docs/keyboard-config", name: "ember-cli-addon-docs/keyboard-config"}
        {id: "ember-cli-addon-docs/router", path: "modules/ember-cli-addon-docs/router", name: "ember-cli-addon-docs/router"}
        {id: "ember-cli-addon-docs/utils/compile-markdown", path: "modules/ember-cli-addon-docs/utils/compile-markdown", name: "ember-cli-addon-docs/utils/compile-markdown"}
      ]
      ```
       into a nested data structure resembling the filesystem:
       ```
      {
        name: '@ember-cli-addon-docs',
        children: [
          { name: 'keyboard-config', path: "modules/ember-cli-addon-docs/keyboard-config" },
          { name: 'router', children: [], path: "modules/ember-cli-addon-docs/router"  },
          {
            name: 'utils',
            children: [
              { name: 'compile-markdown', children: [], path: "modules/ember-cli-addon-docs/utils/compile-markdown"  },
            ]
          },
        ]
      };
      ```
    */
    get moduleIndex() {
      let modulesSection = this.sections.filter(section => section.type === 'modules')[0];
      if (modulesSection) {
        let modules = modulesSection.items;

        /*
        Intermediate data structure:
         ```
        {
          '@ember-cli-addon-docs': {
            'keyboard-config': {},
            'router': {},
            'utils': {
              'compile-markdown': {}
            }
          }
        };
        ```
        */
        let index = {};
        modules.forEach(module => {
          let parts = module.id.split('/');
          (0, _lodash.set)(index, parts, {});
        });
        let transform = (obj, id) => Object.keys(obj).map(key => {
          let node = {
            name: key
          };
          let children = transform(obj[key], id ? `${id}/${key}` : key);
          if (children.length) {
            node.children = children;
          } else {
            node.id = `${id}/${key}`;
          }
          return node;
        });
        return transform(index)[0];
      }
      return null;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "store", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "sections", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, XAutogeneratedApiDocs);
});
;define("ember-cli-addon-docs/components/docs-viewer/x-autogenerated-api-docs/module-nav/index", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <DocsViewer::XNavList @class="docs-ml-4" ...attributes as |subnav|>
    <DocsViewer::XSection @style="subsection">
      {{@node.name}}
    </DocsViewer::XSection>
  
    {{#each @node.children as |child|}}
      {{#if child.children}}
        <DocsViewer::XAutogeneratedApiDocs::ModuleNav
          @node={{child}}
          @root={{@root}}
        />
      {{else}}
        <subnav.item
          @label={{child.name}}
          @route={{concat @root ".api.item"}}
          @model={{concat "modules/" child.id}}
        />
      {{/if}}
    {{/each}}
  </DocsViewer::XNavList>
  */
  {
    "id": "xCKtlFEW",
    "block": "[[[8,[39,0],[[17,1]],[[\"@class\"],[\"docs-ml-4\"]],[[\"default\"],[[[[1,\"\\n  \"],[8,[39,1],null,[[\"@style\"],[\"subsection\"]],[[\"default\"],[[[[1,\"\\n    \"],[1,[30,3,[\"name\"]]],[1,\"\\n  \"]],[]]]]],[1,\"\\n\\n\"],[42,[28,[37,3],[[28,[37,3],[[30,3,[\"children\"]]],null]],null],null,[[[41,[30,4,[\"children\"]],[[[1,\"      \"],[8,[39,5],null,[[\"@node\",\"@root\"],[[30,4],[30,5]]],null],[1,\"\\n\"]],[]],[[[1,\"      \"],[8,[30,2,[\"item\"]],null,[[\"@label\",\"@route\",\"@model\"],[[30,4,[\"name\"]],[28,[37,6],[[30,5],\".api.item\"],null],[28,[37,6],[\"modules/\",[30,4,[\"id\"]]],null]]],null],[1,\"\\n\"]],[]]]],[4]],null]],[2]]]]]],[\"&attrs\",\"subnav\",\"@node\",\"child\",\"@root\"],false,[\"docs-viewer/x-nav-list\",\"docs-viewer/x-section\",\"each\",\"-track-array\",\"if\",\"docs-viewer/x-autogenerated-api-docs/module-nav\",\"concat\"]]",
    "moduleName": "ember-cli-addon-docs/components/docs-viewer/x-autogenerated-api-docs/module-nav/index.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-cli-addon-docs/components/docs-viewer/x-current-page-index/index", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <nav class="AddonDocs-DocsViewer-CurrentPageIndex docs-hidden xl:docs-block docs-flex-no-shrink docs-mr-auto" data-test-current-page-index ...attributes>
    <div class="docs-sticky docs-top-0 docs-pt-4 docs-pb-8 docs-pr-8 docs-max-h-screen docs-overflow-y-scroll">
      <ul class="docs-border-l docs-border-grey-lighter docs-pl-6 docs-leading-normal">
        {{#if @pageIndex.length}}
          <li class="docs-mt-12 docs-text-grey docs-font-bold docs-tracking-wide docs-uppercase docs-text-xxs">
            On This Page
          </li>
        {{/if}}
  
        {{#each @pageIndex as |item|}}
          <li class="
            docs-leading-tight docs-tracking-tight
            {{if item.indent (concat "docs-ml-" item.indent)}}
            {{if item.marginTop (concat "docs-mt-" item.marginTop)}}
            {{if item.marginBottom (concat "docs-mt-" item.marginBottom)}}
          "
  
          data-test-index-item
          >
            <a
              href="#{{item.id}}"
              class="docs-text-grey-dark docs-font-semibold docs-no-underline hover:docs-underline docs-text-{{item.size}}"
            >
              {{item.text}}
            </a>
          </li>
        {{/each}}
      </ul>
    </div>
  </nav>
  
  */
  {
    "id": "4A7VoRHG",
    "block": "[[[11,\"nav\"],[24,0,\"AddonDocs-DocsViewer-CurrentPageIndex docs-hidden xl:docs-block docs-flex-no-shrink docs-mr-auto\"],[24,\"data-test-current-page-index\",\"\"],[17,1],[12],[1,\"\\n  \"],[10,0],[14,0,\"docs-sticky docs-top-0 docs-pt-4 docs-pb-8 docs-pr-8 docs-max-h-screen docs-overflow-y-scroll\"],[12],[1,\"\\n    \"],[10,\"ul\"],[14,0,\"docs-border-l docs-border-grey-lighter docs-pl-6 docs-leading-normal\"],[12],[1,\"\\n\"],[41,[30,2,[\"length\"]],[[[1,\"        \"],[10,\"li\"],[14,0,\"docs-mt-12 docs-text-grey docs-font-bold docs-tracking-wide docs-uppercase docs-text-xxs\"],[12],[1,\"\\n          On This Page\\n        \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[42,[28,[37,2],[[28,[37,2],[[30,2]],null]],null],null,[[[1,\"        \"],[10,\"li\"],[15,0,[29,[\"\\n          docs-leading-tight docs-tracking-tight\\n          \",[52,[30,3,[\"indent\"]],[28,[37,3],[\"docs-ml-\",[30,3,[\"indent\"]]],null]],\"\\n          \",[52,[30,3,[\"marginTop\"]],[28,[37,3],[\"docs-mt-\",[30,3,[\"marginTop\"]]],null]],\"\\n          \",[52,[30,3,[\"marginBottom\"]],[28,[37,3],[\"docs-mt-\",[30,3,[\"marginBottom\"]]],null]],\"\\n        \"]]],[14,\"data-test-index-item\",\"\"],[12],[1,\"\\n          \"],[10,3],[15,6,[29,[\"#\",[30,3,[\"id\"]]]]],[15,0,[29,[\"docs-text-grey-dark docs-font-semibold docs-no-underline hover:docs-underline docs-text-\",[30,3,[\"size\"]]]]],[12],[1,\"\\n            \"],[1,[30,3,[\"text\"]]],[1,\"\\n          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n\"]],[3]],null],[1,\"    \"],[13],[1,\"\\n  \"],[13],[1,\"\\n\"],[13],[1,\"\\n\"]],[\"&attrs\",\"@pageIndex\",\"item\"],false,[\"if\",\"each\",\"-track-array\",\"concat\"]]",
    "moduleName": "ember-cli-addon-docs/components/docs-viewer/x-current-page-index/index.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-cli-addon-docs/components/docs-viewer/x-main/index", ["exports", "@ember/component", "@ember/object", "@ember/service", "@glimmer/component", "@ember/runloop", "ember-cli-addon-docs/app-files", "ember-cli-addon-docs/addon-files", "@ember/application", "ember-cli-addon-docs/-private/config", "@ember/template-factory"], function (_exports, _component, _object, _service, _component2, _runloop, _appFiles, _addonFiles, _application, _config, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/object",0,"@ember/service",0,"@glimmer/component",0,"@ember/runloop",0,"ember-cli-addon-docs/app-files",0,"ember-cli-addon-docs/addon-files",0,"@ember/application",0,"ember-cli-addon-docs/-private/config",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <main
    class="docs-px-4 md:docs-px-8 lg:docs-px-20 docs-mx-auto md:docs-mx-0 docs-mt-6 md:docs-mt-12 md:docs-min-w-0 md:docs-flex-1"
    {{did-insert this.setupElement}}
    {{will-destroy this.teardownElement}}
    ...attributes
  >
    <div data-current-page-index-target>
      {{yield}}
  
      {{#if this.editCurrentPageUrl}}
        <div class="docs-mt-16 docs-mb-8" data-test-edit-page-link>
          <a
            href={{this.editCurrentPageUrl}}
            class="docs-transition docs-text-grey-darkest docs-opacity-50 docs-text-xs hover:docs-opacity-75 docs-no-underline docs-border-b docs-border-grey hover:docs-border-grey-darkest"
          >
            Edit this page
          </a>
        </div>
      {{/if}}
    </div>
  
    <div
      class="docs-mt-16 docs-pb-16 docs-border-t docs-border-grey-lighter docs-pt-4 docs-flex"
    >
      <div class="docs-w-1/2">
        {{#if this.docsRoutes.previous}}
          <div class="docs-text-xs docs-text-grey-dark">
            Previous
          </div>
          <LinkTo
            class="docs-text-grey-darkest docs-text-large-4 docs-font-light docs-no-underline docs-border-b docs-border-grey hover:docs-border-grey-darkest docs-transition"
            @route={{this.docsRoutes.previous.route}}
            @models={{this.docsRoutes.previous.models}}
          >
            {{this.docsRoutes.previous.label}}
          </LinkTo>
        {{/if}}
      </div>
  
      <div class="docs-w-1/2 docs-text-right" data-test-next-link>
        {{#if this.docsRoutes.next}}
          <div class="docs-text-xs docs-text-grey-dark">
            Next
          </div>
          <LinkTo
            class="docs-text-grey-darkest docs-text-large-4 docs-font-light docs-no-underline docs-border-b docs-border-grey hover:docs-border-grey-darkest docs-transition"
            @route={{this.docsRoutes.next.route}}
            @models={{this.docsRoutes.next.models}}
          >
            {{this.docsRoutes.next.label}}
          </LinkTo>
        {{/if}}
      </div>
    </div>
  </main>
  */
  {
    "id": "9ScVOPnj",
    "block": "[[[11,\"main\"],[24,0,\"docs-px-4 md:docs-px-8 lg:docs-px-20 docs-mx-auto md:docs-mx-0 docs-mt-6 md:docs-mt-12 md:docs-min-w-0 md:docs-flex-1\"],[17,1],[4,[38,0],[[30,0,[\"setupElement\"]]],null],[4,[38,1],[[30,0,[\"teardownElement\"]]],null],[12],[1,\"\\n  \"],[10,0],[14,\"data-current-page-index-target\",\"\"],[12],[1,\"\\n    \"],[18,2,null],[1,\"\\n\\n\"],[41,[30,0,[\"editCurrentPageUrl\"]],[[[1,\"      \"],[10,0],[14,0,\"docs-mt-16 docs-mb-8\"],[14,\"data-test-edit-page-link\",\"\"],[12],[1,\"\\n        \"],[10,3],[15,6,[30,0,[\"editCurrentPageUrl\"]]],[14,0,\"docs-transition docs-text-grey-darkest docs-opacity-50 docs-text-xs hover:docs-opacity-75 docs-no-underline docs-border-b docs-border-grey hover:docs-border-grey-darkest\"],[12],[1,\"\\n          Edit this page\\n        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"],[13],[1,\"\\n\\n  \"],[10,0],[14,0,\"docs-mt-16 docs-pb-16 docs-border-t docs-border-grey-lighter docs-pt-4 docs-flex\"],[12],[1,\"\\n    \"],[10,0],[14,0,\"docs-w-1/2\"],[12],[1,\"\\n\"],[41,[30,0,[\"docsRoutes\",\"previous\"]],[[[1,\"        \"],[10,0],[14,0,\"docs-text-xs docs-text-grey-dark\"],[12],[1,\"\\n          Previous\\n        \"],[13],[1,\"\\n        \"],[8,[39,4],[[24,0,\"docs-text-grey-darkest docs-text-large-4 docs-font-light docs-no-underline docs-border-b docs-border-grey hover:docs-border-grey-darkest docs-transition\"]],[[\"@route\",\"@models\"],[[30,0,[\"docsRoutes\",\"previous\",\"route\"]],[30,0,[\"docsRoutes\",\"previous\",\"models\"]]]],[[\"default\"],[[[[1,\"\\n          \"],[1,[30,0,[\"docsRoutes\",\"previous\",\"label\"]]],[1,\"\\n        \"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"    \"],[13],[1,\"\\n\\n    \"],[10,0],[14,0,\"docs-w-1/2 docs-text-right\"],[14,\"data-test-next-link\",\"\"],[12],[1,\"\\n\"],[41,[30,0,[\"docsRoutes\",\"next\"]],[[[1,\"        \"],[10,0],[14,0,\"docs-text-xs docs-text-grey-dark\"],[12],[1,\"\\n          Next\\n        \"],[13],[1,\"\\n        \"],[8,[39,4],[[24,0,\"docs-text-grey-darkest docs-text-large-4 docs-font-light docs-no-underline docs-border-b docs-border-grey hover:docs-border-grey-darkest docs-transition\"]],[[\"@route\",\"@models\"],[[30,0,[\"docsRoutes\",\"next\",\"route\"]],[30,0,[\"docsRoutes\",\"next\",\"models\"]]]],[[\"default\"],[[[[1,\"\\n          \"],[1,[30,0,[\"docsRoutes\",\"next\",\"label\"]]],[1,\"\\n        \"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"    \"],[13],[1,\"\\n  \"],[13],[1,\"\\n\"],[13]],[\"&attrs\",\"&default\"],false,[\"did-insert\",\"will-destroy\",\"yield\",\"if\",\"link-to\"]]",
    "moduleName": "ember-cli-addon-docs/components/docs-viewer/x-main/index.hbs",
    "isStrictMode": false
  });
  const tagToSize = {
    H2: 'xxs',
    H3: 'xxs'
  };
  const tagToIndent = {
    H2: '0',
    H3: '4'
  };
  const tagToMarginTop = {
    H2: '2',
    H3: '2'
  };
  const tagToMarginBottom = {
    H2: '0',
    H3: '0'
  };
  let XMain = _exports.default = (_class = class XMain extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "router", _descriptor, this);
      _initializerDefineProperty(this, "docsRoutes", _descriptor2, this);
      _initializerDefineProperty(this, "config", _descriptor3, this);
    }
    setupElement(element) {
      let target = element.querySelector('[data-current-page-index-target]');
      this._mutationObserver = new MutationObserver((0, _runloop.bind)(this, this.reindex, target));
      this._mutationObserver.observe(target, {
        subtree: true,
        childList: true
      });
      this.reindex(target);
    }
    teardownElement() {
      this._mutationObserver.disconnect();
    }
    reindex(target) {
      let headers = Array.from(target.querySelectorAll('.docs-h2, .docs-h3, .docs-md__h2, .docs-md__h3'));
      this.args.onReindex(headers.map(header => {
        return {
          id: header.id,
          text: header.dataset.text || header.textContent,
          size: tagToSize[header.tagName],
          indent: tagToIndent[header.tagName],
          marginTop: tagToMarginTop[header.tagName],
          marginBottom: tagToMarginBottom[header.tagName]
        };
      }));
    }
    get editCurrentPageUrl() {
      let path = this.router.currentRouteName;
      if (!path) {
        // `router` doesn't exist for old ember versions via ember-try
        return null;
      }
      let match = this._locateFile(path);
      if (match) {
        let {
          projectHref,
          addonPathInRepo,
          docsAppPathInRepo,
          primaryBranch
        } = this.config;
        let parts = [projectHref, 'edit', primaryBranch];
        if (match.inTree === 'addon') {
          parts.push(addonPathInRepo);
        } else {
          parts.push(docsAppPathInRepo);
        }
        parts.push(match.file);
        return parts.filter(Boolean).join('/');
      }
      return null;
    }
    _locateFile(path) {
      path = path.replace(/\./g, '/');
      if (path === 'docs/api/item') {
        let {
          projectName
        } = this.config;
        let model = (0, _application.getOwner)(this).lookup('route:application').modelFor('docs.api.item');
        let filename = model.file.replace(new RegExp(`^${projectName}/`), '');
        let file = _addonFiles.default.find(f => f.match(filename));
        if (file) {
          return {
            file,
            inTree: 'addon'
          };
        }
      } else {
        let file = _appFiles.default.filter(file => file.match(/\.(hbs|md)$/)).find(file => file.match(path));
        if (file) {
          return {
            file,
            inTree: 'app'
          };
        }
      }
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "docsRoutes", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "config", [_config.addonDocsConfig], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "setupElement", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "setupElement"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "teardownElement", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "teardownElement"), _class.prototype)), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, XMain);
});
;define("ember-cli-addon-docs/components/docs-viewer/x-nav-item/index", ["exports", "@ember/component", "@ember/service", "@glimmer/component", "@ember/runloop", "@ember/template-factory"], function (_exports, _component, _service, _component2, _runloop, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/service",0,"@glimmer/component",0,"@ember/runloop",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <li class="docs-mt-2 docs-ml-4 docs-mb-1 docs-flex docs-items-center docs-text-sm" ...attributes>
    {{#if @model}}
      <LinkTo @route={{@route}} @model={{@model}} class="docs-text-grey-darker docs-no-underline hover:docs-underline" @activeClass="docs-text-brand docs-font-medium" data-test-id="nav-item" data-test-label={{@label}}>
        {{@label}}
      </LinkTo>
    {{else}}
      <LinkTo @route={{@route}} class="docs-text-grey-darker docs-no-underline hover:docs-underline" @activeClass="docs-text-brand docs-font-medium" data-test-id="nav-item" data-test-label={{@label}}>
        {{@label}}
      </LinkTo>
    {{/if}}
  </li>
  
  */
  {
    "id": "cUeTRH+D",
    "block": "[[[11,\"li\"],[24,0,\"docs-mt-2 docs-ml-4 docs-mb-1 docs-flex docs-items-center docs-text-sm\"],[17,1],[12],[1,\"\\n\"],[41,[30,2],[[[1,\"    \"],[8,[39,1],[[24,0,\"docs-text-grey-darker docs-no-underline hover:docs-underline\"],[24,\"data-test-id\",\"nav-item\"],[16,\"data-test-label\",[30,3]]],[[\"@route\",\"@model\",\"@activeClass\"],[[30,4],[30,2],\"docs-text-brand docs-font-medium\"]],[[\"default\"],[[[[1,\"\\n      \"],[1,[30,3]],[1,\"\\n    \"]],[]]]]],[1,\"\\n\"]],[]],[[[1,\"    \"],[8,[39,1],[[24,0,\"docs-text-grey-darker docs-no-underline hover:docs-underline\"],[24,\"data-test-id\",\"nav-item\"],[16,\"data-test-label\",[30,3]]],[[\"@route\",\"@activeClass\"],[[30,4],\"docs-text-brand docs-font-medium\"]],[[\"default\"],[[[[1,\"\\n      \"],[1,[30,3]],[1,\"\\n    \"]],[]]]]],[1,\"\\n\"]],[]]],[13],[1,\"\\n\"]],[\"&attrs\",\"@model\",\"@label\",\"@route\"],false,[\"if\",\"link-to\"]]",
    "moduleName": "ember-cli-addon-docs/components/docs-viewer/x-nav-item/index.hbs",
    "isStrictMode": false
  });
  let XNavItem = _exports.default = (_class = class XNavItem extends _component2.default {
    constructor() {
      super(...arguments);
      _initializerDefineProperty(this, "docsRoutes", _descriptor, this);
      let model = this.args.model;
      if (typeof model === 'string' && model.includes('#')) {
        return;
      }
      (0, _runloop.next)(() => {
        this.docsRoutes.items.addObject(this);
      });
    }
    willDestroy() {
      super.willDestroy(...arguments);
      this.docsRoutes.items.removeObject(this);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "docsRoutes", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, XNavItem);
});
;define("ember-cli-addon-docs/components/docs-viewer/x-nav-list/index", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <ul ...attributes>
    {{yield (hash item=(component "docs-viewer/x-nav-item"))}}
  </ul>
  */
  {
    "id": "Bjfn/ei7",
    "block": "[[[11,\"ul\"],[17,1],[12],[1,\"\\n  \"],[18,2,[[28,[37,1],null,[[\"item\"],[[50,\"docs-viewer/x-nav-item\",0,null,null]]]]]],[1,\"\\n\"],[13]],[\"&attrs\",\"&default\"],false,[\"yield\",\"hash\",\"component\"]]",
    "moduleName": "ember-cli-addon-docs/components/docs-viewer/x-nav-list/index.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-cli-addon-docs/components/docs-viewer/x-nav/index", ["exports", "@ember/component", "@ember/service", "@glimmer/component", "@glimmer/tracking", "tracked-toolbox", "@ember/string", "ember-cli-addon-docs/utils/computed", "ember-cli-addon-docs/-private/config", "@ember/template-factory"], function (_exports, _component, _service, _component2, _tracking, _trackedToolbox, _string, _computed, _config, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/service",0,"@glimmer/component",0,"@glimmer/tracking",0,"tracked-toolbox",0,"@ember/string",0,"ember-cli-addon-docs/utils/computed",0,"ember-cli-addon-docs/-private/config",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#if this.media.isMobile}}
    <div class="docs-text-right docs-px-4 md:docs-px-6 docs-mt-4">
      <button {{on "click" (toggle "isShowingMenu" this)}}
        class="docs-text-grey-darkest docs-py-2 docs-text-xs docs-rounded docs-uppercase docs-font-medium">
        ☰ Menu
      </button>
    </div>
  {{/if}}
  
  <div class="AddonDocs-DocsViewer-Nav docs-bg-grey-lightest docs-border-r docs-flex-no-shrink" ...attributes>
    <nav {{on "click" (set this "isShowingMenu" false)}}
      class="
        docs-absolute docs-right-0 docs-shadow-lg md:docs-shadow-none docs-mr-2 md:docs-mr-0 md:docs-pl-2
        docs-max-w-xs docs-w-90% md:docs-w-72 docs-z-10 docs-transition md:docs-sticky md:docs-top-0
        {{if this.media.isMobile
          (if this.isShowingMenu "docs-opacity-100 docs-bg-white" "docs-opacity-0 docs-pointer-events-none")
        }}
      ">
      <div class="docs-pt-px docs-mb-8 docs-px-3 md:docs-px-4 md:docs-max-h-screen md:docs-overflow-y-scroll">
        {{#if this.media.isMobile}}
          <div class="absolute top-0 docs-text-right right-4">
            <button {{on "click" (set this "isShowingMenu" false)}}>
              class="docs-text-grey-darkest docs-opacity-50 hover:docs-opacity-100 docs-text-large-5 docs-py-2 docs-no-underline">
              &times;
            </button>
          </div>
        {{/if}}
  
        <DocsViewer::XNavList>
          {{yield (hash
            section=(component "docs-viewer/x-section")
            item=(component "docs-viewer/x-nav-item")
            subnav=(component "docs-viewer/x-nav-list" class="docs-ml-4")
          )}}
  
          <DocsViewer::XAutogeneratedApiDocs @root={{this.root}} @project={{this.project}} />
        </DocsViewer::XNavList>
  
        <div class="docs-mt-16 lg:docs-mb-16 docs-mr-2 docs-text-xxs docs-rounded">
          <a href="https://github.com/ember-learn/ember-cli-addon-docs"
            class="docs-opacity-50 hover:docs-opacity-100 docs-transition docs-no-underline docs-text-inherit docs-flex docs-items-center docs-text-grey-darkest">
            {{svg-jar "addon-docs-pen" width=22 height=16 class="docs-mr-2"}}
            <div>
              Powered by
              <span class="docs-font-bold">AddonDocs</span>
            </div>
          </a>
        </div>
      </div>
    </nav>
  </div>
  
  */
  {
    "id": "0szpUzHA",
    "block": "[[[41,[30,0,[\"media\",\"isMobile\"]],[[[1,\"  \"],[10,0],[14,0,\"docs-text-right docs-px-4 md:docs-px-6 docs-mt-4\"],[12],[1,\"\\n    \"],[11,\"button\"],[24,0,\"docs-text-grey-darkest docs-py-2 docs-text-xs docs-rounded docs-uppercase docs-font-medium\"],[4,[38,1],[\"click\",[28,[37,2],[\"isShowingMenu\",[30,0]],null]],null],[12],[1,\"\\n      ☰ Menu\\n    \"],[13],[1,\"\\n  \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[11,0],[24,0,\"AddonDocs-DocsViewer-Nav docs-bg-grey-lightest docs-border-r docs-flex-no-shrink\"],[17,1],[12],[1,\"\\n  \"],[11,\"nav\"],[16,0,[29,[\"\\n      docs-absolute docs-right-0 docs-shadow-lg md:docs-shadow-none docs-mr-2 md:docs-mr-0 md:docs-pl-2\\n      docs-max-w-xs docs-w-90% md:docs-w-72 docs-z-10 docs-transition md:docs-sticky md:docs-top-0\\n      \",[52,[30,0,[\"media\",\"isMobile\"]],[52,[30,0,[\"isShowingMenu\"]],\"docs-opacity-100 docs-bg-white\",\"docs-opacity-0 docs-pointer-events-none\"]],\"\\n    \"]]],[4,[38,1],[\"click\",[28,[37,3],[[30,0],\"isShowingMenu\",false],null]],null],[12],[1,\"\\n    \"],[10,0],[14,0,\"docs-pt-px docs-mb-8 docs-px-3 md:docs-px-4 md:docs-max-h-screen md:docs-overflow-y-scroll\"],[12],[1,\"\\n\"],[41,[30,0,[\"media\",\"isMobile\"]],[[[1,\"        \"],[10,0],[14,0,\"absolute top-0 docs-text-right right-4\"],[12],[1,\"\\n          \"],[11,\"button\"],[4,[38,1],[\"click\",[28,[37,3],[[30,0],\"isShowingMenu\",false],null]],null],[12],[1,\"\\n            class=\\\"docs-text-grey-darkest docs-opacity-50 hover:docs-opacity-100 docs-text-large-5 docs-py-2 docs-no-underline\\\">\\n            ×\\n          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n      \"],[8,[39,4],null,null,[[\"default\"],[[[[1,\"\\n        \"],[18,2,[[28,[37,6],null,[[\"section\",\"item\",\"subnav\"],[[50,\"docs-viewer/x-section\",0,null,null],[50,\"docs-viewer/x-nav-item\",0,null,null],[50,\"docs-viewer/x-nav-list\",0,null,[[\"class\"],[\"docs-ml-4\"]]]]]]]],[1,\"\\n\\n        \"],[8,[39,8],null,[[\"@root\",\"@project\"],[[30,0,[\"root\"]],[30,0,[\"project\"]]]],null],[1,\"\\n      \"]],[]]]]],[1,\"\\n\\n      \"],[10,0],[14,0,\"docs-mt-16 lg:docs-mb-16 docs-mr-2 docs-text-xxs docs-rounded\"],[12],[1,\"\\n        \"],[10,3],[14,6,\"https://github.com/ember-learn/ember-cli-addon-docs\"],[14,0,\"docs-opacity-50 hover:docs-opacity-100 docs-transition docs-no-underline docs-text-inherit docs-flex docs-items-center docs-text-grey-darkest\"],[12],[1,\"\\n          \"],[1,[28,[35,9],[\"addon-docs-pen\"],[[\"width\",\"height\",\"class\"],[22,16,\"docs-mr-2\"]]]],[1,\"\\n          \"],[10,0],[12],[1,\"\\n            Powered by\\n            \"],[10,1],[14,0,\"docs-font-bold\"],[12],[1,\"AddonDocs\"],[13],[1,\"\\n          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n  \"],[13],[1,\"\\n\"],[13],[1,\"\\n\"]],[\"&attrs\",\"&default\"],false,[\"if\",\"on\",\"toggle\",\"set\",\"docs-viewer/x-nav-list\",\"yield\",\"hash\",\"component\",\"docs-viewer/x-autogenerated-api-docs\",\"svg-jar\"]]",
    "moduleName": "ember-cli-addon-docs/components/docs-viewer/x-nav/index.hbs",
    "isStrictMode": false
  });
  let XNav = _exports.default = (_dec = (0, _trackedToolbox.localCopy)('args.root', 'docs'), (_class = class XNav extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "config", _descriptor, this);
      _initializerDefineProperty(this, "root", _descriptor2, this);
      _initializerDefineProperty(this, "store", _descriptor3, this);
      _initializerDefineProperty(this, "media", _descriptor4, this);
      _initializerDefineProperty(this, "isShowingMenu", _descriptor5, this);
    }
    get addonLogo() {
      return (0, _computed.addonLogo)(this.config.projectName);
    }
    get addonTitle() {
      let logo = this.addonLogo;
      return (0, _string.classify)(this.config.projectName.replace(`${logo}-`, ''));
    }
    get project() {
      if (this.args.project) {
        return this.args.project;
      }
      return this.store.peekRecord('project', this.config.projectName);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_config.addonDocsConfig], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "root", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "store", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "media", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "isShowingMenu", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, XNav);
});
;define("ember-cli-addon-docs/components/docs-viewer/x-section/index", ["exports", "@ember/component", "@glimmer/component", "tracked-toolbox", "@ember/template-factory"], function (_exports, _component, _component2, _trackedToolbox, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class, _descriptor;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@glimmer/component",0,"tracked-toolbox",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <li class="
    {{if (eq this.style "regular") "docs-mt-8 docs-capitalize"}}
    {{if (eq this.style "large") "docs-mt-8 docs--mb-4 docs-text-xs docs-uppercase"}}
    {{if (eq this.style "subsection") "docs-mt-2 docs-text-sm"}}"
    ...attributes>
    {{#if (has-block)}}
      {{yield}}
    {{else}}
      {{@label}}
    {{/if}}
  </li>
  
  */
  {
    "id": "tZRGRzSW",
    "block": "[[[11,\"li\"],[16,0,[29,[\"\\n  \",[52,[28,[37,1],[[30,0,[\"style\"]],\"regular\"],null],\"docs-mt-8 docs-capitalize\"],\"\\n  \",[52,[28,[37,1],[[30,0,[\"style\"]],\"large\"],null],\"docs-mt-8 docs--mb-4 docs-text-xs docs-uppercase\"],\"\\n  \",[52,[28,[37,1],[[30,0,[\"style\"]],\"subsection\"],null],\"docs-mt-2 docs-text-sm\"]]]],[17,1],[12],[1,\"\\n\"],[41,[48,[30,3]],[[[1,\"    \"],[18,3,null],[1,\"\\n\"]],[]],[[[1,\"    \"],[1,[30,2]],[1,\"\\n\"]],[]]],[13],[1,\"\\n\"]],[\"&attrs\",\"@label\",\"&default\"],false,[\"if\",\"eq\",\"has-block\",\"yield\"]]",
    "moduleName": "ember-cli-addon-docs/components/docs-viewer/x-section/index.hbs",
    "isStrictMode": false
  });
  let XSection = _exports.default = (_dec = (0, _trackedToolbox.localCopy)('args.style', 'regular'), (_class = class XSection extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "style", _descriptor, this);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "style", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, XSection);
});
;define("ember-cli-addon-docs/components/modal-dialog", ["exports", "ember-modal-dialog/components/modal-dialog", "@ember/application"], function (_exports, _modalDialog, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-modal-dialog/components/modal-dialog",0,"@ember/application"eaimeta@70e063a35619d71f
  /* eslint-disable ember/classic-decorator-hooks */
  class DocsModalDialog extends _modalDialog.default {
    init() {
      super.init(...arguments);
      const config = (0, _application.getOwner)(this).resolveRegistration('config:environment');
      this.set('renderInPlace', config.environment === 'test');
    }
  }
  _exports.default = DocsModalDialog;
});
;define("ember-cli-addon-docs/helpers/break-on", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.breakOn = breakOn;
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember/component/helper"eaimeta@70e063a35619d71f
  /**
    Helper function that inserts zero-width spaces after the break character, so
    that the string will break when wrapping only after that character.
  
    @function
    @hide
  */
  function breakOn([string, breakChar]) {
    return string.replace(new RegExp(breakChar, 'g'), `${breakChar}\u200B`);
  }
  var _default = _exports.default = (0, _helper.helper)(breakOn);
});
;define("ember-cli-addon-docs/helpers/type-signature", ["exports", "@ember/debug", "@ember/component/helper", "@ember/template"], function (_exports, _debug, _helper, _template) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.typeSignature = typeSignature;
  0; //eaimeta@70e063a35619d71f0,"@ember/debug",0,"@ember/component/helper",0,"@ember/template"eaimeta@70e063a35619d71f
  function escape(text) {
    return text.replace(/</g, '&lt;').replace(/>/g, '&gt;');
  }
  function functionSignature(fn) {
    // Functions may have { params, typeParams, returns } directly on them, or they
    // may have a `signatures` array of hashes each with those properties.
    let signatures = (fn.signatures || [fn]).map(({
      params,
      typeParams,
      returns
    }) => {
      let paramSignature = params.filter(p => !p.name.includes('.')).map(({
        name,
        type,
        isRest,
        isOptional
      }) => {
        let prefix = isRest ? '...' : '';
        let suffix = isOptional ? '?' : '';
        return `${prefix}<strong>${name}</strong>${suffix}: <em>${type}</em>`;
      }).join(', ');
      let typeParamSignature = '';
      if (typeParams && typeParams.length) {
        typeParamSignature = `&lt;${typeParams.map(p => `<em>${p}</em>`).join(', ')}&gt;`;
      }
      let returnType = returns ? returns.type : 'any';
      return `<strong>${fn.name}</strong>${typeParamSignature}(${paramSignature}): <em>${returnType}</em>`;
    });
    return signatures.join('<br>');
  }
  function accessorSignature({
    name,
    type,
    hasGetter,
    hasSetter
  }) {
    let accessorPrefixes = [hasGetter && 'get', hasSetter && 'set'].filter(a => a).join('/');
    (true && !(accessorPrefixes) && (0, _debug.assert)(`accessors must have either a getter or setter, but '${name}' had neither`, accessorPrefixes));
    return `${accessorPrefixes} ${variableSignature({
      name,
      type
    })}`;
  }
  function variableSignature({
    name,
    type
  }) {
    return `<strong>${name}:</strong> <em>${escape(type)}</em>`;
  }

  /**
    @function typeSignature
    @hide
  */
  function typeSignature([typed]) {
    let signature;
    if ('hasGetter' in typed || 'hasSetter' in typed) {
      signature = accessorSignature(typed);
    } else if ('type' in typed) {
      signature = variableSignature(typed);
    } else {
      signature = functionSignature(typed);
    }
    if (typed.isStatic) {
      signature = `static ${signature}`;
    }
    if (typed.access === 'private' || typed.access === 'protected') {
      signature = `${typed.access} ${signature}`;
    }
    return (0, _template.htmlSafe)(signature);
  }
  var _default = _exports.default = (0, _helper.helper)(typeSignature);
});
;define("ember-cli-addon-docs/initializers/route-anchor-jump", ["exports", "@ember/routing/route", "@ember/runloop"], function (_exports, _route, _runloop) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.initialize = initialize;
  0; //eaimeta@70e063a35619d71f0,"@ember/routing/route",0,"@ember/runloop"eaimeta@70e063a35619d71f
  _route.default.reopen({
    afterModel() {
      if (typeof location !== 'undefined') {
        const {
          hash
        } = location;
        if (hash && hash.length) {
          (0, _runloop.schedule)('afterRender', null, () => {
            const anchor = document.querySelector(`a[href="${hash}"`);
            if (anchor) {
              anchor.scrollIntoView();
            }
          });
        }
      }
      return this._super(...arguments);
    }
  });

  /**
    @function initialize
    @hide
  */
  function initialize() {}
  var _default = _exports.default = {
    initialize
  };
});
;define("ember-cli-addon-docs/keyboard-config", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.formElementHasFocus = formElementHasFocus;
  0; //eaimeta@70e063a35619d71feaimeta@70e063a35619d71f
  const TAGNAMES_THAT_WHEN_FOCUSED_PREVENT_KEYBOARD_SHORTCUTS = ['INPUT', 'SELECT', 'TEXTAREA'];

  /**
    @function formElementHasFocus
    @hide
  */
  function formElementHasFocus() {
    return TAGNAMES_THAT_WHEN_FOCUSED_PREVENT_KEYBOARD_SHORTCUTS.includes(document.activeElement.tagName);
  }
});
;define("ember-cli-addon-docs/models/class", ["exports", "@ember-data/model", "@ember/object/computed", "ember-cli-addon-docs/utils/computed"], function (_exports, _model, _computed, _computed2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, _descriptor34, _descriptor35, _descriptor36;
  0; //eaimeta@70e063a35619d71f0,"@ember-data/model",0,"@ember/object/computed",0,"ember-cli-addon-docs/utils/computed"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let Class = _exports.default = (_dec = (0, _model.belongsTo)('class', {
    async: false,
    inverse: null
  }), _dec2 = (0, _computed.filterBy)('accessors', 'access', 'public'), _dec3 = (0, _computed.filterBy)('methods', 'access', 'public'), _dec4 = (0, _computed.filterBy)('fields', 'access', 'public'), _dec5 = (0, _computed.filterBy)('accessors', 'access', 'private'), _dec6 = (0, _computed.filterBy)('methods', 'access', 'private'), _dec7 = (0, _computed.filterBy)('fields', 'access', 'private'), _dec8 = (0, _computed.filterBy)('accessors', 'access', 'protected'), _dec9 = (0, _computed.filterBy)('methods', 'access', 'protected'), _dec10 = (0, _computed.filterBy)('fields', 'access', 'protected'), _dec11 = (0, _computed2.memberUnion)('parentClass.allPublicAccessors', 'publicAccessors'), _dec12 = (0, _computed2.memberUnion)('parentClass.allPublicMethods', 'publicMethods'), _dec13 = (0, _computed2.memberUnion)('parentClass.allPublicFields', 'publicFields'), _dec14 = (0, _computed2.memberUnion)('parentClass.allPrivateAccessors', 'privateAccessors'), _dec15 = (0, _computed2.memberUnion)('parentClass.allPrivateMethods', 'privateMethods'), _dec16 = (0, _computed2.memberUnion)('parentClass.allPrivateFields', 'privateFields'), _dec17 = (0, _computed2.memberUnion)('parentClass.allProtectedAccessors', 'protectedAccessors'), _dec18 = (0, _computed2.memberUnion)('parentClass.allProtectedMethods', 'protectedMethods'), _dec19 = (0, _computed2.memberUnion)('parentClass.allProtectedFields', 'protectedFields'), _dec20 = (0, _computed.union)('allPublicAccessors', 'allPrivateAccessors', 'allProtectedAccessors'), _dec21 = (0, _computed.union)('allPublicMethods', 'allPrivateMethods', 'allProtectedMethods'), _dec22 = (0, _computed.union)('allPublicFields', 'allPrivateFields', 'allProtectedFields'), _dec23 = (0, _computed.or)('parentClass.allAccessors.length', 'parentClass.allMethods.length', 'parentClass.allFields.length'), _dec24 = (0, _computed.or)('allPrivateAccessors.length', 'allPrivateMethods.length', 'allPrivateFields.length'), _dec25 = (0, _computed.or)('allProtectedAccessors.length', 'allProtectedMethods.length', 'allProtectedFields.length'), _dec26 = (0, _computed2.hasMemberType)('allFields', 'allAccessors', 'allMethods', function (member) {
    return member.tags && member.tags.find(t => t.name === 'deprecated');
  }), (_class = class Class extends _model.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "parentClass", _descriptor, this);
      _defineProperty(this, "isClass", true);
      _initializerDefineProperty(this, "name", _descriptor2, this);
      _initializerDefineProperty(this, "file", _descriptor3, this);
      _initializerDefineProperty(this, "exportType", _descriptor4, this);
      _initializerDefineProperty(this, "description", _descriptor5, this);
      _initializerDefineProperty(this, "lineNumber", _descriptor6, this);
      _initializerDefineProperty(this, "access", _descriptor7, this);
      _initializerDefineProperty(this, "accessors", _descriptor8, this);
      _initializerDefineProperty(this, "methods", _descriptor9, this);
      _initializerDefineProperty(this, "fields", _descriptor10, this);
      _initializerDefineProperty(this, "tags", _descriptor11, this);
      _initializerDefineProperty(this, "publicAccessors", _descriptor12, this);
      _initializerDefineProperty(this, "publicMethods", _descriptor13, this);
      _initializerDefineProperty(this, "publicFields", _descriptor14, this);
      _initializerDefineProperty(this, "privateAccessors", _descriptor15, this);
      _initializerDefineProperty(this, "privateMethods", _descriptor16, this);
      _initializerDefineProperty(this, "privateFields", _descriptor17, this);
      _initializerDefineProperty(this, "protectedAccessors", _descriptor18, this);
      _initializerDefineProperty(this, "protectedMethods", _descriptor19, this);
      _initializerDefineProperty(this, "protectedFields", _descriptor20, this);
      _initializerDefineProperty(this, "allPublicAccessors", _descriptor21, this);
      _initializerDefineProperty(this, "allPublicMethods", _descriptor22, this);
      _initializerDefineProperty(this, "allPublicFields", _descriptor23, this);
      _initializerDefineProperty(this, "allPrivateAccessors", _descriptor24, this);
      _initializerDefineProperty(this, "allPrivateMethods", _descriptor25, this);
      _initializerDefineProperty(this, "allPrivateFields", _descriptor26, this);
      _initializerDefineProperty(this, "allProtectedAccessors", _descriptor27, this);
      _initializerDefineProperty(this, "allProtectedMethods", _descriptor28, this);
      _initializerDefineProperty(this, "allProtectedFields", _descriptor29, this);
      _initializerDefineProperty(this, "allAccessors", _descriptor30, this);
      _initializerDefineProperty(this, "allMethods", _descriptor31, this);
      _initializerDefineProperty(this, "allFields", _descriptor32, this);
      _initializerDefineProperty(this, "hasInherited", _descriptor33, this);
      _initializerDefineProperty(this, "hasPrivate", _descriptor34, this);
      _initializerDefineProperty(this, "hasProtected", _descriptor35, this);
      _initializerDefineProperty(this, "hasDeprecated", _descriptor36, this);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "parentClass", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "name", [_model.attr], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "file", [_model.attr], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "exportType", [_model.attr], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "description", [_model.attr], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "lineNumber", [_model.attr], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "access", [_model.attr], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "accessors", [_model.attr], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "methods", [_model.attr], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "fields", [_model.attr], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "tags", [_model.attr], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, "publicAccessors", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, "publicMethods", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, "publicFields", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, "privateAccessors", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, "privateMethods", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, "privateFields", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor18 = _applyDecoratedDescriptor(_class.prototype, "protectedAccessors", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor19 = _applyDecoratedDescriptor(_class.prototype, "protectedMethods", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor20 = _applyDecoratedDescriptor(_class.prototype, "protectedFields", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor21 = _applyDecoratedDescriptor(_class.prototype, "allPublicAccessors", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor22 = _applyDecoratedDescriptor(_class.prototype, "allPublicMethods", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor23 = _applyDecoratedDescriptor(_class.prototype, "allPublicFields", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor24 = _applyDecoratedDescriptor(_class.prototype, "allPrivateAccessors", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor25 = _applyDecoratedDescriptor(_class.prototype, "allPrivateMethods", [_dec15], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor26 = _applyDecoratedDescriptor(_class.prototype, "allPrivateFields", [_dec16], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor27 = _applyDecoratedDescriptor(_class.prototype, "allProtectedAccessors", [_dec17], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor28 = _applyDecoratedDescriptor(_class.prototype, "allProtectedMethods", [_dec18], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor29 = _applyDecoratedDescriptor(_class.prototype, "allProtectedFields", [_dec19], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor30 = _applyDecoratedDescriptor(_class.prototype, "allAccessors", [_dec20], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor31 = _applyDecoratedDescriptor(_class.prototype, "allMethods", [_dec21], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor32 = _applyDecoratedDescriptor(_class.prototype, "allFields", [_dec22], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor33 = _applyDecoratedDescriptor(_class.prototype, "hasInherited", [_dec23], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor34 = _applyDecoratedDescriptor(_class.prototype, "hasPrivate", [_dec24], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor35 = _applyDecoratedDescriptor(_class.prototype, "hasProtected", [_dec25], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor36 = _applyDecoratedDescriptor(_class.prototype, "hasDeprecated", [_dec26], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
});
;define("ember-cli-addon-docs/models/component", ["exports", "@ember-data/model", "@ember/object/computed", "@ember/string", "ember-cli-addon-docs/models/class", "ember-cli-addon-docs/utils/computed"], function (_exports, _model, _computed, _string, _class3, _computed2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15;
  0; //eaimeta@70e063a35619d71f0,"@ember-data/model",0,"@ember/object/computed",0,"@ember/string",0,"ember-cli-addon-docs/models/class",0,"ember-cli-addon-docs/utils/computed"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let Component = _exports.default = (_dec = (0, _computed.or)('yields', 'inheritedYields'), _dec2 = (0, _computed.filterBy)('arguments', 'access', 'public'), _dec3 = (0, _computed.filterBy)('arguments', 'access', 'private'), _dec4 = (0, _computed.filterBy)('arguments', 'access', 'protected'), _dec5 = (0, _computed2.memberUnion)('parentClass.allPublicArguments', 'publicArguments'), _dec6 = (0, _computed2.memberUnion)('parentClass.allPrivateArguments', 'privateArguments'), _dec7 = (0, _computed2.memberUnion)('parentClass.allProtectedArguments', 'protectedArguments'), _dec8 = (0, _computed2.memberUnion)('parentClass.allArguments', 'arguments'), _dec9 = (0, _computed.or)('parentClass.overloadedYields.length', 'parentClass.allArguments.length', 'parentClass.allAccessors.length', 'parentClass.allMethods.length', 'parentClass.allFields.length'), _dec10 = (0, _computed.or)('allAccessors.length', 'allMethods.length', 'allFields.length'), _dec11 = (0, _computed.or)('allPrivateAccessors.length', 'allPrivateArguments.length', 'allPrivateMethods.length', 'allPrivateFields.length'), _dec12 = (0, _computed.or)('allProtectedAccessors.length', 'allProtectedArguments.length', 'allProtectedMethods.length', 'allProtectedFields.length'), _dec13 = (0, _computed2.hasMemberType)('allAccessors', 'allArguments', 'allMethods', 'allFields', function (member) {
    return member.tags && member.tags.find(t => t.name === 'deprecated');
  }), (_class = class Component extends _class3.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "isComponent", true);
      _initializerDefineProperty(this, "yields", _descriptor, this);
      _initializerDefineProperty(this, "arguments", _descriptor2, this);
      _initializerDefineProperty(this, "overloadedYields", _descriptor3, this);
      _initializerDefineProperty(this, "publicArguments", _descriptor4, this);
      _initializerDefineProperty(this, "privateArguments", _descriptor5, this);
      _initializerDefineProperty(this, "protectedArguments", _descriptor6, this);
      _initializerDefineProperty(this, "allPublicArguments", _descriptor7, this);
      _initializerDefineProperty(this, "allPrivateArguments", _descriptor8, this);
      _initializerDefineProperty(this, "allProtectedArguments", _descriptor9, this);
      _initializerDefineProperty(this, "allArguments", _descriptor10, this);
      _initializerDefineProperty(this, "hasInherited", _descriptor11, this);
      _initializerDefineProperty(this, "hasInternal", _descriptor12, this);
      _initializerDefineProperty(this, "hasPrivate", _descriptor13, this);
      _initializerDefineProperty(this, "hasProtected", _descriptor14, this);
      _initializerDefineProperty(this, "hasDeprecated", _descriptor15, this);
    }
    /*
      This gives us a way to link to a model, since we don't always link by the actual ID:
         <LinkTo @route="item" @model={{model.routingId}}>
          Go to item
        </LinkTo>
       Possible refactoring is to always link by actual ID, and implement redirects.
    */
    get routingId() {
      return `components/${(0, _string.dasherize)(this.name)}`;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "yields", [_model.attr], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "arguments", [_model.attr], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "overloadedYields", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "publicArguments", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "privateArguments", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "protectedArguments", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "allPublicArguments", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "allPrivateArguments", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "allProtectedArguments", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "allArguments", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "hasInherited", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, "hasInternal", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, "hasPrivate", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, "hasProtected", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, "hasDeprecated", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
});
;define("ember-cli-addon-docs/models/module", ["exports", "@ember-data/model"], function (_exports, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
  0; //eaimeta@70e063a35619d71f0,"@ember-data/model"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let Module = _exports.default = (_dec = (0, _model.hasMany)('class', {
    async: false
  }), _dec2 = (0, _model.hasMany)('class', {
    async: false
  }), (_class = class Module extends _model.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "file", _descriptor, this);
      _initializerDefineProperty(this, "variables", _descriptor2, this);
      _initializerDefineProperty(this, "functions", _descriptor3, this);
      _initializerDefineProperty(this, "classes", _descriptor4, this);
      _initializerDefineProperty(this, "components", _descriptor5, this);
    }
    /*
      This gives us a way to link to a model, since we don't always link by the actual ID:
         <LinkTo @route="item" @model={{model.routingId}}>
          Go to item
        </LinkTo>
       Possible refactoring is to always link by actual ID, and implement redirects.
    */
    get routingId() {
      return `modules/${this.id}`;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "file", [_model.attr], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "variables", [_model.attr], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "functions", [_model.attr], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "classes", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "components", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
});
;define("ember-cli-addon-docs/models/project", ["exports", "@ember-data/model"], function (_exports, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
  0; //eaimeta@70e063a35619d71f0,"@ember-data/model"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let Project = _exports.default = (_dec = (0, _model.hasMany)('module', {
    async: false
  }), (_class = class Project extends _model.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "name", _descriptor, this);
      _initializerDefineProperty(this, "githubUrl", _descriptor2, this);
      _initializerDefineProperty(this, "version", _descriptor3, this);
      _initializerDefineProperty(this, "navigationIndex", _descriptor4, this);
      _initializerDefineProperty(this, "modules", _descriptor5, this);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "name", [_model.attr], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "githubUrl", [_model.attr], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "version", [_model.attr], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "navigationIndex", [_model.attr], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "modules", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
});
;define("ember-cli-addon-docs/router", ["exports", "@ember/routing/router"], function (_exports, _router) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.apiRoute = apiRoute;
  _exports.default = void 0;
  _exports.docsRoute = docsRoute;
  0; //eaimeta@70e063a35619d71f0,"@ember/routing/router"eaimeta@70e063a35619d71f
  /** @documenter yuidoc */
  /**
    The AddonDocsRouter, which adds some extra functionality. This should be used
    instead of the standard EmberRouter class in your docs app.
  
    ```js
    import AddonDocsRouter, { docsRoute } from 'ember-cli-addon-docs/router';
    import config from './config/environment';
  
    class Router extends AddonDocsRouter {
      location = config.locationType;
      rootURL = config.rootURL;
    }
    ```
  
    @class AddonDocsRouter
    @extends EmberRouter
  */
  class AddonDocsRouter extends _router.default {}

  /**
    Creates the docs route and api docs routes. Can receive a callback with the
    routes you want to add to your docs.
  
    ```js
    import AddonDocsRouter, { docsRoute } from 'ember-cli-addon-docs/router';
  
    Router.map(function() {
      docsRoute(this, function() {
        this.route('usage');
      });
    });
    ```
  
    @function docsRoute
  */
  _exports.default = AddonDocsRouter;
  function docsRoute(router, callback) {
    router.route('docs', function () {
      callback.apply(this);
      apiRoute(this);
    });
  }
  function apiRoute(router) {
    router.route('api', function () {
      this.route('item', {
        path: '/*path'
      });
    });
  }
});
;define("ember-cli-addon-docs/routes/docs", ["exports", "@ember/routing/route", "@ember/service", "ember-cli-addon-docs/-private/config"], function (_exports, _route, _service, _config) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  0; //eaimeta@70e063a35619d71f0,"@ember/routing/route",0,"@ember/service",0,"ember-cli-addon-docs/-private/config"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let DocsRoute = _exports.default = (_class = class DocsRoute extends _route.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "store", _descriptor, this);
    }
    model() {
      return this.store.findRecord('project', (0, _config.getAddonDocsConfig)(this).projectName);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "store", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
;define("ember-cli-addon-docs/routes/docs/api/item", ["exports", "@ember/routing/route", "@ember/service", "@ember/debug"], function (_exports, _route, _service, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  0; //eaimeta@70e063a35619d71f0,"@ember/routing/route",0,"@ember/service",0,"@ember/debug"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let DocsApiRoute = _exports.default = (_class = class DocsApiRoute extends _route.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "store", _descriptor, this);
    }
    model({
      path
    }) {
      let item;
      if (path.match(/^modules\//)) {
        // Find by fully qualified id
        let itemId = path.replace(/^modules\//, '');
        let [moduleId] = itemId.split(/~|#/);
        let module = this.store.peekRecord('module', moduleId);
        item = module.get('components').findBy('id', itemId) || module.get('classes').findBy('id', itemId) || module;
      } else {
        // Create a regex that will match modules by either the path, or the
        // pod-path (/component, /route, etc)
        let type = path.match(/^([\w-]*)s\//)[1];
        let pathRegex = new RegExp(`${path}(/${type})?$`);
        let modules = this.store.peekAll('module');
        let matches = modules.filter(m => m.id.match(pathRegex));
        let module = matches[0];
        (true && !(matches.length > 0) && (0, _debug.assert)(`no modules match the path '${path}'`, matches.length > 0));
        (true && !(matches.length <= 1) && (0, _debug.assert)(`multiple modules match the path '${path}', ids: ${matches.mapBy('id').join(', ')}`, matches.length <= 1));
        item = module.get('components').findBy('exportType', 'default') || module.get('classes').findBy('exportType', 'default') || module;
      }
      (true && !(item) && (0, _debug.assert)(`item not found for path '${path}'`, item));
      return item;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "store", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
;define("ember-cli-addon-docs/serializers/-addon-docs", ["exports", "@ember-data/serializer"], function (_exports, _serializer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember-data/serializer"eaimeta@70e063a35619d71f
  class AddonDocsSerializer extends _serializer.default {
    normalizeResponse(store, primaryModelClass, payload) {
      return payload;
    }
  }
  _exports.default = AddonDocsSerializer;
});
;define("ember-cli-addon-docs/serializers/class", ["exports", "ember-cli-addon-docs/serializers/-addon-docs"], function (_exports, _addonDocs) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _addonDocs.default;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"ember-cli-addon-docs/serializers/-addon-docs"eaimeta@70e063a35619d71f
});
;define("ember-cli-addon-docs/serializers/component", ["exports", "ember-cli-addon-docs/serializers/-addon-docs"], function (_exports, _addonDocs) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _addonDocs.default;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"ember-cli-addon-docs/serializers/-addon-docs"eaimeta@70e063a35619d71f
});
;define("ember-cli-addon-docs/serializers/module", ["exports", "ember-cli-addon-docs/serializers/-addon-docs"], function (_exports, _addonDocs) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _addonDocs.default;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"ember-cli-addon-docs/serializers/-addon-docs"eaimeta@70e063a35619d71f
});
;define("ember-cli-addon-docs/serializers/project", ["exports", "ember-cli-addon-docs/serializers/-addon-docs"], function (_exports, _addonDocs) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _addonDocs.default;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"ember-cli-addon-docs/serializers/-addon-docs"eaimeta@70e063a35619d71f
});
;define("ember-cli-addon-docs/services/docs-routes", ["exports", "@ember/array", "@ember/service", "@ember/debug", "@glimmer/tracking", "tracked-toolbox"], function (_exports, _array, _service, _debug, _tracking, _trackedToolbox) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class, _descriptor, _descriptor2;
  0; //eaimeta@70e063a35619d71f0,"@ember/array",0,"@ember/service",0,"@ember/debug",0,"@glimmer/tracking",0,"tracked-toolbox"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let DocsRoutesService = _exports.default = (_dec = (0, _service.inject)('-routing'), (_class = class DocsRoutesService extends _service.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "router", _descriptor, this);
      _initializerDefineProperty(this, "items", _descriptor2, this);
    }
    resetState() {
      this.items = (0, _array.A)();
    }

    // Each routeParam is [ routeName, model ] where model is optional
    get routes() {
      return this.items.map(item => {
        let routeParams = [item.args.route];
        if (item.args.model) {
          routeParams.push(item.args.model);
        }
        return routeParams;
      });
    }
    get routeUrls() {
      return this.routes.map(([routeName, model]) => {
        return this.router.generateURL(routeName, model ? [model] : []);
      });
    }
    get currentRouteIndex() {
      if (this.routeUrls.length) {
        let router = this.router.router;
        let currentURL = router.rootURL + router.url;
        currentURL = currentURL.replace('//', '/'); // dedup slashes
        let longestIndex, longestPrefix;
        this.routeUrls.forEach((url, index) => {
          if (currentURL.indexOf(url) === 0 && (!longestPrefix || url.length > longestPrefix.length)) {
            longestIndex = index;
            longestPrefix = url;
          }
        });
        (true && !(longestIndex != null) && (0, _debug.assert)(`DocsRoutes wasn't able to correctly detect the current route. The current url is ${currentURL}`, longestIndex != null));
        return longestIndex;
      }
      return null;
    }
    get next() {
      let currentIndex = this.currentRouteIndex;
      if (currentIndex < this.routes.length - 1) {
        let nextRouteIndex = currentIndex + 1;
        let route = this.items.objectAt(nextRouteIndex);
        return {
          route: route.args.route,
          models: route.args.model ? [route.args.model] : [],
          label: route.args.label
        };
      }
      return null;
    }
    get previous() {
      let currentIndex = this.currentRouteIndex;
      if (currentIndex > 0) {
        let previousRouteIndex = currentIndex - 1;
        let route = this.items.objectAt(previousRouteIndex);
        return {
          route: route.args.route,
          models: route.args.model ? [route.args.model] : [],
          label: route.args.label
        };
      }
      return null;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "items", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return (0, _array.A)();
    }
  }), _applyDecoratedDescriptor(_class.prototype, "routes", [_trackedToolbox.cached], Object.getOwnPropertyDescriptor(_class.prototype, "routes"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "routeUrls", [_trackedToolbox.cached], Object.getOwnPropertyDescriptor(_class.prototype, "routeUrls"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "currentRouteIndex", [_trackedToolbox.cached], Object.getOwnPropertyDescriptor(_class.prototype, "currentRouteIndex"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "next", [_trackedToolbox.cached], Object.getOwnPropertyDescriptor(_class.prototype, "next"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "previous", [_trackedToolbox.cached], Object.getOwnPropertyDescriptor(_class.prototype, "previous"), _class.prototype)), _class));
});
;define("ember-cli-addon-docs/services/docs-search", ["exports", "@ember/service", "lunr", "fetch", "ember-concurrency", "ember-cli-addon-docs/-private/config"], function (_exports, _service, _lunr, _fetch, _emberConcurrency, _config) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  0; //eaimeta@70e063a35619d71f0,"@ember/service",0,"lunr",0,"fetch",0,"ember-concurrency",0,"ember-cli-addon-docs/-private/config"eaimeta@70e063a35619d71f
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  const {
    Index,
    Query
  } = _lunr.default;
  let DocsSearch = _exports.default = (_class = class DocsSearch extends _service.default {
    async search(phrase) {
      const {
        searchTokenSeparator
      } = (0, _config.getAddonDocsConfig)(this);
      let {
        index,
        documents
      } = await this.loadSearchIndex();
      let words = phrase.toLowerCase().split(new RegExp(searchTokenSeparator));
      let results = index.query(query => {
        // In the future we could boost results based on the field they come from
        for (let word of words) {
          query.term(index.pipeline.runString(word)[0], {
            wildcard: Query.wildcard.LEADING | Query.wildcard.TRAILING
          });
        }
      });
      return results.map(resultInfo => {
        let document = documents[resultInfo.ref];
        return {
          resultInfo,
          document
        };
      });
    }

    // temporary; just useful for tuning search config for now
    searchAndLog(phrase) {
      /* eslint-disable no-console */
      this.search(phrase).then(results => {
        console.group(`Search For '${phrase}'`);
        for (let result of results) {
          let doc = result.document;
          if (doc.type === 'class') {
            console.groupCollapsed(`Class: %c${doc.title}`, 'font-family: monospace');
            for (let [term, match] of Object.entries(result.resultInfo.matchData.metadata)) {
              for (let [key, data] of Object.entries(match)) {
                if (key === 'keywords') {
                  let test = term.toLowerCase();
                  for (let keyword of doc.keywords) {
                    if (keyword.toLowerCase().indexOf(test) !== -1) {
                      console.log(`%c${keyword} %c(field)`, 'font-family: monospace; font-weight: bold', 'font-family: inherit; font-weight: normal');
                    }
                  }
                } else {
                  for (let position of data.position) {
                    logSnippet(doc, key, position);
                  }
                }
              }
            }
            console.groupEnd();
          } else if (doc.type === 'template') {
            console.groupCollapsed(`Route: %c${doc.route}`, 'font-family: monospace');
            for (let match of Object.values(result.resultInfo.matchData.metadata)) {
              for (let [key, data] of Object.entries(match)) {
                for (let position of data.position) {
                  logSnippet(doc, key, position);
                }
              }
            }
            console.groupEnd();
          }
        }
        console.groupEnd();
      });
      /* eslint-enable no-console */
    }
    loadSearchIndex() {
      return this._loadSearchIndex.perform();
    }
    *_loadSearchIndex() {
      if (!this._searchIndex) {
        let response = yield (0, _fetch.default)(this._indexURL);
        let json = yield response.json();
        this._searchIndex = {
          index: Index.load(json.index),
          documents: json.documents
        };
      }
      return this._searchIndex;
    }
    get _indexURL() {
      return `${(0, _config.getRootURL)(this)}ember-cli-addon-docs/search-index.json`;
    }
  }, (_applyDecoratedDescriptor(_class.prototype, "_loadSearchIndex", [_emberConcurrency.enqueueTask], Object.getOwnPropertyDescriptor(_class.prototype, "_loadSearchIndex"), _class.prototype)), _class);
  function logSnippet(doc, key, position) {
    let field = doc[key];
    if (!field) {
      return;
    }
    let start = Math.max(position[0] - 15, 0);
    let end = Math.min(position[0] + position[1] + 15, field.length);
    let pre = `${start === 0 ? '' : '...'}${field.slice(start, position[0])}`;
    let snippet = field.slice(position[0], position[0] + position[1]);
    let post = `${field.slice(position[0] + position[1], end)}${end === field.length ? '' : '...'}`;
    /* eslint-disable no-console */
    console.log(`${pre}%c${snippet}%c${post} (${key})`, 'font-weight: bold', 'font-weight: regular');
    /* eslint-enable no-console */
  }
});
;define("ember-cli-addon-docs/services/project-version", ["exports", "@ember/service", "ember-concurrency", "fetch", "@glimmer/tracking", "ember-cli-addon-docs/-private/config"], function (_exports, _service, _emberConcurrency, _fetch, _tracking, _config) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2;
  0; //eaimeta@70e063a35619d71f0,"@ember/service",0,"ember-concurrency",0,"fetch",0,"@glimmer/tracking",0,"ember-cli-addon-docs/-private/config"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ProjectVersionService = _exports.default = (_class = class ProjectVersionService extends _service.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "versions", _descriptor, this);
      _initializerDefineProperty(this, "config", _descriptor2, this);
    }
    *_loadAvailableVersions() {
      let response = yield (0, _fetch.default)(`${this.root}versions.json`);
      let json;
      if (response.ok) {
        json = yield response.json();
      } else {
        json = {
          [this.config.latestVersionName]: Object.assign({}, this.currentVersion)
        };
      }
      this.versions = Object.keys(json).map(key => {
        let version = json[key];
        version.truncatedSha = version.sha.substr(0, 5);
        version.key = key;
        return version;
      });
    }
    redirectTo(version) {
      window.location.href = `${this.root}${version.path}`;
    }
    loadAvailableVersions() {
      return this._loadAvailableVersions.perform();
    }
    get root() {
      return (0, _config.getRootURL)(this).replace(`/${this.currentVersion.path}/`, '/');
    }
    get currentVersion() {
      if (this._currentVersion) {
        return this._currentVersion;
      }
      let currentVersion = this.config.deployVersion;

      // In development, this token won't have been replaced replaced
      if (currentVersion === 'ADDON_DOCS_DEPLOY_VERSION') {
        currentVersion = {
          key: this.config.latestVersionName,
          name: this.config.latestVersionName,
          tag: this.config.projectTag,
          path: '',
          sha: 'abcde'
        };
      }
      return currentVersion;
    }

    // only used for tests
    set currentVersion(val) {
      this._currentVersion = val;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "versions", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "config", [_config.addonDocsConfig], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "_loadAvailableVersions", [_emberConcurrency.task], Object.getOwnPropertyDescriptor(_class.prototype, "_loadAvailableVersions"), _class.prototype)), _class);
});
;define("ember-cli-addon-docs/styles/tailwind.config", [], function () {
  "use strict";

  0; //eaimeta@70e063a35619d71feaimeta@70e063a35619d71f
  /* eslint-disable */
  /*
  
  Tailwind - The Utility-First CSS Framework
  
  A project by Adam Wathan (@adamwathan), Jonathan Reinink (@reinink),
  David Hemphill (@davidhemphill) and Steve Schoger (@steveschoger).
  
  Welcome to the Tailwind config file. This is where you can customize
  Tailwind specifically for your project. Don't be intimidated by the
  length of this file. It's really just a big JavaScript object and
  we've done our very best to explain each section.
  
  View the full documentation at https://tailwindcss.com.
  
  
  |-------------------------------------------------------------------------------
  | The default config
  |-------------------------------------------------------------------------------
  |
  | This variable contains the default Tailwind config. You don't have
  | to use it, but it can sometimes be helpful to have available. For
  | example, you may choose to merge your custom configuration
  | values with some of the Tailwind defaults.
  |
  */

  let textSizesMap = {
    xxs: '12px',
    xs: '14px',
    sm: '15px',
    base: '16px',
    'large-1': '18px',
    'large-2': '20px',
    'large-3': '22px',
    'large-4': '24px',
    'large-5': '30px',
    'large-6': '36px',
    'large-7': '42px',
    'jumbo-1': '60px',
    'jumbo-2': '74px',
    'jumbo-3': '86px'
  };

  // Convert pixel sizes to REMs
  let fontSize = Object.keys(textSizesMap).reduce((memo, textSize) => {
    let pixelValue = textSizesMap[textSize];
    let remValue = `${+pixelValue.replace('px', '') / 16}rem`;
    memo[textSize] = remValue;
    return memo;
  }, {});
  module.exports = {
    prefix: 'docs-',
    theme: {
      /*
      |-----------------------------------------------------------------------------
      | Colors                                  https://tailwindcss.com/docs/colors
      |-----------------------------------------------------------------------------
      |
      | The color palette defined above is also assigned to the "colors" key of
      | your Tailwind config. This makes it easy to access them in your CSS
      | using Tailwind's config helper. For example:
      |
      | .error { color: config('colors.red') }
      |
      */

      colors: {
        transparent: 'transparent',
        inherit: 'inherit',
        black: '#22292f',
        'grey-darkest': '#3d4852',
        'grey-darker': '#606f7b',
        'grey-dark': '#8795a1',
        grey: '#b8c2cc',
        'grey-light': '#dae1e7',
        'grey-lighter': '#f1f5f8',
        'grey-lightest': '#f8fafc',
        white: 'white',
        yellow: '#ffed4a',
        'code-base': '#282c34',
        // See the note in tailwind/compnents/docs-brand-colors.css
        'brand-var': 'var(--brand-primary, #E04E39)'
      },
      /*
      |-----------------------------------------------------------------------------
      | Screens                      https://tailwindcss.com/docs/responsive-design
      |-----------------------------------------------------------------------------
      |
      | Screens in Tailwind are translated to CSS media queries. They define the
      | responsive breakpoints for your project. By default Tailwind takes a
      | "mobile first" approach, where each screen size represents a minimum
      | viewport width. Feel free to have as few or as many screens as you
      | want, naming them in whatever way you'd prefer for your project.
      |
      | Tailwind also allows for more complex screen definitions, which can be
      | useful in certain situations. Be sure to see the full responsive
      | documentation for a complete list of options.
      |
      | Class name: .{screen}:{utility}
      |
      */

      screens: {
        sm: '576px',
        md: '768px',
        lg: '992px',
        xl: '1200px'
      },
      /*
      |-----------------------------------------------------------------------------
      | Fonts                                    https://tailwindcss.com/docs/fonts
      |-----------------------------------------------------------------------------
      |
      | Here is where you define your project's font stack, or font families.
      | Keep in mind that Tailwind doesn't actually load any fonts for you.
      | If you're using custom fonts you'll need to import them prior to
      | defining them here.
      |
      | By default we provide a native font stack that works remarkably well on
      | any device or OS you're using, since it just uses the default fonts
      | provided by the platform.
      |
      | Class name: .font-{name}
      | CSS property: font-family
      |
      */

      fontFamily: {
        /*
         * https://github.com/system-fonts/modern-font-stacks#old-style
         */
        title: ['"Iowan Old Style"', '"Palentino Linotype"', '"URW Palladio L"', '"P052"', 'serif'],
        sans: ['system-ui', 'BlinkMacSystemFont', '-apple-system', 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', 'sans-serif'],
        serif: ['Constantia', 'Lucida Bright', 'Lucidabright', 'Lucida Serif', 'Lucida', 'DejaVu Serif', 'Bitstream Vera Serif', 'Liberation Serif', 'Georgia', 'serif'],
        mono: ['Menlo', 'Monaco', 'Consolas', 'Liberation Mono', 'Courier New', 'monospace']
      },
      /*
      |-----------------------------------------------------------------------------
      | Text sizes                         https://tailwindcss.com/docs/text-sizing
      |-----------------------------------------------------------------------------
      |
      | Here is where you define your text sizes. Name these in whatever way
      | makes the most sense to you. We use size names by default, but
      | you're welcome to use a numeric scale or even something else
      | entirely.
      |
      | By default Tailwind uses the "rem" unit type for most measurements.
      | This allows you to set a root font size which all other sizes are
      | then based on. That said, you are free to use whatever units you
      | prefer, be it rems, ems, pixels or other.
      |
      | Class name: .text-{size}
      | CSS property: font-size
      |
      */

      fontSize,
      /*
      |-----------------------------------------------------------------------------
      | Font weights                       https://tailwindcss.com/docs/font-weight
      |-----------------------------------------------------------------------------
      |
      | Here is where you define your font weights. We've provided a list of
      | common font weight names with their respective numeric scale values
      | to get you started. It's unlikely that your project will require
      | all of these, so we recommend removing those you don't need.
      |
      | Class name: .font-{weight}
      | CSS property: font-weight
      |
      */

      fontWeight: {
        hairline: 100,
        thin: 200,
        light: 300,
        normal: 400,
        medium: 500,
        semibold: 600,
        bold: 700,
        extrabold: 800,
        black: 900
      },
      /*
      |-----------------------------------------------------------------------------
      | Leading (line height)              https://tailwindcss.com/docs/line-height
      |-----------------------------------------------------------------------------
      |
      | Here is where you define your line height values, or as we call
      | them in Tailwind, leadings.
      |
      | Class name: .leading-{size}
      | CSS property: line-height
      |
      */

      lineHeight: {
        none: 1,
        tight: 1.25,
        small: 1.45,
        normal: 1.625,
        loose: 2
      },
      /*
      |-----------------------------------------------------------------------------
      | Tracking (letter spacing)       https://tailwindcss.com/docs/letter-spacing
      |-----------------------------------------------------------------------------
      |
      | Here is where you define your letter spacing values, or as we call
      | them in Tailwind, tracking.
      |
      | Class name: .tracking-{size}
      | CSS property: letter-spacing
      |
      */

      letterSpacing: {
        tight: '-0.2px',
        normal: '0',
        wide: '0.05em'
      },
      /*
      |-----------------------------------------------------------------------------
      | Text colors                         https://tailwindcss.com/docs/text-color
      |-----------------------------------------------------------------------------
      |
      | Here is where you define your text colors. By default these use the
      | color palette we defined above, however you're welcome to set these
      | independently if that makes sense for your project.
      |
      | Class name: .text-{color}
      | CSS property: color
      |
      */

      textColor: theme => theme('colors'),
      /*
      |-----------------------------------------------------------------------------
      | Background colors             https://tailwindcss.com/docs/background-color
      |-----------------------------------------------------------------------------
      |
      | Here is where you define your background colors. By default these use
      | the color palette we defined above, however you're welcome to set
      | these independently if that makes sense for your project.
      |
      | Class name: .bg-{color}
      | CSS property: background-color
      |
      */

      backgroundColor: theme => theme('colors'),
      /*
      |-----------------------------------------------------------------------------
      | Background sizes               https://tailwindcss.com/docs/background-size
      |-----------------------------------------------------------------------------
      |
      | Here is where you define your background sizes. We provide some common
      | values that are useful in most projects, but feel free to add other sizes
      | that are specific to your project here as well.
      |
      | Class name: .bg-{size}
      | CSS property: background-size
      |
      */

      backgroundSize: {
        auto: 'auto',
        cover: 'cover',
        contain: 'contain'
      },
      /*
      |-----------------------------------------------------------------------------
      | Border widths                     https://tailwindcss.com/docs/border-width
      |-----------------------------------------------------------------------------
      |
      | Here is where you define your border widths. Take note that border
      | widths require a special "default" value set as well. This is the
      | width that will be used when you do not specify a border width.
      |
      | Class name: .border{-side?}{-width?}
      | CSS property: border-width
      |
      */

      borderWidth: {
        default: '1px',
        0: '0',
        2: '2px',
        4: '4px',
        8: '8px'
      },
      /*
      |-----------------------------------------------------------------------------
      | Border colors                     https://tailwindcss.com/docs/border-color
      |-----------------------------------------------------------------------------
      |
      | Here is where you define your border colors. By default these use the
      | color palette we defined above, however you're welcome to set these
      | independently if that makes sense for your project.
      |
      | Take note that border colors require a special "default" value set
      | as well. This is the color that will be used when you do not
      | specify a border color.
      |
      | Class name: .border-{color}
      | CSS property: border-color
      |
      */

      borderColor: theme => ({
        default: theme('colors.grey-light'),
        ...theme('colors')
      }),
      /*
      |-----------------------------------------------------------------------------
      | Border radius                    https://tailwindcss.com/docs/border-radius
      |-----------------------------------------------------------------------------
      |
      | Here is where you define your border radius values. If a `default` radius
      | is provided, it will be made available as the non-suffixed `.rounded`
      | utility.
      |
      | If your scale includes a `0` value to reset already rounded corners, it's
      | a good idea to put it first so other values are able to override it.
      |
      | Class name: .rounded{-side?}{-size?}
      | CSS property: border-radius
      |
      */

      borderRadius: {
        none: '0',
        sm: '.125rem',
        default: '.25rem',
        lg: '.5rem',
        full: '9999px'
      },
      /*
      |-----------------------------------------------------------------------------
      | Width                                    https://tailwindcss.com/docs/width
      |-----------------------------------------------------------------------------
      |
      | Here is where you define your width utility sizes. These can be
      | percentage based, pixels, rems, or any other units. By default
      | we provide a sensible rem based numeric scale, a percentage
      | based fraction scale, plus some other common use-cases. You
      | can, of course, modify these values as needed.
      |
      |
      | It's also worth mentioning that Tailwind automatically escapes
      | invalid CSS class name characters, which allows you to have
      | awesome classes like .w-2/3.
      |
      | Class name: .w-{size}
      | CSS property: width
      |
      */

      width: {
        'site-container': '1400px',
        auto: 'auto',
        px: '1px',
        1: '0.25rem',
        2: '0.5rem',
        3: '0.75rem',
        4: '1rem',
        6: '1.5rem',
        8: '2rem',
        10: '2.5rem',
        12: '3rem',
        16: '4rem',
        24: '6rem',
        32: '8rem',
        48: '12rem',
        56: '14rem',
        64: '16rem',
        72: '18rem',
        76: '19rem',
        '1/2': '50%',
        '1/3': '33.33333%',
        '2/3': '66.66667%',
        '1/4': '25%',
        '3/4': '75%',
        '1/5': '20%',
        '2/5': '40%',
        '3/5': '60%',
        '4/5': '80%',
        '1/6': '16.66667%',
        '5/6': '83.33333%',
        '90%': '90%',
        full: '100%',
        screen: '100vw'
      },
      /*
      |-----------------------------------------------------------------------------
      | Height                                  https://tailwindcss.com/docs/height
      |-----------------------------------------------------------------------------
      |
      | Here is where you define your height utility sizes. These can be
      | percentage based, pixels, rems, or any other units. By default
      | we provide a sensible rem based numeric scale plus some other
      | common use-cases. You can, of course, modify these values as
      | needed.
      |
      | Class name: .h-{size}
      | CSS property: height
      |
      */

      height: {
        auto: 'auto',
        px: '1px',
        1: '0.25rem',
        2: '0.5rem',
        3: '0.75rem',
        4: '1rem',
        6: '1.5rem',
        8: '2rem',
        10: '2.5rem',
        12: '3rem',
        16: '4rem',
        24: '6rem',
        32: '8rem',
        48: '12rem',
        64: '16rem',
        full: '100%',
        screen: '100vh'
      },
      /*
      |-----------------------------------------------------------------------------
      | Minimum width                        https://tailwindcss.com/docs/min-width
      |-----------------------------------------------------------------------------
      |
      | Here is where you define your minimum width utility sizes. These can
      | be percentage based, pixels, rems, or any other units. We provide a
      | couple common use-cases by default. You can, of course, modify
      | these values as needed.
      |
      | Class name: .min-w-{size}
      | CSS property: min-width
      |
      */

      minWidth: {
        0: '0',
        full: '100%'
      },
      /*
      |-----------------------------------------------------------------------------
      | Minimum height                      https://tailwindcss.com/docs/min-height
      |-----------------------------------------------------------------------------
      |
      | Here is where you define your minimum height utility sizes. These can
      | be percentage based, pixels, rems, or any other units. We provide a
      | few common use-cases by default. You can, of course, modify these
      | values as needed.
      |
      | Class name: .min-h-{size}
      | CSS property: min-height
      |
      */

      minHeight: {
        0: '0',
        full: '100%',
        screen: '100vh'
      },
      /*
      |-----------------------------------------------------------------------------
      | Maximum width                        https://tailwindcss.com/docs/max-width
      |-----------------------------------------------------------------------------
      |
      | Here is where you define your maximum width utility sizes. These can
      | be percentage based, pixels, rems, or any other units. By default
      | we provide a sensible rem based scale and a "full width" size,
      | which is basically a reset utility. You can, of course,
      | modify these values as needed.
      |
      | Class name: .max-w-{size}
      | CSS property: max-width
      |
      */

      maxWidth: {
        'site-container': '1400px',
        'measure-byline': '12rem',
        none: 'none',
        xxs: '17rem',
        xs: '20rem',
        sm: '30rem',
        md: '40rem',
        lg: '50rem',
        xl: '60rem',
        '2xl': '70rem',
        '3xl': '80rem',
        '4xl': '90rem',
        '5xl': '100rem',
        full: '100%',
        '2/3': '66.67%'
      },
      /*
      |-----------------------------------------------------------------------------
      | Maximum height                      https://tailwindcss.com/docs/max-height
      |-----------------------------------------------------------------------------
      |
      | Here is where you define your maximum height utility sizes. These can
      | be percentage based, pixels, rems, or any other units. We provide a
      | couple common use-cases by default. You can, of course, modify
      | these values as needed.
      |
      | Class name: .max-h-{size}
      | CSS property: max-height
      |
      */

      maxHeight: {
        full: '100%',
        screen: '100vh'
      },
      /*
      |-----------------------------------------------------------------------------
      | Padding                                https://tailwindcss.com/docs/padding
      |-----------------------------------------------------------------------------
      |
      | Here is where you define your padding utility sizes. These can be
      | percentage based, pixels, rems, or any other units. By default we
      | provide a sensible rem based numeric scale plus a couple other
      | common use-cases like "1px". You can, of course, modify these
      | values as needed.
      |
      | Class name: .p{side?}-{size}
      | CSS property: padding
      |
      */

      padding: {
        px: '1px',
        0: '0',
        1: '0.25rem',
        2: '0.5rem',
        3: '0.75rem',
        4: '1rem',
        5: '1.25rem',
        6: '1.5rem',
        8: '2rem',
        16: '4rem',
        20: '5rem'
      },
      /*
      |-----------------------------------------------------------------------------
      | Margin                                  https://tailwindcss.com/docs/margin
      |-----------------------------------------------------------------------------
      |
      | Here is where you define your margin utility sizes. These can be
      | percentage based, pixels, rems, or any other units. By default we
      | provide a sensible rem based numeric scale plus a couple other
      | common use-cases like "1px". You can, of course, modify these
      | values as needed.
      |
      | Class name: .m{side?}-{size}
      | CSS property: margin
      |
      */

      margin: {
        auto: 'auto',
        px: '1px',
        0: '0',
        1: '0.25rem',
        2: '0.5rem',
        3: '0.75rem',
        4: '1rem',
        6: '1.5rem',
        8: '2rem',
        12: '3rem',
        16: '4rem',
        20: '5rem',
        '-px': '-1px',
        '-2px': '-2px',
        '-0': '-0',
        '-1': '-0.25rem',
        '-2': '-0.5rem',
        '-3': '-0.75rem',
        '-4': '-1rem',
        '-6': '-1.5rem',
        '-8': '-2rem',
        '-16': '-4rem',
        '-20': '-5rem'
      },
      /*
      |-----------------------------------------------------------------------------
      | Shadows                                https://tailwindcss.com/docs/shadows
      |-----------------------------------------------------------------------------
      |
      | Here is where you define your shadow utilities. As you can see from
      | the defaults we provide, it's possible to apply multiple shadows
      | per utility using comma separation.
      |
      | If a `default` shadow is provided, it will be made available as the non-
      | suffixed `.shadow` utility.
      |
      | Class name: .shadow-{size?}
      | CSS property: box-shadow
      |
      */

      boxShadow: {
        sm: '0 1px 1px 0 rgba(116, 129, 141, 0.1)',
        default: '0 2px 4px 0 rgba(0,0,0,0.10)',
        md: '0 4px 8px 0 rgba(0,0,0,0.12), 0 2px 4px 0 rgba(0,0,0,0.08)',
        lg: '0 15px 30px 0 rgba(0,0,0,0.11), 0 5px 15px 0 rgba(0,0,0,0.08)',
        inner: 'inset 0 2px 4px 0 rgba(0,0,0,0.06)',
        none: 'none'
      },
      /*
      |-----------------------------------------------------------------------------
      | Z-index                                https://tailwindcss.com/docs/z-index
      |-----------------------------------------------------------------------------
      |
      | Here is where you define your z-index utility values. By default we
      | provide a sensible numeric scale. You can, of course, modify these
      | values as needed.
      |
      | Class name: .z-{index}
      | CSS property: z-index
      |
      */

      zIndex: {
        auto: 'auto',
        0: 0,
        10: 10,
        20: 20,
        30: 30,
        40: 40,
        50: 50
      },
      /*
      |-----------------------------------------------------------------------------
      | SVG fill                                   https://tailwindcss.com/docs/svg
      |-----------------------------------------------------------------------------
      |
      | Here is where you define your SVG fill colors. By default we just provide
      | `fill-current` which sets the fill to the current text color. This lets you
      | specify a fill color using existing text color utilities and helps keep the
      | generated CSS file size down.
      |
      | Class name: .fill-{name}
      | CSS property: fill
      |
      */

      fill: {
        current: 'currentColor'
      },
      /*
      |-----------------------------------------------------------------------------
      | SVG stroke                                 https://tailwindcss.com/docs/svg
      |-----------------------------------------------------------------------------
      |
      | Here is where you define your SVG stroke colors. By default we just provide
      | `stroke-current` which sets the stroke to the current text color. This lets
      | you specify a stroke color using existing text color utilities and helps
      | keep the generated CSS file size down.
      |
      | Class name: .stroke-{name}
      | CSS property: stroke
      |
      */

      stroke: {
        current: 'currentColor'
      }
    },
    /*
    |-----------------------------------------------------------------------------
    | Modules                  https://tailwindcss.com/docs/configuration#modules
    |-----------------------------------------------------------------------------
    |
    | Here is where you control which modules are generated and what variants are
    | generated for each of those modules.
    |
    | Currently supported variants:
    |   - responsive
    |   - hover
    |   - focus
    |   - focus-within
    |   - active
    |   - group-hover
    |
    | To disable a module completely, use `false` instead of an array.
    |
    */
    variants: {
      appearance: ['responsive'],
      backgroundAttachment: ['responsive'],
      backgroundColor: ['responsive', 'hover', 'focus'],
      backgroundPosition: ['responsive'],
      backgroundRepeat: ['responsive'],
      backgroundSize: ['responsive'],
      borderColor: ['responsive', 'hover'],
      borderRadius: ['responsive'],
      borderStyle: ['responsive'],
      borderWidth: ['responsive'],
      cursor: ['responsive'],
      display: ['responsive'],
      flexDirection: ['responsive'],
      flexWrap: ['responsive'],
      alignItems: ['responsive'],
      alignSelf: ['responsive'],
      justifyContent: ['responsive'],
      alignContent: ['responsive'],
      flex: ['responsive'],
      flexGrow: ['responsive'],
      flexShrink: ['responsive'],
      float: ['responsive'],
      fonts: ['responsive'],
      fontWeight: ['responsive', 'hover'],
      height: ['responsive'],
      lineHeight: ['responsive'],
      listStylePosition: ['responsive'],
      listStyleType: ['responsive'],
      margin: ['responsive'],
      maxHeight: ['responsive'],
      maxWidth: ['responsive'],
      minHeight: ['responsive'],
      minWidth: ['responsive'],
      negativeMargin: ['responsive'],
      opacity: ['responsive', 'hover', 'group-hover'],
      overflow: ['responsive'],
      padding: ['responsive'],
      pointerEvents: ['responsive'],
      position: ['responsive'],
      inset: ['responsive'],
      resize: ['responsive'],
      tableLayout: ['responsive', 'hover', 'focus'],
      boxShadow: ['responsive', 'hover'],
      fill: [],
      stroke: [],
      textAlign: ['responsive'],
      textColor: ['responsive', 'hover'],
      fontSize: ['responsive'],
      fontStyle: ['responsive', 'hover'],
      fontSmoothing: ['responsive', 'hover'],
      textDecoration: ['responsive', 'hover'],
      textTransform: ['responsive', 'hover'],
      letterSpacing: ['responsive'],
      userSelect: ['responsive'],
      verticalAlign: ['responsive'],
      visibility: ['responsive'],
      whitespace: ['responsive'],
      wordBreak: ['responsive'],
      width: ['responsive'],
      zIndex: ['responsive']
    },
    /*
    |-----------------------------------------------------------------------------
    | Plugins                                https://tailwindcss.com/docs/plugins
    |-----------------------------------------------------------------------------
    |
    | Here is where you can register any plugins you'd like to use in your
    | project. Tailwind's built-in `container` plugin is enabled by default to
    | give you a Bootstrap-style responsive container component out of the box.
    |
    | Be sure to view the complete plugin documentation to learn more about how
    | the plugin system works.
    |
    */

    plugins: [],
    corePlugins: {
      container: false
    }
  };
});
;define("ember-cli-addon-docs/utils/compile-markdown", ["exports", "marked", "node-html-parser", "@handlebars/parser", "line-column", "highlight.js/lib/core", "highlight.js/lib/languages/javascript", "highlight.js/lib/languages/css", "highlight.js/lib/languages/handlebars", "highlight.js/lib/languages/json", "highlight.js/lib/languages/xml", "highlight.js/lib/languages/diff", "highlight.js/lib/languages/shell", "highlight.js/lib/languages/typescript"], function (_exports, _marked, _nodeHtmlParser, _parser, _lineColumn, _core, _javascript, _css, _handlebars, _json, _xml, _diff, _shell, _typescript) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = compileMarkdown;
  _exports.highlightCode = highlightCode;
  0; //eaimeta@70e063a35619d71f0,"marked",0,"node-html-parser",0,"@handlebars/parser",0,"line-column",0,"highlight.js/lib/core",0,"highlight.js/lib/languages/javascript",0,"highlight.js/lib/languages/css",0,"highlight.js/lib/languages/handlebars",0,"highlight.js/lib/languages/json",0,"highlight.js/lib/languages/xml",0,"highlight.js/lib/languages/diff",0,"highlight.js/lib/languages/shell",0,"highlight.js/lib/languages/typescript"eaimeta@70e063a35619d71f
  // Installed languages
  _core.default.registerLanguage('javascript', _javascript.default);
  _core.default.registerLanguage('js', _javascript.default);
  _core.default.registerLanguage('css', _css.default);
  _core.default.registerLanguage('handlebars', _handlebars.default);
  _core.default.registerLanguage('hbs', _handlebars.default);
  _core.default.registerLanguage('htmlbars', _handlebars.default);
  _core.default.registerLanguage('json', _json.default);
  _core.default.registerLanguage('xml', _xml.default);
  _core.default.registerLanguage('diff', _diff.default);
  _core.default.registerLanguage('shell', _shell.default);
  _core.default.registerLanguage('sh', _shell.default);
  _core.default.registerLanguage('typescript', _typescript.default);
  _core.default.registerLanguage('ts', _typescript.default);
  const htmlComponent = {
    name: 'htmlComponent',
    level: 'block',
    start(src) {
      // stop text tokenizer at the next potential match.
      // we're only interested in html blocks that begin in a new line
      let match = src.match(/\n<[^/^\s>]/);
      return match && match.index;
    },
    tokenizer(src) {
      let openingRule = /^<([^/^\s>]+)\s?[\s\S]*?>/;
      let openingMatch = openingRule.exec(src);
      if (openingMatch) {
        let openingTag = openingMatch[1];
        let root = (0, _nodeHtmlParser.parse)(src);
        for (let el of root.childNodes) {
          if (el.rawTagName === openingTag) {
            let finalMatch = src.substring(el.range[0], el.range[1]);
            return {
              type: 'htmlComponent',
              raw: finalMatch,
              text: finalMatch,
              tokens: []
            };
          }
        }
      }
    },
    renderer(token) {
      return `\n<p>${token.text}</p>\n`;
    }
  };
  const hbsComponent = {
    name: 'hbsComponent',
    level: 'block',
    start(src) {
      // stop text tokenizer at the next potential match.
      // we're only interested in hbs blocks that begin in a new line
      let match = src.match(/\n{{#\S/);
      return match && match.index;
    },
    tokenizer(src) {
      let openingRule = /^{{#([A-Za-z-]+)[\S\s]+?}}/;
      let openingMatch = openingRule.exec(src);
      if (openingMatch) {
        let openingTag = openingMatch[1];
        let root = (0, _parser.parse)(src);
        for (let el of root.body) {
          if (el.path && el.path.original === openingTag) {
            let start = (0, _lineColumn.default)(src).toIndex([el.loc.start.line, el.loc.start.column]);
            let end = (0, _lineColumn.default)(src).toIndex([el.loc.end.line, el.loc.end.column]);
            let finalMatch = src.substring(start, end + 1);
            return {
              type: 'hbsComponent',
              raw: finalMatch,
              text: finalMatch,
              tokens: []
            };
          }
        }
      }
    },
    renderer(token) {
      return `\n<p>${token.text}</p>\n`;
    }
  };
  _marked.marked.use({
    extensions: [htmlComponent, hbsComponent]
  });

  /**
    This function is used when `compileMarkdown` encounters code blocks while
    rendering Markdown source.
  
    You can use this function on its own if you have code snippets you want
    to highlight at run-time, for example snippets that change based on some
    user interaction.
  
    ```js
    import Component from '@glimmer/component';
    import dedent from 'dedent';
    import { highlightCode } from 'ember-cli-addon-docs/utils/compile-markdown';
  
    export default class MyComponent extends Component {
      snippet = dedent`
        let { foo } = bar;
      `;
  
      get highlightedSnippet() {
        return highlightCode(this.snippet, 'js');
      }
    }
    ```
  
    ```hbs
    <div class="docs-bg-code-base text-grey overflow-x-scroll">
      <div class="p-4 w-full">
        <pre>{{{highlightedSnippet}}}</pre>
      </div>
    </div>
    ```
  
    @function highlightCode
    @param {string} snippet Snippet of code
    @param {string} lang Language to use for syntax highlighting
  */
  function highlightCode(code, language) {
    return _core.default.getLanguage(language) ? _core.default.highlight(code, {
      language
    }).value : code;
  }

  /**
    This is the function used by AddonDocs to compile Markdown into HTML, for
    example when turning `template.md` files into `template.hbs`. It includes
    some parsing options, as well as syntax highlighting for code blocks.
  
    You can use it in your own code, so your Markdown-rendered content shares the
    same styling & syntax highlighting as the content AddonDocs already handles.
  
    For example, you can use it if your Ember App has Markdown data that is
    fetched at runtime from an API:
  
    ```js
    import Component from '@glimmer/component';
    import compileMarkdown from 'ember-cli-addon-docs/utils/compile-markdown';
    import { htmlSafe } from '@ember/template';
  
    export default class MyComponent extends Component {
      get htmlBody() {
        return htmlSafe(compileMarkdown(this.post.body));
      }
    }
    ```
  
    @function compileMarkdown
    @export default
    @param {string} source Markdown string representing the source content
    @param {object} options? Options. Pass `targetHandlebars: true` if turning MD into HBS
  */
  function compileMarkdown(source, config) {
    let markedOptions = {
      highlight: highlightCode,
      renderer: new HBSRenderer(config)
    };
    return `<div class="docs-md">${_marked.marked.parse(source, markedOptions)}</div>`;
  }
  class HBSRenderer extends _marked.marked.Renderer {
    constructor(config) {
      super();
      this.config = config || {};
    }
    codespan() {
      return this._processCode(super.codespan.apply(this, arguments));
    }
    code() {
      let code = this._processCode(super.code.apply(this, arguments));
      return code.replace(/^<pre>/, '<pre class="docs-md__code">');
    }

    // Unescape markdown escaping in general, since it can interfere with
    // Handlebars templating
    text() {
      let text = super.text.apply(this, arguments);
      if (this.config.targetHandlebars) {
        text = text.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;|&#34;/g, '"').replace(/&apos;|&#39;/g, "'");
      }
      return text;
    }

    // Escape curlies in code spans/blocks to avoid treating them as Handlebars
    _processCode(string) {
      if (this.config.targetHandlebars) {
        string = this._escapeCurlies(string);
      }
      return string;
    }
    _escapeCurlies(string) {
      return string.replace(/{{/g, '&#123;&#123;').replace(/}}/g, '&#125;&#125;');
    }
    heading(text, level) {
      let id = text.toLowerCase().replace(/<\/?.*?>/g, '').replace(/[^\w]+/g, '-');
      let inner = level === 1 ? text : `<a href="#${id}" class="heading-anchor">${text}</a>`;
      return `
      <h${level} id="${id}" class="docs-md__h${level}">${inner}</h${level}>
    `;
    }
    list(text, ordered) {
      if (ordered) {
        return `
        <ol class="docs-list-decimal">${text}</ol>
      `;
      } else {
        return `
        <ul class="docs-list-disc">${text}</ul>
      `;
      }
    }
    table(header, body) {
      if (body) body = '<tbody>' + body + '</tbody>';
      return '<table class="docs-table-auto">\n' + '<thead>\n' + header + '</thead>\n' + body + '</table>\n';
    }
    tablerow(content) {
      return '<tr class="docs-table-row">\n' + content + '</tr>\n';
    }
    tablecell(content, flags) {
      let type = flags.header ? 'th' : 'td';
      let tag = flags.align ? '<' + type + ' align="' + flags.align + '" class="docs-border docs-px-4 docs-py-2">' : '<' + type + ' class="docs-border docs-px-4 docs-py-2">';
      return tag + content + '</' + type + '>\n';
    }
    hr() {
      return `<hr class="docs-md__hr">`;
    }
    blockquote(text) {
      return `<blockquote class="docs-md__blockquote">${text}</blockquote>`;
    }
    link(href, title, text) {
      let titleAttribute = title ? `title="${title}"` : '';
      return `<a href="${href}" ${titleAttribute} class="docs-md__a">${text}</a>`;
    }
  }
});
;define("ember-cli-addon-docs/utils/computed", ["exports", "@ember/object", "@ember/string"], function (_exports, _object, _string) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.addonLogo = addonLogo;
  _exports.addonPrefix = addonPrefix;
  _exports.hasMemberType = hasMemberType;
  _exports.memberFilter = memberFilter;
  _exports.memberUnion = memberUnion;
  _exports.unprefixedAddonName = unprefixedAddonName;
  0; //eaimeta@70e063a35619d71f0,"@ember/object",0,"@ember/string"eaimeta@70e063a35619d71f
  /**
    @function initialize
    @hide
  */
  function memberUnion(parentMembersKey, childMembersKey) {
    return (0, _object.computed)(`${parentMembersKey}.[]`, `${childMembersKey}.[]`, function () {
      let parentMembers = (0, _object.get)(this, parentMembersKey);
      let childMembers = (0, _object.get)(this, childMembersKey);
      if (!parentMembers) {
        return childMembers;
      }
      let union = {};
      for (let member of parentMembers) {
        union[member.name] = member;
      }
      for (let member of childMembers) {
        union[member.name] = member;
      }
      return Object.values(union);
    });
  }
  function memberSort(a, b) {
    if (a.isStatic && !b.isStatic) {
      return -1;
    } else if (b.isStatic && !a.isStatic) {
      return 1;
    }
    if (a.access === 'public' && b.access !== 'public' || b.access === 'private' && a.access !== 'private') {
      return -1;
    } else if (a.access === 'private' && b.access !== 'private' || b.access === 'public' && a.access !== 'public') {
      return 1;
    }
    return a.name.localeCompare(b.name);
  }

  /**
    @function initialize
    @hide
  */
  function memberFilter(classKey, memberType) {
    return (0, _object.computed)(classKey, 'showInherited', 'showInternal', 'showProtected', 'showPrivate', 'showDeprecated', function () {
      let klass = (0, _object.get)(this, classKey);
      let showInternal = this.showInternal;
      let showInherited = this.showInherited;
      let showProtected = this.showProtected;
      let showPrivate = this.showPrivate;
      let showDeprecated = this.showDeprecated;
      let members = [];
      if (showInternal === false && memberType !== 'arguments') {
        return members;
      }
      let capitalKey = (0, _string.capitalize)(memberType);
      let publicMembers = showInherited ? klass.get(`allPublic${capitalKey}`) : klass.get(`public${capitalKey}`);
      let privateMembers = showInherited ? klass.get(`allPrivate${capitalKey}`) : klass.get(`private${capitalKey}`);
      let protectedMembers = showInherited ? klass.get(`allProtected${capitalKey}`) : klass.get(`protected${capitalKey}`);
      members.push(...publicMembers);
      if (showPrivate) {
        members.push(...privateMembers);
      }
      if (showProtected) {
        members.push(...protectedMembers);
      }
      if (!showDeprecated) {
        members = members.filter(m => {
          return !m.tags || !m.tags.find(t => t.name === 'deprecated');
        });
      }
      return members.sort(memberSort);
    });
  }

  /**
    @function initialize
    @hide
  */
  function hasMemberType(...memberKeys) {
    let filter = memberKeys.pop();
    return (0, _object.computed)(...memberKeys.map(k => `${k}.[]`), {
      get() {
        return memberKeys.some(memberKey => {
          return (0, _object.get)(this, memberKey).some(member => filter(member, memberKey));
        });
      }
    });
  }

  /**
    @function initialize
    @hide
  */
  function addonLogo(name) {
    let logo;
    if (name.match(/ember-cli/)) {
      logo = 'ember-cli';
    } else if (name.match(/ember-data/)) {
      logo = 'ember-data';
    } else {
      logo = 'ember';
    }
    return logo;
  }
  let prefixMap = {
    'ember-cli': 'EmberCLI',
    'ember-data': 'EmberData',
    ember: 'Ember'
  };
  /**
    @function initialize
    @hide
  */
  function addonPrefix(name) {
    return prefixMap[addonLogo(name)];
  }

  /**
    @function initialize
    @hide
  */
  function unprefixedAddonName(name) {
    return name.replace(/ember-(cli-|data-)?/, '');
  }
});
;define("ember-cli-app-version/initializer-factory", ["exports", "ember"], function (_exports, _ember) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = initializerFactory;
  const {
    libraries
  } = _ember.default;
  function initializerFactory(name, version) {
    let registered = false;
    return function () {
      if (!registered && name && version) {
        libraries.register(name, version);
        registered = true;
      }
    };
  }
});
;define("ember-cli-app-version/utils/regexp", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.versionRegExp = _exports.versionExtendedRegExp = _exports.shaRegExp = void 0;
  const versionRegExp = _exports.versionRegExp = /\d+[.]\d+[.]\d+/; // Match any number of 3 sections of digits separated by .
  const versionExtendedRegExp = _exports.versionExtendedRegExp = /\d+[.]\d+[.]\d+-[a-z]*([.]\d+)?/; // Match the above but also hyphen followed by any number of lowercase letters, then optionally period and digits
  const shaRegExp = _exports.shaRegExp = /[a-z\d]{8}$/; // Match 8 lowercase letters and digits, at the end of the string only (to avoid matching with version extended part)
});
;define("ember-cli-clipboard/components/copy-button", ["exports", "@ember/component", "@glimmer/component", "@ember/object/internals", "ember-arg-types", "prop-types", "@ember/template-factory"], function (_exports, _component, _component2, _internals, _emberArgTypes, _propTypes, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@glimmer/component",0,"@ember/object/internals",0,"ember-arg-types",0,"prop-types",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <button
    class='copy-btn'
    type={{this.buttonType}}
    data-clipboard-id={{this.guid}}
    ...attributes
    {{clipboard
      text=this.text
      target=this.target
      action=this.action
      delegateClickEvent=this.delegateClickEvent
      container=this.container
      onError=this.onError
      onSuccess=this.onSuccess
    }}
  >
    {{yield}}
  </button>
  */
  {
    "id": "A3kMFDBj",
    "block": "[[[11,\"button\"],[24,0,\"copy-btn\"],[16,4,[30,0,[\"buttonType\"]]],[16,\"data-clipboard-id\",[30,0,[\"guid\"]]],[17,1],[4,[38,0],null,[[\"text\",\"target\",\"action\",\"delegateClickEvent\",\"container\",\"onError\",\"onSuccess\"],[[30,0,[\"text\"]],[30,0,[\"target\"]],[30,0,[\"action\"]],[30,0,[\"delegateClickEvent\"]],[30,0,[\"container\"]],[30,0,[\"onError\"]],[30,0,[\"onSuccess\"]]]]],[12],[1,\"\\n  \"],[18,2,null],[1,\"\\n\"],[13]],[\"&attrs\",\"&default\"],false,[\"clipboard\",\"yield\"]]",
    "moduleName": "ember-cli-clipboard/components/copy-button.hbs",
    "isStrictMode": false
  });
  // eslint-disable-next-line ember/no-classic-components
  let CopyButtonComponent = _exports.default = (_dec = (0, _emberArgTypes.arg)((0, _propTypes.oneOfType)([_propTypes.string, _propTypes.func])), _dec2 = (0, _emberArgTypes.arg)((0, _propTypes.oneOfType)([_propTypes.string, _propTypes.func])), _dec3 = (0, _emberArgTypes.arg)((0, _propTypes.oneOf)(['copy', 'cut'])), _dec4 = (0, _emberArgTypes.arg)(_propTypes.boolean), _dec5 = (0, _emberArgTypes.arg)((0, _propTypes.oneOfType)([_propTypes.string, _propTypes.element])), _dec6 = (0, _emberArgTypes.arg)(_propTypes.string), _dec7 = (0, _emberArgTypes.arg)(_propTypes.boolean), _dec8 = (0, _emberArgTypes.arg)(_propTypes.boolean), (0, _emberArgTypes.forbidExtraArgs)(_class = (_class2 = class CopyButtonComponent extends _component2.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "guid", (0, _internals.guidFor)(this));
      _initializerDefineProperty(this, "text", _descriptor, this);
      _initializerDefineProperty(this, "target", _descriptor2, this);
      _initializerDefineProperty(this, "action", _descriptor3, this);
      _initializerDefineProperty(this, "delegateClickEvent", _descriptor4, this);
      _initializerDefineProperty(this, "container", _descriptor5, this);
      _initializerDefineProperty(this, "buttonType", _descriptor6, this);
      _initializerDefineProperty(this, "onError", _descriptor7, this);
      _initializerDefineProperty(this, "onSuccess", _descriptor8, this);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "text", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "target", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "action", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "delegateClickEvent", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "container", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "buttonType", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'button';
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "onError", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "onSuccess", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, CopyButtonComponent);
});
;define("ember-cli-clipboard/helpers/is-clipboard-supported", ["exports", "@ember/component/helper", "clipboard", "@ember/application"], function (_exports, _helper, _clipboard, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember/component/helper",0,"clipboard",0,"@ember/application"eaimeta@70e063a35619d71f
  class IsClipboardSupportedHelper extends _helper.default {
    constructor() {
      super(...arguments);
      const service = (0, _application.getOwner)(this).lookup('service:fastboot');
      this.isFastBoot = service ? service.isFastBoot : false;
    }
    compute([action]) {
      const {
        isFastBoot
      } = this;
      return isFastBoot ? false : _clipboard.default.isSupported(action);
    }
  }
  _exports.default = IsClipboardSupportedHelper;
});
;define("ember-cli-clipboard/modifiers/clipboard", ["exports", "ember-modifier", "clipboard", "@ember/utils", "@ember/string", "@ember/object/internals"], function (_exports, _emberModifier, _clipboard, _utils, _string, _internals) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-modifier",0,"clipboard",0,"@ember/utils",0,"@ember/string",0,"@ember/object/internals",0,"@embroider/macros"eaimeta@70e063a35619d71f
  const CLIPBOARD_EVENTS = ['success', 'error'];
  function clipboard(element, params, hash) {
    const {
      action = 'copy',
      container,
      /*
       * delegateClickEvent true - scope event listener to this element
       * delegateClickEvent false - scope event listener to document.body (ClipboardJS)
       */
      delegateClickEvent = true,
      target,
      text
    } = hash;
    element.setAttribute('data-clipboard-action', action);
    if (!(0, _utils.isBlank)(text)) {
      element.setAttribute('data-clipboard-text', text);
    }
    if (!(0, _utils.isBlank)(target)) {
      element.setAttribute('data-clipboard-target', target);
    }
    if ((0, _utils.isBlank)(element.dataset.clipboardId)) {
      element.setAttribute('data-clipboard-id', (0, _internals.guidFor)(element));
    }
    const trigger = delegateClickEvent === false ? element : `[data-clipboard-id=${element.dataset.clipboardId}]`;
    const clipboard = new _clipboard.default(trigger, {
      text: typeof text === 'function' ? text : undefined,
      container: typeof container === 'string' ? document.querySelector(container) : container,
      target
    });
    CLIPBOARD_EVENTS.forEach(event => {
      clipboard.on(event, () => {
        if (!element.disabled) {
          const action = hash[`on${(0, _string.capitalize)(event)}`];
          action?.(...arguments);
        }
      });
    });
    return () => clipboard.destroy();
  }
  let clipboardModifier;
  {
    clipboardModifier = (0, _emberModifier.modifier)(clipboard, {
      eager: false
    });
  }
  var _default = _exports.default = clipboardModifier;
});
;define("ember-cli-string-helpers/-private/create-string-helper", ["exports", "@ember/template"], function (_exports, _template) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;
  function _default(stringFunction) {
    return function ([string]) {
      if ((0, _template.isHTMLSafe)(string)) {
        string = string.string;
      }
      string = string || '';
      return stringFunction(string);
    };
  }
});
;define("ember-cli-string-helpers/helpers/camelize", ["exports", "@ember/component/helper", "@ember/string", "ember-cli-string-helpers/-private/create-string-helper"], function (_exports, _helper, _string, _createStringHelper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.camelize = void 0;
  const camelize = _exports.camelize = (0, _createStringHelper.default)(_string.camelize);
  var _default = _exports.default = (0, _helper.helper)(camelize);
});
;define("ember-cli-string-helpers/helpers/capitalize", ["exports", "@ember/component/helper", "@ember/string", "ember-cli-string-helpers/-private/create-string-helper"], function (_exports, _helper, _string, _createStringHelper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.capitalize = void 0;
  const capitalize = _exports.capitalize = (0, _createStringHelper.default)(_string.capitalize);
  var _default = _exports.default = (0, _helper.helper)(capitalize);
});
;define("ember-cli-string-helpers/helpers/classify", ["exports", "@ember/component/helper", "@ember/string", "ember-cli-string-helpers/-private/create-string-helper"], function (_exports, _helper, _string, _createStringHelper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.classify = void 0;
  const classify = _exports.classify = (0, _createStringHelper.default)(_string.classify);
  var _default = _exports.default = (0, _helper.helper)(classify);
});
;define("ember-cli-string-helpers/helpers/dasherize", ["exports", "@ember/component/helper", "@ember/string", "ember-cli-string-helpers/-private/create-string-helper"], function (_exports, _helper, _string, _createStringHelper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.dasherize = void 0;
  const dasherize = _exports.dasherize = (0, _createStringHelper.default)(_string.dasherize);
  var _default = _exports.default = (0, _helper.helper)(dasherize);
});
;define("ember-cli-string-helpers/helpers/html-safe", ["exports", "@ember/component/helper", "@ember/template", "ember-cli-string-helpers/-private/create-string-helper"], function (_exports, _helper, _template, _createStringHelper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.htmlSafe = _exports.default = void 0;
  const htmlSafe = _exports.htmlSafe = (0, _createStringHelper.default)(_template.htmlSafe);
  var _default = _exports.default = (0, _helper.helper)(htmlSafe);
});
;define("ember-cli-string-helpers/helpers/humanize", ["exports", "@ember/component/helper", "@ember/template"], function (_exports, _helper, _template) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.humanize = humanize;
  const regex = /_+|-+/g;
  const replacement = ' ';

  // The substituted value will be contained in the result variable
  function humanize([string]) {
    if ((0, _template.isHTMLSafe)(string)) {
      string = string.string;
    }
    if (string === undefined || string === null) {
      return '';
    }
    let result = string.toLowerCase().replace(regex, replacement);
    return result.charAt(0).toUpperCase() + result.slice(1);
  }
  var _default = _exports.default = (0, _helper.helper)(humanize);
});
;define("ember-cli-string-helpers/helpers/lowercase", ["exports", "@ember/component/helper", "ember-cli-string-helpers/utils/lowercase", "ember-cli-string-helpers/-private/create-string-helper"], function (_exports, _helper, _lowercase, _createStringHelper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.lowercase = _exports.default = void 0;
  const lowercase = _exports.lowercase = (0, _createStringHelper.default)(_lowercase.default);
  var _default = _exports.default = (0, _helper.helper)(lowercase);
});
;define("ember-cli-string-helpers/helpers/titleize", ["exports", "@ember/component/helper", "ember-cli-string-helpers/utils/titleize", "ember-cli-string-helpers/-private/create-string-helper"], function (_exports, _helper, _titleize, _createStringHelper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.titleize = _exports.default = void 0;
  const titleize = _exports.titleize = (0, _createStringHelper.default)(_titleize.default);
  var _default = _exports.default = (0, _helper.helper)(titleize);
});
;define("ember-cli-string-helpers/helpers/trim", ["exports", "@ember/component/helper", "ember-cli-string-helpers/utils/trim", "ember-cli-string-helpers/-private/create-string-helper"], function (_exports, _helper, _trim, _createStringHelper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.trim = _exports.default = void 0;
  const trim = _exports.trim = (0, _createStringHelper.default)(_trim.default);
  var _default = _exports.default = (0, _helper.helper)(trim);
});
;define("ember-cli-string-helpers/helpers/truncate", ["exports", "@ember/component/helper", "@ember/template"], function (_exports, _helper, _template) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.truncate = truncate;
  function truncate([string, characterLimit = 140, useEllipsis = true]) {
    let limit = useEllipsis ? characterLimit - 3 : characterLimit;
    if ((0, _template.isHTMLSafe)(string)) {
      string = string.string;
    }
    if (string && string.length > limit) {
      return useEllipsis ? `${string.substring(0, limit)}...` : string.substring(0, limit);
    } else {
      return string;
    }
  }
  var _default = _exports.default = (0, _helper.helper)(truncate);
});
;define("ember-cli-string-helpers/helpers/underscore", ["exports", "@ember/component/helper", "@ember/string", "ember-cli-string-helpers/-private/create-string-helper"], function (_exports, _helper, _string, _createStringHelper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.underscore = _exports.default = void 0;
  const underscore = _exports.underscore = (0, _createStringHelper.default)(_string.underscore);
  var _default = _exports.default = (0, _helper.helper)(underscore);
});
;define("ember-cli-string-helpers/helpers/uppercase", ["exports", "@ember/component/helper", "ember-cli-string-helpers/utils/uppercase", "ember-cli-string-helpers/-private/create-string-helper"], function (_exports, _helper, _uppercase, _createStringHelper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.uppercase = _exports.default = void 0;
  const uppercase = _exports.uppercase = (0, _createStringHelper.default)(_uppercase.default);
  var _default = _exports.default = (0, _helper.helper)(uppercase);
});
;define("ember-cli-string-helpers/helpers/w", ["exports", "@ember/component/helper", "@ember/string"], function (_exports, _helper, _string) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.w = w;
  function w([...wordStrings]) {
    return wordStrings.map(_string.w).reduce((words, moreWords) => {
      return words.concat(moreWords);
    }, []);
  }
  var _default = _exports.default = (0, _helper.helper)(w);
});
;define("ember-cli-string-helpers/utils/lowercase", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = lowercase;
  function lowercase(string = '') {
    if (typeof string !== 'string') {
      throw new TypeError(`Expected a string, got a ${typeof string}`);
    }
    return string.toLowerCase();
  }
});
;define("ember-cli-string-helpers/utils/titleize", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = titleize;
  function titleize(string = '') {
    if (typeof string !== 'string') {
      throw new TypeError(`Expected a string, got a ${typeof string}`);
    }
    return string.toLowerCase().replace(/(?:^|\s|-|\/)\S/g, function (m) {
      return m.toUpperCase();
    });
  }
});
;define("ember-cli-string-helpers/utils/trim", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = trim;
  function trim(string = '') {
    if (typeof string !== 'string') {
      throw new TypeError(`Expected a string, got a ${typeof string}`);
    }
    return string.trim();
  }
});
;define("ember-cli-string-helpers/utils/uppercase", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = uppercase;
  function uppercase(string = '') {
    if (typeof string !== 'string') {
      throw new TypeError(`Expected a string, got a ${typeof string}`);
    }
    return string.toUpperCase();
  }
});
;define("ember-code-snippet/-private/extension", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = getExtension;
  function getExtension(name) {
    let m = /\.(\w+)$/i.exec(name);
    return m ? m[1].toLowerCase() : undefined;
  }
});
;define("ember-code-snippet/-private/get-snippet", ["exports", "ember-code-snippet/snippets", "ember-code-snippet/-private/language", "ember-code-snippet/-private/extension", "ember-code-snippet/-private/unindent", "@ember/debug"], function (_exports, _snippets, _language, _extension, _unindent, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = getSnippet;
  function getSnippet(name, unindent = true) {
    let source = name.split('/').reduce((dir, name) => dir && dir[name], _snippets.default);
    (true && !(source) && (0, _debug.assert)(`Code snippet with name "${name}" not found.`, source));
    source = source.replace(/^(\s*\n)*/, '').replace(/\s*$/, '');
    if (unindent) {
      source = (0, _unindent.default)(source);
    }
    let language = (0, _language.default)(name);
    let extension = (0, _extension.default)(name);
    return {
      source,
      language,
      extension
    };
  }
});
;define("ember-code-snippet/-private/language", ["exports", "ember-code-snippet/-private/extension"], function (_exports, _extension) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = getLanguage;
  function getLanguage(name) {
    let ext = (0, _extension.default)(name);
    if (ext) {
      switch (ext) {
        case 'js':
          return 'javascript';
        case 'coffee':
          return 'coffeescript';
        case 'hbs':
          return 'handlebars';
        case 'css':
          return 'css';
        case 'scss':
          return 'scss';
        case 'less':
          return 'less';
        case 'emblem':
          return 'emblem';
        case 'ts':
          return 'typescript';
        default:
          return ext;
      }
    }
  }
});
;define("ember-code-snippet/-private/unindent", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = unindent;
  function unindent(src) {
    let match,
      min,
      lines = src.split("\n").filter(l => l !== '');
    for (let i = 0; i < lines.length; i++) {
      match = /^[ \t]*/.exec(lines[i]);
      if (match && (typeof min === 'undefined' || min > match[0].length)) {
        min = match[0].length;
      }
    }
    if (typeof min !== 'undefined' && min > 0) {
      src = src.replace(new RegExp("^[ \t]{" + min + "}", 'gm'), "");
    }
    return src;
  }
});
;define("ember-code-snippet/helpers/get-code-snippet", ["exports", "@ember/component/helper", "ember-code-snippet"], function (_exports, _helper, _emberCodeSnippet) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _helper.helper)(function ([name], {
    unindent = true
  }) {
    return (0, _emberCodeSnippet.getCodeSnippet)(name, unindent);
  });
});
;define("ember-code-snippet/index", ["exports", "ember-code-snippet/-private/get-snippet"], function (_exports, _getSnippet) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "getCodeSnippet", {
    enumerable: true,
    get: function () {
      return _getSnippet.default;
    }
  });
});
;define("ember-code-snippet/snippets", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = {};
});
;define("ember-composable-helpers/-private/closure-action", ["exports", "ember"], function (_exports, _ember) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const {
    __loader
  } = _ember.default;
  let ClosureActionModule = {
    ACTION: null
  };
  if ('ember-htmlbars/keywords/closure-action' in __loader.registry) {
    ClosureActionModule = __loader.require('ember-htmlbars/keywords/closure-action');
  } else if ('ember-routing-htmlbars/keywords/closure-action' in __loader.registry) {
    ClosureActionModule = __loader.require('ember-routing-htmlbars/keywords/closure-action');
  }
  var _default = _exports.default = ClosureActionModule.ACTION;
});
;define("ember-composable-helpers/-private/get-value-array-and-use-deep-equal-from-params", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = getValueArrayAndUseDeepEqualFromParams;
  function getValueArrayAndUseDeepEqualFromParams(params) {
    let currentValue = params[0];
    let array;
    let useDeepEqual = false;
    if (params.length === 2) {
      array = params[1];
    } else {
      useDeepEqual = params[1];
      array = params[2];
    }
    return {
      currentValue,
      array,
      useDeepEqual
    };
  }
});
;define("ember-composable-helpers/helpers/append", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.append = append;
  _exports.default = void 0;
  function append([...arrays]) {
    return [].concat(...arrays);
  }
  var _default = _exports.default = (0, _helper.helper)(append);
});
;define("ember-composable-helpers/helpers/call", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.call = call;
  _exports.default = void 0;
  /**
   * Calls a function passed within a template and returns its value.
   * In order to pass arguments to the function being called, you must
   * curry the function using the `fn` helper.
   *
   ```example
      <div data-metrics={{call (fn this.myMetrics (hash item=@item))}}
    ```
   *
   * @function apply
   * @param {Array<Function>} fn - The function to be called
   * @param {*=} thisArg - An optional `this` context
   */
  function call([fn, thisArg]) {
    if (fn) {
      if (thisArg) {
        return fn.apply(thisArg);
      } else {
        return fn();
      }
    }
  }
  var _default = _exports.default = _helper.default.helper(call);
});
;define("ember-composable-helpers/helpers/chunk", ["exports", "@ember/component/helper", "@ember/array", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _array, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.chunk = chunk;
  _exports.default = void 0;
  const {
    max,
    ceil
  } = Math;
  function chunk(num, array) {
    let integer = parseInt(num, 10);
    let size = max(integer, 0);
    let length = 0;
    if ((0, _array.isArray)(array)) {
      length = array.length;
    }
    array = (0, _asArray.default)(array);
    if (!length || size < 1) {
      return [];
    } else {
      let index = 0;
      let resultIndex = -1;
      let result = new Array(ceil(length / size));
      while (index < length) {
        result[++resultIndex] = array.slice(index, index += size);
      }
      return result;
    }
  }
  var _default = _exports.default = (0, _helper.helper)(function ([num, array]) {
    return chunk(num, array);
  });
});
;define("ember-composable-helpers/helpers/compact", ["exports", "@ember/component/helper", "@ember/utils", "@ember/array"], function (_exports, _helper, _utils, _array) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.compact = compact;
  _exports.default = void 0;
  function compact([value]) {
    let array;
    if (Array.isArray(value) || (0, _array.isArray)(value)) {
      array = value;
    } else {
      array = [value];
    }
    return array.filter(item => (0, _utils.isPresent)(item));
  }
  var _default = _exports.default = (0, _helper.helper)(compact);
});
;define("ember-composable-helpers/helpers/compute", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.compute = compute;
  _exports.default = void 0;
  function compute([action, ...params]) {
    return action(...params);
  }
  var _default = _exports.default = (0, _helper.helper)(compute);
});
;define("ember-composable-helpers/helpers/dec", ["exports", "@ember/component/helper", "@ember/utils"], function (_exports, _helper, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.dec = dec;
  _exports.default = void 0;
  function dec([step, val]) {
    if ((0, _utils.isEmpty)(val)) {
      val = step;
      step = undefined;
    }
    val = Number(val);
    if (isNaN(val)) {
      return;
    }
    if (step === undefined) {
      step = 1;
    }
    return val - step;
  }
  var _default = _exports.default = (0, _helper.helper)(dec);
});
;define("ember-composable-helpers/helpers/drop", ["exports", "@ember/component/helper", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.drop = drop;
  function drop([dropAmount, array]) {
    return (0, _asArray.default)(array).slice(dropAmount);
  }
  var _default = _exports.default = (0, _helper.helper)(drop);
});
;define("ember-composable-helpers/helpers/entries", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.entries = entries;
  function entries([object]) {
    if (!object) {
      return object;
    }
    return Object.entries(object);
  }
  var _default = _exports.default = (0, _helper.helper)(entries);
});
;define("ember-composable-helpers/helpers/filter-by", ["exports", "@ember/component/helper", "@ember/array", "@ember/utils", "@ember/object", "ember-composable-helpers/utils/is-equal", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _array, _utils, _object, _isEqual, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.filterBy = filterBy;
  function filterBy([byPath, value, array]) {
    if (!(0, _array.isArray)(array) && (0, _array.isArray)(value)) {
      array = value;
      value = undefined;
    }
    array = (0, _asArray.default)(array);
    if ((0, _utils.isEmpty)(byPath) || (0, _utils.isEmpty)(array)) {
      return [];
    }
    let filterFn;
    if ((0, _utils.isPresent)(value)) {
      if (typeof value === 'function') {
        filterFn = item => value((0, _object.get)(item, byPath));
      } else {
        filterFn = item => (0, _isEqual.default)((0, _object.get)(item, byPath), value);
      }
    } else {
      filterFn = item => !!(0, _object.get)(item, byPath);
    }
    return array.filter(filterFn);
  }
  var _default = _exports.default = (0, _helper.helper)(filterBy);
});
;define("ember-composable-helpers/helpers/filter", ["exports", "@ember/component/helper", "@ember/utils", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _utils, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.filter = filter;
  function filter([callback, array]) {
    if ((0, _utils.isEmpty)(callback) || !array) {
      return [];
    }
    return (0, _asArray.default)(array).filter(callback);
  }
  var _default = _exports.default = (0, _helper.helper)(filter);
});
;define("ember-composable-helpers/helpers/find-by", ["exports", "@ember/component/helper", "@ember/utils", "@ember/array", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _utils, _array, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.findBy = findBy;
  function findBy([byPath, value, array]) {
    if ((0, _utils.isEmpty)(byPath)) {
      return [];
    }
    return (0, _array.A)((0, _asArray.default)(array)).findBy(byPath, value);
  }
  var _default = _exports.default = (0, _helper.helper)(findBy);
});
;define("ember-composable-helpers/helpers/flatten", ["exports", "@ember/component/helper", "@ember/array", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _array, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.flatten = flatten;
  function flatten(array) {
    if (!(0, _array.isArray)(array)) {
      return array;
    }
    return (0, _asArray.default)(array).reduce((flattened, el) => {
      return flattened.concat(flatten(el));
    }, []);
  }
  var _default = _exports.default = (0, _helper.helper)(function ([array]) {
    return flatten(array);
  });
});
;define("ember-composable-helpers/helpers/from-entries", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.fromEntries = fromEntries;
  function fromEntries([entries]) {
    if (!entries) {
      return entries;
    }
    return Object.fromEntries(entries);
  }
  var _default = _exports.default = (0, _helper.helper)(fromEntries);
});
;define("ember-composable-helpers/helpers/group-by", ["exports", "@ember/component/helper", "@ember/object", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _object, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.groupBy = groupBy;
  function groupBy([byPath, array]) {
    let groups = {};
    (0, _asArray.default)(array).forEach(item => {
      let groupName = (0, _object.get)(item, byPath);
      let group = groups[groupName];
      if (!Array.isArray(group)) {
        group = [];
        groups[groupName] = group;
      }
      group.push(item);
    });
    return groups;
  }
  var _default = _exports.default = (0, _helper.helper)(groupBy);
});
;define("ember-composable-helpers/helpers/has-next", ["exports", "@ember/component/helper", "@ember/utils", "ember-composable-helpers/helpers/next", "ember-composable-helpers/utils/is-equal", "ember-composable-helpers/-private/get-value-array-and-use-deep-equal-from-params", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _utils, _next, _isEqual, _getValueArrayAndUseDeepEqualFromParams, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.hasNext = hasNext;
  function hasNext(currentValue, maybeArray, useDeepEqual = false) {
    let array = (0, _asArray.default)(maybeArray);
    let nextValue = (0, _next.next)(currentValue, array, useDeepEqual);
    let isNotSameValue = !(0, _isEqual.default)(nextValue, currentValue, useDeepEqual);
    return isNotSameValue && (0, _utils.isPresent)(nextValue);
  }
  var _default = _exports.default = (0, _helper.helper)(function (params) {
    let {
      currentValue,
      array,
      useDeepEqual
    } = (0, _getValueArrayAndUseDeepEqualFromParams.default)(params);
    return hasNext(currentValue, array, useDeepEqual);
  });
});
;define("ember-composable-helpers/helpers/has-previous", ["exports", "@ember/component/helper", "@ember/utils", "ember-composable-helpers/helpers/previous", "ember-composable-helpers/utils/is-equal", "ember-composable-helpers/-private/get-value-array-and-use-deep-equal-from-params", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _utils, _previous, _isEqual, _getValueArrayAndUseDeepEqualFromParams, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.hasPrevious = hasPrevious;
  function hasPrevious(currentValue, maybeArray, useDeepEqual = false) {
    let array = (0, _asArray.default)(maybeArray);
    let previousValue = (0, _previous.previous)(currentValue, array, useDeepEqual);
    let isNotSameValue = !(0, _isEqual.default)(previousValue, currentValue, useDeepEqual);
    return isNotSameValue && (0, _utils.isPresent)(previousValue);
  }
  var _default = _exports.default = (0, _helper.helper)(function (params) {
    let {
      currentValue,
      array,
      useDeepEqual
    } = (0, _getValueArrayAndUseDeepEqualFromParams.default)(params);
    return hasPrevious(currentValue, array, useDeepEqual);
  });
});
;define("ember-composable-helpers/helpers/inc", ["exports", "@ember/component/helper", "@ember/utils"], function (_exports, _helper, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.inc = inc;
  function inc([step, val]) {
    if ((0, _utils.isEmpty)(val)) {
      val = step;
      step = undefined;
    }
    val = Number(val);
    if (isNaN(val)) {
      return;
    }
    if (step === undefined) {
      step = 1;
    }
    return val + step;
  }
  var _default = _exports.default = (0, _helper.helper)(inc);
});
;define("ember-composable-helpers/helpers/includes", ["exports", "@ember/array", "@ember/component/helper", "ember-composable-helpers/utils/as-array"], function (_exports, _array, _helper, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.includes = includes;
  function includes(needleOrNeedles, haystack) {
    if (!(0, _array.isArray)(haystack)) {
      return false;
    }
    let needles = (0, _array.isArray)(needleOrNeedles) ? needleOrNeedles : [needleOrNeedles];
    let haystackAsEmberArray = (0, _array.A)((0, _asArray.default)(haystack));
    return (0, _asArray.default)(needles).every(needle => {
      return haystackAsEmberArray.includes(needle);
    });
  }
  var _default = _exports.default = (0, _helper.helper)(function ([needle, haystack]) {
    return includes(needle, haystack);
  });
});
;define("ember-composable-helpers/helpers/intersect", ["exports", "@ember/component/helper", "@ember/array", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _array, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.intersect = intersect;
  function intersect([...arrays]) {
    let confirmedArrays = (0, _asArray.default)(arrays).map(array => {
      return (0, _array.isArray)(array) ? array : [];
    });
    // copied from https://github.com/emberjs/ember.js/blob/315ec6472ff542ac714432036cc96fe4bd62bd1f/packages/%40ember/object/lib/computed/reduce_computed_macros.js#L1063-L1100
    let results = confirmedArrays.pop().filter(candidate => {
      for (let i = 0; i < confirmedArrays.length; i++) {
        let found = false;
        let array = confirmedArrays[i];
        for (let j = 0; j < array.length; j++) {
          if (array[j] === candidate) {
            found = true;
            break;
          }
        }
        if (found === false) {
          return false;
        }
      }
      return true;
    });
    return results;
  }
  var _default = _exports.default = (0, _helper.helper)(intersect);
});
;define("ember-composable-helpers/helpers/invoke", ["exports", "@ember/array", "@ember/component/helper", "rsvp"], function (_exports, _array, _helper, _rsvp) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.invoke = invoke;
  const {
    all
  } = _rsvp.default;
  function invoke([methodName, ...args]) {
    let obj = args.pop();
    if ((0, _array.isArray)(obj)) {
      return function () {
        let promises = obj.map(item => item[methodName]?.(...args));
        return all(promises);
      };
    }
    return function () {
      return obj[methodName]?.(...args);
    };
  }
  var _default = _exports.default = (0, _helper.helper)(invoke);
});
;define("ember-composable-helpers/helpers/join", ["exports", "@ember/component/helper", "@ember/array", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _array, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.join = join;
  function join([separator, rawArray]) {
    let array = (0, _asArray.default)(rawArray);
    if ((0, _array.isArray)(separator)) {
      array = separator;
      separator = ',';
    }
    return array.join(separator);
  }
  var _default = _exports.default = (0, _helper.helper)(join);
});
;define("ember-composable-helpers/helpers/keys", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.keys = keys;
  function keys([object]) {
    if (!object) {
      return object;
    }
    return Object.keys(object);
  }
  var _default = _exports.default = (0, _helper.helper)(keys);
});
;define("ember-composable-helpers/helpers/map-by", ["exports", "@ember/component/helper", "@ember/object", "@ember/utils", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _object, _utils, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.mapBy = mapBy;
  function mapBy([byPath, array]) {
    if ((0, _utils.isEmpty)(byPath)) {
      return [];
    }
    return (0, _asArray.default)(array).map(item => (0, _object.get)(item, byPath));
  }
  var _default = _exports.default = (0, _helper.helper)(mapBy);
});
;define("ember-composable-helpers/helpers/map", ["exports", "@ember/component/helper", "@ember/utils", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _utils, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.map = map;
  function map([callback, array]) {
    if ((0, _utils.isEmpty)(callback)) {
      return [];
    }
    return (0, _asArray.default)(array).map(callback);
  }
  var _default = _exports.default = (0, _helper.helper)(map);
});
;define("ember-composable-helpers/helpers/next", ["exports", "@ember/component/helper", "ember-composable-helpers/utils/get-index", "@ember/utils", "@ember/array", "ember-composable-helpers/-private/get-value-array-and-use-deep-equal-from-params", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _getIndex, _utils, _array, _getValueArrayAndUseDeepEqualFromParams, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.next = next;
  function next(currentValue, maybeArray, useDeepEqual = false) {
    let array = (0, _asArray.default)(maybeArray);
    let currentIndex = (0, _getIndex.default)(array, currentValue, useDeepEqual);
    let lastIndex = array.length - 1;
    if ((0, _utils.isEmpty)(currentIndex)) {
      return;
    }
    return currentIndex === lastIndex ? currentValue : (0, _array.A)(array).objectAt(currentIndex + 1);
  }
  var _default = _exports.default = (0, _helper.helper)(function (params) {
    let {
      currentValue,
      array,
      useDeepEqual
    } = (0, _getValueArrayAndUseDeepEqualFromParams.default)(params);
    return next(currentValue, array, useDeepEqual);
  });
});
;define("ember-composable-helpers/helpers/noop", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.noop = noop;
  function noop() {
    return () => {};
  }
  var _default = _exports.default = (0, _helper.helper)(noop);
});
;define("ember-composable-helpers/helpers/object-at", ["exports", "@ember/component/helper", "@ember/array"], function (_exports, _helper, _array) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.objectAt = objectAt;
  function objectAt(index, array) {
    if (!(0, _array.isArray)(array)) {
      return undefined;
    }
    index = parseInt(index, 10);
    return (0, _array.A)(array).objectAt(index);
  }
  var _default = _exports.default = (0, _helper.helper)(function ([index, array]) {
    return objectAt(index, array);
  });
});
;define("ember-composable-helpers/helpers/optional", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.optional = optional;
  function optional([action]) {
    if (typeof action === 'function') {
      return action;
    }
    return i => i;
  }
  var _default = _exports.default = (0, _helper.helper)(optional);
});
;define("ember-composable-helpers/helpers/pick", ["exports", "@ember/component/helper", "@ember/object"], function (_exports, _helper, _object) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.pick = pick;
  function pick([path, action] /*, hash*/) {
    return function (event) {
      let value = (0, _object.get)(event, path);
      if (!action) {
        return value;
      }
      action(value);
    };
  }
  var _default = _exports.default = (0, _helper.helper)(pick);
});
;define("ember-composable-helpers/helpers/pipe-action", ["exports", "@ember/component/helper", "ember-composable-helpers/helpers/pipe", "ember-composable-helpers/-private/closure-action"], function (_exports, _helper, _pipe, _closureAction) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const closurePipe = _pipe.pipe;
  if (_closureAction.default) {
    closurePipe[_closureAction.default] = true;
  }
  var _default = _exports.default = (0, _helper.helper)(closurePipe);
});
;define("ember-composable-helpers/helpers/pipe", ["exports", "@ember/component/helper", "ember-composable-helpers/utils/is-promise"], function (_exports, _helper, _isPromise) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.invokeFunction = invokeFunction;
  _exports.pipe = pipe;
  function invokeFunction(acc, curr) {
    if ((0, _isPromise.default)(acc)) {
      return acc.then(curr);
    }
    return curr(acc);
  }
  function pipe(actions = []) {
    return function (...args) {
      return actions.reduce((acc, curr, idx) => {
        if (idx === 0) {
          return curr(...args);
        }
        return invokeFunction(acc, curr);
      }, undefined);
    };
  }
  var _default = _exports.default = (0, _helper.helper)(pipe);
});
;define("ember-composable-helpers/helpers/previous", ["exports", "@ember/component/helper", "ember-composable-helpers/utils/get-index", "@ember/utils", "@ember/array", "ember-composable-helpers/-private/get-value-array-and-use-deep-equal-from-params"], function (_exports, _helper, _getIndex, _utils, _array, _getValueArrayAndUseDeepEqualFromParams) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.previous = previous;
  function previous(currentValue, array, useDeepEqual = false) {
    let currentIndex = (0, _getIndex.default)(array, currentValue, useDeepEqual);
    if ((0, _utils.isEmpty)(currentIndex)) {
      return;
    }
    return currentIndex === 0 ? currentValue : (0, _array.A)(array).objectAt(currentIndex - 1);
  }
  var _default = _exports.default = (0, _helper.helper)(function (params) {
    let {
      currentValue,
      array,
      useDeepEqual
    } = (0, _getValueArrayAndUseDeepEqualFromParams.default)(params);
    return previous(currentValue, array, useDeepEqual);
  });
});
;define("ember-composable-helpers/helpers/queue", ["exports", "@ember/component/helper", "ember-composable-helpers/utils/is-promise"], function (_exports, _helper, _isPromise) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.queue = queue;
  function queue(actions = []) {
    return function (...args) {
      let invokeWithArgs = function (acc, curr) {
        if ((0, _isPromise.default)(acc)) {
          return acc.then(() => curr(...args));
        }
        return curr(...args);
      };
      return actions.reduce((acc, curr, idx) => {
        if (idx === 0) {
          return curr(...args);
        }
        return invokeWithArgs(acc, curr);
      }, undefined);
    };
  }
  var _default = _exports.default = (0, _helper.helper)(queue);
});
;define("ember-composable-helpers/helpers/range", ["exports", "@ember/component/helper", "@ember/utils", "ember-composable-helpers/utils/comparison"], function (_exports, _helper, _utils, _comparison) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.range = range;
  function range([min, max, isInclusive]) {
    isInclusive = (0, _utils.typeOf)(isInclusive) === 'boolean' ? isInclusive : false;
    let numbers = [];
    if (min < max) {
      let testFn = isInclusive ? _comparison.lte : _comparison.lt;
      for (let i = min; testFn(i, max); i++) {
        numbers.push(i);
      }
    }
    if (min > max) {
      let testFn = isInclusive ? _comparison.gte : _comparison.gt;
      for (let i = min; testFn(i, max); i--) {
        numbers.push(i);
      }
    }
    if (min === max && isInclusive) {
      numbers.push(max);
    }
    return numbers;
  }
  var _default = _exports.default = (0, _helper.helper)(range);
});
;define("ember-composable-helpers/helpers/reduce", ["exports", "@ember/component/helper", "@ember/utils", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _utils, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.reduce = reduce;
  function reduce([callback, initialValue, array]) {
    if ((0, _utils.isEmpty)(callback)) {
      return [];
    }
    return (0, _asArray.default)(array).reduce(callback, initialValue);
  }
  var _default = _exports.default = (0, _helper.helper)(reduce);
});
;define("ember-composable-helpers/helpers/reject-by", ["exports", "@ember/component/helper", "@ember/array", "@ember/utils", "@ember/object", "ember-composable-helpers/utils/is-equal", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _array, _utils, _object, _isEqual, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.rejectBy = rejectBy;
  function rejectBy([byPath, value, array]) {
    if (!(0, _array.isArray)(array) && (0, _array.isArray)(value)) {
      array = value;
      value = undefined;
    }
    array = (0, _asArray.default)(array);
    let filterFn;
    if ((0, _utils.isPresent)(value)) {
      if (typeof value === 'function') {
        filterFn = item => !value((0, _object.get)(item, byPath));
      } else {
        filterFn = item => !(0, _isEqual.default)((0, _object.get)(item, byPath), value);
      }
    } else {
      filterFn = item => !(0, _object.get)(item, byPath);
    }
    return array.filter(filterFn);
  }
  var _default = _exports.default = (0, _helper.helper)(rejectBy);
});
;define("ember-composable-helpers/helpers/repeat", ["exports", "@ember/component/helper", "@ember/utils"], function (_exports, _helper, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.repeat = repeat;
  function repeat([length, value]) {
    if ((0, _utils.typeOf)(length) !== 'number') {
      return [value];
    }
    return Array.apply(null, {
      length
    }).map(() => value); // eslint-disable-line
  }
  var _default = _exports.default = (0, _helper.helper)(repeat);
});
;define("ember-composable-helpers/helpers/reverse", ["exports", "@ember/component/helper", "@ember/array"], function (_exports, _helper, _array) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.reverse = reverse;
  function reverse([array]) {
    if (!(0, _array.isArray)(array)) {
      return [array];
    }
    return (0, _array.A)(array).slice(0).reverse();
  }
  var _default = _exports.default = (0, _helper.helper)(reverse);
});
;define("ember-composable-helpers/helpers/shuffle", ["exports", "@ember/component/helper", "@ember/array", "@ember/utils"], function (_exports, _helper, _array, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.shuffle = shuffle;
  function shuffle(array, randomizer) {
    array = array.slice(0);
    let count = array.length;
    let rand, temp;
    randomizer = (0, _utils.typeOf)(randomizer) === 'function' && randomizer || Math.random;
    while (count > 1) {
      rand = Math.floor(randomizer() * count--);
      temp = array[count];
      array[count] = array[rand];
      array[rand] = temp;
    }
    return array;
  }
  var _default = _exports.default = (0, _helper.helper)(function ([randomizer, array]) {
    if (array === undefined) {
      array = randomizer;
      randomizer = undefined;
    }
    if (!(0, _array.isArray)(array)) {
      return [array];
    }
    return shuffle(array, randomizer);
  });
});
;define("ember-composable-helpers/helpers/slice", ["exports", "@ember/component/helper", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.slice = slice;
  function slice([...args]) {
    let array = args.pop();
    array = (0, _asArray.default)(array);
    return array.slice(...args);
  }
  var _default = _exports.default = (0, _helper.helper)(slice);
});
;define("ember-composable-helpers/helpers/sort-by", ["exports", "@ember/object", "@ember/utils", "@ember/component/helper", "ember-composable-helpers/utils/as-array"], function (_exports, _object, _utils, _helper, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.sortBy = sortBy;
  const collator = new Intl.Collator(undefined, {
    sensitivity: 'base'
  });
  function normalizeToBoolean(val) {
    if (typeof val === 'boolean') {
      return val;
    }
    if (typeof val === 'number') {
      if (val > 0) {
        return false;
      } else if (val < 0) {
        return true;
      }
    }
    return val;
  }
  function safeValueForKey(ctx, key) {
    if (ctx === null || ctx === undefined) {
      return ctx;
    }
    return (0, _object.get)(ctx, key);
  }
  function sortDesc(key, a, b) {
    if ((0, _utils.isEmpty)(key)) {
      return 0;
    }
    const aValue = safeValueForKey(a, key);
    const bValue = safeValueForKey(b, key);
    const isANullable = typeof aValue == 'undefined' || aValue === null;
    const isBNullable = typeof bValue == 'undefined' || bValue === null;
    if (isANullable && isBNullable) {
      //both values are nullable
      return 0;
    }
    if (isBNullable) {
      // keep bValue last
      return -1;
    }
    if (isANullable) {
      // put aValue last
      return 1;
    }
    if (aValue.toLowerCase && bValue.toLowerCase) {
      return collator.compare(bValue, aValue);
    }
    if (aValue < bValue) {
      return 1;
    } else if (aValue > bValue) {
      return -1;
    }
    return 0;
  }
  function sortAsc(key, a, b) {
    if ((0, _utils.isEmpty)(key)) {
      return 0;
    }
    const aValue = safeValueForKey(a, key);
    const bValue = safeValueForKey(b, key);
    const isANullable = typeof aValue == 'undefined' || aValue === null;
    const isBNullable = typeof bValue == 'undefined' || bValue === null;
    if (isANullable && isBNullable) {
      //both values are nullable
      return 0;
    }
    if (isBNullable) {
      // keep bValue last
      return -1;
    }
    if (isANullable) {
      // put aValue last
      return 1;
    }
    if (aValue.toLowerCase && bValue.toLowerCase) {
      return collator.compare(aValue, bValue);
    }
    if (aValue < bValue) {
      return -1;
    } else if (aValue > bValue) {
      return 1;
    }
    return 0;
  }
  class SortBy {
    constructor(...args) {
      let [array] = args;
      if (typeof array.toArray === "function") {
        array = array.toArray();
      }
      this.array = [...array];
    }
    comparator(key) {
      return typeof key === 'function' ? key : this.defaultSort(key);
    }
    defaultSort(sortKey) {
      let func = sortAsc;
      if (sortKey.match(':desc')) {
        func = sortDesc;
      }
      return (a, b) => func(sortKey.replace(/:desc|:asc/, ''), a, b);
    }
  }

  /**
   * best O(n); worst O(n^2)
   * If we feel like swapping with something more performant like QuickSort or MergeSort
   * then it should be easy
   *
   * @class BubbleSort
   * @extends SortBy
   */
  class BubbleSort extends SortBy {
    perform(keys = []) {
      let swapped = false;
      let compFuncs = keys.map(key => this.comparator(key));
      let compFunc = (a, b) => {
        for (let i = 0; i < compFuncs.length; i += 1) {
          let result = compFuncs[i](a, b);
          if (result === 0) {
            continue;
          }
          return result;
        }
        return 0;
      };
      for (let i = 1; i < this.array.length; i += 1) {
        for (let j = 0; j < this.array.length - i; j += 1) {
          let shouldSwap = normalizeToBoolean(compFunc(this.array[j + 1], this.array[j]));
          if (shouldSwap) {
            [this.array[j], this.array[j + 1]] = [this.array[j + 1], this.array[j]];
            swapped = true;
          }
        }

        // no need to continue sort if not swapped in any inner iteration
        if (!swapped) {
          return this.array;
        }
      }
    }
  }
  function sortBy(params) {
    // slice params to avoid mutating the provided params
    let sortParams = params.slice();
    let array = (0, _asArray.default)(sortParams.pop());
    let sortKeys = sortParams;
    if (!array || !sortKeys || sortKeys.length === 0) {
      return [];
    }
    if (sortKeys.length === 1 && Array.isArray(sortKeys[0])) {
      sortKeys = sortKeys[0];
    }
    const sortKlass = new BubbleSort(array);
    sortKlass.perform(sortKeys);
    return sortKlass.array;
  }
  var _default = _exports.default = (0, _helper.helper)(sortBy);
});
;define("ember-composable-helpers/helpers/take", ["exports", "@ember/component/helper", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.take = take;
  function take([takeAmount, array]) {
    return (0, _asArray.default)(array).slice(0, takeAmount);
  }
  var _default = _exports.default = (0, _helper.helper)(take);
});
;define("ember-composable-helpers/helpers/toggle-action", ["exports", "@ember/component/helper", "ember-composable-helpers/helpers/toggle", "ember-composable-helpers/-private/closure-action"], function (_exports, _helper, _toggle, _closureAction) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const closureToggle = _toggle.toggle;
  if (_closureAction.default) {
    closureToggle[_closureAction.default] = true;
  }
  var _default = _exports.default = (0, _helper.helper)(closureToggle);
});
;define("ember-composable-helpers/helpers/toggle", ["exports", "@ember/component/helper", "@ember/object", "@ember/utils"], function (_exports, _helper, _object, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.toggle = toggle;
  function nextIndex(length, currentIdx) {
    if (currentIdx === -1 || currentIdx + 1 === length) {
      return 0;
    }
    return currentIdx + 1;
  }
  function toggle([prop, obj, ...values]) {
    return function () {
      let currentValue = (0, _object.get)(obj, prop);
      if ((0, _utils.isPresent)(values)) {
        let currentIdx = values.indexOf(currentValue);
        let nextIdx = nextIndex(values.length, currentIdx);
        return (0, _object.set)(obj, prop, values[nextIdx]);
      }
      return (0, _object.set)(obj, prop, !currentValue);
    };
  }
  var _default = _exports.default = (0, _helper.helper)(toggle);
});
;define("ember-composable-helpers/helpers/union", ["exports", "@ember/component/helper", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.union = union;
  function union([...arrays]) {
    let items = [].concat(...arrays);
    return items.filter((value, index, array) => (0, _asArray.default)(array).indexOf(value) === index);
  }
  var _default = _exports.default = (0, _helper.helper)(union);
});
;define("ember-composable-helpers/helpers/values", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.values = values;
  function values([object]) {
    if (!object) {
      return object;
    }
    return Object.values(object);
  }
  var _default = _exports.default = (0, _helper.helper)(values);
});
;define("ember-composable-helpers/helpers/without", ["exports", "@ember/component/helper", "@ember/array"], function (_exports, _helper, _array) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.without = without;
  function contains(needle, haystack) {
    return (0, _array.A)(haystack).includes(needle);
  }
  function without(needle, haystack) {
    if (!(0, _array.isArray)(haystack)) {
      return false;
    }
    if ((0, _array.isArray)(needle) && needle.length) {
      return haystack.reduce((acc, val) => {
        return contains(val, needle) ? acc : acc.concat(val);
      }, []);
    }
    return (0, _array.A)(haystack).without(needle);
  }
  var _default = _exports.default = (0, _helper.helper)(function ([needle, haystack]) {
    return without(needle, haystack);
  });
});
;define("ember-composable-helpers/index", ["exports", "ember-composable-helpers/helpers/append", "ember-composable-helpers/helpers/chunk", "ember-composable-helpers/helpers/compact", "ember-composable-helpers/helpers/compute", "ember-composable-helpers/helpers/dec", "ember-composable-helpers/helpers/drop", "ember-composable-helpers/helpers/filter-by", "ember-composable-helpers/helpers/filter", "ember-composable-helpers/helpers/find-by", "ember-composable-helpers/helpers/flatten", "ember-composable-helpers/helpers/group-by", "ember-composable-helpers/helpers/has-next", "ember-composable-helpers/helpers/has-previous", "ember-composable-helpers/helpers/inc", "ember-composable-helpers/helpers/intersect", "ember-composable-helpers/helpers/invoke", "ember-composable-helpers/helpers/join", "ember-composable-helpers/helpers/map-by", "ember-composable-helpers/helpers/map", "ember-composable-helpers/helpers/next", "ember-composable-helpers/helpers/object-at", "ember-composable-helpers/helpers/optional", "ember-composable-helpers/helpers/pipe-action", "ember-composable-helpers/helpers/pipe", "ember-composable-helpers/helpers/previous", "ember-composable-helpers/helpers/queue", "ember-composable-helpers/helpers/range", "ember-composable-helpers/helpers/reduce", "ember-composable-helpers/helpers/reject-by", "ember-composable-helpers/helpers/repeat", "ember-composable-helpers/helpers/reverse", "ember-composable-helpers/helpers/shuffle", "ember-composable-helpers/helpers/slice", "ember-composable-helpers/helpers/sort-by", "ember-composable-helpers/helpers/take", "ember-composable-helpers/helpers/toggle-action", "ember-composable-helpers/helpers/toggle", "ember-composable-helpers/helpers/union", "ember-composable-helpers/helpers/without"], function (_exports, _append, _chunk, _compact, _compute, _dec, _drop, _filterBy, _filter, _findBy, _flatten, _groupBy, _hasNext, _hasPrevious, _inc, _intersect, _invoke, _join, _mapBy, _map, _next, _objectAt, _optional, _pipeAction, _pipe, _previous, _queue, _range, _reduce, _rejectBy, _repeat, _reverse, _shuffle, _slice, _sortBy, _take, _toggleAction, _toggle, _union, _without) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "AppendHelper", {
    enumerable: true,
    get: function () {
      return _append.default;
    }
  });
  Object.defineProperty(_exports, "ChunkHelper", {
    enumerable: true,
    get: function () {
      return _chunk.default;
    }
  });
  Object.defineProperty(_exports, "CompactHelper", {
    enumerable: true,
    get: function () {
      return _compact.default;
    }
  });
  Object.defineProperty(_exports, "ComputeHelper", {
    enumerable: true,
    get: function () {
      return _compute.default;
    }
  });
  Object.defineProperty(_exports, "DecHelper", {
    enumerable: true,
    get: function () {
      return _dec.default;
    }
  });
  Object.defineProperty(_exports, "DropHelper", {
    enumerable: true,
    get: function () {
      return _drop.default;
    }
  });
  Object.defineProperty(_exports, "FilterByHelper", {
    enumerable: true,
    get: function () {
      return _filterBy.default;
    }
  });
  Object.defineProperty(_exports, "FilterHelper", {
    enumerable: true,
    get: function () {
      return _filter.default;
    }
  });
  Object.defineProperty(_exports, "FindByHelper", {
    enumerable: true,
    get: function () {
      return _findBy.default;
    }
  });
  Object.defineProperty(_exports, "FlattenHelper", {
    enumerable: true,
    get: function () {
      return _flatten.default;
    }
  });
  Object.defineProperty(_exports, "GroupByHelper", {
    enumerable: true,
    get: function () {
      return _groupBy.default;
    }
  });
  Object.defineProperty(_exports, "HasNextHelper", {
    enumerable: true,
    get: function () {
      return _hasNext.default;
    }
  });
  Object.defineProperty(_exports, "HasPreviousHelper", {
    enumerable: true,
    get: function () {
      return _hasPrevious.default;
    }
  });
  Object.defineProperty(_exports, "IncHelper", {
    enumerable: true,
    get: function () {
      return _inc.default;
    }
  });
  Object.defineProperty(_exports, "IntersectHelper", {
    enumerable: true,
    get: function () {
      return _intersect.default;
    }
  });
  Object.defineProperty(_exports, "InvokeHelper", {
    enumerable: true,
    get: function () {
      return _invoke.default;
    }
  });
  Object.defineProperty(_exports, "JoinHelper", {
    enumerable: true,
    get: function () {
      return _join.default;
    }
  });
  Object.defineProperty(_exports, "MapByHelper", {
    enumerable: true,
    get: function () {
      return _mapBy.default;
    }
  });
  Object.defineProperty(_exports, "MapHelper", {
    enumerable: true,
    get: function () {
      return _map.default;
    }
  });
  Object.defineProperty(_exports, "NextHelper", {
    enumerable: true,
    get: function () {
      return _next.default;
    }
  });
  Object.defineProperty(_exports, "ObjectAtHelper", {
    enumerable: true,
    get: function () {
      return _objectAt.default;
    }
  });
  Object.defineProperty(_exports, "OptionalHelper", {
    enumerable: true,
    get: function () {
      return _optional.default;
    }
  });
  Object.defineProperty(_exports, "PipeActionHelper", {
    enumerable: true,
    get: function () {
      return _pipeAction.default;
    }
  });
  Object.defineProperty(_exports, "PipeHelper", {
    enumerable: true,
    get: function () {
      return _pipe.default;
    }
  });
  Object.defineProperty(_exports, "PreviousHelper", {
    enumerable: true,
    get: function () {
      return _previous.default;
    }
  });
  Object.defineProperty(_exports, "QueueHelper", {
    enumerable: true,
    get: function () {
      return _queue.default;
    }
  });
  Object.defineProperty(_exports, "RangeHelper", {
    enumerable: true,
    get: function () {
      return _range.default;
    }
  });
  Object.defineProperty(_exports, "ReduceHelper", {
    enumerable: true,
    get: function () {
      return _reduce.default;
    }
  });
  Object.defineProperty(_exports, "RejectByHelper", {
    enumerable: true,
    get: function () {
      return _rejectBy.default;
    }
  });
  Object.defineProperty(_exports, "RepeatHelper", {
    enumerable: true,
    get: function () {
      return _repeat.default;
    }
  });
  Object.defineProperty(_exports, "ReverseHelper", {
    enumerable: true,
    get: function () {
      return _reverse.default;
    }
  });
  Object.defineProperty(_exports, "ShuffleHelper", {
    enumerable: true,
    get: function () {
      return _shuffle.default;
    }
  });
  Object.defineProperty(_exports, "SliceHelper", {
    enumerable: true,
    get: function () {
      return _slice.default;
    }
  });
  Object.defineProperty(_exports, "SortByHelper", {
    enumerable: true,
    get: function () {
      return _sortBy.default;
    }
  });
  Object.defineProperty(_exports, "TakeHelper", {
    enumerable: true,
    get: function () {
      return _take.default;
    }
  });
  Object.defineProperty(_exports, "ToggleActionHelper", {
    enumerable: true,
    get: function () {
      return _toggleAction.default;
    }
  });
  Object.defineProperty(_exports, "ToggleHelper", {
    enumerable: true,
    get: function () {
      return _toggle.default;
    }
  });
  Object.defineProperty(_exports, "UnionHelper", {
    enumerable: true,
    get: function () {
      return _union.default;
    }
  });
  Object.defineProperty(_exports, "WithoutHelper", {
    enumerable: true,
    get: function () {
      return _without.default;
    }
  });
});
;define("ember-composable-helpers/utils/as-array", ["exports", "@ember/array", "@ember/object"], function (_exports, _array, _object) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = asArray;
  function isIterable(value) {
    return Symbol.iterator in Object(value);
  }

  // from https://github.com/flexyford/ember-power-select/blob/78a5430c1ac89daf315d0801fd5201e444e82434/addon/components/power-select.ts
  function isArrayable(thing) {
    return typeof thing.toArray === 'function';
  }
  function isPromiseLike(thing) {
    return typeof thing.then === 'function';
  }
  function isPromiseProxyLike(thing) {
    return isPromiseLike(thing) && Object.hasOwnProperty.call(thing, 'content');
  }
  function toExtendable(array) {
    if (!Object.isExtensible(array)) {
      return Array.from(array);
    } else {
      return array;
    }
  }
  function asArray(maybeArray) {
    return toExtendable(_asArray(maybeArray));
  }
  function _asArray(maybeArray) {
    if (typeof maybeArray === 'number') {
      throw new Error('Numbers not supported as arrays [ember-composable-helpers]');
    }
    if (typeof maybeArray === 'string') {
      return maybeArray.split('');
    }
    // for perf-reasons falling back to e-array, instead of using it first
    if (Array.isArray(maybeArray)) {
      return maybeArray;
    } else if ((0, _array.isArray)(maybeArray)) {
      return maybeArray;
    } else if (typeof maybeArray === 'object' && maybeArray === null) {
      return [];
    } else if (typeof maybeArray === 'undefined') {
      return [];
    } else if (maybeArray instanceof Set) {
      return Array.from(maybeArray.values());
    } else if (maybeArray instanceof Map) {
      return Array.from(maybeArray.values());
    } else if (maybeArray instanceof WeakMap) {
      throw new Error('WeakMaps is not supported as arrays [ember-composable-helpers]');
    } else if (maybeArray instanceof WeakSet) {
      throw new Error('WeakSets is not supported as arrays [ember-composable-helpers]');
    }
    if (typeof maybeArray === 'object') {
      if (isPromiseProxyLike(maybeArray)) {
        const content = (0, _object.get)(maybeArray, 'content');
        if (typeof content !== 'object' || content === null) {
          throw new Error('Unknown content type in array-like object [ember-composable-helpers]');
        }
        if (isArrayable(content)) {
          return content.toArray();
        } else {
          return _asArray(content);
        }
      }
      if (isPromiseLike(maybeArray)) {
        throw new Error('Promise-like objects is not supported as arrays [ember-composable-helpers]');
      }
      if (isArrayable(maybeArray)) {
        return maybeArray.toArray();
      }
      if (maybeArray instanceof _object.default) {
        throw new Error('EmberObjects is not supported as arrays [ember-composable-helpers]');
      }
      return Array.from(Object.values(maybeArray));
    }
    if (!maybeArray) {
      return [];
    }
    if (!isIterable(maybeArray)) {
      throw new Error('Argument, passed as array is not iterable [ember-composable-helpers]');
    }
    return maybeArray;
  }
});
;define("ember-composable-helpers/utils/comparison", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.gt = gt;
  _exports.gte = gte;
  _exports.lt = lt;
  _exports.lte = lte;
  function lte(a, b) {
    return a <= b;
  }
  function lt(a, b) {
    return a < b;
  }
  function gte(a, b) {
    return a >= b;
  }
  function gt(a, b) {
    return a > b;
  }
});
;define("ember-composable-helpers/utils/get-index", ["exports", "@ember/array", "ember-composable-helpers/utils/is-equal"], function (_exports, _array, _isEqual) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = getIndex;
  function getIndex(array, currentValue, useDeepEqual) {
    let needle = currentValue;
    if (useDeepEqual) {
      needle = (0, _array.A)(array).find(object => {
        return (0, _isEqual.default)(object, currentValue, useDeepEqual);
      });
    }
    let index = (0, _array.A)(array).indexOf(needle);
    return index >= 0 ? index : null;
  }
});
;define("ember-composable-helpers/utils/is-equal", ["exports", "@ember/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isEqual;
  function isEqual(firstValue, secondValue, useDeepEqual = false) {
    if (useDeepEqual) {
      return JSON.stringify(firstValue) === JSON.stringify(secondValue);
    } else {
      return (0, _utils.isEqual)(firstValue, secondValue) || (0, _utils.isEqual)(secondValue, firstValue);
    }
  }
});
;define("ember-composable-helpers/utils/is-object", ["exports", "@ember/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isObject;
  function isObject(val) {
    return (0, _utils.typeOf)(val) === 'object' || (0, _utils.typeOf)(val) === 'instance';
  }
});
;define("ember-composable-helpers/utils/is-promise", ["exports", "@ember/utils", "ember-composable-helpers/utils/is-object"], function (_exports, _utils, _isObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isPromise;
  function isPromiseLike(obj = {}) {
    return (0, _utils.typeOf)(obj.then) === 'function' && (0, _utils.typeOf)(obj.catch) === 'function';
  }
  function isPromise(obj) {
    return (0, _isObject.default)(obj) && isPromiseLike(obj);
  }
});
;define("ember-concurrency/-private/async-arrow-runtime", ["exports", "ember-concurrency/-private/task-factory"], function (_exports, _taskFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.buildTask = buildTask;
  /**
   * This builder function is called by the transpiled code from
   * `task(async () => {})`. See lib/babel-plugin-transform-ember-concurrency-async-tasks.js
   *
   * @private
   */
  function buildTask(contextFn, options, taskName, bufferPolicyName) {
    let optionsWithBufferPolicy = options;
    if (bufferPolicyName) {
      optionsWithBufferPolicy = Object.assign({}, optionsWithBufferPolicy);
      optionsWithBufferPolicy[bufferPolicyName] = true;
    }
    const result = contextFn();
    const taskFactory = new _taskFactory.TaskFactory(taskName || '<unknown>', result.generator, optionsWithBufferPolicy);
    return taskFactory.createTask(result.context);
  }
});
;define("ember-concurrency/-private/cancelable-promise-helpers", ["exports", "@ember/debug", "rsvp", "ember-concurrency/-private/task-instance", "ember-concurrency/-private/external/yieldables"], function (_exports, _debug, _rsvp, _taskInstance, _yieldables) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.race = _exports.hashSettled = _exports.hash = _exports.allSettled = _exports.all = void 0;
  /**
   * A cancelation-aware variant of [Promise.all](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all).
   * The normal version of a `Promise.all` just returns a regular, uncancelable
   * Promise. The `ember-concurrency` variant of `all()` has the following
   * additional behavior:
   *
   * - if the task that `yield`ed `all()` is canceled, any of the
   *   {@linkcode TaskInstance}s passed in to `all` will be canceled
   * - if any of the {@linkcode TaskInstance}s (or regular promises) passed in reject (or
   *   are canceled), all of the other unfinished `TaskInstance`s will
   *   be automatically canceled.
   *
   * [Check out the "Awaiting Multiple Child Tasks example"](/docs/examples/joining-tasks)
   */
  const all = _exports.all = taskAwareVariantOf(_rsvp.default.Promise, 'all', identity);

  /**
   * A cancelation-aware variant of [RSVP.allSettled](https://api.emberjs.com/ember/release/functions/rsvp/allSettled).
   * The normal version of a `RSVP.allSettled` just returns a regular, uncancelable
   * Promise. The `ember-concurrency` variant of `allSettled()` has the following
   * additional behavior:
   *
   * - if the task that `yield`ed `allSettled()` is canceled, any of the
   *   {@linkcode TaskInstance}s passed in to `allSettled` will be canceled
   */
  const allSettled = _exports.allSettled = taskAwareVariantOf(_rsvp.default, 'allSettled', identity);

  /**
   * A cancelation-aware variant of [Promise.race](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race).
   * The normal version of a `Promise.race` just returns a regular, uncancelable
   * Promise. The `ember-concurrency` variant of `race()` has the following
   * additional behavior:
   *
   * - if the task that `yield`ed `race()` is canceled, any of the
   *   {@linkcode TaskInstance}s passed in to `race` will be canceled
   * - once any of the tasks/promises passed in complete (either success, failure,
   *   or cancelation), any of the {@linkcode TaskInstance}s passed in will be canceled
   *
   * [Check out the "Awaiting Multiple Child Tasks example"](/docs/examples/joining-tasks)
   */
  const race = _exports.race = taskAwareVariantOf(_rsvp.Promise, 'race', identity);

  /**
   * A cancelation-aware variant of [RSVP.hash](https://api.emberjs.com/ember/release/functions/rsvp/hash).
   * The normal version of a `RSVP.hash` just returns a regular, uncancelable
   * Promise. The `ember-concurrency` variant of `hash()` has the following
   * additional behavior:
   *
   * - if the task that `yield`ed `hash()` is canceled, any of the
   *   {@linkcode TaskInstance}s passed in to `hash` will be canceled
   * - if any of the items rejects/cancels, all other cancelable items
   *   (e.g. {@linkcode TaskInstance}s) will be canceled
   */
  const hash = _exports.hash = taskAwareVariantOf(_rsvp.default, 'hash', getValues);

  /**
   * A cancelation-aware variant of [RSVP.hashSettled](https://api.emberjs.com/ember/release/functions/rsvp/hashSettled).
   * The normal version of a `RSVP.hashSettled` just returns a regular, uncancelable
   * Promise. The `ember-concurrency` variant of `hashSettled()` has the following
   * additional behavior:
   *
   * - if the task that `yield`ed `hashSettled()` is canceled, any of the
   *   {@linkcode TaskInstance}s passed in to `hashSettled` will be canceled
   */
  const hashSettled = _exports.hashSettled = taskAwareVariantOf(_rsvp.default, 'hashSettled', getValues);
  function identity(obj) {
    return obj;
  }
  function getValues(obj) {
    return Object.keys(obj).map(k => obj[k]);
  }
  function castForPromiseHelper(castable) {
    if (castable) {
      if (castable instanceof _taskInstance.TaskInstance) {
        // Mark TaskInstances, including those that performed synchronously and
        // have finished already, as having their errors handled, as if they had
        // been then'd, which this is emulating.
        castable.executor.asyncErrorsHandled = true;
      } else if (castable instanceof _yieldables.Yieldable) {
        // Cast to promise
        return castable._toPromise();
      }
    }
    return castable;
  }
  function castAwaitables(arrOrHash, callback) {
    if (Array.isArray(arrOrHash)) {
      return arrOrHash.map(callback);
    } else if (typeof arrOrHash === 'object' && arrOrHash !== null) {
      let obj = {};
      Object.keys(arrOrHash).forEach(key => {
        obj[key] = callback(arrOrHash[key]);
      });
      return obj;
    } else {
      // :shruggie:
      return arrOrHash;
    }
  }
  function taskAwareVariantOf(obj, method, getItems) {
    return function (awaitable) {
      let awaitables = castAwaitables(awaitable, castForPromiseHelper);
      let items = getItems(awaitables);
      (true && !(Array.isArray(items)) && (0, _debug.assert)(`'${method}' expects an array.`, Array.isArray(items)));
      let defer = _rsvp.default.defer();
      obj[method](awaitables).then(defer.resolve, defer.reject);
      let hasCancelled = false;
      let cancelAll = () => {
        if (hasCancelled) {
          return;
        }
        hasCancelled = true;
        items.forEach(it => {
          if (it) {
            if (it instanceof _taskInstance.TaskInstance) {
              it.cancel();
            } else if (typeof it[_yieldables.cancelableSymbol] === 'function') {
              it[_yieldables.cancelableSymbol]();
            }
          }
        });
      };
      let promise = defer.promise.finally(cancelAll);
      promise[_yieldables.cancelableSymbol] = cancelAll;
      return promise;
    };
  }
});
;define("ember-concurrency/-private/ember-environment", ["exports", "ember", "rsvp", "ember-concurrency/-private/external/environment", "@ember/debug", "@ember/runloop"], function (_exports, _ember, _rsvp, _environment, _debug, _runloop) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EmberEnvironment = _exports.EMBER_ENVIRONMENT = void 0;
  class EmberEnvironment extends _environment.Environment {
    assert(...args) {
      (true && !(false) && (0, _debug.assert)(...args));
    }
    async(callback) {
      (0, _runloop.join)(() => (0, _runloop.schedule)('actions', callback));
    }
    reportUncaughtRejection(error) {
      (0, _runloop.next)(null, function () {
        if (_ember.default.onerror) {
          _ember.default.onerror(error);
        } else {
          throw error;
        }
      });
    }
    defer() {
      return (0, _rsvp.defer)();
    }
    globalDebuggingEnabled() {
      return _ember.default.ENV.DEBUG_TASKS;
    }
  }
  _exports.EmberEnvironment = EmberEnvironment;
  const EMBER_ENVIRONMENT = _exports.EMBER_ENVIRONMENT = new EmberEnvironment();
});
;define("ember-concurrency/-private/external/environment", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Environment = _exports.DEFAULT_ENVIRONMENT = void 0;
  class Environment {
    assert() {}
    async(callback) {
      Promise.resolve().then(callback);
    }
    reportUncaughtRejection() {
      this.async(error => {
        throw error;
      });
    }
    defer() {
      let deferable = {
        promise: null,
        resolve: null,
        reject: null
      };
      let promise = new Promise((resolve, reject) => {
        deferable.resolve = resolve;
        deferable.reject = reject;
      });
      deferable.promise = promise;
      return deferable;
    }
    globalDebuggingEnabled() {
      return false;
    }
  }
  _exports.Environment = Environment;
  const DEFAULT_ENVIRONMENT = _exports.DEFAULT_ENVIRONMENT = new Environment();
});
;define("ember-concurrency/-private/external/generator-state", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GeneratorStepResult = _exports.GeneratorState = void 0;
  class GeneratorStepResult {
    constructor(value, done, errored) {
      this.value = value;
      this.done = done;
      this.errored = errored;
    }
  }
  _exports.GeneratorStepResult = GeneratorStepResult;
  class GeneratorState {
    constructor(generatorFactory) {
      this.done = false;
      this.generatorFactory = generatorFactory;
      this.iterator = null;
    }
    step(resolvedValue, iteratorMethod) {
      try {
        let iterator = this.getIterator();
        let {
          value,
          done
        } = iterator[iteratorMethod](resolvedValue);
        if (done) {
          return this.finalize(value, false);
        } else {
          return new GeneratorStepResult(value, false, false);
        }
      } catch (e) {
        return this.finalize(e, true);
      }
    }
    getIterator() {
      if (!this.iterator && !this.done) {
        this.iterator = this.generatorFactory();
      }
      return this.iterator;
    }
    finalize(value, errored) {
      this.done = true;
      this.iterator = null;
      return new GeneratorStepResult(value, true, errored);
    }
  }
  _exports.GeneratorState = GeneratorState;
});
;define("ember-concurrency/-private/external/scheduler/policies/bounded-policy", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class BoundedPolicy {
    constructor(maxConcurrency) {
      this.maxConcurrency = maxConcurrency || 1;
    }
  }
  var _default = _exports.default = BoundedPolicy;
});
;define("ember-concurrency/-private/external/scheduler/policies/drop-policy", ["exports", "ember-concurrency/-private/external/scheduler/policies/bounded-policy", "ember-concurrency/-private/external/scheduler/policies/execution-states"], function (_exports, _boundedPolicy, _executionStates) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const CANCELLED = (0, _executionStates.makeCancelState)(`it belongs to a 'drop' Task that was already running`);
  class DropReducer {
    constructor(remainingSlots) {
      this.remainingSlots = remainingSlots;
    }
    step() {
      if (this.remainingSlots > 0) {
        this.remainingSlots--;
        return _executionStates.STARTED;
      }
      return CANCELLED;
    }
  }
  class DropPolicy extends _boundedPolicy.default {
    makeReducer() {
      return new DropReducer(this.maxConcurrency);
    }
  }
  var _default = _exports.default = DropPolicy;
});
;define("ember-concurrency/-private/external/scheduler/policies/enqueued-policy", ["exports", "ember-concurrency/-private/external/scheduler/policies/bounded-policy", "ember-concurrency/-private/external/scheduler/policies/execution-states"], function (_exports, _boundedPolicy, _executionStates) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class EnqueuedReducer {
    constructor(remainingSlots) {
      this.remainingSlots = remainingSlots;
    }
    step() {
      if (this.remainingSlots > 0) {
        this.remainingSlots--;
        return _executionStates.STARTED;
      } else {
        return _executionStates.QUEUED;
      }
    }
  }
  class EnqueuedPolicy extends _boundedPolicy.default {
    makeReducer() {
      return new EnqueuedReducer(this.maxConcurrency);
    }
  }
  var _default = _exports.default = EnqueuedPolicy;
});
;define("ember-concurrency/-private/external/scheduler/policies/execution-states", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.makeCancelState = _exports.TYPE_STARTED = _exports.TYPE_QUEUED = _exports.TYPE_CANCELLED = _exports.STARTED = _exports.QUEUED = void 0;
  const TYPE_CANCELLED = _exports.TYPE_CANCELLED = 'CANCELLED';
  const TYPE_STARTED = _exports.TYPE_STARTED = 'STARTED';
  const TYPE_QUEUED = _exports.TYPE_QUEUED = 'QUEUED';
  const STARTED = _exports.STARTED = {
    type: TYPE_STARTED
  };
  const QUEUED = _exports.QUEUED = {
    type: TYPE_QUEUED
  };
  const makeCancelState = reason => ({
    type: TYPE_CANCELLED,
    reason
  });
  _exports.makeCancelState = makeCancelState;
});
;define("ember-concurrency/-private/external/scheduler/policies/keep-latest-policy", ["exports", "ember-concurrency/-private/external/scheduler/policies/bounded-policy", "ember-concurrency/-private/external/scheduler/policies/execution-states"], function (_exports, _boundedPolicy, _executionStates) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const CANCELLED = (0, _executionStates.makeCancelState)(`it belongs to a 'keepLatest' Task that was already running`);

  // Given:
  // - started tasks: [a,b,_]
  // - queued tasks:  [c,d,e,f]
  // KeepLatest will cancel all but the last queued task instance, producing:
  // - started tasks: [a,b,c]
  // - queued tasks: [f]

  // TODO: perhaps we should expose another config for the number to keep enqueued.
  //       this would also make sense for enqueued, e.g. perform a max of maxConcurrency
  //       concurrent task instances, but after a number of queued instances has been
  //       reached, they should be cancelled.

  class KeepLatestReducer {
    constructor(remainingSlots, numToCancel) {
      this.remainingSlots = remainingSlots;
      this.numToCancel = numToCancel;
    }
    step() {
      if (this.remainingSlots > 0) {
        this.remainingSlots--;
        return _executionStates.STARTED;
      } else {
        if (this.numToCancel > 0) {
          this.numToCancel--;
          return CANCELLED;
        } else {
          return _executionStates.QUEUED;
        }
      }
    }
  }
  class KeepLatestPolicy extends _boundedPolicy.default {
    makeReducer(numRunning, numQueued) {
      let maxEnqueued = 1;
      let totalRunning = numRunning + numQueued;
      return new KeepLatestReducer(this.maxConcurrency, totalRunning - this.maxConcurrency - maxEnqueued);
    }
  }
  var _default = _exports.default = KeepLatestPolicy;
});
;define("ember-concurrency/-private/external/scheduler/policies/restartable-policy", ["exports", "ember-concurrency/-private/external/scheduler/policies/bounded-policy", "ember-concurrency/-private/external/scheduler/policies/execution-states"], function (_exports, _boundedPolicy, _executionStates) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const CANCELLED = (0, _executionStates.makeCancelState)(`it belongs to a 'restartable' Task that was .perform()ed again`);
  class RestartableReducer {
    constructor(numToCancel) {
      this.numToCancel = numToCancel;
    }
    step() {
      if (this.numToCancel > 0) {
        this.numToCancel--;
        return CANCELLED;
      } else {
        return _executionStates.STARTED;
      }
    }
  }
  class RestartablePolicy extends _boundedPolicy.default {
    makeReducer(numRunning, numQueued) {
      return new RestartableReducer(numRunning + numQueued - this.maxConcurrency);
    }
  }
  var _default = _exports.default = RestartablePolicy;
});
;define("ember-concurrency/-private/external/scheduler/policies/unbounded-policy", ["exports", "ember-concurrency/-private/external/scheduler/policies/execution-states"], function (_exports, _executionStates) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class UnboundedReducer {
    step() {
      return _executionStates.STARTED;
    }
  }
  const SINGLETON_REDUCER = new UnboundedReducer();
  class UnboundedPolicy {
    makeReducer() {
      return SINGLETON_REDUCER;
    }
  }
  var _default = _exports.default = UnboundedPolicy;
});
;define("ember-concurrency/-private/external/scheduler/refresh", ["exports", "ember-concurrency/-private/external/scheduler/policies/execution-states"], function (_exports, _executionStates) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const LAST_APPLIED_TAGS = new Map();
  class Refresh {
    constructor(schedulerPolicy, stateTracker, taskInstances) {
      this.stateTracker = stateTracker;
      this.schedulerPolicy = schedulerPolicy;
      this.initialTaskInstances = taskInstances;
      this.startingInstances = [];
    }
    process() {
      let [taskInstances, numRunning, numQueued] = this.filterFinishedTaskInstances();
      let reducer = this.schedulerPolicy.makeReducer(numRunning, numQueued);
      let finalTaskInstances = taskInstances.filter(taskInstance => {
        return this.setTaskInstanceExecutionState(taskInstance, reducer.step());
      });
      this.stateTracker.computeFinalStates(state => this.applyState(state));
      this.startingInstances.forEach(taskInstance => taskInstance.start());
      return finalTaskInstances;
    }
    filterFinishedTaskInstances() {
      let numRunning = 0,
        numQueued = 0;
      let taskInstances = this.initialTaskInstances.filter(taskInstance => {
        let taskState = this.stateTracker.stateFor(taskInstance.task);
        let executorState = taskInstance.executor.state;
        if (executorState.isFinished) {
          taskState.onCompletion(taskInstance);
          return false;
        }
        if (executorState.hasStarted) {
          numRunning += 1;
        } else {
          numQueued += 1;
        }
        return true;
      });
      return [taskInstances, numRunning, numQueued];
    }
    setTaskInstanceExecutionState(taskInstance, desiredState) {
      let taskState = this.stateTracker.stateFor(taskInstance.task);
      if (!taskInstance.executor.counted) {
        taskInstance.executor.counted = true;
        taskState.onPerformed(taskInstance);
      }
      switch (desiredState.type) {
        case _executionStates.TYPE_CANCELLED:
          // this will cause a follow up flush which will detect and recompute cancellation state
          taskInstance.cancel(desiredState.reason);
          return false;
        case _executionStates.TYPE_STARTED:
          if (!taskInstance.executor.state.hasStarted) {
            this.startingInstances.push(taskInstance);
            taskState.onStart(taskInstance);
          }
          taskState.onRunning(taskInstance);
          return true;
        case _executionStates.TYPE_QUEUED:
          taskState.onQueued(taskInstance);
          // TODO: assert taskInstance hasn't started?
          // Or perhaps this can be a way to pause a task?
          return true;
      }
    }
    applyState(state) {
      let {
        taskable
      } = state;
      if (!taskable.onState) {
        return;
      }
      const {
        guid
      } = taskable;
      if (LAST_APPLIED_TAGS.has(guid) && state.tag < LAST_APPLIED_TAGS.get(guid)) {
        return;
      }
      let props = Object.assign({
        numRunning: state.numRunning,
        numQueued: state.numQueued,
        numPerformedInc: state.numPerformedInc
      }, state.attrs);
      taskable.onState(props, taskable);
      LAST_APPLIED_TAGS.set(guid, state.tag);
    }
  }
  var _default = _exports.default = Refresh;
});
;define("ember-concurrency/-private/external/scheduler/scheduler", ["exports", "ember-concurrency/-private/external/scheduler/refresh", "ember-concurrency/-private/external/scheduler/state-tracker/state-tracker", "ember-concurrency/-private/external/scheduler/state-tracker/null-state-tracker"], function (_exports, _refresh, _stateTracker, _nullStateTracker) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Scheduler base class

  // When a Task is performed, it creates an unstarted TaskInstance and
  // passes it to the Scheduler to determine when it should run. The
  // scheduler consults the schedulerPolicy (e.g. DropPolicy, RestartablePolicy, etc)
  // to determine whether the task instance should start executing, be enqueued
  // for later execution, or be immediately cancelled. As TaskInstances start
  // and run to completion, the Scheduler's `refresh()` method is called to
  // give it an opportunity to start (or cancel) previously enqueued task instances,
  // as well as update the derived state on Tasks and TaskGroups.

  // Every Task has its own Scheduler instance, unless it is part of a group,
  // in which case all the Tasks in a group share a single Scheduler.

  class Scheduler {
    constructor(schedulerPolicy, stateTrackingEnabled) {
      this.schedulerPolicy = schedulerPolicy;
      this.stateTrackingEnabled = stateTrackingEnabled;
      this.taskInstances = [];
    }
    cancelAll(guid, cancelRequest) {
      let cancelations = this.taskInstances.map(taskInstance => {
        if (taskInstance.task.guids[guid]) {
          taskInstance.executor.cancel(cancelRequest);
        }
      }).filter(cancelation => !!cancelation);
      return Promise.all(cancelations);
    }
    perform(taskInstance) {
      taskInstance.onFinalize(() => this.scheduleRefresh());
      this.taskInstances.push(taskInstance);
      this.refresh();
    }
    scheduleRefresh() {
      Promise.resolve().then(() => this.refresh());
    }
    refresh() {
      let stateTracker = this.stateTrackingEnabled ? new _stateTracker.default() : new _nullStateTracker.default();
      let refresh = new _refresh.default(this.schedulerPolicy, stateTracker, this.taskInstances);
      this.taskInstances = refresh.process();
    }
  }
  var _default = _exports.default = Scheduler;
});
;define("ember-concurrency/-private/external/scheduler/state-tracker/null-state-tracker", ["exports", "ember-concurrency/-private/external/scheduler/state-tracker/null-state"], function (_exports, _nullState) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const NULL_STATE = new _nullState.default();
  class NullStateTracker {
    stateFor() {
      return NULL_STATE;
    }
    computeFinalStates() {}
  }
  var _default = _exports.default = NullStateTracker;
});
;define("ember-concurrency/-private/external/scheduler/state-tracker/null-state", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class NullState {
    onCompletion() {}
    onPerformed() {}
    onStart() {}
    onRunning() {}
    onQueued() {}
  }
  var _default = _exports.default = NullState;
});
;define("ember-concurrency/-private/external/scheduler/state-tracker/state-tracker", ["exports", "ember-concurrency/-private/external/scheduler/state-tracker/state"], function (_exports, _state) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const CURRENT_REFRESH_TAGS = new Map();
  class StateTracker {
    constructor() {
      this.states = new Map();
    }
    stateFor(taskable) {
      let guid = taskable.guid;
      let taskState = this.states.get(guid);
      if (!taskState) {
        let currentTag = CURRENT_REFRESH_TAGS.has(guid) ? CURRENT_REFRESH_TAGS.get(guid) : 0;
        taskState = new _state.default(taskable, ++currentTag);
        this.states.set(guid, taskState);
        CURRENT_REFRESH_TAGS.set(guid, currentTag);
      }
      return taskState;
    }

    // After cancelling/queueing task instances, we have to recompute the derived state
    // of all the tasks that had/have task instances in this scheduler. We do this by
    // looping through all the Tasks that we've accumulated state for, and then recursively
    // applying/adding to the state of any TaskGroups they belong to.
    computeFinalStates(callback) {
      this.computeRecursiveState();
      this.forEachState(state => callback(state));
    }
    computeRecursiveState() {
      this.forEachState(taskState => {
        let lastState = taskState;
        taskState.recurseTaskGroups(taskGroup => {
          let state = this.stateFor(taskGroup);
          state.applyStateFrom(lastState);
          lastState = state;
        });
      });
    }
    forEachState(callback) {
      this.states.forEach(state => callback(state));
    }
  }
  var _default = _exports.default = StateTracker;
});
;define("ember-concurrency/-private/external/scheduler/state-tracker/state", ["exports", "ember-concurrency/-private/external/task-instance/completion-states"], function (_exports, _completionStates) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class RefreshState {
    constructor(taskable, tag) {
      this.taskable = taskable;
      this.group = taskable.group;
      this.numRunning = 0;
      this.numQueued = 0;
      this.numPerformedInc = 0;
      this.attrs = {};
      this.tag = tag;
    }
    onCompletion(taskInstance) {
      let state = taskInstance.completionState;
      this.attrs.lastRunning = null;
      this.attrs.lastComplete = taskInstance;
      if (state === _completionStates.COMPLETION_SUCCESS) {
        this.attrs.lastSuccessful = taskInstance;
      } else {
        if (state === _completionStates.COMPLETION_ERROR) {
          this.attrs.lastErrored = taskInstance;
        } else if (state === _completionStates.COMPLETION_CANCEL) {
          this.attrs.lastCanceled = taskInstance;
        }
        this.attrs.lastIncomplete = taskInstance;
      }
    }
    onPerformed(taskInstance) {
      this.numPerformedInc += 1;
      this.attrs.lastPerformed = taskInstance;
    }
    onStart(taskInstance) {
      this.attrs.last = taskInstance;
    }
    onRunning(taskInstance) {
      this.attrs.lastRunning = taskInstance;
      this.numRunning += 1;
    }
    onQueued() {
      this.numQueued += 1;
    }
    recurseTaskGroups(callback) {
      let group = this.group;
      while (group) {
        callback(group);
        group = group.group;
      }
    }
    applyStateFrom(other) {
      Object.assign(this.attrs, other.attrs);
      this.numRunning += other.numRunning;
      this.numQueued += other.numQueued;
      this.numPerformedInc += other.numPerformedInc;
    }
  }
  var _default = _exports.default = RefreshState;
});
;define("ember-concurrency/-private/external/task-decorators", ["exports", "ember-concurrency/-private/external/task-factory"], function (_exports, _taskFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.createTaskDecorator = createTaskDecorator;
  _exports.createTaskGroupDecorator = createTaskGroupDecorator;
  _exports.decoratorWithParams = decoratorWithParams;
  _exports.lastValue = void 0;
  function taskFromPropertyDescriptor(target, key, descriptor, params = [], factoryClass = _taskFactory.TaskFactory) {
    let {
      initializer,
      get,
      value
    } = descriptor;
    let taskFn;
    if (initializer) {
      taskFn = initializer.call(undefined);
    } else if (get) {
      taskFn = get.call(undefined);
    } else if (value) {
      taskFn = value;
    }
    taskFn.displayName = `${key} (task)`;
    let tasks = new WeakMap();
    let options = params[0] || {};
    let factory = new factoryClass(key, taskFn, options);
    factory._setupEmberKVO(target);
    return {
      get() {
        let task = tasks.get(this);
        if (!task) {
          task = factory.createTask(this);
          tasks.set(this, task);
        }
        return task;
      }
    };
  }
  function taskGroupPropertyDescriptor(_target, key, _descriptor, params = [], factoryClass = _taskFactory.TaskFactory) {
    let taskGroups = new WeakMap();
    let options = params[0] || {};
    let factory = new factoryClass(key, null, options);
    return {
      get() {
        let task = taskGroups.get(this);
        if (!task) {
          task = factory.createTaskGroup(this);
          taskGroups.set(this, task);
        }
        return task;
      }
    };
  }

  // Cribbed from @ember-decorators/utils
  function isFieldDescriptor(possibleDesc) {
    let [target, key, desc] = possibleDesc;
    return possibleDesc.length === 3 && typeof target === 'object' && target !== null && typeof key === 'string' && (typeof desc === 'object' && desc !== null && 'enumerable' in desc && 'configurable' in desc || desc === undefined) // TS compatibility ???
    ;
  }
  function decoratorWithParams(descriptorFn) {
    return function (...params) {
      if (isFieldDescriptor(params)) {
        return descriptorFn(...params);
      } else {
        return (...desc) => descriptorFn(...desc, params);
      }
    };
  }
  function createDecorator(fn, baseOptions = {}, factoryClass = _taskFactory.TaskFactory) {
    return decoratorWithParams((target, key, descriptor, [userOptions] = []) => {
      let mergedOptions = Object.assign({}, {
        ...baseOptions,
        ...userOptions
      });
      return fn(target, key, descriptor, [mergedOptions], factoryClass);
    });
  }
  function createTaskDecorator(baseOptions = {}, factoryClass = _taskFactory.TaskFactory) {
    return createDecorator(taskFromPropertyDescriptor, baseOptions, factoryClass);
  }
  function createTaskGroupDecorator(baseOptions = {}, factoryClass = _taskFactory.TaskFactory) {
    return createDecorator(taskGroupPropertyDescriptor, baseOptions, factoryClass);
  }
  const lastValue = _exports.lastValue = decoratorWithParams((_target, _key, descriptor, [taskName] = []) => {
    const {
      initializer
    } = descriptor;
    delete descriptor.initializer;
    return {
      get() {
        let lastInstance = this[taskName].lastSuccessful;
        if (lastInstance) {
          return lastInstance.value;
        }
        if (initializer) {
          return initializer.call(this);
        }
        return undefined;
      }
    };
  });
});
;define("ember-concurrency/-private/external/task-factory", ["exports", "ember-concurrency/-private/external/scheduler/scheduler", "ember-concurrency/-private/external/scheduler/policies/unbounded-policy", "ember-concurrency/-private/external/scheduler/policies/enqueued-policy", "ember-concurrency/-private/external/scheduler/policies/drop-policy", "ember-concurrency/-private/external/scheduler/policies/keep-latest-policy", "ember-concurrency/-private/external/scheduler/policies/restartable-policy", "ember-concurrency/-private/external/task/task", "ember-concurrency/-private/external/task/task-group", "ember-concurrency/-private/external/environment"], function (_exports, _scheduler, _unboundedPolicy, _enqueuedPolicy, _dropPolicy, _keepLatestPolicy, _restartablePolicy, _task, _taskGroup, _environment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TaskFactory = void 0;
  _exports.getModifier = getModifier;
  _exports.hasModifier = hasModifier;
  _exports.registerModifier = registerModifier;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function assertModifiersNotMixedWithGroup(obj) {
    if (obj._hasSetConcurrencyConstraint && obj._taskGroupPath) {
      throw new Error(`Cannot use both 'group' and other concurrency-constraining task modifiers (e.g. 'drop', 'enqueue', 'restartable')`);
    }
  }
  function assertUnsetBufferPolicy(obj) {
    if (obj._hasSetBufferPolicy) {
      throw new Error(`Cannot set multiple buffer policies on a task or task group. ${obj._schedulerPolicyClass} has already been set for task or task group '${obj.name}'`);
    }
  }
  const MODIFIER_REGISTRY = {
    enqueue: (factory, value) => value && factory.setBufferPolicy(_enqueuedPolicy.default),
    evented: (factory, value) => value && factory.setEvented(value),
    debug: (factory, value) => value && factory.setDebug(value),
    drop: (factory, value) => value && factory.setBufferPolicy(_dropPolicy.default),
    group: (factory, groupName) => factory.setGroup(groupName),
    keepLatest: (factory, value) => value && factory.setBufferPolicy(_keepLatestPolicy.default),
    maxConcurrency: (factory, maxConcurrency) => factory.setMaxConcurrency(maxConcurrency),
    onState: (factory, onStateCallback) => factory.setOnState(onStateCallback),
    restartable: (factory, value) => value && factory.setBufferPolicy(_restartablePolicy.default)
  };

  /**
   * Callback type defining a task modifier
   *
   * @callback TaskFactory~TaskModifier
   * @param {TaskFactory} factory
   * @param {*} taskModifierOption
   */

  /**
   * Registers a new modifier with the modifier registry
   *
   * @param {string} name Name of the modifier
   * @param {TaskFactory~TaskModifier} callback
   */
  function registerModifier(name, callback) {
    if (MODIFIER_REGISTRY[name]) {
      throw new Error(`A modifier with the name '${name}' has already been defined.`);
    }
    MODIFIER_REGISTRY[name] = callback;
  }

  /**
   * Returns a specified modifier, if it exists in the registry
   *
   * @param {string} name Name of the modifier
   * @returns {TaskFactory~TaskModifier?}
   */
  function getModifier(name) {
    return MODIFIER_REGISTRY[name];
  }

  /**
   * Returns whether a specified modifier exists in the registry
   *
   * @param {string} name Name of the modifier
   * @returns {boolean}
   */
  function hasModifier(name) {
    return name in MODIFIER_REGISTRY;
  }

  /**
   * Factory used for instantiating Tasks and Task Groups. Mostly for internal
   * use, but some public APIs exposed via the Task Modifier APIs.
   *
   * <style>
   *  .ignore-this--this-is-here-to-hide-constructor,
   *  #TaskFactory { display: none }
   * </style>
   *
   * @class TaskFactory
   */
  class TaskFactory {
    constructor(name = '<unknown>', taskDefinition = null, options = {}) {
      _defineProperty(this, "env", _environment.DEFAULT_ENVIRONMENT);
      _defineProperty(this, "_debug", null);
      _defineProperty(this, "_enabledModifiers", []);
      _defineProperty(this, "_hasSetConcurrencyConstraint", false);
      _defineProperty(this, "_hasSetBufferPolicy", false);
      _defineProperty(this, "_hasEnabledEvents", false);
      _defineProperty(this, "_maxConcurrency", null);
      _defineProperty(this, "_onStateCallback", (state, taskable) => taskable.setState(state));
      _defineProperty(this, "_schedulerPolicyClass", _unboundedPolicy.default);
      _defineProperty(this, "_taskGroupPath", null);
      this.name = name;
      this.taskDefinition = taskDefinition;
      this.options = options;
      this._processModifierOptions(options);
    }

    /**
     * Returns a new Task bound to the given context
     *
     * @protected
     * @param {*} context
     * @returns {Task}
     */
    createTask(context) {
      let options = this.getTaskOptions(context);
      return new _task.Task(Object.assign({
        generatorFactory: args => this.taskDefinition.apply(context, args)
      }, options));
    }

    /**
     * Returns a new TaskGroup bound to the given context
     *
     * @protected
     * @param {*} context
     * @returns {Task}
     */
    createTaskGroup(context) {
      let options = this.getTaskOptions(context);
      return new _taskGroup.TaskGroup(options);
    }

    /**
     * Returns a modifier callback with the given name bound to this TaskFactory,
     * if registered.
     *
     * @protected
     * @param {string} name
     * @returns {TaskFactory~TaskModifier?}
     */
    getModifier(name) {
      if (hasModifier(name)) {
        return MODIFIER_REGISTRY[name].bind(null, this);
      }
    }

    /**
     * Returns the options provided to TaskFactory
     *
     * @public
     * @returns {object}
     */
    getOptions() {
      return this.options;
    }

    /**
     * Returns a new Scheduler instance
     *
     * @protected
     * @param {*} schedulerPolicy
     * @param {boolean} stateTrackingEnabled
     * @returns {Scheduler}
     */
    getScheduler(schedulerPolicy, stateTrackingEnabled) {
      return new _scheduler.default(schedulerPolicy, stateTrackingEnabled);
    }

    /**
     * Returns the options to pass to a Task or TaskGroup constructor
     *
     * @protected
     * @param {*} context
     * @returns {object}
     */
    getTaskOptions(context) {
      let group, scheduler;
      let onStateCallback = this._onStateCallback;
      if (this._taskGroupPath) {
        group = context[this._taskGroupPath];
        if (!(group instanceof _taskGroup.TaskGroup)) {
          throw new Error(`Expected group '${this._taskGroupPath}' to be defined but was not found.`);
        }
        scheduler = group.scheduler;
      } else {
        let schedulerPolicy = new this._schedulerPolicyClass(this._maxConcurrency);
        scheduler = this.getScheduler(schedulerPolicy, onStateCallback && typeof onStateCallback === 'function');
      }
      return {
        context,
        debug: this._debug,
        env: this.env,
        name: this.name,
        group,
        scheduler,
        hasEnabledEvents: this._hasEnabledEvents,
        onStateCallback,
        enabledModifiers: this._enabledModifiers,
        modifierOptions: this.getOptions()
      };
    }

    /**
     * Sets the Scheduler buffer policy class to the specified value.
     *
     * Will raise an assertion if a buffer policy has already been specified
     *
     * @param {*} policy
     * @returns {TaskFactory}
     */
    setBufferPolicy(policy) {
      assertUnsetBufferPolicy(this);
      this._hasSetBufferPolicy = true;
      this._hasSetConcurrencyConstraint = true;
      this._schedulerPolicyClass = policy;
      assertModifiersNotMixedWithGroup(this);
      return this;
    }

    /**
     * Sets debug mode
     *
     * @param {boolean} enabled
     * @returns {TaskFactory}
     */
    setDebug(enabled) {
      this._debug = enabled;
      return this;
    }

    /**
     * Sets whether Task will dispatch Task events or not
     *
     * @param {boolean} enabled
     * @returns {TaskFactory}
     */
    setEvented(enabled) {
      this._hasEnabledEvents = enabled;
      return this;
    }

    /**
     * Sets Scheduling policy's `maxConcurrency`
     *
     * @param {number} maxConcurrency
     * @returns {TaskFactory}
     */
    setMaxConcurrency(maxConcurrency) {
      this._hasSetConcurrencyConstraint = true;
      this._maxConcurrency = maxConcurrency;
      return this;
    }

    /**
     * Assigns Task created from this factory to the specified group name
     *
     * @param {string} group
     * @returns {TaskFactory}
     */
    setGroup(group) {
      this._taskGroupPath = group;
      return this;
    }

    /**
     * Sets the name of tasks created from this factory
     *
     * @param {string} name
     * @returns {TaskFactory}
     */
    setName(name) {
      this.name = name;
      return this;
    }

    /**
     * Sets the callback used on state updates. Can be set to null to disable
     * state tracking on tasks.
     *
     * @param {function} onStateCallback
     * @returns {TaskFactory}
     */
    setOnState(onStateCallback) {
      this._onStateCallback = onStateCallback;
      return this;
    }

    /**
     * Sets the definition for tasks created from this factory
     *
     * @param {*} taskDefinition
     * @returns {TaskFactory}
     */
    setTaskDefinition(taskDefinition) {
      this.taskDefinition = taskDefinition;
      return this;
    }
    _processModifierOptions(options) {
      if (!options) {
        return;
      }
      for (let key of Object.keys(options)) {
        let value = options[key];
        let modifier = this.getModifier(key);
        if (typeof modifier === 'function' && modifier(value)) {
          this._enabledModifiers.push(key);
        }
      }
    }
  }
  _exports.TaskFactory = TaskFactory;
});
;define("ember-concurrency/-private/external/task-instance/base", ["exports", "ember-concurrency/-private/external/task-instance/initial-state", "ember-concurrency/-private/external/yieldables", "ember-concurrency/-private/external/task-instance/cancelation"], function (_exports, _initialState, _yieldables, _cancelation) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.BaseTaskInstance = void 0;
  const EXPLICIT_CANCEL_REASON = '.cancel() was explicitly called';
  class BaseTaskInstance {
    constructor({
      task,
      args,
      executor,
      performType,
      hasEnabledEvents
    }) {
      this.task = task;
      this.args = args;
      this.performType = performType;
      this.executor = executor;
      this.executor.taskInstance = this;
      this.hasEnabledEvents = hasEnabledEvents;
    }
    setState() {}
    onStarted() {}
    onSuccess() {}
    onError() {}
    onCancel() {}
    formatCancelReason() {}
    selfCancelLoopWarning() {}
    onFinalize(callback) {
      this.executor.onFinalize(callback);
    }
    proceed(index, yieldResumeType, value) {
      this.executor.proceedChecked(index, yieldResumeType, value);
    }
    [_yieldables.yieldableSymbol](parentTaskInstance, resumeIndex) {
      return this.executor.onYielded(parentTaskInstance, resumeIndex);
    }
    cancel(cancelReason = EXPLICIT_CANCEL_REASON) {
      this.executor.cancel(new _cancelation.CancelRequest(_cancelation.CANCEL_KIND_EXPLICIT, cancelReason));
    }
    then(...args) {
      return this.executor.promise().then(...args);
    }
    catch(...args) {
      return this.executor.promise().catch(...args);
    }
    finally(...args) {
      return this.executor.promise().finally(...args);
    }
    toString() {
      return `${this.task} TaskInstance`;
    }
    start() {
      this.executor.start();
      return this;
    }
  }
  _exports.BaseTaskInstance = BaseTaskInstance;
  Object.assign(BaseTaskInstance.prototype, _initialState.INITIAL_STATE);
  Object.assign(BaseTaskInstance.prototype, {
    state: 'waiting',
    isDropped: false,
    isRunning: true
  });
});
;define("ember-concurrency/-private/external/task-instance/cancelation", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TASK_CANCELATION_NAME = _exports.CancelRequest = _exports.CANCEL_KIND_YIELDABLE_CANCEL = _exports.CANCEL_KIND_PARENT_CANCEL = _exports.CANCEL_KIND_LIFESPAN_END = _exports.CANCEL_KIND_EXPLICIT = void 0;
  _exports.didCancel = didCancel;
  const TASK_CANCELATION_NAME = _exports.TASK_CANCELATION_NAME = 'TaskCancelation';

  /**
   * Returns true if the object passed to it is a TaskCancelation error.
   * If you call `someTask.perform().catch(...)` or otherwise treat
   * a {@linkcode TaskInstance} like a promise, you may need to
   * handle the cancelation of a TaskInstance differently from
   * other kinds of errors it might throw, and you can use this
   * convenience function to distinguish cancelation from errors.
   *
   * ```js
   * click() {
   *   this.myTask.perform().catch(e => {
   *     if (!didCancel(e)) { throw e; }
   *   });
   * }
   * ```
   *
   * @param {object} error the caught error, which might be a TaskCancelation
   * @returns {boolean}
   */
  function didCancel(e) {
    return e && e.name === TASK_CANCELATION_NAME;
  }
  const CANCEL_KIND_EXPLICIT = _exports.CANCEL_KIND_EXPLICIT = 'explicit';
  const CANCEL_KIND_YIELDABLE_CANCEL = _exports.CANCEL_KIND_YIELDABLE_CANCEL = 'yielded';
  const CANCEL_KIND_LIFESPAN_END = _exports.CANCEL_KIND_LIFESPAN_END = 'lifespan_end';
  const CANCEL_KIND_PARENT_CANCEL = _exports.CANCEL_KIND_PARENT_CANCEL = 'parent_cancel';
  class CancelRequest {
    constructor(kind, reason) {
      this.kind = kind;
      this.reason = reason;
      this.promise = new Promise(resolve => {
        this.finalize = resolve;
      });
    }
  }
  _exports.CancelRequest = CancelRequest;
});
;define("ember-concurrency/-private/external/task-instance/completion-states", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.COMPLETION_SUCCESS = _exports.COMPLETION_PENDING = _exports.COMPLETION_ERROR = _exports.COMPLETION_CANCEL = void 0;
  const COMPLETION_PENDING = _exports.COMPLETION_PENDING = 0;
  const COMPLETION_SUCCESS = _exports.COMPLETION_SUCCESS = 1;
  const COMPLETION_ERROR = _exports.COMPLETION_ERROR = 2;
  const COMPLETION_CANCEL = _exports.COMPLETION_CANCEL = 3;
});
;define("ember-concurrency/-private/external/task-instance/executor", ["exports", "ember-concurrency/-private/external/generator-state", "ember-concurrency/-private/external/task-instance/initial-state", "ember-concurrency/-private/external/yieldables", "ember-concurrency/-private/external/task-instance/completion-states", "ember-concurrency/-private/external/task-instance/cancelation"], function (_exports, _generatorState, _initialState, _yieldables, _completionStates, _cancelation) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TaskInstanceExecutor = _exports.PERFORM_TYPE_UNLINKED = _exports.PERFORM_TYPE_LINKED = _exports.PERFORM_TYPE_DEFAULT = void 0;
  _exports.getRunningInstance = getRunningInstance;
  const PERFORM_TYPE_DEFAULT = _exports.PERFORM_TYPE_DEFAULT = 'PERFORM_TYPE_DEFAULT';
  const PERFORM_TYPE_UNLINKED = _exports.PERFORM_TYPE_UNLINKED = 'PERFORM_TYPE_UNLINKED';
  const PERFORM_TYPE_LINKED = _exports.PERFORM_TYPE_LINKED = 'PERFORM_TYPE_LINKED';
  const CANCEL_RETURN_VALUE_SENTINEL = {};
  let TASK_INSTANCE_STACK = [];
  function getRunningInstance() {
    return TASK_INSTANCE_STACK[TASK_INSTANCE_STACK.length - 1];
  }
  class TaskInstanceExecutor {
    constructor({
      generatorFactory,
      env,
      debug
    }) {
      this.generatorState = new _generatorState.GeneratorState(generatorFactory);
      this.state = Object.assign({}, _initialState.INITIAL_STATE);
      this.index = 1;
      this.disposers = [];
      this.finalizeCallbacks = [];
      this.env = env;
      this.debug = debug;
      this.cancelRequest = null;
    }
    start() {
      if (this.state.hasStarted || this.cancelRequest) {
        return;
      }
      this.setState({
        hasStarted: true
      });
      this.proceedSync(_yieldables.YIELDABLE_CONTINUE, undefined);
      this.taskInstance.onStarted();
    }
    cancel(cancelRequest) {
      if (!this.requestCancel(cancelRequest)) {
        cancelRequest.finalize();
        return cancelRequest.promise;
      }
      if (this.state.hasStarted) {
        this.proceedWithCancelAsync();
      } else {
        this.finalizeWithCancel();
      }
      return this.cancelRequest.promise;
    }
    setState(state) {
      Object.assign(this.state, state);
      this.taskInstance.setState(this.state);
    }
    proceedChecked(index, yieldResumeType, value) {
      if (this.state.isFinished) {
        return;
      }
      if (!this.advanceIndex(index)) {
        return;
      }
      if (yieldResumeType === _yieldables.YIELDABLE_CANCEL) {
        this.requestCancel(new _cancelation.CancelRequest(_cancelation.CANCEL_KIND_YIELDABLE_CANCEL), value);
        this.proceedWithCancelAsync();
      } else {
        this.proceedAsync(yieldResumeType, value);
      }
    }
    proceedWithCancelAsync() {
      this.proceedAsync(_yieldables.YIELDABLE_RETURN, CANCEL_RETURN_VALUE_SENTINEL);
    }
    proceedAsync(yieldResumeType, value) {
      this.advanceIndex(this.index);
      this.env.async(() => this.proceedSync(yieldResumeType, value));
    }
    proceedSync(yieldResumeType, value) {
      if (this.state.isFinished) {
        return;
      }
      this.dispose();
      if (this.generatorState.done) {
        this.handleResolvedReturnedValue(yieldResumeType, value);
      } else {
        this.handleResolvedContinueValue(yieldResumeType, value);
      }
    }

    /**
     * This method is called when a previously yielded value from
     * the generator has been resolved, and now it's time to pass
     * it back into the generator. There are 3 ways to "resume" a
     * generator:
     *
     * - call `.next(value)` on it, which is used to pass in a resolved
     *   value (the fulfilled value of a promise), e.g. if a task generator fn
     *   does `yield Promise.resolve(5)`, then we take that promise yielded
     *   by the generator, detect that it's a promise, resolve it, and then
     *   pass its fulfilled value `5` back into the generator function so
     *   that it can continue executing.
     * - call `.throw(error)` on it, which throw an exception from where the
     *   the generator previously yielded. We do this when the previously
     *   yielded value resolves to an error value (e.g. a rejected promise
     *   or a TaskInstance that finished with an error). Note that when you
     *   resume a generator with a `.throw()`, it can still recover from that
     *   thrown error and continue executing normally so long as the `yield`
     *   was inside a `try/catch` statement.
     * - call `.return(value)` on it, causes the generator function to return
     *   from where it previously `yield`ed. We use `.return()` when cancelling
     *   a TaskInstance; by `.return`ing, rather than `.throw`ing, it allows
     *   the generator function to skip `catch(e) {}` blocks, which is usually
     *   reserved for actual errors/exceptions; if we `.throw`'d cancellations,
     *   it would require all tasks that used try/catch to conditionally ignore
     *   cancellations, which is annoying. So we `.return()` from generator functions
     *   in the case of errors as a matter of convenience.
     *
     * @private
     */
    handleResolvedContinueValue(iteratorMethod, resumeValue) {
      let beforeIndex = this.index;
      let stepResult = this.generatorStep(resumeValue, iteratorMethod);

      // TODO: what is this doing? write breaking test.
      if (!this.advanceIndex(beforeIndex)) {
        return;
      }
      if (stepResult.errored) {
        this.finalize(stepResult.value, _completionStates.COMPLETION_ERROR);
        return;
      }
      this.handleYieldedValue(stepResult);
    }

    /**
     * This method is called when the generator function is all
     * out of values, and the last value returned from the function
     * (possible a thenable/yieldable/promise/etc) has been resolved.
     *
     * Possible cases:
     * - `return "simple value";` // resolved value is "simple value"
     * - `return undefined;` // (or omitted return) resolved value is undefined
     * - `return someTask.perform()` // resolved value is the value returned/resolved from someTask
     *
     * @private
     */
    handleResolvedReturnedValue(yieldResumeType, value) {
      switch (yieldResumeType) {
        case _yieldables.YIELDABLE_CONTINUE:
        case _yieldables.YIELDABLE_RETURN:
          this.finalize(value, _completionStates.COMPLETION_SUCCESS);
          break;
        case _yieldables.YIELDABLE_THROW:
          this.finalize(value, _completionStates.COMPLETION_ERROR);
          break;
      }
    }
    handleYieldedUnknownThenable(thenable) {
      let resumeIndex = this.index;
      thenable.then(value => {
        this.proceedChecked(resumeIndex, _yieldables.YIELDABLE_CONTINUE, value);
      }, error => {
        this.proceedChecked(resumeIndex, _yieldables.YIELDABLE_THROW, error);
      });
    }

    /**
     * The TaskInstance internally tracks an index/sequence number
     * (the `index` property) which gets incremented every time the
     * task generator function iterator takes a step. When a task
     * function is paused at a `yield`, there are two events that
     * cause the TaskInstance to take a step: 1) the yielded value
     * "resolves", thus resuming the TaskInstance's execution, or
     * 2) the TaskInstance is canceled. We need some mechanism to prevent
     * stale yielded value resolutions from resuming the TaskFunction
     * after the TaskInstance has already moved on (either because
     * the TaskInstance has since been canceled or because an
     * implementation of the Yieldable API tried to resume the
     * TaskInstance more than once). The `index` serves as
     * that simple mechanism: anyone resuming a TaskInstance
     * needs to pass in the `index` they were provided that acts
     * as a ticket to resume the TaskInstance that expires once
     * the TaskInstance has moved on.
     *
     * @private
     */
    advanceIndex(index) {
      if (this.index === index) {
        return ++this.index;
      }
    }
    handleYieldedValue(stepResult) {
      let yieldedValue = stepResult.value;
      if (!yieldedValue) {
        this.proceedWithSimpleValue(yieldedValue);
        return;
      }
      this.addDisposer(yieldedValue[_yieldables.cancelableSymbol]);
      if (yieldedValue[_yieldables.yieldableSymbol]) {
        this.invokeYieldable(yieldedValue);
      } else if (typeof yieldedValue.then === 'function') {
        this.handleYieldedUnknownThenable(yieldedValue);
      } else {
        this.proceedWithSimpleValue(yieldedValue);
      }
    }
    proceedWithSimpleValue(yieldedValue) {
      this.proceedAsync(_yieldables.YIELDABLE_CONTINUE, yieldedValue);
    }
    addDisposer(maybeDisposer) {
      if (typeof maybeDisposer !== 'function') {
        return;
      }
      this.disposers.push(maybeDisposer);
    }

    /**
     * Runs any disposers attached to the task's most recent `yield`.
     * For instance, when a task yields a TaskInstance, it registers that
     * child TaskInstance's disposer, so that if the parent task is canceled,
     * dispose() will run that disposer and cancel the child TaskInstance.
     *
     * @private
     */
    dispose() {
      let disposers = this.disposers;
      if (disposers.length === 0) {
        return;
      }
      this.disposers = [];
      disposers.forEach(disposer => disposer());
    }

    /**
     * Calls .next()/.throw()/.return() on the task's generator function iterator,
     * essentially taking a single step of execution on the task function.
     *
     * @private
     */
    generatorStep(nextValue, iteratorMethod) {
      TASK_INSTANCE_STACK.push(this);
      let stepResult = this.generatorState.step(nextValue, iteratorMethod);
      TASK_INSTANCE_STACK.pop();

      // TODO: fix this!
      if (this._expectsLinkedYield) {
        let value = stepResult.value;
        if (!value || value.performType !== PERFORM_TYPE_LINKED) {
          // eslint-disable-next-line no-console
          console.warn('You performed a .linked() task without immediately yielding/returning it. This is currently unsupported (but might be supported in future version of ember-concurrency).');
        }
        this._expectsLinkedYield = false;
      }
      return stepResult;
    }
    maybeResolveDefer() {
      if (!this.defer || !this.state.isFinished) {
        return;
      }
      if (this.state.completionState === _completionStates.COMPLETION_SUCCESS) {
        this.defer.resolve(this.state.value);
      } else {
        this.defer.reject(this.state.error);
      }
    }
    onFinalize(callback) {
      this.finalizeCallbacks.push(callback);
      if (this.state.isFinished) {
        this.runFinalizeCallbacks();
      }
    }
    runFinalizeCallbacks() {
      this.finalizeCallbacks.forEach(cb => cb());
      this.finalizeCallbacks = [];
      this.maybeResolveDefer();
      this.maybeThrowUnhandledTaskErrorLater();
    }
    promise() {
      if (!this.defer) {
        this.defer = this.env.defer();
        this.asyncErrorsHandled = true;
        this.maybeResolveDefer();
      }
      return this.defer.promise;
    }
    maybeThrowUnhandledTaskErrorLater() {
      if (!this.asyncErrorsHandled && this.state.completionState === _completionStates.COMPLETION_ERROR && !(0, _cancelation.didCancel)(this.state.error)) {
        this.env.async(() => {
          if (!this.asyncErrorsHandled) {
            this.env.reportUncaughtRejection(this.state.error);
          }
        });
      }
    }
    requestCancel(request) {
      if (this.cancelRequest || this.state.isFinished) {
        return false;
      }
      this.cancelRequest = request;
      return true;
    }
    finalize(value, completionState) {
      if (this.cancelRequest) {
        return this.finalizeWithCancel();
      }
      let state = {
        completionState
      };
      if (completionState === _completionStates.COMPLETION_SUCCESS) {
        state.isSuccessful = true;
        state.value = value;
      } else if (completionState === _completionStates.COMPLETION_ERROR) {
        state.isError = true;
        state.error = value;
      } else if (completionState === _completionStates.COMPLETION_CANCEL) {
        state.error = value;
      }
      this.finalizeShared(state);
    }
    finalizeWithCancel() {
      let cancelReason = this.taskInstance.formatCancelReason(this.cancelRequest.reason);
      let error = new Error(cancelReason);
      if (this.debugEnabled()) {
        // eslint-disable-next-line no-console
        console.log(cancelReason);
      }
      error.name = _cancelation.TASK_CANCELATION_NAME;
      this.finalizeShared({
        isCanceled: true,
        completionState: _completionStates.COMPLETION_CANCEL,
        error,
        cancelReason
      });
      this.cancelRequest.finalize();
    }
    debugEnabled() {
      return this.debug || this.env.globalDebuggingEnabled();
    }
    finalizeShared(state) {
      this.index++;
      state.isFinished = true;
      this.setState(state);
      this.runFinalizeCallbacks();
      this.dispatchFinalizeEvents(state.completionState);
    }
    dispatchFinalizeEvents(completionState) {
      switch (completionState) {
        case _completionStates.COMPLETION_SUCCESS:
          this.taskInstance.onSuccess();
          break;
        case _completionStates.COMPLETION_ERROR:
          this.taskInstance.onError(this.state.error);
          break;
        case _completionStates.COMPLETION_CANCEL:
          this.taskInstance.onCancel(this.state.cancelReason);
          break;
      }
    }
    invokeYieldable(yieldedValue) {
      try {
        let maybeDisposer = yieldedValue[_yieldables.yieldableSymbol](this.taskInstance, this.index);
        this.addDisposer(maybeDisposer);
      } catch (e) {
        this.env.reportUncaughtRejection(e);
      }
    }

    /**
     * `onYielded` is called when this task instance has been
     * yielded in another task instance's execution. We take
     * this opportunity to conditionally link up the tasks
     * so that when the parent or child cancels, the other
     * is cancelled.
     *
     * Given the following case:
     *
     * ```js
     * parentTask: task(function * () {
     *   yield otherTask.perform();
     * })
     * ```
     *
     * Then the `parent` param is the task instance that is executing, `this`
     * is the `otherTask` task instance that was yielded.
     *
     * @private
     */
    onYielded(parent, resumeIndex) {
      this.asyncErrorsHandled = true;
      this.onFinalize(() => {
        let completionState = this.state.completionState;
        if (completionState === _completionStates.COMPLETION_SUCCESS) {
          parent.proceed(resumeIndex, _yieldables.YIELDABLE_CONTINUE, this.state.value);
        } else if (completionState === _completionStates.COMPLETION_ERROR) {
          parent.proceed(resumeIndex, _yieldables.YIELDABLE_THROW, this.state.error);
        } else if (completionState === _completionStates.COMPLETION_CANCEL) {
          parent.proceed(resumeIndex, _yieldables.YIELDABLE_CANCEL, null);
        }
      });
      let performType = this.getPerformType();
      if (performType === PERFORM_TYPE_UNLINKED) {
        return;
      }
      return () => {
        this.detectSelfCancelLoop(performType, parent);
        this.cancel(new _cancelation.CancelRequest(_cancelation.CANCEL_KIND_PARENT_CANCEL));
      };
    }
    getPerformType() {
      return this.taskInstance.performType || PERFORM_TYPE_DEFAULT;
    }
    detectSelfCancelLoop(performType, parent) {
      if (performType !== PERFORM_TYPE_DEFAULT) {
        return;
      }
      let parentCancelRequest = parent.executor && parent.executor.cancelRequest;

      // Detect that the parent was cancelled by a lifespan ending and
      // that the child is still running and not cancelled.
      if (parentCancelRequest && parentCancelRequest.kind === _cancelation.CANCEL_KIND_LIFESPAN_END && !this.cancelRequest && !this.state.isFinished) {
        this.taskInstance.selfCancelLoopWarning(parent);
      }
    }
  }
  _exports.TaskInstanceExecutor = TaskInstanceExecutor;
});
;define("ember-concurrency/-private/external/task-instance/initial-state", ["exports", "ember-concurrency/-private/external/task-instance/completion-states"], function (_exports, _completionStates) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.INITIAL_STATE = void 0;
  const INITIAL_STATE = _exports.INITIAL_STATE = {
    completionState: _completionStates.COMPLETION_PENDING,
    /**
     * If this TaskInstance runs to completion by returning a property
     * other than a rejecting promise, this property will be set
     * with that value.
     *
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */
    value: null,
    /**
     * If this TaskInstance is canceled or throws an error (or yields
     * a promise that rejects), this property will be set with that error.
     * Otherwise, it is null.
     *
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */
    error: null,
    /**
     * True if the task instance is fulfilled.
     *
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */
    isSuccessful: false,
    /**
     * True if the task instance resolves to a rejection.
     *
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */
    isError: false,
    /**
     * True if the task instance is canceled
     *
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */
    isCanceled: false,
    /**
     * True if the task instance has started, else false.
     *
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */
    hasStarted: false,
    /**
     * True if the task has run to completion.
     *
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */
    isFinished: false
  };
});
;define("ember-concurrency/-private/external/task/default-state", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.DEFAULT_STATE = void 0;
  const DEFAULT_STATE = _exports.DEFAULT_STATE = {
    last: null,
    lastRunning: null,
    lastPerformed: null,
    lastSuccessful: null,
    lastComplete: null,
    lastErrored: null,
    lastCanceled: null,
    lastIncomplete: null,
    performCount: 0
  };
  Object.freeze(DEFAULT_STATE);
});
;define("ember-concurrency/-private/external/task/task-group", ["exports", "ember-concurrency/-private/external/task/taskable"], function (_exports, _taskable) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TaskGroup = void 0;
  class TaskGroup extends _taskable.Taskable {}
  _exports.TaskGroup = TaskGroup;
});
;define("ember-concurrency/-private/external/task/task", ["exports", "ember-concurrency/-private/external/task/taskable", "ember-concurrency/-private/external/task-instance/executor"], function (_exports, _taskable, _executor) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Task = void 0;
  class TaskLinkProxy {
    constructor(task, performType, linkedObject) {
      this.task = task;
      this.performType = performType;
      this.linkedObject = linkedObject;
    }
    perform(...args) {
      return this.task._performShared(args, this.performType, this.linkedObject);
    }
  }
  class Task extends _taskable.Taskable {
    constructor(options) {
      super(options);
      this.generatorFactory = options.generatorFactory;
      this.perform = this._perform.bind(this);
    }
    linked() {
      let linkedObject = (0, _executor.getRunningInstance)();
      if (!linkedObject) {
        throw new Error(`You can only call .linked() from within a task.`);
      }
      return new TaskLinkProxy(this, _executor.PERFORM_TYPE_LINKED, linkedObject);
    }
    unlinked() {
      return new TaskLinkProxy(this, _executor.PERFORM_TYPE_UNLINKED, null);
    }
    toString() {
      return `<Task:${this.name}>`;
    }
    _clone() {
      return new Task({
        context: this.context,
        debug: this.debug,
        env: this.env,
        generatorFactory: this.generatorFactory,
        group: this.group,
        hasEnabledEvents: this.hasEnabledEvents,
        name: this.name,
        onStateCallback: this.onStateCallback,
        scheduler: this.scheduler
      });
    }
    _curry(...args) {
      let task = this._clone();
      task._curryArgs = [...(this._curryArgs || []), ...args];
      return task;
    }
    _perform(...args) {
      return this._performShared(args, _executor.PERFORM_TYPE_DEFAULT, null);
    }
    _performShared(args, performType, linkedObject) {
      let fullArgs = this._curryArgs ? [...this._curryArgs, ...args] : args;
      let taskInstance = this._taskInstanceFactory(fullArgs, performType, linkedObject);
      if (performType === _executor.PERFORM_TYPE_LINKED) {
        linkedObject._expectsLinkedYield = true;
      }
      if (!this._isAlive) {
        // a task linked to a dead lifetime should immediately cancel.
        taskInstance.cancel();
      }
      this.scheduler.perform(taskInstance);
      return taskInstance;
    }

    // eslint-disable-next-line no-unused-vars
    _taskInstanceOptions(args, performType, _linkedObject) {
      let generatorFactory = () => this.generatorFactory(args);
      let taskInstanceOptions = {
        task: this,
        args,
        executor: new _executor.TaskInstanceExecutor({
          generatorFactory,
          env: this.env,
          debug: this.debug
        }),
        performType,
        hasEnabledEvents: this.hasEnabledEvents
      };
      return taskInstanceOptions;
    }
  }
  _exports.Task = Task;
});
;define("ember-concurrency/-private/external/task/taskable", ["exports", "ember-concurrency/-private/external/task/default-state", "ember-concurrency/-private/external/task-instance/cancelation"], function (_exports, _defaultState, _cancelation) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Taskable = void 0;
  let guidId = 0;
  function makeGuid() {
    return `ec_${guidId++}`;
  }
  class Taskable {
    constructor(options) {
      this.context = options.context;
      this.debug = options.debug || false;
      this.enabledModifiers = options.enabledModifiers;
      this.env = options.env;
      this.group = options.group;
      this.hasEnabledEvents = options.hasEnabledEvents;
      this.modifierOptions = options.modifierOptions;
      this.name = options.name;
      this.onStateCallback = options.onStateCallback;
      this.scheduler = options.scheduler;
      this.guid = makeGuid();
      this.guids = {};
      this.guids[this.guid] = true;
      if (this.group) {
        Object.assign(this.guids, this.group.guids);
      }
    }
    cancelAll(options) {
      let {
        reason,
        cancelRequestKind,
        resetState
      } = options || {};
      reason = reason || '.cancelAll() was explicitly called on the Task';
      let cancelRequest = new _cancelation.CancelRequest(cancelRequestKind || _cancelation.CANCEL_KIND_EXPLICIT, reason);
      return this.scheduler.cancelAll(this.guid, cancelRequest).then(() => {
        if (resetState) {
          this._resetState();
        }
      });
    }
    get _isAlive() {
      return true;
    }
    _resetState() {
      this.setState(_defaultState.DEFAULT_STATE);
    }

    // override
    setState() {}
  }
  _exports.Taskable = Taskable;
  Object.assign(Taskable.prototype, _defaultState.DEFAULT_STATE);
  Object.assign(Taskable.prototype, {
    numRunning: 0,
    numQueued: 0,
    isRunning: false,
    isQueued: false,
    isIdle: true,
    state: 'idle'
  });
});
;define("ember-concurrency/-private/external/yieldables", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Yieldable = _exports.YIELDABLE_THROW = _exports.YIELDABLE_RETURN = _exports.YIELDABLE_CONTINUE = _exports.YIELDABLE_CANCEL = void 0;
  _exports.animationFrame = animationFrame;
  _exports.forever = _exports.cancelableSymbol = void 0;
  _exports.rawTimeout = rawTimeout;
  _exports.yieldableSymbol = void 0;
  const cancelableSymbol = _exports.cancelableSymbol = '__ec_cancel__';
  const yieldableSymbol = _exports.yieldableSymbol = '__ec_yieldable__';
  const YIELDABLE_CONTINUE = _exports.YIELDABLE_CONTINUE = 'next';
  const YIELDABLE_THROW = _exports.YIELDABLE_THROW = 'throw';
  const YIELDABLE_RETURN = _exports.YIELDABLE_RETURN = 'return';
  const YIELDABLE_CANCEL = _exports.YIELDABLE_CANCEL = 'cancel';

  /**
   * @class YieldableState
   * @hideconstructor
   */
  class YieldableState {
    constructor(taskInstance, resumeIndex) {
      this._taskInstance = taskInstance;
      this._resumeIndex = resumeIndex;
    }

    /**
     * Return yielded TaskInstance. Useful for introspection on instance state.
     * @method getTaskInstance
     * @memberof YieldableState
     * @public
     * @instance
     */
    getTaskInstance() {
      return this._taskInstance;
    }

    /**
     * Cancel the yielded TaskInstance.
     * @method cancel
     * @memberof YieldableState
     * @public
     * @instance
     */
    cancel() {
      let taskInstance = this._taskInstance;
      taskInstance.proceed.call(taskInstance, this._resumeIndex, YIELDABLE_CANCEL);
    }

    /**
     * Cause the TaskInstance to return from its yield with an optional value,
     * and continue executing.
     * @method next
     * @memberof YieldableState
     * @param value
     * @public
     * @instance
     */
    next(value) {
      let taskInstance = this._taskInstance;
      taskInstance.proceed.call(taskInstance, this._resumeIndex, YIELDABLE_CONTINUE, value);
    }

    /**
     * Short-circuit TaskInstance execution and have it return with an optional
     * value.
     * @method return
     * @memberof YieldableState
     * @param value
     * @public
     * @instance
     */
    return(value) {
      let taskInstance = this._taskInstance;
      taskInstance.proceed.call(taskInstance, this._resumeIndex, YIELDABLE_RETURN, value);
    }

    /**
     * Raise a given error within the given task instance and halt execution
     * @method throw
     * @memberof YieldableState
     * @param error
     * @public
     * @instance
     */
    throw(error) {
      let taskInstance = this._taskInstance;
      taskInstance.proceed.call(taskInstance, this._resumeIndex, YIELDABLE_THROW, error);
    }
  }

  /**
   * Yieldables are a primitive for building safe, cancelation-aware ways to
   * instrument and introspect the runtime of a task. Many Yieldables are built-in
   * to ember-concurrency today, such as `timeout`, `animationFrame`, and
   * `rawTimeout`.
   *
   * For example, if I wanted to implement a yieldable for `requestIdleCallback`,
   * I could do the following:
   *
   * ```javascript
   * import Component from '@glimmer/component';
   * import { task, Yieldable } from 'ember-concurrency';
   *
   * class IdleCallbackYieldable extends Yieldable {
   *   onYield(state) {
   *     let callbackId = requestIdleCallback(() => state.next());
   *
   *     return () => cancelIdleCallback(callbackId);
   *   }
   * }
   *
   * const idleCallback = () => new IdleCallbackYieldable();
   *
   * class MyComponent extends Component {
   *   &#64;task *backgroundTask() {
   *     while (1) {
   *       yield idleCallback();
   *
   *       const data = this.complicatedNumberCrunching();
   *       yield this.sendData(data);
   *     }
   *   }
   * }
   * ```
   *
   * In general, `Yieldable` instances **should** be reusable across calls, and thus
   * care should be taken to ensure that teardown is provided and state not
   * intended to be shared across calls stay inside `onYield`.
   *
   * `Yieldable` also provides automatic Promise-casting.
   *
   * <style>
   *   .ignore-this--this-is-here-to-hide-constructor,
   *   #Yieldable { display: none }
   * </style>
   *
   * @class Yieldable
   */
  class Yieldable {
    constructor() {
      this[yieldableSymbol] = this[yieldableSymbol].bind(this);
    }

    /**
     * Defines what happens when the task encounters `yield myYieldable` and returns
     * a disposer function that handles any cleanup.
     *
     * The state parameter is provided by the runtime, and provides operations for
     * interacting with the yielding task instance and advancing, returning,
     * throwing, or canceling its execution.
     *
     * @method onYield
     * @memberof Yieldable
     * @param {YieldableState} state
     * @instance
     * @public
     */
    onYield() {}
    _deferable() {
      let def = {
        resolve: undefined,
        reject: undefined
      };
      def.promise = new Promise((resolve, reject) => {
        def.resolve = resolve;
        def.reject = reject;
      });
      return def;
    }
    _toPromise() {
      let def = this._deferable();
      let thinInstance = {
        proceed(_index, resumeType, value) {
          if (resumeType == YIELDABLE_CONTINUE || resumeType == YIELDABLE_RETURN) {
            def.resolve(value);
          } else {
            def.reject(value);
          }
        }
      };
      let maybeDisposer = this[yieldableSymbol](thinInstance, 0);
      def.promise[cancelableSymbol] = maybeDisposer;
      return def.promise;
    }

    /**
     * Returns a promise that resolves with the value yielded back to or returned
     * to the yielded task, or rejects with either the exception thrown from the
     * Yieldable, or an error with a `.name` property with value `"TaskCancelation"`.
     *
     * @method then
     * @memberof Yieldable
     * @instance
     * @return {Promise}
     */
    then(...args) {
      return this._toPromise().then(...args);
    }

    /**
     * @method catch
     * @memberof Yieldable
     * @instance
     * @return {Promise}
     */
    catch(...args) {
      return this._toPromise().catch(...args);
    }

    /**
     * @method finally
     * @memberof Yieldable
     * @instance
     * @return {Promise}
     */
    finally(...args) {
      return this._toPromise().finally(...args);
    }
    [yieldableSymbol](taskInstance, resumeIndex) {
      let state = new YieldableState(taskInstance, resumeIndex);
      return this.onYield(state);
    }
  }
  _exports.Yieldable = Yieldable;
  class AnimationFrameYieldable extends Yieldable {
    onYield(state) {
      let timerId = requestAnimationFrame(() => state.next());
      return () => cancelAnimationFrame(timerId);
    }
  }
  class ForeverYieldable extends Yieldable {
    onYield() {}
  }
  class RawTimeoutYieldable extends Yieldable {
    constructor(ms) {
      super();
      this.ms = ms;
    }
    onYield(state) {
      let timerId = setTimeout(() => state.next(), this.ms);
      return () => clearTimeout(timerId);
    }
  }

  /**
   * Yielding `animationFrame()` will pause a task until after the next animation
   * frame using the native `requestAnimationFrame()` browser API.
   *
   * The task below, when performed, will print the time since the last loop run
   * for every animation frame.
   *
   * ```js
   * export default class MyComponent extends Component {
   *   &#64;task *myTask() {
   *     let lastNow = performance.now();
   *     while (true) {
   *       yield animationFrame();
   *
   *       let now = performance.now();
   *       let dt = now - lastNow;
   *       lastNow = now;
   *
   *       console.log(dt);
   *     }
   *   }
   * }
   * ```
   */
  function animationFrame() {
    return new AnimationFrameYieldable();
  }

  /**
   *
   * Yielding `forever` will pause a task indefinitely until
   * it is cancelled (i.e. via host object destruction, the restartable modifier,
   * or manual cancellation).
   *
   * This is often useful in cases involving animation: if you're
   * using Liquid Fire, or some other animation scheme, sometimes you'll
   * notice buttons visibly reverting to their inactive states during
   * a route transition. By yielding `forever` in a Component task that drives a
   * button's active state, you can keep a task indefinitely running
   * until the animation runs to completion.
   *
   * NOTE: Liquid Fire also includes a useful `waitUntilIdle()` method
   * on the `liquid-fire-transitions` service that you can use in a lot
   * of these cases, but it won't cover cases of asynchrony that are
   * unrelated to animation, in which case `forever` might be better suited
   * to your needs.
   *
   * ```js
   * import { task, forever } from 'ember-concurrency';
   * export default class MyComponent extends Component {
   *   &#64;service myService;
   *   &#64;task *myTask() {
   *     yield this.myService.doSomethingThatCausesATransition();
   *     yield forever;
   *   }
   * }
   * ```
   */
  const forever = _exports.forever = new ForeverYieldable();

  /**
   *
   * Yielding `rawTimeout(ms)` will pause a task for the duration
   * of time passed in, in milliseconds.
   *
   * The timeout will use the native `setTimeout()` browser API,
   * instead of the Ember runloop, which means that test helpers
   * will *not* wait for it to complete.
   *
   * The task below, when performed, will print a message to the
   * console every second.
   *
   * ```js
   * export default class MyComponent extends Component {
   *   &#64;task *myTask() {
   *     while (true) {
   *       console.log("Hello!");
   *       yield rawTimeout(1000);
   *     }
   *   }
   * }
   * ```
   *
   * @param {number} ms - the amount of time to sleep before resuming
   *   the task, in milliseconds
   */
  function rawTimeout(ms) {
    return new RawTimeoutYieldable(ms);
  }
});
;define("ember-concurrency/-private/helpers", ["exports", "@ember/object", "@ember/debug"], function (_exports, _object, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.taskHelperClosure = taskHelperClosure;
  function taskHelperClosure(helperName, taskMethod, _args, hash) {
    let task = _args[0];
    let outerArgs = _args.slice(1);
    return function (...innerArgs) {
      if (!task || typeof task[taskMethod] !== 'function') {
        (true && !(false) && (0, _debug.assert)(`The first argument passed to the \`${helperName}\` helper should be a Task object (without quotes); you passed ${task}`, false));
        return;
      }
      if (hash && hash.value) {
        let event = innerArgs.pop();
        innerArgs.push((0, _object.get)(event, hash.value));
      }
      return task[taskMethod](...outerArgs, ...innerArgs);
    };
  }
});
;define("ember-concurrency/-private/scheduler/ember-scheduler", ["exports", "ember-concurrency/-private/external/scheduler/scheduler", "@ember/runloop"], function (_exports, _scheduler, _runloop) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class EmberScheduler extends _scheduler.default {
    scheduleRefresh() {
      (0, _runloop.once)(this, this.refresh);
    }
  }
  var _default = _exports.default = EmberScheduler;
});
;define("ember-concurrency/-private/task-decorators", ["exports", "@ember/object", "ember-concurrency/-private/external/task-decorators", "ember-concurrency/-private/task-factory", "ember-concurrency/-private/utils"], function (_exports, _object, _taskDecorators, _taskFactory, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.taskGroup = _exports.task = _exports.restartableTaskGroup = _exports.restartableTask = _exports.lastValue = _exports.keepLatestTaskGroup = _exports.keepLatestTask = _exports.enqueueTaskGroup = _exports.enqueueTask = _exports.dropTaskGroup = _exports.dropTask = void 0;
  const computedLastValue = (0, _taskDecorators.decoratorWithParams)((target, key, descriptor, [taskName] = []) => {
    const {
      initializer
    } = descriptor;
    delete descriptor.initializer;
    let cp = (0, _object.computed)(`${taskName}.lastSuccessful`, function () {
      let lastInstance = (0, _object.get)(this, `${taskName}.lastSuccessful`);
      if (lastInstance) {
        // eslint-disable-next-line ember/no-get
        return (0, _object.get)(lastInstance, 'value');
      }
      if (initializer) {
        return initializer.call(this);
      }
      return undefined;
    });
    return cp(target, key, descriptor);
  });
  const lastValue = _exports.lastValue = _utils.USE_TRACKED ? _taskDecorators.lastValue : computedLastValue;

  /**
   * A Task is a cancelable, restartable, asynchronous operation that
   * is driven by a generator function. Tasks are automatically canceled
   * when the object they live on is destroyed (e.g. a Component
   * is unrendered).
   *
   * Turns the decorated generator function into a task.
   *
   * Optionally takes a hash of options that will be applied as modifiers to the
   * task. For instance `maxConcurrency`, `on`, `group` or `keepLatest`.
   *
   * By default, tasks have no concurrency constraints
   * (multiple instances of a task can be running at the same time)
   * but much of a power of tasks lies in proper usage of Task Modifiers
   * that you can apply to a task.
   *
   * You can also define an
   * <a href="/docs/advanced/encapsulated-task">Encapsulated Task</a>
   * by decorating an object that defines a `perform` generator
   * method.
   *
   * ```js
   * import Component from '@ember/component';
   * import { task } from 'ember-concurrency';
   *
   * class MyComponent extends Component {
   *   &#64;task
   *   *plainTask() {}
   *
   *   &#64;task({ maxConcurrency: 5, keepLatest: true, cancelOn: 'click' })
   *   *taskWithModifiers() {}
   * }
   * ```
   *
   * @function
   * @param {object?} [options={}] Task modifier options
   * @param {string|string[]} [options.cancelOn] Events to cancel task on. Applies only to `&#64;ember/component`
   * @param {boolean} [options.enqueue] Sets `enqueue` modifier on task if `true`
   * @param {boolean} [options.evented] Enables [task lifecycle events](/docs/advanced/lifecycle-events) for this Task, if `true`
   * @param {boolean} [options.debug] Enables task debugging if `true`
   * @param {boolean} [options.drop] Sets `drop` modifier on task if `true`
   * @param {string} [options.group] Associates task with the group specified
   * @param {boolean} [options.keepLatest] Sets `keepLatest` modifier on task if `true`
   * @param {number} [options.maxConcurrency] Sets the maximum number of running task instances for the task
   * @param {string|string[]} [options.observes] Properties to watch and cause task to be performed when they change
   * @param {string|string[]} [options.on] Events to perform task on. Applies only to `&#64;ember/component`
   * @param {function?} [options.onState] Callback to use for state tracking. May be set to `null` to disable state tracking.
   * @param {boolean} [options.restartable] Sets `restartable` modifier on task if `true`
   * @return {Task}
   */
  const task = _exports.task = (0, _taskDecorators.createTaskDecorator)({}, _taskFactory.TaskFactory);

  /**
   * Turns the decorated generator function into a task and applies the
   * `drop` modifier.
   *
   * Optionally takes a hash of options that will be applied as modifiers to the
   * task. For instance `maxConcurrency`, `on`, or `group`.
   *
   * You can also define an
   * <a href="/docs/advanced/encapsulated-task">Encapsulated Task</a>
   * by decorating an object that defines a `perform` generator
   * method.
   *
   * ```js
   * import Component from '@ember/component';
   * import { task, dropTask } from 'ember-concurrency';
   *
   * class MyComponent extends Component {
   *   &#64;task
   *   *plainTask() {}
   *
   *   &#64;dropTask({ cancelOn: 'click' })
   *   *myDropTask() {}
   * }
   * ```
   *
   * @function
   * @param {object?} [options={}] Task modifier options. See {@link task} for list.
   * @return {Task}
   */
  const dropTask = _exports.dropTask = (0, _taskDecorators.createTaskDecorator)({
    drop: true
  }, _taskFactory.TaskFactory);

  /**
   * Turns the decorated generator function into a task and applies the
   * `enqueue` modifier.
   *
   * Optionally takes a hash of options that will be applied as modifiers to the
   * task. For instance `maxConcurrency`, `on`, or `group`.
   *
   * You can also define an
   * <a href="/docs/advanced/encapsulated-task">Encapsulated Task</a>
   * by decorating an object that defines a `perform` generator
   * method.
   *
   * ```js
   * import Component from '@ember/component';
   * import { task, enqueueTask } from 'ember-concurrency';
   *
   * class MyComponent extends Component {
   *   &#64;task
   *   *plainTask() {}
   *
   *   &#64;enqueueTask({ cancelOn: 'click' })
   *   *myEnqueueTask() {}
   * }
   * ```
   *
   * @function
   * @param {object?} [options={}] Task modifier options. See {@link task} for list.
   * @return {Task}
   */
  const enqueueTask = _exports.enqueueTask = (0, _taskDecorators.createTaskDecorator)({
    enqueue: true
  }, _taskFactory.TaskFactory);

  /**
   * Turns the decorated generator function into a task and applies the
   * `keepLatest` modifier.
   *
   * Optionally takes a hash of options that will be applied as modifiers to the
   * task. For instance `maxConcurrency`, `on`, or `group`.
   *
   * You can also define an
   * <a href="/docs/advanced/encapsulated-task">Encapsulated Task</a>
   * by decorating an object that defines a `perform` generator
   * method.
   *
   * ```js
   * import Component from '@ember/component';
   * import { task, keepLatestTask } from 'ember-concurrency';
   *
   * class MyComponent extends Component {
   *   &#64;task
   *   *plainTask() {}
   *
   *   &#64;keepLatestTask({ cancelOn: 'click' })
   *   *myKeepLatestTask() {}
   * }
   * ```
   *
   * @function
   * @param {object?} [options={}] Task modifier options. See {@link task} for list.
   * @return {Task}
   */
  const keepLatestTask = _exports.keepLatestTask = (0, _taskDecorators.createTaskDecorator)({
    keepLatest: true
  }, _taskFactory.TaskFactory);

  /**
   * Turns the decorated generator function into a task and applies the
   * `restartable` modifier.
   *
   * Optionally takes a hash of options that will be applied as modifiers to the
   * task. For instance `maxConcurrency`, `on`, or `group`.
   *
   * You can also define an
   * <a href="/docs/advanced/encapsulated-task">Encapsulated Task</a>
   * by decorating an object that defines a `perform` generator
   * method.
   *
   * ```js
   * import Component from '@ember/component';
   * import { task, restartableTask } from 'ember-concurrency';
   *
   * class MyComponent extends Component {
   *   &#64;task
   *   *plainTask() {}
   *
   *   &#64;restartableTask({ cancelOn: 'click' })
   *   *myRestartableTask() {}
   * }
   * ```
   *
   * @function
   * @param {object?} [options={}] Task modifier options. See {@link task} for list.
   * @return {Task}
   */
  const restartableTask = _exports.restartableTask = (0, _taskDecorators.createTaskDecorator)({
    restartable: true
  }, _taskFactory.TaskFactory);

  /**
   * "Task Groups" provide a means for applying
   * task modifiers to groups of tasks. Once a {@linkcode Task} is declared
   * as part of a group task, modifiers like `drop` or `restartable`
   * will no longer affect the individual `Task`. Instead those
   * modifiers can be applied to the entire group.
   *
   * Turns the decorated property into a task group.
   *
   * Optionally takes a hash of options that will be applied as modifiers to the
   * task group. For instance `maxConcurrency` or `keepLatest`.
   *
   * ```js
   * import Component from '@glimmer/component';
   * import { task, taskGroup } from 'ember-concurrency';
   *
   * class MyComponent extends Component {
   *   &#64;taskGroup({ maxConcurrency: 5 }) chores;
   *
   *   &#64;task({ group: 'chores' })
   *   *mowLawn() {}
   *
   *   &#64;task({ group: 'chores' })
   *   *doDishes() {}
   * }
   * ```
   *
   * @function
   * @param {object?} [options={}] Task group modifier options. See {@link task} for list.
   * @return {TaskGroup}
   */
  const taskGroup = _exports.taskGroup = (0, _taskDecorators.createTaskGroupDecorator)({}, _taskFactory.TaskFactory);

  /**
   * Turns the decorated property into a task group and applies the
   * `drop` modifier.
   *
   * Optionally takes a hash of further options that will be applied as modifiers
   * to the task group.
   *
   * @function
   * @param {object?} [options={}] Task group modifier options. See {@link task} for list.
   * @return {TaskGroup}
   */
  const dropTaskGroup = _exports.dropTaskGroup = (0, _taskDecorators.createTaskGroupDecorator)({
    drop: true
  }, _taskFactory.TaskFactory);

  /**
   * Turns the decorated property into a task group and applies the
   * `enqueue` modifier.
   *
   * Optionally takes a hash of further options that will be applied as modifiers
   * to the task group.
   *
   * @function
   * @param {object?} [options={}] Task group modifier options. See {@link task} for list.
   * @return {TaskGroup}
   */
  const enqueueTaskGroup = _exports.enqueueTaskGroup = (0, _taskDecorators.createTaskGroupDecorator)({
    enqueue: true
  }, _taskFactory.TaskFactory);

  /**
   * Turns the decorated property into a task group and applies the
   * `keepLatest` modifier.
   *
   * Optionally takes a hash of further options that will be applied as modifiers
   * to the task group.
   *
   * @function
   * @param {object?} [options={}] Task group modifier options. See {@link task} for list.
   * @return {TaskGroup}
   */
  const keepLatestTaskGroup = _exports.keepLatestTaskGroup = (0, _taskDecorators.createTaskGroupDecorator)({
    keepLatest: true
  }, _taskFactory.TaskFactory);

  /**
   * Turns the decorated property into a task group and applies the
   * `restartable` modifier.
   *
   * Optionally takes a hash of further options that will be applied as modifiers
   * to the task group.
   *
   * @function
   * @param {object?} [options={}] Task group modifier options. See {@link task} for list.
   * @return {TaskGroup}
   */
  const restartableTaskGroup = _exports.restartableTaskGroup = (0, _taskDecorators.createTaskGroupDecorator)({
    restartable: true
  }, _taskFactory.TaskFactory);
});
;define("ember-concurrency/-private/task-factory", ["exports", "@ember/debug", "@ember/object", "@ember/object/events", "@ember/object/observers", "@ember/runloop", "ember-concurrency/-private/external/task-factory", "ember-concurrency/-private/task", "ember-concurrency/-private/task-properties", "ember-concurrency/-private/task-group", "ember-concurrency/-private/scheduler/ember-scheduler", "ember-concurrency/-private/ember-environment"], function (_exports, _debug, _object, _events, _observers, _runloop, _taskFactory, _task, _taskProperties, _taskGroup, _emberScheduler, _emberEnvironment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TaskFactory = void 0;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  let handlerCounter = 0;
  function registerOnPrototype(addListenerOrObserver, proto, names, taskName, taskMethod, once) {
    if (names && names.length > 0) {
      for (let i = 0; i < names.length; ++i) {
        let name = names[i];
        let handlerName = `__ember_concurrency_handler_${handlerCounter++}`;
        proto[handlerName] = makeTaskCallback(taskName, taskMethod, once);
        addListenerOrObserver(proto, name, null, handlerName);
      }
    }
  }
  function makeTaskCallback(taskName, method, once) {
    return function () {
      let task = (0, _object.get)(this, taskName);
      if (once) {
        (0, _runloop.scheduleOnce)('actions', task, method, ...arguments);
      } else {
        task[method].apply(task, arguments);
      }
    };
  }
  const ensureArray = possibleArr => Array.isArray(possibleArr) ? possibleArr : [possibleArr];
  (0, _taskFactory.registerModifier)('cancelOn', (factory, eventNames) => factory.addCancelEvents(...ensureArray(eventNames)));
  (0, _taskFactory.registerModifier)('observes', (factory, propertyPaths) => factory.addObserverKeys(...ensureArray(propertyPaths)));
  (0, _taskFactory.registerModifier)('on', (factory, eventNames) => factory.addPerformEvents(...ensureArray(eventNames)));
  class TaskFactory extends _taskFactory.TaskFactory {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "env", _emberEnvironment.EMBER_ENVIRONMENT);
    }
    createTask(context) {
      (true && !(this.taskDefinition) && (0, _debug.assert)(`Cannot create task if a task definition is not provided as generator function or encapsulated task.`, this.taskDefinition));
      let options = this.getTaskOptions(context);
      if (typeof this.taskDefinition === 'object') {
        return new _task.EncapsulatedTask(Object.assign({
          taskObj: this.taskDefinition
        }, options));
      } else {
        return new _task.Task(Object.assign({
          generatorFactory: args => this.taskDefinition.apply(context, args)
        }, options));
      }
    }
    createTaskGroup(context) {
      (true && !(!this.taskDefinition) && (0, _debug.assert)(`A task definition is not expected for a task group.`, !this.taskDefinition));
      let options = this.getTaskOptions(context);
      return new _taskGroup.TaskGroup(options);
    }
    addCancelEvents(...cancelEventNames) {
      this._cancelEventNames = this._cancelEventNames || [];
      this._cancelEventNames.push(...cancelEventNames);
      return this;
    }
    addObserverKeys(...keys) {
      this._observes = this._observes || [];
      this._observes.push(...keys);
      return this;
    }
    addPerformEvents(...eventNames) {
      this._eventNames = this._eventNames || [];
      this._eventNames.push(...eventNames);
      return this;
    }
    getModifier(name) {
      let modifier = super.getModifier(name);
      if (!modifier && typeof _taskProperties.TaskProperty.prototype[name] === 'function') {
        // Shim for compatibility with user-defined TaskProperty prototype
        // extensions. To be removed when replaced with proper public API.
        modifier = _taskProperties.TaskProperty.prototype[name].bind(this);
      }
      (true && !(modifier) && (0, _debug.assert)(`Task option '${name}' is not recognized as a supported option.`, modifier));
      return modifier;
    }
    getScheduler(schedulerPolicy, stateTrackingEnabled) {
      return new _emberScheduler.default(schedulerPolicy, stateTrackingEnabled);
    }
    _setupEmberKVO(proto) {
      // TODO: Does this make sense in a post-Ember object world?

      registerOnPrototype(_events.addListener, proto, this._eventNames, this.name, 'perform', false);
      registerOnPrototype(_events.addListener, proto, this._cancelEventNames, this.name, 'cancelAll', false);
      registerOnPrototype(_observers.addObserver, proto, this._observes, this.name, 'perform', true);
    }

    // Provided for compatibility with ember-concurrency TaskProperty extension
    // methods
    get taskFn() {
      return this.taskDefinition;
    }
    set taskFn(fn) {
      this.setTaskDefinition(fn);
    }
  }
  _exports.TaskFactory = TaskFactory;
});
;define("ember-concurrency/-private/task-group", ["exports", "ember-concurrency/-private/external/task/task-group", "ember-concurrency/-private/taskable-mixin", "ember-concurrency/-private/tracked-state"], function (_exports, _taskGroup, _taskableMixin, _trackedState) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TaskGroup = void 0;
  /**
   * "Task Groups" provide a means for applying
   * task modifiers to groups of tasks. Once a {@linkcode Task} is declared
   * as part of a group task, modifiers like `drop` or `restartable`
   * will no longer affect the individual `Task`. Instead those
   * modifiers can be applied to the entire group.
   *
   * Turns the decorated property into a task group.
   *
   * Optionally takes a hash of options that will be applied as modifiers to the
   * task group. For instance `maxConcurrency` or `keepLatest`.
   *
   * ```js
   * import Component from '@glimmer/component';
   * import { task, taskGroup } from 'ember-concurrency';
   *
   * class MyComponent extends Component {
   *   &#64;taskGroup({ maxConcurrency: 5 }) chores;
   *
   *   &#64;task({ group: 'chores' })
   *   *mowLawn() {}
   *
   *   &#64;task({ group: 'chores' })
   *   *doDishes() {}
   * }
   * ```
   *
   * <style>
   *  .ignore-this--this-is-here-to-hide-constructor,
   *  #TaskGroup { display: none }
   * </style>
   *
   * @class TaskGroup
   */
  class TaskGroup extends _taskGroup.TaskGroup {
    /**
     * Cancels all running or queued `TaskInstance`s for this task group.
     * If you're trying to cancel a specific TaskInstance (rather
     * than all of the instances running under this task group) call
     * `.cancel()` on the specific TaskInstance.
     *
     * @method cancelAll
     * @memberof TaskGroup
     * @param options.reason A descriptive reason the task group was
     *   cancelled. Defaults to `".cancelAll() was explicitly called
     *   on the Task"`.
     * @param options.resetState If true, will clear the task group state
     *   (`last*` and `performCount` properties will be set to initial
     *   values). Defaults to false.
     * @instance
     * @async
     *
     */
    /**
     * `true` if any current task instances are running.
     *
     * @memberof TaskGroup
     * @member {boolean} isRunning
     * @instance
     * @readOnly
     */
    /**
     * `true` if any future task instances are queued.
     *
     * @memberof TaskGroup
     * @member {boolean} isQueued
     * @instance
     * @readOnly
     */
    /**
     * `true` if the task is not in the running or queued state.
     *
     * @memberof TaskGroup
     * @member {boolean} isIdle
     * @instance
     * @readOnly
     */
    /**
     * The current state of the task: `"running"`, `"queued"` or `"idle"`.
     *
     * @memberof TaskGroup
     * @member {string} state
     * @instance
     * @readOnly
     */
    /**
     * The most recently started task instance.
     *
     * @memberof TaskGroup
     * @member {TaskInstance} last
     * @instance
     * @readOnly
     */
    /**
     * The most recent task instance that is currently running.
     *
     * @memberof TaskGroup
     * @member {TaskInstance} lastRunning
     * @instance
     * @readOnly
     */
    /**
     * The most recently performed task instance.
     *
     * @memberof TaskGroup
     * @member {TaskInstance} lastPerformed
     * @instance
     * @readOnly
     */
    /**
     * The most recent task instance that succeeded.
     *
     * @memberof TaskGroup
     * @member {TaskInstance} lastSuccessful
     * @instance
     * @readOnly
     */
    /**
     * The most recently completed task instance.
     *
     * @memberof TaskGroup
     * @member {TaskInstance} lastComplete
     * @instance
     * @readOnly
     */
    /**
     * The most recent task instance that errored.
     *
     * @memberof TaskGroup
     * @member {TaskInstance} lastErrored
     * @instance
     * @readOnly
     */
    /**
     * The most recently canceled task instance.
     *
     * @memberof TaskGroup
     * @member {TaskInstance} lastCanceled
     * @instance
     * @readOnly
     */
    /**
     * The most recent task instance that is incomplete.
     *
     * @memberof TaskGroup
     * @member {TaskInstance} lastIncomplete
     * @instance
     * @readOnly
     */
    /**
     * The number of times this task has been performed.
     *
     * @memberof TaskGroup
     * @member {number} performCount
     * @instance
     * @readOnly
     */
  }
  _exports.TaskGroup = TaskGroup;
  if (_trackedState.TRACKED_INITIAL_TASK_STATE) {
    Object.defineProperties(TaskGroup.prototype, _trackedState.TRACKED_INITIAL_TASK_STATE);
  }
  Object.assign(TaskGroup.prototype, _taskableMixin.TASKABLE_MIXIN);
});
;define("ember-concurrency/-private/task-instance", ["exports", "ember-concurrency/-private/external/task-instance/base", "ember-concurrency/-private/tracked-state", "ember-concurrency/-private/utils"], function (_exports, _base, _trackedState, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TaskInstance = void 0;
  /**
    A `TaskInstance` represent a single execution of a
    {@linkcode Task}. Every call to {@linkcode Task#perform} returns
    a `TaskInstance`.
  
    `TaskInstance`s are cancelable, either explicitly
    via {@linkcode TaskInstance#cancel} or {@linkcode Task#cancelAll},
    or automatically due to the host object being destroyed, or
    because concurrency policy enforced by a
    {@linkcode TaskProperty Task Modifier} canceled the task instance.
  
    <style>
      .ignore-this--this-is-here-to-hide-constructor,
      #TaskInstance { display: none }
    </style>
  
    @class TaskInstance
  */

  class TaskInstance extends _base.BaseTaskInstance {
    setState(props) {
      let state = this._recomputeState(props);
      (0, _utils.assignProperties)(this, {
        ...props,
        isRunning: !props.isFinished,
        isDropped: state === 'dropped',
        state
      });
    }
    _recomputeState(props) {
      if (props.isDropped) {
        return 'dropped';
      } else if (props.isCanceled) {
        if (props.hasStarted) {
          return 'canceled';
        } else {
          return 'dropped';
        }
      } else if (props.isFinished) {
        return 'finished';
      } else if (props.hasStarted) {
        return 'running';
      } else {
        return 'waiting';
      }
    }
    onStarted() {
      this.triggerEvent('started', this);
    }
    onSuccess() {
      this.triggerEvent('succeeded', this);
    }
    onError(error) {
      this.triggerEvent('errored', this, error);
    }
    onCancel(cancelReason) {
      this.triggerEvent('canceled', this, cancelReason);
    }
    formatCancelReason(reason) {
      return `TaskInstance '${this.getName()}' was canceled because ${reason}. For more information, see: http://ember-concurrency.com/docs/task-cancelation-help`;
    }
    getName() {
      if (!this.name) {
        this.name = this.task && this.task.name || '<unknown>';
      }
      return this.name;
    }
    selfCancelLoopWarning(parent) {
      let parentName = `\`${parent.getName()}\``;
      let childName = `\`${this.getName()}\``;
      // eslint-disable-next-line no-console
      console.warn(`ember-concurrency detected a potentially hazardous "self-cancel loop" between parent task ${parentName} and child task ${childName}. If you want child task ${childName} to be canceled when parent task ${parentName} is canceled, please change \`.perform()\` to \`.linked().perform()\`. If you want child task ${childName} to keep running after parent task ${parentName} is canceled, change it to \`.unlinked().perform()\``);
    }
    triggerEvent(...allArgs) {
      if (!this.hasEnabledEvents) {
        return;
      }
      let taskInstance = this;
      let task = taskInstance.task;
      let host = task.context;
      let eventNamespace = task && task.name;
      if (host && host.trigger && eventNamespace) {
        let [eventType, ...args] = allArgs;
        host.trigger(`${eventNamespace}:${eventType}`, ...args);
      }
    }

    /**
     * Describes the state that the task instance is in. Can be used for debugging,
     * or potentially driving some UI state. Possible values are:
     *
     * - `"dropped"`: task instance was canceled before it started
     * - `"canceled"`: task instance was canceled before it could finish
     * - `"finished"`: task instance ran to completion (even if an exception was thrown)
     * - `"running"`: task instance is currently running (returns true even if
     *     is paused on a yielded promise)
     * - `"waiting"`: task instance hasn't begun running yet (usually
     *     because the task is using the {@linkcode TaskProperty#enqueue enqueue}
     *     task modifier)
     *
     * The animated timeline examples on the [Task Concurrency](/docs/task-concurrency)
     * docs page make use of this property.
     *
     * @name state
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */

    /**
     * True if the TaskInstance was canceled before it could
     * ever start running. For example, calling
     * {@linkcode Task#perform .perform()} twice on a
     * task with the {@linkcode TaskProperty#drop drop} modifier applied
     * will result in the second task instance being dropped.
     *
     * @name isDropped
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */

    /**
     * True if the task is still running.
     *
     * @name isRunning
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */

    /**
     * Event emitted when a new {@linkcode TaskInstance} starts executing.
     *
     * `on` from `@ember/object/evented` may be used to create a binding on the host object to the event.
     *
     * ```js
     * export default Component.extend({
     *   doSomething: task(function * () {
     *     // ... does something
     *   }),
     *
     *   onDoSomethingStarted: on('doSomething:started', function (taskInstance) {
     *     // ...
     *   })
     * });
     * ```
     *
     * @event TaskInstance#TASK_NAME:started
     * @param {TaskInstance} taskInstance - Task instance that was started
     */

    /**
     * Event emitted when a {@linkcode TaskInstance} succeeds.
     *
     * `on` from `@ember/object/evented` may be used to create a binding on the host object to the event.
     *
     * ```js
     * export default Component.extend({
     *   doSomething: task(function * () {
     *     // ... does something
     *   }),
     *
     *   onDoSomethingSucceeded: on('doSomething:succeeded', function (taskInstance) {
     *     // ...
     *   })
     * });
     * ```
     *
     * @event TaskInstance#TASK_NAME:succeeded
     * @param {TaskInstance} taskInstance - Task instance that was succeeded
     */

    /**
     * Event emitted when a {@linkcode TaskInstance} throws an an error that is
     * not handled within the task itself.
     *
     * `on` from `@ember/object/evented` may be used to create a binding on the host object to the event.
     *
     * ```js
     * export default Component.extend({
     *   doSomething: task(function * () {
     *     // ... does something
     *   }),
     *
     *   onDoSomethingErrored: on('doSomething:errored', function (taskInstance, error) {
     *     // ...
     *   })
     * });
     * ```
     *
     * @event TaskInstance#TASK_NAME:errored
     * @param {TaskInstance} taskInstance - Task instance that was started
     * @param {Error} error - Error that was thrown by the task instance
     */

    /**
     * Event emitted when a {@linkcode TaskInstance} is canceled.
     *
     * `on` from `@ember/object/evented` may be used to create a binding on the host object to the event.
     *
     * ```js
     * export default Component.extend({
     *   doSomething: task(function * () {
     *     // ... does something
     *   }),
     *
     *   onDoSomethingCanceled: on('doSomething:canceled', function (taskInstance, cancelationReason) {
     *     // ...
     *   })
     * });
     * ```
     *
     * @event TaskInstance#TASK_NAME:canceled
     * @param {TaskInstance} taskInstance - Task instance that was started
     * @param {string} cancelationReason - Cancelation reason that was was provided to {@linkcode TaskInstance#cancel}
     */

    /**
     * Cancels the task instance. Has no effect if the task instance has
     * already been canceled or has already finished running.
     *
     * @method cancel
     * @memberof TaskInstance
     * @instance
     * @async
     */

    /**
     * Returns a promise that resolves with the value returned
     * from the task's (generator) function, or rejects with
     * either the exception thrown from the task function, or
     * an error with a `.name` property with value `"TaskCancelation"`.
     *
     * @method then
     * @memberof TaskInstance
     * @instance
     * @return {Promise}
     */

    /**
     * @method catch
     * @memberof TaskInstance
     * @instance
     * @return {Promise}
     */

    /**
     * @method finally
     * @memberof TaskInstance
     * @instance
     * @return {Promise}
     */
  }
  _exports.TaskInstance = TaskInstance;
  if (_trackedState.TRACKED_INITIAL_INSTANCE_STATE) {
    Object.defineProperties(TaskInstance.prototype, _trackedState.TRACKED_INITIAL_INSTANCE_STATE);
  }
});
;define("ember-concurrency/-private/task-properties", ["exports", "ember", "@ember/object", "@ember/object/computed", "ember-concurrency/-private/external/scheduler/policies/enqueued-policy", "ember-concurrency/-private/external/scheduler/policies/drop-policy", "ember-concurrency/-private/external/scheduler/policies/keep-latest-policy", "ember-concurrency/-private/external/scheduler/policies/restartable-policy"], function (_exports, _ember, _object, _computed, _enqueuedPolicy, _dropPolicy, _keepLatestPolicy, _restartablePolicy) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.propertyModifiers = _exports.TaskProperty = _exports.TaskGroupProperty = void 0;
  _exports.taskComputed = taskComputed;
  _exports.taskFactorySymbol = void 0;
  let taskFactorySymbol = _exports.taskFactorySymbol = '__ec_task_factory';
  const propertyModifiers = _exports.propertyModifiers = {
    /**
     * Configures the task to cancel old currently task instances
     * to make room for a new one to perform. Sets default
     * maxConcurrency to 1.
     *
     * [See the Live Example](/docs/examples/route-tasks/1)
     *
     * @method restartable
     * @memberof TaskProperty
     * @instance
     */
    restartable() {
      this[taskFactorySymbol].setBufferPolicy(_restartablePolicy.default);
      return this;
    },
    /**
     * Configures the task to run task instances one-at-a-time in
     * the order they were `.perform()`ed. Sets default
     * maxConcurrency to 1.
     *
     * @method enqueue
     * @memberof TaskProperty
     * @instance
     */
    enqueue() {
      this[taskFactorySymbol].setBufferPolicy(_enqueuedPolicy.default);
      return this;
    },
    /**
     * Configures the task to immediately cancel (i.e. drop) any
     * task instances performed when the task is already running
     * at maxConcurrency. Sets default maxConcurrency to 1.
     *
     * @method drop
     * @memberof TaskProperty
     * @instance
     */
    drop() {
      this[taskFactorySymbol].setBufferPolicy(_dropPolicy.default);
      return this;
    },
    /**
     * Configures the task to drop all but the most recently
     * performed {@linkcode TaskInstance }.
     *
     * @method keepLatest
     * @memberof TaskProperty
     * @instance
     */
    keepLatest() {
      this[taskFactorySymbol].setBufferPolicy(_keepLatestPolicy.default);
      return this;
    },
    /**
     * Sets the maximum number of task instances that are allowed
     * to run at the same time. By default, with no task modifiers
     * applied, this number is Infinity (there is no limit
     * to the number of tasks that can run at the same time).
     * {@linkcode TaskProperty#restartable .restartable},
     * {@linkcode TaskProperty#enqueue .enqueue}, and
     * {@linkcode TaskProperty#drop .drop} set the default
     * maxConcurrency to 1, but you can override this value
     * to set the maximum number of concurrently running tasks
     * to a number greater than 1.
     *
     * [See the AJAX Throttling example](/docs/examples/ajax-throttling)
     *
     * The example below uses a task with `maxConcurrency(3)` to limit
     * the number of concurrent AJAX requests (for anyone using this task)
     * to 3.
     *
     * ```js
     * doSomeAjax: task(function * (url) {
     *   return fetch(url);
     * }).maxConcurrency(3),
     *
     * elsewhere() {
     *   this.doSomeAjax.perform("http://www.example.com/json");
     * },
     * ```
     *
     * @method maxConcurrency
     * @memberof TaskProperty
     * @param {Number} n The maximum number of concurrently running tasks
     * @instance
     */
    maxConcurrency(n) {
      this[taskFactorySymbol].setMaxConcurrency(n);
      return this;
    },
    /**
     * Adds this task to a TaskGroup so that concurrency constraints
     * can be shared between multiple tasks.
     *
     * [See the Task Group docs for more information](/docs/task-groups)
     *
     * @method group
     * @memberof TaskProperty
     * @param {String} groupPath A path to the TaskGroup property
     * @instance
     */
    group(taskGroupPath) {
      this[taskFactorySymbol].setGroup(taskGroupPath);
      return this;
    },
    /**
     * Activates lifecycle events, allowing Evented host objects to react to task state
     * changes.
     *
     * ```js
     *
     * export default Component.extend({
     *   uploadTask: task(function* (file) {
     *     // ... file upload stuff
     *   }).evented(),
     *
     *   uploadedStarted: on('uploadTask:started', function(taskInstance) {
     *     this.analytics.track("User Photo: upload started");
     *   }),
     * });
     * ```
     *
     * @method evented
     * @memberof TaskProperty
     * @instance
     */
    evented() {
      this[taskFactorySymbol].setEvented(true);
      return this;
    },
    /**
     * Logs lifecycle events to aid in debugging unexpected Task behavior.
     * Presently only logs cancelation events and the reason for the cancelation,
     * e.g. "TaskInstance 'doStuff' was canceled because the object it lives on was destroyed or unrendered"
     *
     * @method debug
     * @memberof TaskProperty
     * @instance
     */
    debug() {
      this[taskFactorySymbol].setDebug(true);
      return this;
    },
    /**
     * Configures the task to call the passed in callback for derived state updates,
     * overriding the default derived state tracking. You may call with `null` to
     * completely opt-out of derived state tracking.
     *
     * @method onState
     * @memberof TaskProperty
     * @param {function?} callback Callback to be called. Receives an object argument with the new state.
     * @instance
     */
    onState(callback) {
      this[taskFactorySymbol].setOnState(callback);
      return this;
    }
  };

  /**
    A {@link TaskProperty} is the Computed Property-like object returned
    from the {@linkcode task} function. You can call Task Modifier methods
    on this object to configure the behavior of the {@link Task}.
  
    See [Managing Task Concurrency](/docs/task-concurrency) for an
    overview of all the different task modifiers you can use and how
    they impact automatic cancelation / enqueueing of task instances.
  
    {@link TaskProperty} is only used for supporting "classic" Ember objects.
    When using Native JavaScript or TypeScript classes, you will use [task decorators](/docs/task-decorators)
    on methods instead.
  
    @class TaskProperty
  */
  let TaskProperty = _exports.TaskProperty = void 0;
  let TaskGroupProperty = _exports.TaskGroupProperty = void 0;
  if (true) {
    _exports.TaskProperty = TaskProperty = class {};
    _exports.TaskGroupProperty = TaskGroupProperty = class {};
  } else {
    // Prior to the 3.10.0 refactors, we had to extend the _ComputedProperty class
    // for a classic decorator/descriptor to run correctly.
    _exports.TaskProperty = TaskProperty = class extends _computed.default {
      callSuperSetup() {
        if (super.setup) {
          super.setup(...arguments);
        }
      }
    };
    _exports.TaskGroupProperty = TaskGroupProperty = class extends _computed.default {};
  }
  Object.assign(TaskGroupProperty.prototype, propertyModifiers);
  Object.assign(TaskProperty.prototype, propertyModifiers, {
    setup(proto, key) {
      if (this.callSuperSetup) {
        this.callSuperSetup(...arguments);
      }
      this[taskFactorySymbol].setName(key);
      this[taskFactorySymbol]._setupEmberKVO(proto);
    },
    /**
     * Calling `task(...).on(eventName)` configures the task to be
     * automatically performed when the specified events fire. In
     * this way, it behaves like
     * [Ember.on](http://emberjs.com/api/classes/Ember.html#method_on).
     *
     * You can use `task(...).on('init')` to perform the task
     * when the host object is initialized.
     *
     * ```js
     * export default Component.extend({
     *   pollForUpdates: task(function * () {
     *     // ... this runs when the Component is first created
     *     // because we specified .on('init')
     *   }).on('init'),
     *
     *   handleFoo: task(function * (a, b, c) {
     *     // this gets performed automatically if the 'foo'
     *     // event fires on this Component,
     *     // e.g., if someone called component.trigger('foo')
     *   }).on('foo'),
     * });
     * ```
     *
     * [See the Writing Tasks Docs for more info](/docs/writing-tasks)
     *
     * @method on
     * @memberof TaskProperty
     * @param {String} eventNames*
     * @instance
     */
    on() {
      this[taskFactorySymbol].addPerformEvents(...arguments);
      return this;
    },
    /**
     * This behaves like the {@linkcode TaskProperty#on task(...).on() modifier},
     * but instead will cause the task to be canceled if any of the
     * specified events fire on the parent object.
     *
     * [See the Live Example](/docs/examples/route-tasks/1)
     *
     * @method cancelOn
     * @memberof TaskProperty
     * @param {String} eventNames*
     * @instance
     */
    cancelOn() {
      this[taskFactorySymbol].addCancelEvents(...arguments);
      return this;
    },
    /**
     * This behaves like the {@linkcode TaskProperty#on task(...).on() modifier},
     * but instead will cause the task to be performed if any of the
     * specified properties on the parent object change.
     *
     * @method observes
     * @memberof TaskProperty
     * @param {String} keys*
     * @instance
     */
    observes() {
      this[taskFactorySymbol].addObserverKeys(...arguments);
      return this;
    }
  });
  const setDecorator = _ember.default._setClassicDecorator || _ember.default._setComputedDecorator;
  function taskComputed(fn) {
    if (true) {
      let cp = function (proto, key) {
        if (cp.setup !== undefined) {
          cp.setup(proto, key);
        }
        return (0, _object.computed)(fn)(...arguments);
      };
      setDecorator(cp);
      return cp;
    } else {
      return (0, _object.computed)(fn);
    }
  }
});
;define("ember-concurrency/-private/task-public-api", ["exports", "ember-concurrency/-private/task-factory", "ember-concurrency/-private/task-properties", "ember-concurrency/-private/task-decorators", "@ember/debug"], function (_exports, _taskFactory, _taskProperties, _taskDecorators, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.task = task;
  _exports.taskGroup = taskGroup;
  /**
   * TODO: update docs to reflect both old and new ES6 styles
   *
   * A Task is a cancelable, restartable, asynchronous operation that
   * is driven by a generator function. Tasks are automatically canceled
   * when the object they live on is destroyed (e.g. a Component
   * is unrendered).
   *
   * To define a task, use the `task(...)` function, and pass in
   * a generator function, which will be invoked when the task
   * is performed. The reason generator functions are used is
   * that they (like the proposed ES7 async-await syntax) can
   * be used to elegantly express asynchronous, cancelable
   * operations.
   *
   * You can also define an
   * <a href="/docs/advanced/encapsulated-task">Encapsulated Task</a>
   * by passing in an object that defined a `perform` generator
   * function property.
   *
   * The following Component defines a task called `myTask` that,
   * when performed, prints a message to the console, sleeps for 1 second,
   * prints a final message to the console, and then completes.
   *
   * ```js
   * import { task, timeout } from 'ember-concurrency';
   * export default Component.extend({
   *   myTask: task(function * () {
   *     console.log("Pausing for a second...");
   *     yield timeout(1000);
   *     console.log("Done!");
   *   })
   * });
   * ```
   *
   * ```hbs
   * <button {{action myTask.perform}}>Perform Task</button>
   * ```
   *
   * By default, tasks have no concurrency constraints
   * (multiple instances of a task can be running at the same time)
   * but much of a power of tasks lies in proper usage of Task Modifiers
   * that you can apply to a task.
   *
   * @param {function} generatorFunction the generator function backing the task.
   * @returns {TaskProperty}
   */
  function task(taskFnOrProtoOrDecoratorOptions, key, descriptor) {
    (true && !(!isUntranspiledAsyncFn(arguments[arguments.length - 1])) && (0, _debug.assert)(`It appears you're attempting to use the new task(async () => { ... }) syntax, but the async arrow task function you've provided is not being properly compiled by Babel.\n\nPossible causes / remedies:\n\n1. You must pass the async function expression directly to the task() function (it is not currently supported to pass in a variable containing the async arrow fn, or any other kind of indirection)\n2. The new task syntax is only supported by native classes. Ensure that this is one.\n3. If this code is in an addon, please ensure the addon specifies ember-concurrency "2.3.0" or higher in "dependencies" (not "devDependencies")\n4. Ensure that there is only one version of ember-concurrency v2.3.0+ being used in your project (including nested dependencies) and consider using npm/yarn/pnpm resolutions to enforce a single version is used`, !isUntranspiledAsyncFn(arguments[arguments.length - 1])));
    if (isDecoratorOptions(taskFnOrProtoOrDecoratorOptions) || key && descriptor) {
      return (0, _taskDecorators.task)(...arguments);
    } else {
      return buildClassicTaskProperty(taskFnOrProtoOrDecoratorOptions);
    }
  }
  function isUntranspiledAsyncFn(obj) {
    return obj && obj.constructor && obj.constructor.name === 'AsyncFunction';
  }

  /**
   * Build and return a "classic" TaskProperty, which is essentially a subclass of a Computed Property
   * descriptor that can be used to define Tasks on classic Ember.Objects.
   *
   * @private
   */
  function buildClassicTaskProperty(taskFn) {
    const taskProperty = (0, _taskProperties.taskComputed)(function () {
      taskProperty[_taskProperties.taskFactorySymbol].setTaskDefinition(taskProperty.taskFn);
      return taskProperty[_taskProperties.taskFactorySymbol].createTask(this);
    });
    taskProperty.taskFn = taskFn;
    taskProperty[_taskProperties.taskFactorySymbol] = new _taskFactory.TaskFactory();
    Object.setPrototypeOf(taskProperty, _taskProperties.TaskProperty.prototype);
    return taskProperty;
  }

  /**
   * "Task Groups" provide a means for applying
   * task modifiers to groups of tasks. Once a {@linkcode Task} is declared
   * as part of a group task, modifiers like `drop` or `restartable`
   * will no longer affect the individual `Task`. Instead those
   * modifiers can be applied to the entire group.
   *
   * ```js
   * import { task, taskGroup } from 'ember-concurrency';
   *
   * export default class MyController extends Controller {
   *   &#64;taskGroup({ drop: true }) chores;
   *
   *   &#64;task({ group: 'chores' }) mowLawn = taskFn;
   *   &#64;task({ group: 'chores' }) doDishes = taskFn;
   *   &#64;task({ group: 'chores' }) changeDiapers = taskFn;
   * }
   * ```
   *
   * @returns {TaskGroup}
   */
  function taskGroup(possibleDecoratorOptions, key, descriptor) {
    if (isDecoratorOptions(possibleDecoratorOptions) || key && descriptor) {
      return (0, _taskDecorators.taskGroup)(...arguments);
    } else {
      let tp = (0, _taskProperties.taskComputed)(function (key) {
        tp[_taskProperties.taskFactorySymbol].setName(key);
        return tp[_taskProperties.taskFactorySymbol].createTaskGroup(this);
      });
      tp[_taskProperties.taskFactorySymbol] = new _taskFactory.TaskFactory();
      Object.setPrototypeOf(tp, _taskProperties.TaskGroupProperty.prototype);
      return tp;
    }
  }
  function isDecoratorOptions(possibleOptions) {
    if (!possibleOptions) {
      return false;
    }
    if (typeof possibleOptions === 'function') {
      return false;
    }
    if (typeof possibleOptions === 'object' && 'perform' in possibleOptions && typeof possibleOptions.perform === 'function') {
      return false;
    }
    return Object.getPrototypeOf(possibleOptions) === Object.prototype;
  }
});
;define("ember-concurrency/-private/task", ["exports", "@ember/application", "@ember/object", "@ember/destroyable", "ember-concurrency/-private/external/task/task", "ember-concurrency/-private/task-instance", "ember-concurrency/-private/external/task-instance/executor", "ember-concurrency/-private/taskable-mixin", "ember-concurrency/-private/tracked-state", "ember-concurrency/-private/external/task-instance/cancelation"], function (_exports, _application, _object, _destroyable, _task, _taskInstance, _executor, _taskableMixin, _trackedState, _cancelation) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Task = _exports.EncapsulatedTask = void 0;
  /**
    The `Task` object lives on a host Ember object (e.g.
    a Component, Route, or Controller). You call the
    {@linkcode Task#perform .perform()} method on this object
    to create run individual {@linkcode TaskInstance}s,
    and at any point, you can call the {@linkcode Task#cancelAll .cancelAll()}
    method on this object to cancel all running or enqueued
    {@linkcode TaskInstance}s.
  
    <style>
      .ignore-this--this-is-here-to-hide-constructor,
      #Task { display: none }
    </style>
  
    @class Task
  */
  class Task extends _task.Task {
    /**
     * `true` if any current task instances are running.
     *
     * @memberof Task
     * @member {boolean} isRunning
     * @instance
     * @readOnly
     */
    /**
     * `true` if any future task instances are queued.
     *
     * @memberof Task
     * @member {boolean} isQueued
     * @instance
     * @readOnly
     */
    /**
     * `true` if the task is not in the running or queued state.
     *
     * @memberof Task
     * @member {boolean} isIdle
     * @instance
     * @readOnly
     */
    /**
     * The current state of the task: `"running"`, `"queued"` or `"idle"`.
     *
     * @memberof Task
     * @member {string} state
     * @instance
     * @readOnly
     */
    /**
     * The most recently started task instance.
     *
     * @memberof Task
     * @member {TaskInstance} last
     * @instance
     * @readOnly
     */
    /**
     * The most recent task instance that is currently running.
     *
     * @memberof Task
     * @member {TaskInstance} lastRunning
     * @instance
     * @readOnly
     */
    /**
     * The most recently performed task instance.
     *
     * @memberof Task
     * @member {TaskInstance} lastPerformed
     * @instance
     * @readOnly
     */
    /**
     * The most recent task instance that succeeded.
     *
     * @memberof Task
     * @member {TaskInstance} lastSuccessful
     * @instance
     * @readOnly
     */
    /**
     * The most recently completed task instance.
     *
     * @memberof Task
     * @member {TaskInstance} lastComplete
     * @instance
     * @readOnly
     */
    /**
     * The most recent task instance that errored.
     *
     * @memberof Task
     * @member {TaskInstance} lastErrored
     * @instance
     * @readOnly
     */
    /**
     * The most recently canceled task instance.
     *
     * @memberof Task
     * @member {TaskInstance} lastCanceled
     * @instance
     * @readOnly
     */
    /**
     * The most recent task instance that is incomplete.
     *
     * @memberof Task
     * @member {TaskInstance} lastIncomplete
     * @instance
     * @readOnly
     */
    /**
     * The number of times this task has been performed.
     *
     * @memberof Task
     * @member {number} performCount
     * @instance
     * @readOnly
     */

    constructor(options) {
      super(options);
      if (!(0, _destroyable.isDestroying)(this.context)) {
        (0, _destroyable.registerDestructor)(this.context, () => {
          this.cancelAll({
            reason: 'the object it lives on was destroyed or unrendered',
            cancelRequestKind: _cancelation.CANCEL_KIND_LIFESPAN_END
          });
        });
      }
    }

    /**
     * Flags the task as linked to the parent task's lifetime. Must be called
     * within another task's perform function. The task will be cancelled if the
     * parent task is canceled as well.
     *
     * ember-concurrency will indicate when this may be needed.
     *
     * @method linked
     * @memberof Task
     * @instance
     *
     */

    /**
     * Flags the task as not linked to the parent task's lifetime. Must be called
     * within another task's perform function. The task will NOT be cancelled if the
     * parent task is canceled.
     *
     * This is useful for avoiding the so-called "self-cancel loop" for tasks.
     * ember-concurrency will indicate when this may be needed.
     *
     * @method unlinked
     * @memberof Task
     * @instance
     *
     */

    /**
     * Creates a new {@linkcode TaskInstance} and attempts to run it right away.
     * If running this task instance would increase the task's concurrency
     * to a number greater than the task's maxConcurrency, this task
     * instance might be immediately canceled (dropped), or enqueued
     * to run at later time, after the currently running task(s) have finished.
     *
     * @method perform
     * @memberof Task
     * @param {*} arg* - args to pass to the task function
     * @instance
     *
     * @fires TaskInstance#TASK_NAME:started
     * @fires TaskInstance#TASK_NAME:succeeded
     * @fires TaskInstance#TASK_NAME:errored
     * @fires TaskInstance#TASK_NAME:canceled
     *
     */

    /**
     * Cancels all running or queued `TaskInstance`s for this Task.
     * If you're trying to cancel a specific TaskInstance (rather
     * than all of the instances running under this task) call
     * `.cancel()` on the specific TaskInstance.
     *
     * @method cancelAll
     * @memberof Task
     * @param options.reason A descriptive reason the task was
     *   cancelled. Defaults to `".cancelAll() was explicitly called
     *   on the Task"`.
     * @param options.resetState If true, will clear the task state
     *   (`last*` and `performCount` properties will be set to initial
     *   values). Defaults to false.
     * @instance
     * @async
     *
     */

    get _isAlive() {
      return !(0, _destroyable.isDestroying)(this.context);
    }
    _taskInstanceFactory(args, performType, linkedObject) {
      let options = this._taskInstanceOptions(args, performType, linkedObject);
      let taskInstance = new _taskInstance.TaskInstance(options);
      return taskInstance;
    }
    _clone() {
      return new Task({
        context: this.context,
        debug: this.debug,
        env: this.env,
        generatorFactory: this.generatorFactory,
        group: this.group,
        hasEnabledEvents: this.hasEnabledEvents,
        name: this.name,
        onStateCallback: this.onStateCallback,
        scheduler: this.scheduler
      });
    }
  }
  _exports.Task = Task;
  if (_trackedState.TRACKED_INITIAL_TASK_STATE) {
    Object.defineProperties(Task.prototype, _trackedState.TRACKED_INITIAL_TASK_STATE);
  }
  Object.assign(Task.prototype, _taskableMixin.TASKABLE_MIXIN);
  const currentTaskInstanceSymbol = '__ec__encap_current_ti';
  class EncapsulatedTask extends Task {
    constructor(options) {
      super(options);
      this.taskObj = options.taskObj;
      this._encapsulatedTaskStates = new WeakMap();
      this._encapsulatedTaskInstanceProxies = new WeakMap();
    }
    _getEncapsulatedTaskClass() {
      let encapsulatedTaskImplClass = this._encapsulatedTaskImplClass;
      if (!encapsulatedTaskImplClass) {
        // eslint-disable-next-line ember/no-classic-classes
        encapsulatedTaskImplClass = _object.default.extend(this.taskObj, {
          unknownProperty(key) {
            let currentInstance = this[currentTaskInstanceSymbol];
            return currentInstance ? currentInstance[key] : undefined;
          }
        });
      }
      return encapsulatedTaskImplClass;
    }
    _taskInstanceFactory(args, performType) {
      let owner = (0, _application.getOwner)(this.context);
      let taskInstanceProxy;
      let encapsulatedTaskImpl = this._getEncapsulatedTaskClass().create({
        context: this.context
      });
      (0, _application.setOwner)(encapsulatedTaskImpl, owner);
      let generatorFactory = () => encapsulatedTaskImpl.perform.apply(taskInstanceProxy, args);
      let taskInstance = new _taskInstance.TaskInstance({
        task: this,
        args,
        executor: new _executor.TaskInstanceExecutor({
          generatorFactory,
          env: this.env,
          debug: this.debug
        }),
        performType,
        hasEnabledEvents: this.hasEnabledEvents
      });
      encapsulatedTaskImpl[currentTaskInstanceSymbol] = taskInstance;
      this._encapsulatedTaskStates.set(taskInstance, encapsulatedTaskImpl);
      taskInstanceProxy = this._wrappedEncapsulatedTaskInstance(taskInstance);
      return taskInstanceProxy;
    }
    _wrappedEncapsulatedTaskInstance(taskInstance) {
      if (!taskInstance) {
        return null;
      }
      let _encapsulatedTaskInstanceProxies = this._encapsulatedTaskInstanceProxies;
      let proxy = _encapsulatedTaskInstanceProxies.get(taskInstance);
      if (!proxy) {
        let encapsulatedTaskImpl = this._encapsulatedTaskStates.get(taskInstance);
        proxy = new Proxy(taskInstance, {
          get(obj, prop) {
            return prop in obj ? obj[prop] : (0, _object.get)(encapsulatedTaskImpl, prop.toString());
          },
          set(obj, prop, value) {
            if (prop in obj) {
              obj[prop] = value;
            } else {
              (0, _object.set)(encapsulatedTaskImpl, prop.toString(), value);
            }
            return true;
          },
          has(obj, prop) {
            return prop in obj || prop in encapsulatedTaskImpl;
          },
          ownKeys(obj) {
            return Reflect.ownKeys(obj).concat(Reflect.ownKeys(encapsulatedTaskImpl));
          },
          defineProperty(obj, prop, descriptor) {
            // Ember < 3.16 uses a WeakMap for value storage, keyed to the proxy.
            // We need to ensure that when we use setProperties to update it, and
            // it creates Meta, that it uses the proxy to key, otherwise we'll
            // have two different values stores in Meta, one which won't render.
            let proxy = _encapsulatedTaskInstanceProxies.get(taskInstance);
            if (proxy) {
              if (descriptor.get) {
                descriptor.get = descriptor.get.bind(proxy);
              } else if (proxy && descriptor.set) {
                descriptor.set = descriptor.set.bind(proxy);
              }
            }
            return Reflect.defineProperty(encapsulatedTaskImpl, prop, descriptor);
          },
          getOwnPropertyDescriptor(obj, prop) {
            return prop in obj ? Reflect.getOwnPropertyDescriptor(obj, prop) : Reflect.getOwnPropertyDescriptor(encapsulatedTaskImpl, prop);
          }
        });
        _encapsulatedTaskInstanceProxies.set(taskInstance, proxy);
      }
      return proxy;
    }
  }
  _exports.EncapsulatedTask = EncapsulatedTask;
});
;define("ember-concurrency/-private/taskable-mixin", ["exports", "ember-concurrency/-private/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TASKABLE_MIXIN = void 0;
  const TASKABLE_MIXIN = _exports.TASKABLE_MIXIN = {
    _performCount: 0,
    setState(state) {
      this._performCount = this._performCount + (state.numPerformedInc || 0);
      let isRunning = state.numRunning > 0;
      let isQueued = state.numQueued > 0;
      let derivedState = Object.assign({}, state, {
        performCount: this._performCount,
        isRunning,
        isQueued,
        isIdle: !isRunning && !isQueued,
        state: isRunning ? 'running' : 'idle'
      });
      (0, _utils.assignProperties)(this, derivedState);
    },
    onState(state, task) {
      if (task.onStateCallback) {
        task.onStateCallback(state, task);
      }
    }
  };
});
;define("ember-concurrency/-private/tracked-state", ["exports", "@glimmer/tracking", "ember-concurrency/-private/external/task/default-state", "ember-concurrency/-private/external/task-instance/initial-state", "ember-concurrency/-private/utils"], function (_exports, _tracking, _defaultState, _initialState, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TRACKED_INITIAL_TASK_STATE = _exports.TRACKED_INITIAL_INSTANCE_STATE = void 0;
  function trackMixin(proto, obj, key) {
    const propDesc = Object.getOwnPropertyDescriptor(proto, key);
    propDesc.initializer = propDesc.initializer || (() => proto[key]);
    delete propDesc.value;
    const desc = (0, _tracking.tracked)(obj, key, propDesc);
    obj[key] = desc;
    return obj;
  }
  function applyTracked(proto, initial) {
    return Object.keys(proto).reduce((acc, key) => {
      return trackMixin(proto, acc, key);
    }, initial);
  }
  let TRACKED_INITIAL_TASK_STATE = _exports.TRACKED_INITIAL_TASK_STATE = void 0;
  let TRACKED_INITIAL_INSTANCE_STATE = _exports.TRACKED_INITIAL_INSTANCE_STATE = void 0;
  if (_utils.USE_TRACKED) {
    _exports.TRACKED_INITIAL_TASK_STATE = TRACKED_INITIAL_TASK_STATE = applyTracked(_defaultState.DEFAULT_STATE, {});
    _exports.TRACKED_INITIAL_TASK_STATE = TRACKED_INITIAL_TASK_STATE = applyTracked({
      numRunning: 0,
      numQueued: 0,
      isRunning: false,
      isQueued: false,
      isIdle: true,
      state: 'idle'
    }, TRACKED_INITIAL_TASK_STATE);
    _exports.TRACKED_INITIAL_INSTANCE_STATE = TRACKED_INITIAL_INSTANCE_STATE = applyTracked(_initialState.INITIAL_STATE, {});
    _exports.TRACKED_INITIAL_INSTANCE_STATE = TRACKED_INITIAL_INSTANCE_STATE = applyTracked({
      state: 'waiting',
      isDropped: false,
      isRunning: false
    }, TRACKED_INITIAL_INSTANCE_STATE);
    Object.freeze(TRACKED_INITIAL_TASK_STATE);
    Object.freeze(TRACKED_INITIAL_INSTANCE_STATE);
  }
});
;define("ember-concurrency/-private/utils", ["exports", "@ember/object", "@ember/runloop", "ember-concurrency/-private/ember-environment", "ember-concurrency/-private/external/yieldables"], function (_exports, _object, _runloop, _emberEnvironment, _yieldables) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.assignProperties = _exports.USE_TRACKED = _exports.EmberYieldable = void 0;
  _exports.deprecatePrivateModule = deprecatePrivateModule;
  _exports.isEventedObject = isEventedObject;
  _exports.timeout = timeout;
  const USE_TRACKED = _exports.USE_TRACKED = true;
  const assignProperties = _exports.assignProperties = USE_TRACKED ? Object.assign : _object.setProperties;
  function isEventedObject(c) {
    return c && (typeof c.one === 'function' && typeof c.off === 'function' || typeof c.on === 'function' && typeof c.off === 'function' || typeof c.addEventListener === 'function' && typeof c.removeEventListener === 'function');
  }
  class EmberYieldable extends _yieldables.Yieldable {
    _deferable() {
      return _emberEnvironment.EMBER_ENVIRONMENT.defer();
    }
  }
  _exports.EmberYieldable = EmberYieldable;
  class TimeoutYieldable extends EmberYieldable {
    constructor(ms) {
      super();
      this.ms = ms;
    }
    onYield(state) {
      let timerId = (0, _runloop.later)(() => state.next(), this.ms);
      return () => (0, _runloop.cancel)(timerId);
    }
  }

  /**
   *
   * Yielding `timeout(ms)` will pause a task for the duration
   * of time passed in, in milliseconds.
   *
   * This timeout will be scheduled on the Ember runloop, which
   * means that test helpers will wait for it to complete before
   * continuing with the test. See `rawTimeout()` if you need
   * different behavior.
   *
   * The task below, when performed, will print a message to the
   * console every second.
   *
   * ```js
   * export default class MyComponent extends Component {
   *   &#64;task *myTask() {
   *     while (true) {
   *       console.log("Hello!");
   *       yield timeout(1000);
   *     }
   *   }
   * }
   * ```
   *
   * @param {number} ms - the amount of time to sleep before resuming
   *   the task, in milliseconds
   */
  function timeout(ms) {
    return new TimeoutYieldable(ms);
  }
  function deprecatePrivateModule(moduleName) {
    // eslint-disable-next-line no-console
    console.warn(`an Ember addon is importing a private ember-concurrency module '${moduleName}' that has moved`);
  }
});
;define("ember-concurrency/-private/wait-for", ["exports", "@ember/debug", "@ember/runloop", "@ember/object", "@ember/object/observers", "ember-concurrency/-private/utils"], function (_exports, _debug, _runloop, _object, _observers, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.waitForEvent = waitForEvent;
  _exports.waitForProperty = waitForProperty;
  _exports.waitForQueue = waitForQueue;
  class WaitForQueueYieldable extends _utils.EmberYieldable {
    constructor(queueName) {
      super();
      this.queueName = queueName;
    }
    onYield(state) {
      let timerId;
      try {
        timerId = (0, _runloop.schedule)(this.queueName, () => state.next());
      } catch (error) {
        state.throw(error);
      }
      return () => (0, _runloop.cancel)(timerId);
    }
  }
  class WaitForEventYieldable extends _utils.EmberYieldable {
    constructor(object, eventName) {
      super();
      this.object = object;
      this.eventName = eventName;
      this.usesDOMEvents = false;
    }
    on(callback) {
      if (typeof this.object.addEventListener === 'function') {
        // assume that we're dealing with a DOM `EventTarget`.
        this.usesDOMEvents = true;
        this.object.addEventListener(this.eventName, callback);
      } else {
        this.object.on(this.eventName, callback);
      }
    }
    off(callback) {
      if (this.usesDOMEvents) {
        this.object.removeEventListener(this.eventName, callback);
      } else {
        this.object.off(this.eventName, callback);
      }
    }
    onYield(state) {
      let fn = null;
      let disposer = () => {
        fn && this.off(fn);
        fn = null;
      };
      fn = event => {
        disposer();
        state.next(event);
      };
      this.on(fn);
      return disposer;
    }
  }
  class WaitForPropertyYieldable extends _utils.EmberYieldable {
    constructor(object, key, predicateCallback = Boolean) {
      super();
      this.object = object;
      this.key = key;
      if (typeof predicateCallback === 'function') {
        this.predicateCallback = predicateCallback;
      } else {
        this.predicateCallback = v => v === predicateCallback;
      }
    }
    onYield(state) {
      let observerBound = false;
      let observerFn = () => {
        let value = (0, _object.get)(this.object, this.key);
        let predicateValue = this.predicateCallback(value);
        if (predicateValue) {
          state.next(value);
          return true;
        }
      };
      if (!observerFn()) {
        // eslint-disable-next-line ember/no-observers
        (0, _observers.addObserver)(this.object, this.key, null, observerFn);
        observerBound = true;
      }
      return () => {
        if (observerBound && observerFn) {
          (0, _observers.removeObserver)(this.object, this.key, null, observerFn);
        }
      };
    }
  }

  /**
   * Use `waitForQueue` to pause the task until a certain run loop queue is reached.
   *
   * ```js
   * import { task, waitForQueue } from 'ember-concurrency';
   * export default class MyComponent extends Component {
   *   &#64;task *myTask() {
   *     yield waitForQueue('afterRender');
   *     console.log("now we're in the afterRender queue");
   *   }
   * }
   * ```
   *
   * @param {string} queueName the name of the Ember run loop queue
   */
  function waitForQueue(queueName) {
    return new WaitForQueueYieldable(queueName);
  }

  /**
   * Use `waitForEvent` to pause the task until an event is fired. The event
   * can either be a jQuery event or an Ember.Evented event (or any event system
   * where the object supports `.on()` `.one()` and `.off()`).
   *
   * ```js
   * import { task, waitForEvent } from 'ember-concurrency';
   * export default class MyComponent extends Component {
   *   &#64;task *myTask() {
   *     console.log("Please click anywhere..");
   *     let clickEvent = yield waitForEvent($('body'), 'click');
   *     console.log("Got event", clickEvent);
   *
   *     let emberEvent = yield waitForEvent(this, 'foo');
   *     console.log("Got foo event", emberEvent);
   *
   *     // somewhere else: component.trigger('foo', { value: 123 });
   *   }
   * }
   * ```
   *
   * @param {object} object the Ember Object, jQuery element, or other object with .on() and .off() APIs
   *                 that the event fires from
   * @param {function} eventName the name of the event to wait for
   */
  function waitForEvent(object, eventName) {
    (true && !((0, _utils.isEventedObject)(object)) && (0, _debug.assert)(`${object} must include Ember.Evented (or support \`.on()\` and \`.off()\`) or DOM EventTarget (or support \`addEventListener\` and  \`removeEventListener\`) to be able to use \`waitForEvent\``, (0, _utils.isEventedObject)(object)));
    return new WaitForEventYieldable(object, eventName);
  }

  /**
   * Use `waitForProperty` to pause the task until a property on an object
   * changes to some expected value. This can be used for a variety of use
   * cases, including synchronizing with another task by waiting for it
   * to become idle, or change state in some other way. If you omit the
   * callback, `waitForProperty` will resume execution when the observed
   * property becomes truthy. If you provide a callback, it'll be called
   * immediately with the observed property's current value, and multiple
   * times thereafter whenever the property changes, until you return
   * a truthy value from the callback, or the current task is canceled.
   * You can also pass in a non-Function value in place of the callback,
   * in which case the task will continue executing when the property's
   * value becomes the value that you passed in.
   *
   * ```js
   * import { task, waitForProperty } from 'ember-concurrency';
   * export default class MyComponent extends Component {
   *   &#64;tracked foo = 0;
   *
   *   &#64;task *myTask() {
   *     console.log("Waiting for `foo` to become 5");
   *
   *     yield waitForProperty(this, 'foo', v => v === 5);
   *     // alternatively: yield waitForProperty(this, 'foo', 5);
   *
   *     // somewhere else: this.foo = 5;
   *
   *     console.log("`foo` is 5!");
   *
   *     // wait for another task to be idle before running:
   *     yield waitForProperty(this, 'otherTask.isIdle');
   *     console.log("otherTask is idle!");
   *   }
   * }
   * ```
   *
   * @param {object} object an object (most likely an Ember Object)
   * @param {string} key the property name that is observed for changes
   * @param {function} callbackOrValue a Function that should return a truthy value
   *                                   when the task should continue executing, or
   *                                   a non-Function value that the watched property
   *                                   needs to equal before the task will continue running
   */
  function waitForProperty(object, key, predicateCallback) {
    return new WaitForPropertyYieldable(object, key, predicateCallback);
  }
});
;define("ember-concurrency/-task-instance", ["exports", "ember-concurrency/-private/task-instance", "ember-concurrency/-private/utils"], function (_exports, _taskInstance, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  (0, _utils.deprecatePrivateModule)('ember-concurrency/-task-instance');
  var _default = _exports.default = _taskInstance.TaskInstance;
});
;define("ember-concurrency/-task-property", ["exports", "ember-concurrency/-private/task", "ember-concurrency/-private/task-properties", "ember-concurrency/-private/utils"], function (_exports, _task, _taskProperties, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "Task", {
    enumerable: true,
    get: function () {
      return _task.Task;
    }
  });
  Object.defineProperty(_exports, "TaskProperty", {
    enumerable: true,
    get: function () {
      return _taskProperties.TaskProperty;
    }
  });
  (0, _utils.deprecatePrivateModule)('ember-concurrency/-task-property');
});
;define("ember-concurrency/helpers/cancel-all", ["exports", "@ember/component/helper", "@ember/debug", "ember-concurrency/-private/helpers"], function (_exports, _helper, _debug, _helpers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.cancelHelper = cancelHelper;
  _exports.default = void 0;
  const CANCEL_REASON = "the 'cancel-all' template helper was invoked";
  function cancelHelper(args) {
    let cancelable = args[0];
    if (!cancelable || typeof cancelable.cancelAll !== 'function') {
      (true && !(false) && (0, _debug.assert)(`The first argument passed to the \`cancel-all\` helper should be a Task or TaskGroup (without quotes); you passed ${cancelable}`, false));
    }
    return (0, _helpers.taskHelperClosure)('cancel-all', 'cancelAll', [cancelable, {
      reason: CANCEL_REASON
    }]);
  }
  var _default = _exports.default = (0, _helper.helper)(cancelHelper);
});
;define("ember-concurrency/helpers/perform", ["exports", "@ember/component/helper", "@ember/debug", "ember-concurrency/-private/helpers"], function (_exports, _helper, _debug, _helpers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.performHelper = performHelper;
  function maybeReportError(onError) {
    return function (e) {
      if (typeof onError === 'function') {
        onError(e);
      } else if (onError === null) {
        // Do nothing
      } else {
        (true && !(false) && (0, _debug.assert)(`The onError argument passed to the \`perform\` helper should be a function or null; you passed ${onError}`, false));
      }
    };
  }
  function performHelper(args, hash) {
    let perform = (0, _helpers.taskHelperClosure)('perform', 'perform', args, hash);
    if (hash && typeof hash.onError !== 'undefined') {
      return function (...innerArgs) {
        try {
          let taskInstance = perform(...innerArgs);
          return taskInstance.catch(maybeReportError(hash.onError));
          // eslint-disable-next-line no-empty
        } catch {
          maybeReportError(hash.onError);
        }
      };
    } else {
      return perform;
    }
  }
  var _default = _exports.default = (0, _helper.helper)(performHelper);
});
;define("ember-concurrency/helpers/task", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function taskHelper([task, ...args]) {
    return task._curry(...args);
  }
  var _default = _exports.default = (0, _helper.helper)(taskHelper);
});
;define("ember-concurrency/index", ["exports", "ember-concurrency/-private/utils", "ember-concurrency/-private/task-properties", "ember-concurrency/-private/task-public-api", "ember-concurrency/-private/task-instance", "ember-concurrency/-private/cancelable-promise-helpers", "ember-concurrency/-private/wait-for", "ember-concurrency/-private/external/task-instance/cancelation", "ember-concurrency/-private/external/yieldables", "ember-concurrency/-private/task", "ember-concurrency/-private/task-group", "ember-concurrency/-private/task-decorators", "ember-concurrency/-private/external/task-factory"], function (_exports, _utils, _taskProperties, _taskPublicApi, _taskInstance, _cancelablePromiseHelpers, _waitFor, _cancelation, _yieldables, _task, _taskGroup, _taskDecorators, _taskFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "Task", {
    enumerable: true,
    get: function () {
      return _task.Task;
    }
  });
  Object.defineProperty(_exports, "TaskGroup", {
    enumerable: true,
    get: function () {
      return _taskGroup.TaskGroup;
    }
  });
  Object.defineProperty(_exports, "TaskGroupProperty", {
    enumerable: true,
    get: function () {
      return _taskProperties.TaskGroupProperty;
    }
  });
  Object.defineProperty(_exports, "TaskInstance", {
    enumerable: true,
    get: function () {
      return _taskInstance.TaskInstance;
    }
  });
  Object.defineProperty(_exports, "TaskProperty", {
    enumerable: true,
    get: function () {
      return _taskProperties.TaskProperty;
    }
  });
  Object.defineProperty(_exports, "Yieldable", {
    enumerable: true,
    get: function () {
      return _utils.EmberYieldable;
    }
  });
  Object.defineProperty(_exports, "all", {
    enumerable: true,
    get: function () {
      return _cancelablePromiseHelpers.all;
    }
  });
  Object.defineProperty(_exports, "allSettled", {
    enumerable: true,
    get: function () {
      return _cancelablePromiseHelpers.allSettled;
    }
  });
  Object.defineProperty(_exports, "animationFrame", {
    enumerable: true,
    get: function () {
      return _yieldables.animationFrame;
    }
  });
  Object.defineProperty(_exports, "didCancel", {
    enumerable: true,
    get: function () {
      return _cancelation.didCancel;
    }
  });
  Object.defineProperty(_exports, "dropTask", {
    enumerable: true,
    get: function () {
      return _taskDecorators.dropTask;
    }
  });
  Object.defineProperty(_exports, "dropTaskGroup", {
    enumerable: true,
    get: function () {
      return _taskDecorators.dropTaskGroup;
    }
  });
  Object.defineProperty(_exports, "enqueueTask", {
    enumerable: true,
    get: function () {
      return _taskDecorators.enqueueTask;
    }
  });
  Object.defineProperty(_exports, "enqueueTaskGroup", {
    enumerable: true,
    get: function () {
      return _taskDecorators.enqueueTaskGroup;
    }
  });
  Object.defineProperty(_exports, "forever", {
    enumerable: true,
    get: function () {
      return _yieldables.forever;
    }
  });
  Object.defineProperty(_exports, "getModifier", {
    enumerable: true,
    get: function () {
      return _taskFactory.getModifier;
    }
  });
  Object.defineProperty(_exports, "hasModifier", {
    enumerable: true,
    get: function () {
      return _taskFactory.hasModifier;
    }
  });
  Object.defineProperty(_exports, "hash", {
    enumerable: true,
    get: function () {
      return _cancelablePromiseHelpers.hash;
    }
  });
  Object.defineProperty(_exports, "hashSettled", {
    enumerable: true,
    get: function () {
      return _cancelablePromiseHelpers.hashSettled;
    }
  });
  Object.defineProperty(_exports, "keepLatestTask", {
    enumerable: true,
    get: function () {
      return _taskDecorators.keepLatestTask;
    }
  });
  Object.defineProperty(_exports, "keepLatestTaskGroup", {
    enumerable: true,
    get: function () {
      return _taskDecorators.keepLatestTaskGroup;
    }
  });
  Object.defineProperty(_exports, "lastValue", {
    enumerable: true,
    get: function () {
      return _taskDecorators.lastValue;
    }
  });
  Object.defineProperty(_exports, "race", {
    enumerable: true,
    get: function () {
      return _cancelablePromiseHelpers.race;
    }
  });
  Object.defineProperty(_exports, "rawTimeout", {
    enumerable: true,
    get: function () {
      return _yieldables.rawTimeout;
    }
  });
  Object.defineProperty(_exports, "registerModifier", {
    enumerable: true,
    get: function () {
      return _taskFactory.registerModifier;
    }
  });
  Object.defineProperty(_exports, "restartableTask", {
    enumerable: true,
    get: function () {
      return _taskDecorators.restartableTask;
    }
  });
  Object.defineProperty(_exports, "restartableTaskGroup", {
    enumerable: true,
    get: function () {
      return _taskDecorators.restartableTaskGroup;
    }
  });
  Object.defineProperty(_exports, "task", {
    enumerable: true,
    get: function () {
      return _taskPublicApi.task;
    }
  });
  Object.defineProperty(_exports, "taskGroup", {
    enumerable: true,
    get: function () {
      return _taskPublicApi.taskGroup;
    }
  });
  Object.defineProperty(_exports, "timeout", {
    enumerable: true,
    get: function () {
      return _utils.timeout;
    }
  });
  Object.defineProperty(_exports, "waitForEvent", {
    enumerable: true,
    get: function () {
      return _waitFor.waitForEvent;
    }
  });
  Object.defineProperty(_exports, "waitForProperty", {
    enumerable: true,
    get: function () {
      return _waitFor.waitForProperty;
    }
  });
  Object.defineProperty(_exports, "waitForQueue", {
    enumerable: true,
    get: function () {
      return _waitFor.waitForQueue;
    }
  });
});
;define("ember-fetch/errors", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isAbortError = isAbortError;
  _exports.isBadRequestResponse = isBadRequestResponse;
  _exports.isConflictResponse = isConflictResponse;
  _exports.isForbiddenResponse = isForbiddenResponse;
  _exports.isGoneResponse = isGoneResponse;
  _exports.isInvalidResponse = isInvalidResponse;
  _exports.isNotFoundResponse = isNotFoundResponse;
  _exports.isServerErrorResponse = isServerErrorResponse;
  _exports.isUnauthorizedResponse = isUnauthorizedResponse;
  /**
   * Checks if the given response represents an unauthorized request error
   */
  function isUnauthorizedResponse(response) {
    return response.status === 401;
  }

  /**
   * Checks if the given response represents a forbidden request error
   */
  function isForbiddenResponse(response) {
    return response.status === 403;
  }

  /**
   * Checks if the given response represents an invalid request error
   */
  function isInvalidResponse(response) {
    return response.status === 422;
  }

  /**
   * Checks if the given response represents a bad request error
   */
  function isBadRequestResponse(response) {
    return response.status === 400;
  }

  /**
   * Checks if the given response represents a "not found" error
   */
  function isNotFoundResponse(response) {
    return response.status === 404;
  }

  /**
   * Checks if the given response represents a "gone" error
   */
  function isGoneResponse(response) {
    return response.status === 410;
  }

  /**
   * Checks if the given error is an "abort" error
   */
  function isAbortError(error) {
    return error.name == 'AbortError';
  }

  /**
   * Checks if the given response represents a conflict error
   */
  function isConflictResponse(response) {
    return response.status === 409;
  }

  /**
   * Checks if the given response represents a server error
   */
  function isServerErrorResponse(response) {
    return response.status >= 500 && response.status < 600;
  }
});
;define("ember-fetch/types", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isPlainObject = isPlainObject;
  function isPlainObject(obj) {
    return Object.prototype.toString.call(obj) === '[object Object]';
  }
});
;define("ember-fetch/utils/determine-body-promise", ["exports", "@ember/debug"], function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = determineBodyPromise;
  /**
   * Function that always attempts to parse the response as json, and if an error is thrown,
   * returns `undefined` if the response is successful and has a status code of 204 (No Content),
   * or 205 (Reset Content) or if the request method was 'HEAD', and the plain payload otherwise.
   */
  function determineBodyPromise(response, requestData) {
    return response.text().then(function (payload) {
      let ret = payload;
      try {
        ret = JSON.parse(payload);
      } catch (error) {
        if (!(error instanceof SyntaxError)) {
          throw error;
        }
        const status = response.status;
        if (response.ok && (status === 204 || status === 205 || requestData.method === 'HEAD')) {
          ret = undefined;
        } else {
          (0, _debug.debug)(`This response was unable to be parsed as json: ${payload}`);
        }
      }
      return ret;
    });
  }
});
;define("ember-fetch/utils/mung-options-for-fetch", ["exports", "@ember/polyfills", "ember-fetch/utils/serialize-query-params", "ember-fetch/types"], function (_exports, _polyfills, _serializeQueryParams, _types) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mungOptionsForFetch;
  /**
   * Helper function that translates the options passed to `jQuery.ajax` into a format that `fetch` expects.
   */
  function mungOptionsForFetch(options) {
    const hash = (0, _polyfills.assign)({
      credentials: 'same-origin'
    }, options);

    // Default to 'GET' in case `type` is not passed in (mimics jQuery.ajax).
    hash.method = (hash.method || hash.type || 'GET').toUpperCase();
    if (hash.data) {
      // GET and HEAD requests can't have a `body`
      if (hash.method === 'GET' || hash.method === 'HEAD') {
        // If no options are passed, Ember Data sets `data` to an empty object, which we test for.
        if (Object.keys(hash.data).length) {
          // Test if there are already query params in the url (mimics jQuey.ajax).
          const queryParamDelimiter = hash.url.indexOf('?') > -1 ? '&' : '?';
          hash.url += `${queryParamDelimiter}${(0, _serializeQueryParams.serializeQueryParams)(hash.data)}`;
        }
      } else {
        // NOTE: a request's body cannot be a POJO, so we stringify it if it is.
        // JSON.stringify removes keys with values of `undefined` (mimics jQuery.ajax).
        // If the data is not a POJO (it's a String, FormData, etc), we just set it.
        // If the data is a string, we assume it's a stringified object.
        if ((0, _types.isPlainObject)(hash.data)) {
          hash.body = JSON.stringify(hash.data);
        } else {
          hash.body = hash.data;
        }
      }
    }
    return hash;
  }
});
;define("ember-fetch/utils/serialize-query-params", ["exports", "ember-fetch/types"], function (_exports, _types) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.serializeQueryParams = serializeQueryParams;
  const RBRACKET = /\[\]$/;

  /**
   * Helper function that turns the data/body of a request into a query param string.
   * This is directly copied from jQuery.param.
   */
  function serializeQueryParams(queryParamsObject) {
    var s = [];
    function buildParams(prefix, obj) {
      var i, len, key;
      if (prefix) {
        if (Array.isArray(obj)) {
          for (i = 0, len = obj.length; i < len; i++) {
            if (RBRACKET.test(prefix)) {
              add(s, prefix, obj[i]);
            } else {
              buildParams(prefix + '[' + (typeof obj[i] === 'object' ? i : '') + ']', obj[i]);
            }
          }
        } else if ((0, _types.isPlainObject)(obj)) {
          for (key in obj) {
            buildParams(prefix + '[' + key + ']', obj[key]);
          }
        } else {
          add(s, prefix, obj);
        }
      } else if (Array.isArray(obj)) {
        for (i = 0, len = obj.length; i < len; i++) {
          add(s, obj[i].name, obj[i].value);
        }
      } else {
        for (key in obj) {
          buildParams(key, obj[key]);
        }
      }
      return s;
    }
    return buildParams('', queryParamsObject).join('&').replace(/%20/g, '+');
  }

  /**
   * Part of the `serializeQueryParams` helper function.
   */
  function add(s, k, v) {
    // Strip out keys with undefined value and replace null values with
    // empty strings (mimics jQuery.ajax)
    if (v === undefined) {
      return;
    } else if (v === null) {
      v = '';
    }
    v = typeof v === 'function' ? v() : v;
    s[s.length] = `${encodeURIComponent(k)}=${encodeURIComponent(v)}`;
  }
  var _default = _exports.default = serializeQueryParams;
});
;define("ember-get-config/index", ["exports", "@embroider/macros/runtime"], function (_exports, _runtime) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /* global require */

  let configModulePath = `${(0, _runtime.config)("/workspaces/ember-user-activity/node_modules/ember-get-config").modulePrefix}/config/environment`;
  var _default = _exports.default = require(configModulePath).default;
});
;define("ember-load-initializers/index", ["exports", "require"], function (_exports, _require) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = loadInitializers;
  function resolveInitializer(moduleName) {
    var module = (0, _require.default)(moduleName, null, null, true);
    if (!module) {
      throw new Error(moduleName + ' must export an initializer.');
    }
    var initializer = module['default'];
    if (!initializer) {
      throw new Error(moduleName + ' must have a default export');
    }
    if (!initializer.name) {
      initializer.name = moduleName.slice(moduleName.lastIndexOf('/') + 1);
    }
    return initializer;
  }
  function registerInitializers(app, moduleNames) {
    for (var i = 0; i < moduleNames.length; i++) {
      app.initializer(resolveInitializer(moduleNames[i]));
    }
  }
  function registerInstanceInitializers(app, moduleNames) {
    for (var i = 0; i < moduleNames.length; i++) {
      app.instanceInitializer(resolveInitializer(moduleNames[i]));
    }
  }
  function _endsWith(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
  }

  /**
   * Configure your application as it boots
   */
  function loadInitializers(app, prefix) {
    var initializerPrefix = prefix + '/initializers/';
    var instanceInitializerPrefix = prefix + '/instance-initializers/';
    var initializers = [];
    var instanceInitializers = [];
    // this is 2 pass because generally the first pass is the problem
    // and is reduced, and resolveInitializer has potential to deopt
    var moduleNames = Object.keys(requirejs._eak_seen);
    for (var i = 0; i < moduleNames.length; i++) {
      var moduleName = moduleNames[i];
      if (moduleName.lastIndexOf(initializerPrefix, 0) === 0) {
        if (!_endsWith(moduleName, '-test')) {
          initializers.push(moduleName);
        }
      } else if (moduleName.lastIndexOf(instanceInitializerPrefix, 0) === 0) {
        if (!_endsWith(moduleName, '-test')) {
          instanceInitializers.push(moduleName);
        }
      }
    }
    registerInitializers(app, initializers);
    registerInstanceInitializers(app, instanceInitializers);
  }
});
;define("ember-modal-dialog/components/basic-dialog", ["exports", "@ember-decorators/component", "@ember/object", "@ember/service", "@ember/component", "@ember/utils", "ember-modal-dialog/templates/components/basic-dialog", "@ember/string"], function (_exports, _component, _object, _service, _component2, _utils, _basicDialog, _string) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let BasicDialog = _exports.default = (_dec = (0, _component.tagName)(''), _dec2 = (0, _component.layout)(_basicDialog.default), _dec3 = (0, _service.inject)('modal-dialog'), _dec4 = (0, _object.computed)('attachmentClass', 'containerClass', 'containerClassNames.{[],join}', 'targetAttachmentClass'), _dec5 = (0, _object.computed)('overlayClass', 'overlayClassNames.{[],join}', 'translucentOverlay'), _dec6 = (0, _object.computed)('targetAttachmentClass', 'variantWrapperClass', 'wrapperClass', 'wrapperClassNames.{[],join}'), _dec7 = (0, _object.computed)('overlayPosition'), _dec8 = (0, _object.computed)('targetAttachment'), _dec(_class = _dec2(_class = (_class2 = class BasicDialog extends _component2.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "containerClassNames", null);
      _defineProperty(this, "overlayClassNames", null);
      _defineProperty(this, "wrapperClassNames", null);
      _defineProperty(this, "destinationElementId", null);
      _defineProperty(this, "translucentOverlay", false);
      _defineProperty(this, "clickOutsideToClose", false);
      _defineProperty(this, "hasOverlay", true);
      _defineProperty(this, "isCentered", true);
      _defineProperty(this, "overlayPosition", null);
      _initializerDefineProperty(this, "modalService", _descriptor, this);
      _defineProperty(this, "variantWrapperClass", 'emd-static');
    }
    init() {
      super.init(...arguments);
      if (!this.destinationElementId) {
        (0, _object.set)(this, 'destinationElementId', this.modalService.destinationElementId);
      }
    }
    get containerClassNamesString() {
      let classNames = this.containerClassNames?.join && this.containerClassNames?.join(' ') || this.containerClassNames;
      return ['ember-modal-dialog', classNames, this.targetAttachmentClass, this.attachmentClass, this.containerClass].filter(className => !(0, _utils.isEmpty)(className)).join(' ');
    }
    get overlayClassNamesString() {
      let classNames = this.overlayClassNames?.join && this.overlayClassNames?.join(' ') || this.overlayClassNames;
      return ['ember-modal-overlay', classNames, this.translucentOverlay ? 'translucent' : null, this.overlayClass].filter(className => !(0, _utils.isEmpty)(className)).join(' ');
    }
    get wrapperClassNamesString() {
      let classNames = this.wrapperClassNames?.join && this.wrapperClassNames?.join(' ') || this.wrapperClassNames;
      return ['ember-modal-wrapper', classNames, this.targetAttachmentClass.replace('emd-', 'emd-wrapper-'), this.variantWrapperClass, this.wrapperClass].filter(className => !(0, _utils.isEmpty)(className)).join(' ');
    }
    get isOverlaySibling() {
      return this.overlayPosition === 'sibling';
    }
    get targetAttachmentClass() {
      let targetAttachment = this.targetAttachment || '';
      // Convert tether-styled values like 'middle right' to 'right'
      targetAttachment = targetAttachment.split(' ').slice(-1)[0];
      return `ember-modal-dialog-target-attachment-${(0, _string.dasherize)(targetAttachment)} emd-target-attachment-${(0, _string.dasherize)(targetAttachment)}`;
    }
    didInsertElement() {
      if (!this.clickOutsideToClose) {
        return;
      }
      this.makeOverlayClickableOnIOS();
      this.handleClick = ({
        target
      }) => {
        // if the click has already resulted in the target
        // being removed or hidden, do nothing
        if (target.offsetWidth === 0 && target.offsetHeight === 0) {
          return;
        }
        if (this.isDestroying || this.isDestroyed) {
          return;
        }
        let modalSelector = '.ember-modal-dialog';
        if (this.stack) {
          modalSelector = '#' + this.stack + modalSelector;
        }

        // if the click is within the dialog, do nothing
        let modalEl = document.querySelector(modalSelector);
        if (modalEl && modalEl.contains(target)) {
          return;
        }
        if (this.onClose) {
          this.onClose();
        }
      };
      const registerClick = () => document.addEventListener('click', this.handleClick);

      // setTimeout needed or else the click handler will catch the click that spawned this modal dialog
      setTimeout(registerClick);
      if (this.isIOS) {
        const registerTouch = () => document.addEventListener('touchend', this.handleClick);
        setTimeout(registerTouch);
      }
      super.didInsertElement(...arguments);
    }
    willDestroyElement() {
      document.removeEventListener('click', this.handleClick);
      if (this.isIOS) {
        document.removeEventListener('touchend', this.handleClick);
      }
      super.willDestroyElement(...arguments);
    }
    get isIOS() {
      return /iPad|iPhone|iPod/.test(navigator.userAgent);
    }
    makeOverlayClickableOnIOS() {
      if (this.isIOS) {
        let overlayEl = document.querySelector('div[data-emd-overlay]');
        if (overlayEl) {
          overlayEl.style.cursor = 'pointer';
        }
      }
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "modalService", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, "containerClassNamesString", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "containerClassNamesString"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "overlayClassNamesString", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "overlayClassNamesString"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "wrapperClassNamesString", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "wrapperClassNamesString"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isOverlaySibling", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "isOverlaySibling"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "targetAttachmentClass", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "targetAttachmentClass"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isIOS", [_object.computed], Object.getOwnPropertyDescriptor(_class2.prototype, "isIOS"), _class2.prototype)), _class2)) || _class) || _class);
});
;define("ember-modal-dialog/components/in-place-dialog", ["exports", "@ember-decorators/component", "@ember/component", "ember-modal-dialog/templates/components/in-place-dialog"], function (_exports, _component, _component2, _inPlaceDialog) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _class;
  let InPlaceDialog = _exports.default = (_dec = (0, _component.tagName)(''), _dec2 = (0, _component.layout)(_inPlaceDialog.default), _dec(_class = _dec2(_class = class InPlaceDialog extends _component2.default {
    get containerClassNamesString() {
      const addonClassNamesString = ['ember-modal-dialog', 'ember-modal-dialog-in-place', 'emd-in-place'].join(' ');
      const containerClassNamesString = this.containerClassNames?.join && this.containerClassNames?.join(' ') || this.containerClassNames || '';
      return `${addonClassNamesString} ${containerClassNamesString}`;
    }
  }) || _class) || _class);
});
;define("ember-modal-dialog/components/liquid-dialog", ["exports", "@ember-decorators/component", "ember-modal-dialog/components/basic-dialog", "ember-modal-dialog/templates/components/liquid-dialog"], function (_exports, _component, _basicDialog, _liquidDialog) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  let LiquidDialog = _exports.default = (_dec = (0, _component.layout)(_liquidDialog.default), _dec(_class = class LiquidDialog extends _basicDialog.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "hasOverlay", true);
      _defineProperty(this, "variantWrapperClass", 'emd-animatable');
    }
    init() {
      super.init(...arguments);
      this.containerClassNames?.push('liquid-dialog');
    }
  }) || _class);
});
;define("ember-modal-dialog/components/liquid-tether-dialog", ["exports", "@ember-decorators/component", "@ember/object", "@ember/string", "ember-modal-dialog/components/basic-dialog", "ember-modal-dialog/templates/components/liquid-tether-dialog"], function (_exports, _component, _object, _string, _basicDialog, _liquidTetherDialog) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _class, _class2;
  /* eslint-disable ember/no-computed-properties-in-native-classes */
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  let LiquidTetherDialog = _exports.default = (_dec = (0, _component.layout)(_liquidTetherDialog.default), _dec2 = (0, _object.computed)('targetAttachment'), _dec(_class = (_class2 = class LiquidTetherDialog extends _basicDialog.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "targetAttachment", null);
      _defineProperty(this, "attachment", null);
      _defineProperty(this, "hasOverlay", true);
      _defineProperty(this, "tetherTarget", null);
    }
    get targetAttachmentClass() {
      let targetAttachment = this.targetAttachment || '';
      // Convert tether-styled values like 'middle right' to 'right'
      targetAttachment = targetAttachment.split(' ').slice(-1)[0];
      return `ember-modal-dialog-target-attachment-${(0, _string.dasherize)(targetAttachment)} emd-target-attachment-${(0, _string.dasherize)(targetAttachment)}`;
    }
    didReceiveAttrs() {
      super.didReceiveAttrs(...arguments);
      if (!this.attachment) {
        (0, _object.set)(this, 'attachment', 'middle center');
      }
      if (!this.targetAttachment) {
        (0, _object.set)(this, 'targetAttachment', 'middle center');
      }
    }
    get tetherClassPrefix() {
      return 'liquid-tether';
    }
    set tetherClassPrefix(val) {
      if (val) {
        return val;
      }
      return 'liquid-tether';
    }

    // element, css selector, view instance, 'viewport', or 'scroll-handle'
    // offset - passed in
    // targetOffset - passed in
    // targetModifier - passed in
  }, (_applyDecoratedDescriptor(_class2.prototype, "targetAttachmentClass", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "targetAttachmentClass"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "tetherClassPrefix", [_object.computed], Object.getOwnPropertyDescriptor(_class2.prototype, "tetherClassPrefix"), _class2.prototype)), _class2)) || _class);
});
;define("ember-modal-dialog/components/modal-dialog", ["exports", "@ember-decorators/component", "@ember/object", "@ember/service", "@ember/object/computed", "@ember/component", "@ember/string", "@ember/utils", "ember-modal-dialog/templates/components/modal-dialog", "@ember/debug", "@embroider/util", "@embroider/macros/es-compat2"], function (_exports, _component, _object, _service, _computed, _component2, _string, _utils, _modalDialog, _debug, _util, _esCompat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const VALID_OVERLAY_POSITIONS = ['parent', 'sibling'];
  let ModalDialog = _exports.default = (_dec = (0, _component.tagName)(''), _dec2 = (0, _component.layout)(_modalDialog.default), _dec3 = (0, _service.inject)('modal-dialog'), _dec4 = (0, _computed.readOnly)('modalService.hasLiquidWormhole'), _dec5 = (0, _computed.readOnly)('modalService.hasLiquidTether'), _dec6 = (0, _computed.oneWay)('elementId'), _dec7 = (0, _object.computed)('attachment'), _dec8 = (0, _object.computed)('renderInPlace', 'tetherTarget', 'animatable', 'hasLiquidWormhole', 'hasLiquidTether'), _dec(_class = _dec2(_class = (_class2 = class ModalDialog extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "modalService", _descriptor, this);
      _defineProperty(this, "animatable", null);
      _defineProperty(this, "clickOutsideToClose", false);
      _defineProperty(this, "destinationElementId", null);
      _defineProperty(this, "hasOverlay", true);
      _defineProperty(this, "overlayPosition", 'parent');
      // `parent` or `sibling`
      _defineProperty(this, "renderInPlace", false);
      _defineProperty(this, "targetAttachment", 'middle center');
      _defineProperty(this, "tetherClassPrefix", null);
      _defineProperty(this, "tetherTarget", null);
      _defineProperty(this, "translucentOverlay", false);
      _defineProperty(this, "value", 0);
      // pass a `value` to set a "value" to be passed to liquid-wormhole / liquid-tether
      _initializerDefineProperty(this, "hasLiquidWormhole", _descriptor2, this);
      _initializerDefineProperty(this, "hasLiquidTether", _descriptor3, this);
      _initializerDefineProperty(this, "stack", _descriptor4, this);
    }
    // pass a `stack` string to set a "stack" to be passed to liquid-wormhole / liquid-tether

    get attachmentClass() {
      let attachment = this.attachment;
      if ((0, _utils.isEmpty)(attachment)) {
        return undefined;
      }
      return attachment.split(' ').map(attachmentPart => {
        return `emd-attachment-${(0, _string.dasherize)(attachmentPart)}`;
      }).join(' ');
    }
    get whichModalDialogComponent() {
      let {
        animatable,
        hasLiquidTether,
        hasLiquidWormhole,
        tetherTarget
      } = this;
      let module = (0, _esCompat.default)(require("ember-modal-dialog/components/basic-dialog"));
      if (this.renderInPlace) {
        module = (0, _esCompat.default)(require("ember-modal-dialog/components/in-place-dialog"));
      } else if (tetherTarget && hasLiquidTether && hasLiquidWormhole && animatable === true) {
        module = (0, _esCompat.default)(require("ember-modal-dialog/components/liquid-tether-dialog"));
      } else if (tetherTarget) {
        this.ensureEmberTetherPresent();
        module = (0, _esCompat.default)(require("ember-modal-dialog/components/tether-dialog"));
      } else if (hasLiquidWormhole && animatable === true) {
        module = (0, _esCompat.default)(require("ember-modal-dialog/components/liquid-dialog"));
      }
      return (0, _util.ensureSafeComponent)(module.default, this);
    }
    init() {
      super.init(...arguments);
      if (!this.destinationElementId) {
        (0, _object.set)(this, 'destinationElementId', this.modalService.destinationElementId);
      }
    }
    didReceiveAttrs() {
      super.didReceiveAttrs(...arguments);
      if (true /* DEBUG */) {
        this.validateProps();
      }
    }
    validateProps() {
      let overlayPosition = this.overlayPosition;
      if (VALID_OVERLAY_POSITIONS.indexOf(overlayPosition) === -1) {
        (true && (0, _debug.warn)(`overlayPosition value '${overlayPosition}' is not valid (valid values [${VALID_OVERLAY_POSITIONS.join(', ')}])`, false, {
          id: 'ember-modal-dialog.validate-overlay-position'
        }));
      }
    }
    ensureEmberTetherPresent() {
      if (!this.modalService.hasEmberTether) {
        throw new Error('Please install ember-tether in order to pass a tetherTarget to modal-dialog');
      }
    }
    onCloseAction() {
      const onClose = this.onClose;
      // we shouldn't warn if the callback is not provided at all
      if ((0, _utils.isNone)(onClose)) {
        return;
      }
      (true && !((0, _utils.typeOf)(onClose) === 'function') && (0, _debug.assert)('onClose handler must be a function', (0, _utils.typeOf)(onClose) === 'function'));
      onClose();
    }
    onClickOverlayAction(e) {
      e.preventDefault();
      const onClickOverlay = this.onClickOverlay;
      // we shouldn't warn if the callback is not provided at all
      if ((0, _utils.isNone)(onClickOverlay)) {
        this.onCloseAction();
        return;
      }
      (true && !((0, _utils.typeOf)(onClickOverlay) === 'function') && (0, _debug.assert)('onClickOverlay handler must be a function', (0, _utils.typeOf)(onClickOverlay) === 'function'));
      onClickOverlay();
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "modalService", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "hasLiquidWormhole", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "hasLiquidTether", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "stack", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, "attachmentClass", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "attachmentClass"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "whichModalDialogComponent", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "whichModalDialogComponent"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onCloseAction", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "onCloseAction"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onClickOverlayAction", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "onClickOverlayAction"), _class2.prototype)), _class2)) || _class) || _class);
});
;define("ember-modal-dialog/components/positioned-container", ["exports", "@ember/debug", "@ember/utils", "@ember/component", "@ember/string", "@ember/object", "@ember/object/evented"], function (_exports, _debug, _utils, _component, _string, _object, _evented) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const SUPPORTED_TARGET_ATTACHMENTS = ['top', 'right', 'bottom', 'left', 'center', 'elementCenter', 'none'];
  var _default = _exports.default = _component.default.extend({
    // target - element selector, element, or Ember View
    // targetAttachment - top, right, bottom, left, center, or none
    //   left, right, top, bottom (relative to target)
    //   center (relative to container)
    targetAttachment: 'center',
    isPositioned: (0, _object.computed)('targetAttachment', 'target', 'renderInPlace', function () {
      if (this.renderInPlace) {
        return false;
      }
      let target = this.target;
      let targetAttachment = this.targetAttachment;
      if (target === 'body' && (targetAttachment === 'center' || targetAttachment === 'middle center')) {
        return false;
      }
      if (target && targetAttachment) {
        return true;
      }
      return false;
    }),
    didGetPositioned: (0, _object.observer)('isPositioned', (0, _evented.on)('didInsertElement', function () {
      if (this._state !== 'inDOM') {
        return;
      }
      if (this.isPositioned) {
        this.updateTargetAttachment();
      } else {
        this.element.style.left = '';
        this.element.style.top = '';
      }
    })),
    getWrappedTargetAttachmentElement() {
      const target = this.target;
      if (!target) {
        return null;
      }
      if ((0, _utils.typeOf)(target) === 'string') {
        const targetSelector = target;
        const wrappedElement = document.querySelector(targetSelector);
        (true && !(wrappedElement) && (0, _debug.assert)(`No element found for modal-dialog's target selector '${targetSelector}'.`, wrappedElement));
        return wrappedElement;
      }

      // passed an ember view or component
      if (target.element) {
        return target.element;
      }

      // passed an element directly
      return target;
    },
    updateTargetAttachment() {
      let targetAttachment = this.targetAttachment;
      // Convert tether-styled values like 'middle right' to 'right'
      targetAttachment = targetAttachment.split(' ').slice(-1)[0];
      (true && !(SUPPORTED_TARGET_ATTACHMENTS.indexOf(targetAttachment) > -1) && (0, _debug.assert)(`Positioned container supports targetAttachments of ${SUPPORTED_TARGET_ATTACHMENTS.join(', ')}`, SUPPORTED_TARGET_ATTACHMENTS.indexOf(targetAttachment) > -1));
      const targetAttachmentMethod = `align${(0, _string.capitalize)(targetAttachment)}`;
      const targetAttachmentElement = this.getWrappedTargetAttachmentElement();
      this[targetAttachmentMethod](targetAttachmentElement);
    },
    alignCenter() {
      const elementWidth = this.element.offsetWidth;
      const elementHeight = this.element.offsetHeight;
      this.element.style.left = '50%';
      this.element.style.top = '50%';
      this.element.style.marginLeft = `${elementWidth * -0.5}px`;
      this.element.style.marginTop = `${elementHeight * -0.5}px`;
    },
    alignLeft(targetAttachmentElement) {
      (true && !(targetAttachmentElement) && (0, _debug.assert)('Left targetAttachment requires a target', targetAttachmentElement));
      const elementWidth = this.element.offsetWidth;
      const originOffset = targetAttachmentElement.getBoundingClientRect();
      const originOffsetTop = originOffset.top;
      this.element.style.left = `${originOffset.left - elementWidth}px`;
      this.element.style.top = `${originOffsetTop}px`;
    },
    alignRight(targetAttachmentElement) {
      (true && !(targetAttachmentElement) && (0, _debug.assert)('Right targetAttachment requires a target', targetAttachmentElement));
      const targetWidth = targetAttachmentElement.offsetWidth;
      const originOffset = targetAttachmentElement.getBoundingClientRect();
      const originOffsetTop = originOffset.top;
      this.element.style.left = `${originOffset.left + targetWidth}px`;
      this.element.style.top = `${originOffsetTop}px`;
    },
    alignTop(targetAttachmentElement) {
      (true && !(targetAttachmentElement) && (0, _debug.assert)('Top targetAttachment requires a target', targetAttachmentElement));
      const elementWidth = this.element.offsetWidth;
      const elementHeight = this.element.offsetHeight;
      const originOffset = targetAttachmentElement.getBoundingClientRect();
      const originOffsetTop = originOffset.top;
      const targetWidth = targetAttachmentElement.offsetWidth;
      this.element.style.left = `${originOffset.left + targetWidth / 2 - elementWidth / 2}px`;
      this.element.style.top = `${originOffsetTop - elementHeight}px`;
    },
    alignBottom(targetAttachmentElement) {
      (true && !(targetAttachmentElement) && (0, _debug.assert)('Bottom targetAttachment requires a target', targetAttachmentElement));
      const elementWidth = this.element.offsetWidth;
      const originOffset = targetAttachmentElement.getBoundingClientRect();
      const originOffsetTop = originOffset.top;
      const targetWidth = targetAttachmentElement.offsetWidth;
      const targetHeight = targetAttachmentElement.offsetHeight;
      this.element.style.left = `${originOffset.left + targetWidth / 2 - elementWidth / 2}px`;
      this.element.style.top = `${originOffsetTop + targetHeight}px`;
    },
    alignElementCenter(targetAttachmentElement) {
      (true && !(targetAttachmentElement) && (0, _debug.assert)('ElementCenter targetAttachment requires a target', targetAttachmentElement));
      const elementWidth = this.element.offsetWidth;
      const originOffset = targetAttachmentElement.getBoundingClientRect();
      const originOffsetTop = originOffset.top;
      const targetWidth = targetAttachmentElement.offsetWidth;
      const targetHeight = targetAttachmentElement.offsetHeight;
      const elementHeight = this.element.offsetHeight;
      this.element.style.left = `${originOffset.left + targetWidth / 2 - elementWidth / 2}px`;
      this.element.style.top = `${originOffsetTop + targetHeight / 2 - elementHeight / 2}px`;
    },
    alignNone() {}
  });
});
;define("ember-modal-dialog/components/tether-dialog", ["exports", "@ember-decorators/component", "@ember/object", "@ember/string", "ember-modal-dialog/components/basic-dialog", "ember-modal-dialog/templates/components/tether-dialog"], function (_exports, _component, _object, _string, _basicDialog, _tetherDialog) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _class, _class2;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  let TetherDialog = _exports.default = (_dec = (0, _component.layout)(_tetherDialog.default), _dec2 = (0, _object.computed)('targetAttachment'), _dec(_class = (_class2 = class TetherDialog extends _basicDialog.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "targetAttachment", null);
      _defineProperty(this, "attachment", null);
      _defineProperty(this, "tetherTarget", null);
    }
    init() {
      super.init(...arguments);
      this._ensureAttachments();
    }
    get targetAttachmentClass() {
      let targetAttachment = this.targetAttachment || '';
      // Convert tether-styled values like 'middle right' to 'right'
      targetAttachment = targetAttachment.split(' ').slice(-1)[0];
      return `ember-modal-dialog-target-attachment-${(0, _string.dasherize)(targetAttachment)} emd-target-attachment-${(0, _string.dasherize)(targetAttachment)}`;
    }
    didReceiveAttrs() {
      super.didReceiveAttrs(...arguments);
      this._ensureAttachments();
    }
    // element, css selector, view instance, 'viewport', or 'scroll-handle'

    get tetherClassPrefix() {
      return 'ember-tether';
    }
    set tetherClassPrefix(val) {
      if (val) {
        return val;
      }
      return 'ember-tether';
    }

    // offset - passed in
    // targetOffset - passed in
    // targetModifier - passed in
    _ensureAttachments() {
      if (!this.attachment) {
        (0, _object.set)(this, 'attachment', 'middle center');
      }
      if (!this.targetAttachment) {
        (0, _object.set)(this, 'targetAttachment', 'middle center');
      }
    }
  }, (_applyDecoratedDescriptor(_class2.prototype, "targetAttachmentClass", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "targetAttachmentClass"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "tetherClassPrefix", [_object.computed], Object.getOwnPropertyDescriptor(_class2.prototype, "tetherClassPrefix"), _class2.prototype)), _class2)) || _class);
});
;define("ember-modal-dialog/helpers/ignore-children", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  Adopted from https://github.com/ef4/ember-ignore-children-helper
  
  The MIT License (MIT)
  
  Copyright (c) 2016
  
  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  */
  var _default = _exports.default = (0, _helper.helper)(function ignoreChildren([nextHandler]) {
    return function (...args) {
      let event = args[args.length - 1];
      if (event && event.target === event.currentTarget) {
        nextHandler.apply(this, args);
      }
    };
  });
});
;define("ember-modal-dialog/instance-initializers/add-modals-container", ["exports", "ember-modal-dialog/utils/config-utils", "@ember/application"], function (_exports, _configUtils, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;
  let hasDOM = typeof document !== 'undefined';
  function appendContainerElement(rootElementOrId, id) {
    if (!hasDOM) {
      return;
    }
    let rootEl = rootElementOrId.appendChild ? rootElementOrId : document.querySelector(rootElementOrId);
    if (rootEl.querySelector('#' + id)) {
      return;
    }
    let modalContainerEl = document.createElement('div');
    modalContainerEl.id = id;
    rootEl.appendChild(modalContainerEl);
  }
  function _default(instance) {
    let config = instance.resolveRegistration('config:environment');
    let modalContainerElId = (0, _configUtils.getDestinationElementIdFromConfig)(config);

    // As there is only a single `Router` across the whole app, which is owned
    // by the root `Application`, this reliably finds the root `Application`
    // from an `Application` or `Engine`.
    // eslint-disable-next-line ember/no-private-routing-service
    let app = (0, _application.getOwner)(instance.lookup('router:main'));
    appendContainerElement(app.rootElement, modalContainerElId);
  }
});
;define("ember-modal-dialog/templates/components/basic-dialog", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    <EmberWormhole @to={{this.destinationElementId}}>
    {{#if this.isOverlaySibling}}
      <div class='{{this.wrapperClassNamesString}} {{this.wrapperClass}}'>
        {{#if this.hasOverlay}}
          <div
            class={{this.overlayClassNamesString}}
            onclick={{action this.onClickOverlay}}
            tabindex='-1'
            data-emd-overlay
          >
          </div>
        {{/if}}
        <EmberModalDialogPositionedContainer
          @class={{this.containerClassNamesString}}
          @targetAttachment={{this.targetAttachment}}
          @target={{this.legacyTarget}}
          ...attributes
        >
          {{yield}}
        </EmberModalDialogPositionedContainer>
      </div>
    {{else}}
      <div class='{{this.wrapperClassNamesString}} {{this.wrapperClass}}'>
        {{#if this.hasOverlay}}
          <div
            class={{this.overlayClassNamesString}}
            onclick={{action (ignore-children this.onClickOverlay)}}
            tabindex='-1'
            data-emd-overlay
          >
            <EmberModalDialogPositionedContainer
              @class={{this.containerClassNamesString}}
              @targetAttachment={{this.targetAttachment}}
              @target={{this.legacyTarget}}
              ...attributes
            >
              {{yield}}
            </EmberModalDialogPositionedContainer>
          </div>
        {{else}}
          <EmberModalDialogPositionedContainer
            @class={{this.containerClassNamesString}}
            @targetAttachment={{this.targetAttachment}}
            @target={{this.legacyTarget}}
            ...attributes
          >
            {{yield}}
          </EmberModalDialogPositionedContainer>
        {{/if}}
      </div>
    {{/if}}
  </EmberWormhole>
  */
  {
    "id": "kahkmEdW",
    "block": "[[[8,[39,0],null,[[\"@to\"],[[30,0,[\"destinationElementId\"]]]],[[\"default\"],[[[[1,\"\\n\"],[41,[30,0,[\"isOverlaySibling\"]],[[[1,\"    \"],[10,0],[15,0,[29,[[30,0,[\"wrapperClassNamesString\"]],\" \",[30,0,[\"wrapperClass\"]]]]],[12],[1,\"\\n\"],[41,[30,0,[\"hasOverlay\"]],[[[1,\"        \"],[10,0],[15,0,[30,0,[\"overlayClassNamesString\"]]],[15,\"onclick\",[28,[37,2],[[30,0],[30,0,[\"onClickOverlay\"]]],null]],[14,\"tabindex\",\"-1\"],[14,\"data-emd-overlay\",\"\"],[12],[1,\"\\n        \"],[13],[1,\"\\n\"]],[]],null],[1,\"      \"],[8,[39,3],[[17,1]],[[\"@class\",\"@targetAttachment\",\"@target\"],[[30,0,[\"containerClassNamesString\"]],[30,0,[\"targetAttachment\"]],[30,0,[\"legacyTarget\"]]]],[[\"default\"],[[[[1,\"\\n        \"],[18,2,null],[1,\"\\n      \"]],[]]]]],[1,\"\\n    \"],[13],[1,\"\\n\"]],[]],[[[1,\"    \"],[10,0],[15,0,[29,[[30,0,[\"wrapperClassNamesString\"]],\" \",[30,0,[\"wrapperClass\"]]]]],[12],[1,\"\\n\"],[41,[30,0,[\"hasOverlay\"]],[[[1,\"        \"],[10,0],[15,0,[30,0,[\"overlayClassNamesString\"]]],[15,\"onclick\",[28,[37,2],[[30,0],[28,[37,5],[[30,0,[\"onClickOverlay\"]]],null]],null]],[14,\"tabindex\",\"-1\"],[14,\"data-emd-overlay\",\"\"],[12],[1,\"\\n          \"],[8,[39,3],[[17,1]],[[\"@class\",\"@targetAttachment\",\"@target\"],[[30,0,[\"containerClassNamesString\"]],[30,0,[\"targetAttachment\"]],[30,0,[\"legacyTarget\"]]]],[[\"default\"],[[[[1,\"\\n            \"],[18,2,null],[1,\"\\n          \"]],[]]]]],[1,\"\\n        \"],[13],[1,\"\\n\"]],[]],[[[1,\"        \"],[8,[39,3],[[17,1]],[[\"@class\",\"@targetAttachment\",\"@target\"],[[30,0,[\"containerClassNamesString\"]],[30,0,[\"targetAttachment\"]],[30,0,[\"legacyTarget\"]]]],[[\"default\"],[[[[1,\"\\n          \"],[18,2,null],[1,\"\\n        \"]],[]]]]],[1,\"\\n\"]],[]]],[1,\"    \"],[13],[1,\"\\n\"]],[]]]],[]]]]]],[\"&attrs\",\"&default\"],false,[\"ember-wormhole\",\"if\",\"action\",\"ember-modal-dialog-positioned-container\",\"yield\",\"ignore-children\"]]",
    "moduleName": "ember-modal-dialog/templates/components/basic-dialog.hbs",
    "isStrictMode": false
  });
});
;define("ember-modal-dialog/templates/components/in-place-dialog", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    <div
    class={{concat
      this.containerClassNamesString
      ' '
      this.attachmentClass
      ' '
      this.containerClass
    }}
    ...attributes
  >
    {{yield}}
  </div>
  */
  {
    "id": "is2Nl/Fz",
    "block": "[[[11,0],[16,0,[28,[37,0],[[30,0,[\"containerClassNamesString\"]],\" \",[30,0,[\"attachmentClass\"]],\" \",[30,0,[\"containerClass\"]]],null]],[17,1],[12],[1,\"\\n  \"],[18,2,null],[1,\"\\n\"],[13]],[\"&attrs\",\"&default\"],false,[\"concat\",\"yield\"]]",
    "moduleName": "ember-modal-dialog/templates/components/in-place-dialog.hbs",
    "isStrictMode": false
  });
});
;define("ember-modal-dialog/templates/components/liquid-dialog", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#if this.isOverlaySibling}}
    <LiquidWormhole
      @stack={{this.stack}}
      @value={{this.value}}
      @class={{concat
        'liquid-dialog-container '
        this.wrapperClassNamesString
        ' '
        this.wrapperClass
      }}
    >
      <div class='{{this.wrapperClassNamesString}} {{this.wrapperClass}}'>
        {{#if this.hasOverlay}}
          <div
            class={{this.overlayClassNamesString}}
            onclick={{action this.onClickOverlay}}
            tabindex='-1'
            data-emd-overlay
          >
          </div>
        {{/if}}
        <div class={{this.containerClassNamesString}} ...attributes>
          {{yield}}
        </div>
      </div>
    </LiquidWormhole>
  {{else}}
    <LiquidWormhole
      @stack={{this.stack}}
      @value={{this.value}}
      @class={{concat
        'liquid-dialog-container '
        this.wrapperClassNamesString
        ' '
        this.wrapperClass
      }}
    >
      {{#if this.hasOverlay}}
        <div
          class={{this.overlayClassNamesString}}
          onclick={{action (ignore-children this.onClickOverlay)}}
          tabindex='-1'
          data-emd-overlay
        >
          <div class={{this.containerClassNamesString}} ...attributes>
            {{yield}}
          </div>
        </div>
      {{else}}
        <div class={{this.containerClassNamesString}} ...attributes>
          {{yield}}
        </div>
      {{/if}}
    </LiquidWormhole>
  {{/if}}
  */
  {
    "id": "Tay1Dr4p",
    "block": "[[[41,[30,0,[\"isOverlaySibling\"]],[[[1,\"  \"],[8,[39,1],null,[[\"@stack\",\"@value\",\"@class\"],[[30,0,[\"stack\"]],[30,0,[\"value\"]],[28,[37,2],[\"liquid-dialog-container \",[30,0,[\"wrapperClassNamesString\"]],\" \",[30,0,[\"wrapperClass\"]]],null]]],[[\"default\"],[[[[1,\"\\n    \"],[10,0],[15,0,[29,[[30,0,[\"wrapperClassNamesString\"]],\" \",[30,0,[\"wrapperClass\"]]]]],[12],[1,\"\\n\"],[41,[30,0,[\"hasOverlay\"]],[[[1,\"        \"],[10,0],[15,0,[30,0,[\"overlayClassNamesString\"]]],[15,\"onclick\",[28,[37,3],[[30,0],[30,0,[\"onClickOverlay\"]]],null]],[14,\"tabindex\",\"-1\"],[14,\"data-emd-overlay\",\"\"],[12],[1,\"\\n        \"],[13],[1,\"\\n\"]],[]],null],[1,\"      \"],[11,0],[16,0,[30,0,[\"containerClassNamesString\"]]],[17,1],[12],[1,\"\\n        \"],[18,2,null],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[]]]]],[1,\"\\n\"]],[]],[[[1,\"  \"],[8,[39,1],null,[[\"@stack\",\"@value\",\"@class\"],[[30,0,[\"stack\"]],[30,0,[\"value\"]],[28,[37,2],[\"liquid-dialog-container \",[30,0,[\"wrapperClassNamesString\"]],\" \",[30,0,[\"wrapperClass\"]]],null]]],[[\"default\"],[[[[1,\"\\n\"],[41,[30,0,[\"hasOverlay\"]],[[[1,\"      \"],[10,0],[15,0,[30,0,[\"overlayClassNamesString\"]]],[15,\"onclick\",[28,[37,3],[[30,0],[28,[37,5],[[30,0,[\"onClickOverlay\"]]],null]],null]],[14,\"tabindex\",\"-1\"],[14,\"data-emd-overlay\",\"\"],[12],[1,\"\\n        \"],[11,0],[16,0,[30,0,[\"containerClassNamesString\"]]],[17,1],[12],[1,\"\\n          \"],[18,2,null],[1,\"\\n        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],[[[1,\"      \"],[11,0],[16,0,[30,0,[\"containerClassNamesString\"]]],[17,1],[12],[1,\"\\n        \"],[18,2,null],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]]],[1,\"  \"]],[]]]]],[1,\"\\n\"]],[]]]],[\"&attrs\",\"&default\"],false,[\"if\",\"liquid-wormhole\",\"concat\",\"action\",\"yield\",\"ignore-children\"]]",
    "moduleName": "ember-modal-dialog/templates/components/liquid-dialog.hbs",
    "isStrictMode": false
  });
});
;define("ember-modal-dialog/templates/components/liquid-tether-dialog", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#if this.hasOverlay}}
    <LiquidWormhole @stack='modal-overlay' @class='liquid-dialog-container'>
      <div
        class={{this.overlayClassNamesString}}
        onclick={{action this.onClickOverlay}}
        tabindex='-1'
        data-emd-overlay
      >
      </div>
    </LiquidWormhole>
  {{/if}}
  <LiquidTether
    @class={{this.containerClassNamesString}}
    @target={{this.tetherTarget}}
    @attachment={{this.attachment}}
    @targetAttachment={{this.targetAttachment}}
    @targetModifier={{this.targetModifier}}
    @classPrefix={{this.tetherClassPrefix}}
    @offset={{this.offset}}
    @targetOffset={{this.targetOffset}}
    @constraints={{this.constraints}}
    @stack={{this.stack}}
    @value={{this.value}}
    ...attributes
  >
    {{yield}}
  </LiquidTether>
  */
  {
    "id": "iywV5xgq",
    "block": "[[[41,[30,0,[\"hasOverlay\"]],[[[1,\"  \"],[8,[39,1],null,[[\"@stack\",\"@class\"],[\"modal-overlay\",\"liquid-dialog-container\"]],[[\"default\"],[[[[1,\"\\n    \"],[10,0],[15,0,[30,0,[\"overlayClassNamesString\"]]],[15,\"onclick\",[28,[37,2],[[30,0],[30,0,[\"onClickOverlay\"]]],null]],[14,\"tabindex\",\"-1\"],[14,\"data-emd-overlay\",\"\"],[12],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[]]]]],[1,\"\\n\"]],[]],null],[8,[39,3],[[17,1]],[[\"@class\",\"@target\",\"@attachment\",\"@targetAttachment\",\"@targetModifier\",\"@classPrefix\",\"@offset\",\"@targetOffset\",\"@constraints\",\"@stack\",\"@value\"],[[30,0,[\"containerClassNamesString\"]],[30,0,[\"tetherTarget\"]],[30,0,[\"attachment\"]],[30,0,[\"targetAttachment\"]],[30,0,[\"targetModifier\"]],[30,0,[\"tetherClassPrefix\"]],[30,0,[\"offset\"]],[30,0,[\"targetOffset\"]],[30,0,[\"constraints\"]],[30,0,[\"stack\"]],[30,0,[\"value\"]]]],[[\"default\"],[[[[1,\"\\n  \"],[18,2,null],[1,\"\\n\"]],[]]]]]],[\"&attrs\",\"&default\"],false,[\"if\",\"liquid-wormhole\",\"action\",\"liquid-tether\",\"yield\"]]",
    "moduleName": "ember-modal-dialog/templates/components/liquid-tether-dialog.hbs",
    "isStrictMode": false
  });
});
;define("ember-modal-dialog/templates/components/modal-dialog", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    <this.whichModalDialogComponent
    @wrapperClass={{this.wrapperClass}}
    @wrapperClassNames={{this.wrapperClassNames}}
    @overlayClass={{this.overlayClass}}
    @overlayClassNames={{this.overlayClassNames}}
    @containerClass={{this.containerClass}}
    @containerClassNames={{this.containerClassNames}}
    @hasOverlay={{this.hasOverlay}}
    @translucentOverlay={{this.translucentOverlay}}
    @clickOutsideToClose={{this.clickOutsideToClose}}
    @destinationElementId={{this.destinationElementId}}
    @overlayPosition={{this.overlayPosition}}
    @tetherTarget={{this.tetherTarget}}
    @legacyTarget={{this.target}}
    @attachment={{this.attachment}}
    @targetAttachment={{this.targetAttachment}}
    @targetModifier={{this.targetModifier}}
    @targetOffset={{this.targetOffset}}
    @offset={{this.offset}}
    @tetherClassPrefix={{this.tetherClassPrefix}}
    @constraints={{this.constraints}}
    @attachmentClass={{this.attachmentClass}}
    @stack={{this.stack}}
    @value={{this.value}}
    @onClickOverlay={{this.onClickOverlayAction}}
    @onClose={{this.onCloseAction}}
    ...attributes
  >
    {{yield}}
  </this.whichModalDialogComponent>
  */
  {
    "id": "XWaFT4YJ",
    "block": "[[[8,[30,0,[\"whichModalDialogComponent\"]],[[17,1]],[[\"@wrapperClass\",\"@wrapperClassNames\",\"@overlayClass\",\"@overlayClassNames\",\"@containerClass\",\"@containerClassNames\",\"@hasOverlay\",\"@translucentOverlay\",\"@clickOutsideToClose\",\"@destinationElementId\",\"@overlayPosition\",\"@tetherTarget\",\"@legacyTarget\",\"@attachment\",\"@targetAttachment\",\"@targetModifier\",\"@targetOffset\",\"@offset\",\"@tetherClassPrefix\",\"@constraints\",\"@attachmentClass\",\"@stack\",\"@value\",\"@onClickOverlay\",\"@onClose\"],[[30,0,[\"wrapperClass\"]],[30,0,[\"wrapperClassNames\"]],[30,0,[\"overlayClass\"]],[30,0,[\"overlayClassNames\"]],[30,0,[\"containerClass\"]],[30,0,[\"containerClassNames\"]],[30,0,[\"hasOverlay\"]],[30,0,[\"translucentOverlay\"]],[30,0,[\"clickOutsideToClose\"]],[30,0,[\"destinationElementId\"]],[30,0,[\"overlayPosition\"]],[30,0,[\"tetherTarget\"]],[30,0,[\"target\"]],[30,0,[\"attachment\"]],[30,0,[\"targetAttachment\"]],[30,0,[\"targetModifier\"]],[30,0,[\"targetOffset\"]],[30,0,[\"offset\"]],[30,0,[\"tetherClassPrefix\"]],[30,0,[\"constraints\"]],[30,0,[\"attachmentClass\"]],[30,0,[\"stack\"]],[30,0,[\"value\"]],[30,0,[\"onClickOverlayAction\"]],[30,0,[\"onCloseAction\"]]]],[[\"default\"],[[[[1,\"\\n  \"],[18,2,null],[1,\"\\n\"]],[]]]]]],[\"&attrs\",\"&default\"],false,[\"yield\"]]",
    "moduleName": "ember-modal-dialog/templates/components/modal-dialog.hbs",
    "isStrictMode": false
  });
});
;define("ember-modal-dialog/templates/components/tether-dialog", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#if this.hasOverlay}}
    <EmberWormhole @to={{this.destinationElementId}}>
      <div
        class={{this.overlayClassNamesString}}
        onclick={{action this.onClickOverlay}}
        tabindex='-1'
        data-emd-overlay
      >
      </div>
    </EmberWormhole>
  {{/if}}
  <EmberTether
    class={{this.containerClassNamesString}}
    @target={{this.tetherTarget}}
    @attachment={{this.attachment}}
    @targetAttachment={{this.targetAttachment}}
    @targetModifier={{this.targetModifier}}
    @classPrefix={{this.tetherClassPrefix}}
    @offset={{this.offset}}
    @targetOffset={{this.targetOffset}}
    @constraints={{this.constraints}}
    ...attributes
  >
    {{yield}}
  </EmberTether>
  */
  {
    "id": "GojXVlka",
    "block": "[[[41,[30,0,[\"hasOverlay\"]],[[[1,\"  \"],[8,[39,1],null,[[\"@to\"],[[30,0,[\"destinationElementId\"]]]],[[\"default\"],[[[[1,\"\\n    \"],[10,0],[15,0,[30,0,[\"overlayClassNamesString\"]]],[15,\"onclick\",[28,[37,2],[[30,0],[30,0,[\"onClickOverlay\"]]],null]],[14,\"tabindex\",\"-1\"],[14,\"data-emd-overlay\",\"\"],[12],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[]]]]],[1,\"\\n\"]],[]],null],[8,[39,3],[[16,0,[30,0,[\"containerClassNamesString\"]]],[17,1]],[[\"@target\",\"@attachment\",\"@targetAttachment\",\"@targetModifier\",\"@classPrefix\",\"@offset\",\"@targetOffset\",\"@constraints\"],[[30,0,[\"tetherTarget\"]],[30,0,[\"attachment\"]],[30,0,[\"targetAttachment\"]],[30,0,[\"targetModifier\"]],[30,0,[\"tetherClassPrefix\"]],[30,0,[\"offset\"]],[30,0,[\"targetOffset\"]],[30,0,[\"constraints\"]]]],[[\"default\"],[[[[1,\"\\n  \"],[18,2,null],[1,\"\\n\"]],[]]]]]],[\"&attrs\",\"&default\"],false,[\"if\",\"ember-wormhole\",\"action\",\"ember-tether\",\"yield\"]]",
    "moduleName": "ember-modal-dialog/templates/components/tether-dialog.hbs",
    "isStrictMode": false
  });
});
;define("ember-modal-dialog/utils/config-utils", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getDestinationElementIdFromConfig = getDestinationElementIdFromConfig;
  function getDestinationElementIdFromConfig(config) {
    // if (config.environment === 'test') {
    //   return 'ember-testing';
    // }
    let modalContainerId = config['ember-modal-dialog'] && config['ember-modal-dialog'].modalRootElementId;
    modalContainerId = modalContainerId || 'modal-overlays';
    return modalContainerId;
  }
});
;define("ember-page-title/helpers/page-title", ["exports", "@ember/service", "@ember/component/helper", "@ember/object/internals"], function (_exports, _service, _helper, _internals) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  /**
    `{{page-title}}` helper used to set the title of the current route context.
  
    @public
    @method page-title
   */
  let PageTitle = _exports.default = (_dec = (0, _service.inject)('page-title-list'), (_class = class PageTitle extends _helper.default {
    get tokenId() {
      return (0, _internals.guidFor)(this);
    }
    constructor() {
      super(...arguments);
      _initializerDefineProperty(this, "tokens", _descriptor, this);
      this.tokens.push({
        id: this.tokenId
      });
    }
    compute(params, _hash) {
      let hash = {
        ..._hash,
        id: this.tokenId,
        title: params.join('')
      };
      this.tokens.push(hash);
      this.tokens.scheduleTitleUpdate();
      return '';
    }
    willDestroy() {
      super.willDestroy();
      this.tokens.remove(this.tokenId);
      this.tokens.scheduleTitleUpdate();
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "tokens", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
});
;define("ember-page-title/services/page-title-list", ["exports", "@ember/application", "@ember/runloop", "@ember/service", "@ember/utils", "@ember/debug"], function (_exports, _application, _runloop, _service, _utils, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2, _descriptor3;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let isFastBoot = typeof FastBoot !== 'undefined';
  const RouterEvent = {
    ROUTE_DID_CHANGE: 'routeDidChange'
  };

  /**
    @class page-title-list
    @extends Ember.Service
   */
  let PageTitleListService = _exports.default = (_dec = (0, _service.inject)('page-title'), _dec2 = (0, _service.inject)('router'), _dec3 = (0, _service.inject)('-document'), (_class = class PageTitleListService extends _service.default {
    constructor() {
      super(...arguments);
      _initializerDefineProperty(this, "pageTitle", _descriptor, this);
      _initializerDefineProperty(this, "router", _descriptor2, this);
      // in fastboot context "document" is instance of
      // ember-fastboot/simple-dom document
      _initializerDefineProperty(this, "document", _descriptor3, this);
      _defineProperty(this, "tokens", []);
      _defineProperty(this, "_defaultConfig", {
        // The default separator to use between tokens.
        separator: ' | ',
        // The default prepend value to use.
        prepend: true,
        // The default replace value to use.
        replace: null
      });
      _defineProperty(this, "scheduleTitleUpdate", () => {
        (0, _runloop.scheduleOnce)('afterRender', this, this._updateTitle);
      });
      this._validateExistingTitleElement();
      let config = (0, _application.getOwner)(this).resolveRegistration('config:environment');
      if (config.pageTitle) {
        ['separator', 'prepend', 'replace'].forEach(key => {
          if (!(0, _utils.isEmpty)(config.pageTitle[key])) {
            this._defaultConfig[key] = config.pageTitle[key];
          }
        });
      }
      this.router.on(RouterEvent.ROUTE_DID_CHANGE, this.scheduleTitleUpdate);
    }
    applyTokenDefaults(token) {
      let defaultSeparator = this._defaultConfig.separator;
      let defaultPrepend = this._defaultConfig.prepend;
      let defaultReplace = this._defaultConfig.replace;
      if (token.separator == null) {
        token.separator = defaultSeparator;
      }
      if (token.prepend == null && defaultPrepend != null) {
        token.prepend = defaultPrepend;
      }
      if (token.replace == null && defaultReplace != null) {
        token.replace = defaultReplace;
      }
    }
    inheritFromPrevious(token) {
      let previous = token.previous;
      if (previous) {
        if (token.separator == null) {
          token.separator = previous.separator;
        }
        if (token.prepend == null) {
          token.prepend = previous.prepend;
        }
      }
    }
    push(token) {
      let tokenForId = this._findTokenById(token.id);
      if (tokenForId) {
        let index = this.tokens.indexOf(tokenForId);
        let tokens = [...this.tokens];
        let previous = tokenForId.previous;
        token.previous = previous;
        token.next = tokenForId.next;
        this.inheritFromPrevious(token);
        this.applyTokenDefaults(token);
        tokens.splice(index, 1, token);
        this.tokens = tokens;
        return;
      }
      let previous = this.tokens.slice(-1)[0];
      if (previous) {
        token.previous = previous;
        previous.next = token;
        this.inheritFromPrevious(token);
      }
      this.applyTokenDefaults(token);
      this.tokens = [...this.tokens, token];
    }
    remove(id) {
      let token = this._findTokenById(id);
      let {
        next,
        previous
      } = token;
      if (next) {
        next.previous = previous;
      }
      if (previous) {
        previous.next = next;
      }
      token.previous = token.next = null;
      let tokens = [...this.tokens];
      tokens.splice(tokens.indexOf(token), 1);
      this.tokens = tokens;
    }
    get visibleTokens() {
      let tokens = this.tokens;
      let i = tokens ? tokens.length : 0;
      let visible = [];
      while (i--) {
        let token = tokens[i];
        if (token.replace) {
          visible.unshift(token);
          break;
        } else {
          visible.unshift(token);
        }
      }
      return visible;
    }
    get sortedTokens() {
      let visible = this.visibleTokens;
      let appending = true;
      let group = [];
      let groups = [group];
      let frontGroups = [];
      visible.forEach(token => {
        if (token.front) {
          frontGroups.unshift(token);
        } else if (token.prepend) {
          if (appending) {
            appending = false;
            group = [];
            groups.push(group);
          }
          let lastToken = group[0];
          if (lastToken) {
            token = {
              ...token
            };
            token.separator = lastToken.separator;
          }
          group.unshift(token);
        } else {
          if (!appending) {
            appending = true;
            group = [];
            groups.push(group);
          }
          group.push(token);
        }
      });
      return frontGroups.concat(groups.reduce((E, group) => E.concat(group), []));
    }
    toString() {
      let tokens = this.sortedTokens;
      let title = [];
      for (let i = 0, len = tokens.length; i < len; i++) {
        let token = tokens[i];
        if (token.title) {
          title.push(token.title);
          if (i + 1 < len) {
            title.push(token.separator);
          }
        }
      }
      return title.join('');
    }
    willDestroy() {
      super.willDestroy();
      this.router.off(RouterEvent.ROUTE_DID_CHANGE, this.scheduleTitleUpdate);
    }
    _updateTitle() {
      const toBeTitle = this.toString();
      if (isFastBoot) {
        this.updateFastbootTitle(toBeTitle);
      } else {
        /**
         * When rendering app with "?fastboot=false" (http://ember-fastboot.com/docs/user-guide#disabling-fastboot)
         * We will not have <title> element present in DOM.
         *
         * But this is fine as by HTML spec,
         * one is created upon assigning "document.title" value;
         *
         * https://html.spec.whatwg.org/multipage/dom.html#dom-tree-accessors
         */
        this.document.title = toBeTitle;
      }
      this.pageTitle.titleDidUpdate(toBeTitle);
    }

    /**
     * Validate if there's more than one title element present.
     *
     * Example: ember-cli-head can cause conflicting updates.
     * @private
     */
    _validateExistingTitleElement() {
      if (isFastBoot) {
        return;
      }
      (true && !(document.head.querySelectorAll('title').length <= 1) && (0, _debug.assert)('[ember-page-title]: Multiple title elements found. Check for other addons like ember-cli-head updating <title> as well.', document.head.querySelectorAll('title').length <= 1));
    }

    /**
     * Find token by id
     *
     * IE11 compatible approach due to lack of Array.find support
     *
     * @param {String} id
     * @private
     */
    _findTokenById(id) {
      return this.tokens.filter(token => {
        return token.id === id;
      })[0];
    }
    updateFastbootTitle(toBeTitle) {
      if (!isFastBoot) {
        return;
      }
      const headElement = this.document.head;
      const headChildNodes = headElement.childNodes;

      // Remove existing title elements from previous render cycle
      for (let i = 0; i < headChildNodes.length; i++) {
        let node = headChildNodes[i];
        if (node.nodeName.toLowerCase() === 'title') {
          headElement.removeChild(node);
        }
      }

      // Add title element with latest value
      let titleEl = this.document.createElement('title');
      let titleContents = this.document.createTextNode(toBeTitle);
      titleEl.appendChild(titleContents);
      headElement.appendChild(titleEl);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "pageTitle", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "document", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
});
;define("ember-page-title/services/page-title", ["exports", "@ember/service"], function (_exports, _service) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class PageTitleService extends _service.default {
    titleDidUpdate( /* title */) {}
  }
  _exports.default = PageTitleService;
});
;/*
 * This is a stub file, it must be on disk b/c babel-plugin-debug-macros
 * does not strip the module require when the transpiled variable usage is
 * stripped.
 */
define("ember-resolver/features", [], function () {
  "use strict";
});
;define("ember-resolver/index", ["exports", "ember-resolver/resolvers/classic"], function (_exports, _classic) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _classic.default;
    }
  });
});
;define("ember-resolver/resolver", ["exports", "ember-resolver/resolvers/classic"], function (_exports, _classic) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _classic.default;
    }
  });
});
;define("ember-resolver/resolvers/classic/container-debug-adapter", ["exports", "@ember/array", "@ember/debug/container-debug-adapter", "ember-resolver/resolvers/classic/index", "@ember/application"], function (_exports, _array, _containerDebugAdapter, _index, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function getPod(type, key, prefix) {
    let match = key.match(new RegExp('^/?' + prefix + '/(.+)/' + type + '$'));
    if (match !== null) {
      return match[1];
    }
  }

  /*
   * This module defines a subclass of Ember.ContainerDebugAdapter that adds
   * support for resolving from modules.
   *
   */

  /* eslint-disable ember/no-classic-classes */
  var _default = _exports.default = _containerDebugAdapter.default.extend({
    _moduleRegistry: null,
    init() {
      this._super(...arguments);
      this.namespace = (0, _application.getOwner)(this).lookup('application:main');
      if (!this._moduleRegistry) {
        this._moduleRegistry = new _index.ModuleRegistry();
      }
    },
    /**
        The container of the application being debugged.
        This property will be injected
        on creation.
         @property container
        @default null
        */

    /**
        The resolver instance of the application
        being debugged. This property will be injected
        on creation.
         @property resolver
        @default null
        */

    /**
        Returns true if it is possible to catalog a list of available
        classes in the resolver for a given type.
         @method canCatalogEntriesByType
        @param {string} type The type. e.g. "model", "controller", "route"
        @return {boolean} whether a list is available for this type.
        */
    canCatalogEntriesByType(type) {
      if (type === 'model') {
        return true;
      }
      return this._super(...arguments);
    },
    /**
        Returns the available classes a given type.
         @method catalogEntriesByType
        @param {string} type The type. e.g. "model", "controller", "route"
        @return {Array} An array of classes.
        */
    catalogEntriesByType(type) {
      let moduleNames = this._moduleRegistry.moduleNames();
      let types = (0, _array.A)();
      let prefix = this.namespace.modulePrefix;
      for (let i = 0, l = moduleNames.length; i < l; i++) {
        let key = moduleNames[i];
        if (key.indexOf(type) !== -1) {
          // Check if it's a pod module
          let name = getPod(type, key, this.namespace.podModulePrefix || prefix);
          if (!name) {
            // Not pod
            name = key.split(type + 's/').pop();

            // Support for different prefix (such as ember-cli addons).
            // Uncomment the code below when
            // https://github.com/ember-cli/ember-resolver/pull/80 is merged.

            //let match = key.match('^/?(.+)/' + type);
            //if (match && match[1] !== prefix) {
            // Different prefix such as an addon
            //name = match[1] + '@' + name;
            //}
          }
          types.addObject(name);
        }
      }
      return types;
    }
  });
});
;define("ember-resolver/resolvers/classic/index", ["exports", "ember", "@ember/debug", "@ember/object", "@ember/string", "ember-resolver/utils/class-factory"], function (_exports, _ember, _debug, _object, _string, _classFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.ModuleRegistry = void 0;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /* globals requirejs, require */
  if (typeof requirejs.entries === 'undefined') {
    requirejs.entries = requirejs._eak_seen;
  }
  class ModuleRegistry {
    constructor(entries) {
      this._entries = entries || requirejs.entries;
    }
    moduleNames() {
      return Object.keys(this._entries);
    }
    has(moduleName) {
      return moduleName in this._entries;
    }
    get(...args) {
      return require(...args);
    }
  }

  /**
   * This module defines a subclass of Ember.DefaultResolver that adds two
   * important features:
   *
   *  1) The resolver makes the container aware of es6 modules via the AMD
   *     output. The loader's _moduleEntries is consulted so that classes can be
   *     resolved directly via the module loader, without needing a manual
   *     `import`.
   *  2) is able to provide injections to classes that implement `extend`
   *     (as is typical with Ember).
   */
  _exports.ModuleRegistry = ModuleRegistry;
  class Resolver extends _object.default {
    constructor() {
      super(...arguments);
      _defineProperty(this, "moduleBasedResolver", true);
      _defineProperty(this, "_deprecatedPodModulePrefix", false);
      _defineProperty(this, "_normalizeCache", Object.create(null));
      /**
       A listing of functions to test for moduleName's based on the provided
       `parsedName`. This allows easy customization of additional module based
       lookup patterns.
        @property moduleNameLookupPatterns
       @returns {Ember.Array}
       */
      _defineProperty(this, "moduleNameLookupPatterns", [this.podBasedModuleName, this.podBasedComponentsInSubdir, this.mainModuleName, this.defaultModuleName, this.nestedColocationComponentModuleName]);
      if (!this._moduleRegistry) {
        this._moduleRegistry = new ModuleRegistry();
      }
      this.pluralizedTypes = this.pluralizedTypes || Object.create(null);
      if (!this.pluralizedTypes.config) {
        this.pluralizedTypes.config = 'config';
      }
    }
    makeToString(factory, fullName) {
      return '' + this.namespace.modulePrefix + '@' + fullName + ':';
    }
    shouldWrapInClassFactory( /* module, parsedName */
    ) {
      return false;
    }
    parseName(fullName) {
      if (fullName.parsedName === true) {
        return fullName;
      }
      let prefix, type, name;
      let fullNameParts = fullName.split('@');
      if (fullNameParts.length === 3) {
        if (fullNameParts[0].length === 0) {
          // leading scoped namespace: `@scope/pkg@type:name`
          prefix = `@${fullNameParts[1]}`;
          let prefixParts = fullNameParts[2].split(':');
          type = prefixParts[0];
          name = prefixParts[1];
        } else {
          // interweaved scoped namespace: `type:@scope/pkg@name`
          prefix = `@${fullNameParts[1]}`;
          type = fullNameParts[0].slice(0, -1);
          name = fullNameParts[2];
        }
        if (type === 'template:components') {
          name = `components/${name}`;
          type = 'template';
        }
      } else if (fullNameParts.length === 2) {
        let prefixParts = fullNameParts[0].split(':');
        if (prefixParts.length === 2) {
          if (prefixParts[1].length === 0) {
            type = prefixParts[0];
            name = `@${fullNameParts[1]}`;
          } else {
            prefix = prefixParts[1];
            type = prefixParts[0];
            name = fullNameParts[1];
          }
        } else {
          let nameParts = fullNameParts[1].split(':');
          prefix = fullNameParts[0];
          type = nameParts[0];
          name = nameParts[1];
        }
        if (type === 'template' && prefix.lastIndexOf('components/', 0) === 0) {
          name = `components/${name}`;
          prefix = prefix.slice(11);
        }
      } else {
        fullNameParts = fullName.split(':');
        type = fullNameParts[0];
        name = fullNameParts[1];
      }
      let fullNameWithoutType = name;
      let namespace = this.namespace;
      let root = namespace;
      return {
        parsedName: true,
        fullName: fullName,
        prefix: prefix || this.prefix({
          type: type
        }),
        type: type,
        fullNameWithoutType: fullNameWithoutType,
        name: name,
        root: root,
        resolveMethodName: "resolve" + (0, _string.classify)(type)
      };
    }
    resolveOther(parsedName) {
      (true && !(this.namespace.modulePrefix) && (0, _debug.assert)('`modulePrefix` must be defined', this.namespace.modulePrefix));
      let normalizedModuleName = this.findModuleName(parsedName);
      if (normalizedModuleName) {
        let defaultExport = this._extractDefaultExport(normalizedModuleName, parsedName);
        if (defaultExport === undefined) {
          throw new Error(` Expected to find: '${parsedName.fullName}' within '${normalizedModuleName}' but got 'undefined'. Did you forget to 'export default' within '${normalizedModuleName}'?`);
        }
        if (this.shouldWrapInClassFactory(defaultExport, parsedName)) {
          defaultExport = (0, _classFactory.default)(defaultExport);
        }
        return defaultExport;
      }
    }
    normalize(fullName) {
      return this._normalizeCache[fullName] || (this._normalizeCache[fullName] = this._normalize(fullName));
    }
    resolve(fullName) {
      let parsedName = this.parseName(fullName);
      let resolveMethodName = parsedName.resolveMethodName;
      let resolved;
      if (typeof this[resolveMethodName] === 'function') {
        resolved = this[resolveMethodName](parsedName);
      }
      if (resolved == null) {
        resolved = this.resolveOther(parsedName);
      }
      return resolved;
    }
    _normalize(fullName) {
      // A) Convert underscores to dashes
      // B) Convert camelCase to dash-case, except for components (their
      //    templates) and helpers where we want to avoid shadowing camelCase
      //    expressions
      // C) replace `.` with `/` in order to make nested controllers work in the following cases
      //      1. `needs: ['posts/post']`
      //      2. `{{render "posts/post"}}`
      //      3. `this.render('posts/post')` from Route

      let split = fullName.split(':');
      if (split.length > 1) {
        let type = split[0];
        if (type === 'component' || type === 'helper' || type === 'modifier' || type === 'template' && split[1].indexOf('components/') === 0) {
          return type + ':' + split[1].replace(/_/g, '-');
        } else {
          return type + ':' + (0, _string.dasherize)(split[1].replace(/\./g, '/'));
        }
      } else {
        return fullName;
      }
    }
    pluralize(type) {
      return this.pluralizedTypes[type] || (this.pluralizedTypes[type] = type + 's');
    }
    podBasedLookupWithPrefix(podPrefix, parsedName) {
      let fullNameWithoutType = parsedName.fullNameWithoutType;
      if (parsedName.type === 'template') {
        fullNameWithoutType = fullNameWithoutType.replace(/^components\//, '');
      }
      return podPrefix + '/' + fullNameWithoutType + '/' + parsedName.type;
    }
    podBasedModuleName(parsedName) {
      let podPrefix = this.namespace.podModulePrefix || this.namespace.modulePrefix;
      return this.podBasedLookupWithPrefix(podPrefix, parsedName);
    }
    podBasedComponentsInSubdir(parsedName) {
      let podPrefix = this.namespace.podModulePrefix || this.namespace.modulePrefix;
      podPrefix = podPrefix + '/components';
      if (parsedName.type === 'component' || /^components/.test(parsedName.fullNameWithoutType)) {
        return this.podBasedLookupWithPrefix(podPrefix, parsedName);
      }
    }
    resolveEngine(parsedName) {
      let engineName = parsedName.fullNameWithoutType;
      let engineModule = engineName + '/engine';
      if (this._moduleRegistry.has(engineModule)) {
        return this._extractDefaultExport(engineModule);
      }
    }
    resolveRouteMap(parsedName) {
      let engineName = parsedName.fullNameWithoutType;
      let engineRoutesModule = engineName + '/routes';
      if (this._moduleRegistry.has(engineRoutesModule)) {
        let routeMap = this._extractDefaultExport(engineRoutesModule);
        (true && !(routeMap.isRouteMap) && (0, _debug.assert)(`The route map for ${engineName} should be wrapped by 'buildRoutes' before exporting.`, routeMap.isRouteMap));
        return routeMap;
      }
    }
    resolveTemplate(parsedName) {
      let resolved = this.resolveOther(parsedName);
      if (resolved == null) {
        resolved = _ember.default.TEMPLATES[parsedName.fullNameWithoutType];
      }
      return resolved;
    }
    mainModuleName(parsedName) {
      if (parsedName.fullNameWithoutType === 'main') {
        // if router:main or adapter:main look for a module with just the type first
        return parsedName.prefix + '/' + parsedName.type;
      }
    }
    defaultModuleName(parsedName) {
      return parsedName.prefix + '/' + this.pluralize(parsedName.type) + '/' + parsedName.fullNameWithoutType;
    }
    nestedColocationComponentModuleName(parsedName) {
      if (parsedName.type === 'component') {
        return parsedName.prefix + '/' + this.pluralize(parsedName.type) + '/' + parsedName.fullNameWithoutType + '/index';
      }
    }
    prefix(parsedName) {
      let tmpPrefix = this.namespace.modulePrefix;
      if (this.namespace[parsedName.type + 'Prefix']) {
        tmpPrefix = this.namespace[parsedName.type + 'Prefix'];
      }
      return tmpPrefix;
    }
    findModuleName(parsedName, loggingDisabled) {
      let moduleNameLookupPatterns = this.moduleNameLookupPatterns;
      let moduleName;
      for (let index = 0, length = moduleNameLookupPatterns.length; index < length; index++) {
        let item = moduleNameLookupPatterns[index];
        let tmpModuleName = item.call(this, parsedName);

        // allow treat all dashed and all underscored as the same thing
        // supports components with dashes and other stuff with underscores.
        if (tmpModuleName) {
          tmpModuleName = this.chooseModuleName(tmpModuleName, parsedName);
        }
        if (tmpModuleName && this._moduleRegistry.has(tmpModuleName)) {
          moduleName = tmpModuleName;
        }
        if (!loggingDisabled) {
          this._logLookup(moduleName, parsedName, tmpModuleName);
        }
        if (moduleName) {
          return moduleName;
        }
      }
    }
    chooseModuleName(moduleName, parsedName) {
      let underscoredModuleName = (0, _string.underscore)(moduleName);
      if (moduleName !== underscoredModuleName && this._moduleRegistry.has(moduleName) && this._moduleRegistry.has(underscoredModuleName)) {
        throw new TypeError(`Ambiguous module names: '${moduleName}' and '${underscoredModuleName}'`);
      }
      if (this._moduleRegistry.has(moduleName)) {
        return moduleName;
      } else if (this._moduleRegistry.has(underscoredModuleName)) {
        return underscoredModuleName;
      }
      // workaround for dasherized partials:
      // something/something/-something => something/something/_something
      let partializedModuleName = moduleName.replace(/\/-([^/]*)$/, '/_$1');
      if (this._moduleRegistry.has(partializedModuleName)) {
        (true && !(false) && (0, _debug.deprecate)('Modules should not contain underscores. ' + 'Attempted to lookup "' + moduleName + '" which ' + 'was not found. Please rename "' + partializedModuleName + '" ' + 'to "' + moduleName + '" instead.', false, {
          id: 'ember-resolver.underscored-modules',
          until: '3.0.0',
          for: 'ember-resolver',
          since: '0.1.0'
        }));
        return partializedModuleName;
      }
      if (true /* DEBUG */) {
        let isCamelCaseHelper = parsedName.type === 'helper' && /[a-z]+[A-Z]+/.test(moduleName);
        if (isCamelCaseHelper) {
          this._camelCaseHelperWarnedNames = this._camelCaseHelperWarnedNames || [];
          let alreadyWarned = this._camelCaseHelperWarnedNames.indexOf(parsedName.fullName) > -1;
          if (!alreadyWarned && this._moduleRegistry.has((0, _string.dasherize)(moduleName))) {
            this._camelCaseHelperWarnedNames.push(parsedName.fullName);
            (true && (0, _debug.warn)('Attempted to lookup "' + parsedName.fullName + '" which ' + 'was not found. In previous versions of ember-resolver, a bug would have ' + 'caused the module at "' + (0, _string.dasherize)(moduleName) + '" to be ' + 'returned for this camel case helper name. This has been fixed. ' + 'Use the dasherized name to resolve the module that would have been ' + 'returned in previous versions.', false, {
              id: 'ember-resolver.camelcase-helper-names',
              until: '3.0.0'
            }));
          }
        }
      }
    }

    // used by Ember.DefaultResolver.prototype._logLookup
    lookupDescription(fullName) {
      let parsedName = this.parseName(fullName);
      let moduleName = this.findModuleName(parsedName, true);
      return moduleName;
    }

    // only needed until 1.6.0-beta.2 can be required
    _logLookup(found, parsedName, description) {
      if (!_ember.default.ENV.LOG_MODULE_RESOLVER && !parsedName.root.LOG_RESOLVER) {
        return;
      }
      let padding;
      let symbol = found ? '[✓]' : '[ ]';
      if (parsedName.fullName.length > 60) {
        padding = '.';
      } else {
        padding = new Array(60 - parsedName.fullName.length).join('.');
      }
      if (!description) {
        description = this.lookupDescription(parsedName);
      }

      /* eslint-disable no-console */
      if (console && console.info) {
        console.info(symbol, parsedName.fullName, padding, description);
      }
    }
    knownForType(type) {
      let moduleKeys = this._moduleRegistry.moduleNames();
      let items = Object.create(null);
      for (let index = 0, length = moduleKeys.length; index < length; index++) {
        let moduleName = moduleKeys[index];
        let fullname = this.translateToContainerFullname(type, moduleName);
        if (fullname) {
          items[fullname] = true;
        }
      }
      return items;
    }
    translateToContainerFullname(type, moduleName) {
      let prefix = this.prefix({
        type
      });

      // Note: using string manipulation here rather than regexes for better performance.
      // pod modules
      // '^' + prefix + '/(.+)/' + type + '$'
      let podPrefix = prefix + '/';
      let podSuffix = '/' + type;
      let start = moduleName.indexOf(podPrefix);
      let end = moduleName.indexOf(podSuffix);
      if (start === 0 && end === moduleName.length - podSuffix.length && moduleName.length > podPrefix.length + podSuffix.length) {
        return type + ':' + moduleName.slice(start + podPrefix.length, end);
      }

      // non-pod modules
      // '^' + prefix + '/' + pluralizedType + '/(.+)$'
      let pluralizedType = this.pluralize(type);
      let nonPodPrefix = prefix + '/' + pluralizedType + '/';
      if (moduleName.indexOf(nonPodPrefix) === 0 && moduleName.length > nonPodPrefix.length) {
        return type + ':' + moduleName.slice(nonPodPrefix.length);
      }
    }
    _extractDefaultExport(normalizedModuleName) {
      let module = this._moduleRegistry.get(normalizedModuleName, null, null, true /* force sync */);
      if (module && module['default']) {
        module = module['default'];
      }
      return module;
    }
  }
  _defineProperty(Resolver, "moduleBasedResolver", true);
  var _default = _exports.default = Resolver;
});
;define("ember-resolver/utils/class-factory", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = classFactory;
  function classFactory(klass) {
    return {
      create(injections) {
        if (typeof klass.extend === 'function') {
          return klass.extend(injections);
        } else {
          return klass;
        }
      }
    };
  }
});
;define("ember-responsive/helpers/media", ["exports", "@ember/component/helper", "@ember/service", "@ember/object"], function (_exports, _helper, _service, _object) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let MediaHelper = _exports.default = (_dec = (0, _service.inject)(), (_class = class MediaHelper extends _helper.default {
    constructor() {
      super(...arguments);
      _initializerDefineProperty(this, "media", _descriptor, this);
      this.media.on('mediaChanged', () => {
        this.recompute();
      });
    }
    compute([prop]) {
      return (0, _object.get)(this, `media.${prop}`);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "media", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
});
;define("ember-responsive/initializers/responsive", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.initialize = initialize;
  /**
   * Ember responsive initializer
   *
   * Supports auto injecting media service app-wide.
   * Generated by the ember-responsive addon.
   */
  function initialize(application) {
    application.registerOptionsForType('breakpoints', {
      instantiate: false
    });
  }
  var _default = _exports.default = {
    name: 'ember-responsive-breakpoints',
    initialize
  };
});
;define("ember-responsive/null-match-media", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;
  /**
   * Stub function that is `matchMedia` API compatible but always returns
   * `false`. Useful for server-side environments like FastBoot where there
   * is no viewport.
   */
  function _default() {
    return {
      matches: false
    };
  }
});
;define("ember-responsive/services/media", ["exports", "ember", "@glimmer/tracking", "@ember/runloop", "@ember/object", "@ember/service", "@ember/string", "ember-responsive/null-match-media", "@ember/application", "@ember/object/evented", "@ember/object/compat"], function (_exports, _ember, _tracking, _runloop, _object, _service, _string, _nullMatchMedia, _application, _evented, _compat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  /**
  * Handles detecting and responding to media queries.
  *
  * **Adding media query matchers**
  *
  * The first step to using the class is to add media queries that you
  * want it to listen to. Each media query has a name that you can
  * use to reference it by.
  *
  * ```javascript
  * media = Ember.Responsive.Media.create();
  * media.match('mobile', '(max-width: 767px)');
  * media.match('desktop', '(min-width: 768px)');
  * ```
  *
  * **Testing the media query matchers**
  *
  * Now that you've added a few matchers, you can access those media queries as
  * if they were properties on your object. The nice thing is that whenever the
  * media queries change, this class will automatically update the relevant
  * properties (and so will the rest of your application, thanks to the power
  * of two-way data-binding).
  *
  * ```javascript
  * media = Ember.Responsive.Media.create();
  * media.match('mobile', '(max-width: 767px)');
  * media.match('desktop', '(min-width: 768px)');
  *
  * // There are convenient "isser" properties defined...
  * if (media.get('isMobile')) {
  *   console.log('mobile!');
  * }
  *
  * // As well as access to the matchMedia API...
  * if (media.get('desktop.matches')) {
  *   console.log('desktop!');
  * }
  * ```
  *
  * **Retrieving a list of matching media queries**
  *
  * It's also nice to be able to see which media queries are matching, since
  * some applications might have many matches at the same time.
  *
  * ```javascript
  * media = Ember.Responsive.Media.create();
  * media.match('desktop', 'all');
  * media.match('mobile', 'all');
  *
  * console.log(media.matches);
  * // => Ember.Set(['desktop', 'mobile']);
  * ```
  *
  * This class can also return that list as a string of dasherized class names,
  * which is useful for placing on your app's rootElement. By default, these
  * class names are prefixed with `media-`, so as not to clash with any other
  * classes your app might use.
  *
  * ```javascript
  * App.ApplicationView = Ember.View.extend({
  *   classNameBindings: ['media.classNames']
  * });
  * ```
  *
  * @module    ember-responsive
  * @namespace Ember.Responsive
  * @class     Media
  * @extends   Ember.Object
  */
  let MediaService = _exports.default = (_class = class MediaService extends _service.default.extend(_evented.default) {
    /**
    * A set of matching matchers.
    *
    * @property  matches
    * @type      Array
    */
    get matches() {
      if (this._matches) {
        return this._matches;
      }
      return _ember.default.testing && this._mocked ? [this._mockedBreakpoint] : [];
    }
    set matches(value) {
      this._matches = value;
    }

    /**
    * A hash of listeners indexed by their matcher's names
    *
    * @property
    * @type Object
    */

    /**
     * Initialize the service based on the breakpoints config
     *
     * @method init
     *
     */
    constructor() {
      super(...arguments);
      // Ember only sets Ember.testing when tests are starting
      // eslint-disable-next-line ember/no-ember-testing-in-module-scope
      _defineProperty(this, "_mocked", _ember.default.testing);
      _defineProperty(this, "_mockedBreakpoint", 'desktop');
      /**
      * @property  _matches
      * @type      Array
      */
      _initializerDefineProperty(this, "_matches", _descriptor, this);
      _defineProperty(this, "listeners", {});
      /**
       * A hash of matchers by breakpoint name
       */
      _defineProperty(this, "matchers", {});
      /**
      * The matcher to use for testing media queries.
      *
      * @property  matcher
      * @type      matchMedia
      * @default   window.matchMedia
      * @private
      */
      _defineProperty(this, "mql", detectMatchMedia());
      const breakpoints = (0, _application.getOwner)(this).lookup('breakpoints:main');
      if (breakpoints) {
        Object.keys(breakpoints).forEach(name => {
          const cpName = `is${(0, _string.classify)(name)}`;
          (0, _object.defineProperty)(this, cpName, (0, _compat.dependentKeyCompat)({
            get() {
              return this.matches.indexOf(name) > -1;
            }
          }));
          (0, _object.defineProperty)(this, name, (0, _compat.dependentKeyCompat)({
            get() {
              return this[cpName];
            }
          }));
          this.match(name, breakpoints[name]);
        });
      }
    }

    /**
    * A string composed of all the matching matchers' names, turned into
    * friendly, dasherized class-names that are prefixed with `media-`.
    *
    * @property  classNames
    * @type      string
    */
    get classNames() {
      return this.matches.map(function (name) {
        return `media-${(0, _string.dasherize)(name)}`;
      }).join(' ');
    }
    _triggerMediaChanged() {
      this.trigger('mediaChanged', {});
    }
    _triggerEvent() {
      (0, _runloop.once)(this, this._triggerMediaChanged);
    }

    /**
    * Adds a new matcher to the list.
    *
    * After this method is called, you will be able to access the result
    * of the matcher as a property on this object.
    *
    * **Adding a new matcher**
    *
    * ```javascript
    * media = Ember.Responsive.Media.create();
    * media.match('all', 'all');
    * media.get('all');
    *   // => instanceof window.matchMedia
    * media.get('all.matches');
    *   // => true
    * ```
    *
    * @param   string  name   The name of the matcher
    * @param   string  query  The media query to match against
    * @method  match
    */
    match(name, query) {
      // see https://github.com/ember-cli/eslint-plugin-ember/pull/272
      if (_ember.default.testing && this._mocked) {
        return;
      }
      const mql = this.mql;
      const matcher = mql(query);
      const listener = matcher => {
        if (this.isDestroyed) {
          return;
        }
        (0, _object.set)(this, `matchers.${name}`, matcher);
        if (matcher.matches) {
          this.matches = Array.from(new Set([...this.matches, name]));
        } else {
          this.matches = Array.from(new Set(this.matches.filter(key => key !== name)));
        }
        this._triggerEvent();
      };
      this.listeners[name] = listener;
      if (matcher.addListener) {
        matcher.addListener(function (matcher) {
          (0, _runloop.run)(null, listener, matcher);
        });
      }
      listener(matcher);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "_matches", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
  function detectMatchMedia() {
    if (typeof window === 'object' && window.matchMedia) {
      return window.matchMedia;
    }
    return _nullMatchMedia.default;
  }
});
;define("ember-router-scroll/instance-initializers/ember-router-scroll", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.initialize = initialize;
  function initialize(appInstance) {
    // Eagerly initialize service
    appInstance.lookup('service:router-scroll');
  }
  var _default = _exports.default = {
    initialize
  };
});
;define("ember-router-scroll/services/router-scroll", ["exports", "@ember/service", "@ember/object", "@ember/utils", "@ember/debug", "@ember/application", "@ember/runloop", "@ember/object/events", "ember-app-scheduler"], function (_exports, _service, _object, _utils, _debug, _application, _runloop, _events, _emberAppScheduler) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ATTEMPTS = 0;
  const MAX_ATTEMPTS = 100; // rAF runs every 16ms ideally, so 60x a second

  let requestId;
  let callbackRequestId;

  /**
   * By default, we start checking to see if the document height is >= the last known `y` position
   * we want to scroll to.  This is important for content heavy pages that might try to scrollTo
   * before the content has painted
   *
   * @method tryScrollRecursively
   * @param {Function} fn
   * @param {Object} scrollHash
   * @param {Element} [element]
   * @param {string?} url
   * @void
   */
  function tryScrollRecursively(fn, scrollHash, element, url) {
    let documentHeight;
    // read DOM outside of rAF
    if (element) {
      documentHeight = Math.max(element.scrollHeight, element.offsetHeight, element.clientHeight);
    } else {
      const {
        body,
        documentElement: html
      } = document;
      documentHeight = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);
    }
    callbackRequestId = window.requestAnimationFrame(() => {
      if (url && url.indexOf('#') > -1) {
        const hashElement = document.getElementById(url.split('#').pop());
        if (hashElement) {
          scrollHash = {
            x: hashElement.offsetLeft,
            y: hashElement.offsetTop
          };
        }
      }
      // write DOM (scrollTo causes reflow)
      if (documentHeight >= scrollHash.y || ATTEMPTS >= MAX_ATTEMPTS) {
        ATTEMPTS = 0;
        fn.call(null, scrollHash.x, scrollHash.y);
      } else {
        ATTEMPTS++;
        tryScrollRecursively(fn, scrollHash, element, url);
      }
    });
  }

  // to prevent scheduleOnce calling multiple times, give it the same ref to this function
  const CALLBACK = function (transition) {
    this.updateScrollPosition(transition);
  };
  let RouterScroll = (_class = class RouterScroll extends _service.default {
    get isFastBoot() {
      const fastboot = (0, _application.getOwner)(this).lookup('service:fastboot');
      return fastboot ? fastboot.get('isFastBoot') : false;
    }
    constructor() {
      super(...arguments);

      // https://github.com/ember-app-scheduler/ember-app-scheduler/pull/773
      _initializerDefineProperty(this, "router", _descriptor, this);
      _defineProperty(this, "key", void 0);
      _defineProperty(this, "targetElement", void 0);
      _defineProperty(this, "scrollElement", 'window');
      _defineProperty(this, "isFirstLoad", true);
      _defineProperty(this, "preserveScrollPosition", false);
      // ember-app-scheduler properties
      _defineProperty(this, "scrollWhenIdle", false);
      _defineProperty(this, "scrollWhenAfterRender", false);
      (0, _emberAppScheduler.setupRouter)(this.router);
    }

    // eslint-disable-next-line ember/classic-decorator-hooks
    init(...args) {
      super.init(...args);
      this._loadConfig();
      (0, _object.set)(this, 'scrollMap', {
        default: {
          x: 0,
          y: 0
        }
      });
      (0, _events.addListener)(this.router, 'routeWillChange', this._routeWillChange);
      (0, _events.addListener)(this.router, 'routeDidChange', this._routeDidChange);
    }
    willDestroy() {
      (0, _events.removeListener)(this.router, 'routeWillChange', this._routeWillChange);
      (0, _events.removeListener)(this.router, 'routeDidChange', this._routeDidChange);
      if (requestId) {
        window.cancelAnimationFrame(requestId);
      }
      if (callbackRequestId) {
        window.cancelAnimationFrame(callbackRequestId);
      }
      super.willDestroy(...arguments);
    }

    /**
     * Updates the scroll position
     * it will be a single transition
     * @method updateScrollPosition
     * @param {transition|transition[]} transition If before Ember 3.6, this will be an array of transitions, otherwise
     */
    updateScrollPosition(transition) {
      if (this.isFirstLoad) {
        this.unsetFirstLoad();
      }
      let scrollPosition = this.position;

      // If `preserveScrollPosition` was not set on the controller, attempt fallback to `preserveScrollPosition` which was set on the router service.
      let preserveScrollPosition = (transition.router.currentRouteInfos || []).some(routeInfo => routeInfo.route.controller.preserveScrollPosition) || this.preserveScrollPosition;
      if (!preserveScrollPosition) {
        const {
          scrollElement,
          targetElement,
          currentURL
        } = this;
        if (targetElement || 'window' === scrollElement) {
          tryScrollRecursively(window.scrollTo, scrollPosition, null, currentURL);
        } else if ('#' === scrollElement.charAt(0)) {
          const element = document.getElementById(scrollElement.substring(1));
          if (element) {
            let fn = (x, y) => {
              element.scrollLeft = x;
              element.scrollTop = y;
            };
            tryScrollRecursively(fn, scrollPosition, element, currentURL);
          }
        }
      }
      (0, _events.sendEvent)(this, 'didScroll', transition);
    }
    _routeWillChange() {
      if (this.isFastBoot) {
        return;
      }
      this.update();
    }
    _routeDidChange(transition) {
      if (this.isFastBoot) {
        return;
      }
      const scrollWhenIdle = this.scrollWhenIdle;
      const scrollWhenAfterRender = this.scrollWhenAfterRender;
      if (!scrollWhenIdle && !scrollWhenAfterRender) {
        // out of the option, this happens on the tightest schedule
        (0, _runloop.scheduleOnce)('render', this, CALLBACK, transition);
      } else if (scrollWhenAfterRender && !scrollWhenIdle) {
        // out of the option, this happens on the second tightest schedule
        (0, _runloop.scheduleOnce)('afterRender', this, CALLBACK, transition);
      } else {
        (0, _emberAppScheduler.whenRouteIdle)().then(() => {
          this.updateScrollPosition(transition);
        });
      }
    }
    unsetFirstLoad() {
      (0, _object.set)(this, 'isFirstLoad', false);
    }
    update() {
      if (this.isFastBoot || this.isFirstLoad) {
        return;
      }
      const scrollElement = this.scrollElement;
      const targetElement = this.targetElement;
      const scrollMap = this.scrollMap;
      const key = this.key;
      let x;
      let y;
      if (targetElement) {
        let element = document.querySelector(targetElement);
        if (element) {
          x = element.offsetLeft;
          y = element.offsetTop;

          // if we are looking to where to transition to next, we need to set the default to the position
          // of the targetElement on screen
          (0, _object.set)(scrollMap, 'default', {
            x,
            y
          });
        }
      } else if ('window' === scrollElement) {
        x = window.scrollX;
        y = window.scrollY;
      } else if ('#' === scrollElement.charAt(0)) {
        let element = document.getElementById(scrollElement.substring(1));
        if (element) {
          x = element.scrollLeft;
          y = element.scrollTop;
        }
      }

      // only a `key` present after first load
      if (key && 'number' === (0, _utils.typeOf)(x) && 'number' === (0, _utils.typeOf)(y)) {
        (0, _object.set)(scrollMap, key, {
          x,
          y
        });
      }
    }
    _loadConfig() {
      const config = (0, _application.getOwner)(this).resolveRegistration('config:environment');
      if (config && config.routerScroll) {
        const scrollElement = config.routerScroll.scrollElement;
        const targetElement = config.routerScroll.targetElement;
        (true && !(!(scrollElement && targetElement)) && (0, _debug.assert)('You defined both scrollElement and targetElement in your config. We currently only support definining one of them', !(scrollElement && targetElement)));
        if ('string' === (0, _utils.typeOf)(scrollElement)) {
          (0, _object.set)(this, 'scrollElement', scrollElement);
        }
        if ('string' === (0, _utils.typeOf)(targetElement)) {
          (0, _object.set)(this, 'targetElement', targetElement);
        }
        const {
          scrollWhenIdle = false,
          scrollWhenAfterRender = false
        } = config.routerScroll;
        (0, _object.set)(this, 'scrollWhenIdle', scrollWhenIdle);
        (0, _object.set)(this, 'scrollWhenAfterRender', scrollWhenAfterRender);
      }
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "_routeWillChange", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "_routeWillChange"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_routeDidChange", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "_routeDidChange"), _class.prototype)), _class);
  Object.defineProperty(RouterScroll.prototype, 'position', {
    configurable: true,
    get() {
      const scrollMap = this.scrollMap;
      const stateUuid = window.history.state?.uuid;
      (0, _object.set)(this, 'key', stateUuid);
      const key = this.key || '-1';
      return (0, _object.get)(scrollMap, key) || scrollMap.default;
    }
  });
  var _default = _exports.default = RouterScroll;
});
;define("ember-set-helper/helpers/set", ["exports", "@ember/component/helper", "@ember/debug", "@ember/object"], function (_exports, _helper, _debug, _object) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function set(positional) {
    let [target, path, maybeValue] = positional;
    (true && !(typeof path === 'string' && path.length > 0 || typeof path === 'symbol' || typeof path === 'number') && (0, _debug.assert)('you must pass a path to {{set}}. You can pass a path statically, as in `{{set this "foo"}}`, or with the path dynamically, as in `{{set this this.greetingPath "Hello"}}`', typeof path === 'string' && path.length > 0 || typeof path === 'symbol' || typeof path === 'number'));
    return positional.length === 3 ? () => (0, _object.set)(target, path, maybeValue) : value => (0, _object.set)(target, path, value);
  }
  var _default = _exports.default = (0, _helper.helper)(set);
});
;define("ember-svg-jar/helpers/svg-jar", ["exports", "@ember/component/helper", "ember-svg-jar/utils/make-svg", "@embroider/macros/es-compat2"], function (_exports, _helper, _makeSvg, _esCompat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.svgJar = svgJar;
  function getInlineAsset(assetId) {
    let result = null;
    try {
      result = require(`ember-svg-jar/inlined/${assetId}`).default;
    } catch (err) {
      // skip
    }
    try {
      result = (0, _esCompat.default)(require(`../inlined/${assetId}`)).default;
    } catch (err) {
      // skip
    }
    return result;
  }
  function svgJar(assetId, svgAttrs) {
    return (0, _makeSvg.default)(assetId, svgAttrs, getInlineAsset);
  }
  var _default = _exports.default = (0, _helper.helper)(function svgJarHelper([assetId], svgAttrs) {
    return svgJar(assetId, svgAttrs);
  });
});
;define("ember-svg-jar/inlined/addon-docs-pen", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = {
    "content": "<title>Group 2 Copy 2</title><g fill-rule=\"evenodd\"><path d=\"M206.897 58c-.484 3.423-2.667 6-6.397 6-2.547 0-4.373-1.202-5.429-3.054C157 67.738 122.832 85.927 96.164 111.89 69.004 94.1 37.063 83.1 2.71 81.27A162.4 162.4 0 01.897 57c0-9.006.735-17.813 2.14-26.346C36.881 28.616 68.344 17.673 95.152.118c26.814 26.491 61.364 45.057 99.92 51.936C196.126 50.202 197.952 49 200.5 49c3.73 0 5.913 2.577 6.397 6H95v3h111.897z\"/><g transform=\"translate(19.116 29.756)\"><circle cx=\"26.12\" cy=\"26.12\" r=\"26.12\"/><path d=\"M39.387 28.863s-7.943 5.63-13.164 5.705c-5.22.075-4.69-3.284-4.69-3.284s19.141-6.5 13.92-19.336c-2.346-3.302-5.07-4.342-8.926-4.266-3.86.075-8.645 2.41-11.749 9.316-1.483 3.294-2.022 6.419-2.325 8.785 0 0-3.348.679-5.165-.823-1.817-1.5-2.75 0-2.75 0s-3.12 3.942-.016 5.144c3.104 1.2 7.943 1.762 7.943 1.762.44 2.102 1.736 5.671 5.516 8.518 5.673 4.278 16.567-.393 16.567-.393s2.374-.894 4.463-2.487c3.041-2.649 2.614-10.707.376-8.64zm-18.633-3.62c.224-8.815 6.048-12.667 8.066-10.741 2.017 1.926 1.27 6.074-2.541 8.667-3.807 2.592-5.525 2.074-5.525 2.074z\" fill-rule=\"nonzero\"/></g></g>",
    "attrs": {
      "width": "207",
      "height": "112",
      "viewBox": "0 0 207 112",
      "xmlns": "http://www.w3.org/2000/svg"
    }
  };
});
;define("ember-svg-jar/inlined/api-item", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = {
    "content": "<title>icons/class</title><path d=\"M13.026 30.176a6.4 6.4 0 001.128-.13 4.337 4.337 0 001.345-.5c.434-.245.81-.57 1.128-.975.318-.405.478-.926.478-1.562v-8.937c0-1.013.202-1.895.607-2.647.405-.752.897-1.374 1.475-1.865a5.96 5.96 0 011.822-1.085c.636-.231 1.186-.347 1.649-.347h3.948v3.905H24.22c-.55 0-.984.094-1.302.282a2.004 2.004 0 00-.738.737 2.618 2.618 0 00-.325.998 8.58 8.58 0 00-.065 1.02v8.46c0 .867-.174 1.59-.52 2.168-.348.579-.76 1.034-1.237 1.367a5.42 5.42 0 01-1.475.738c-.506.159-.933.253-1.28.282v.086c.347.03.774.102 1.28.217.506.116.998.34 1.475.673.477.332.89.81 1.236 1.431.347.622.521 1.454.521 2.495v8.2c0 .318.022.658.065 1.02.043.36.152.693.325.997.174.304.42.55.738.737.318.188.752.282 1.302.282h2.386v3.905h-3.948c-.463 0-1.013-.116-1.649-.347a5.96 5.96 0 01-1.822-1.085c-.578-.491-1.07-1.113-1.475-1.865s-.607-1.634-.607-2.647v-8.59c0-.694-.16-1.272-.478-1.735a3.65 3.65 0 00-1.128-1.085 4.455 4.455 0 00-1.345-.542c-.462-.101-.838-.152-1.128-.152v-3.904zm38.092 3.904c-.319 0-.709.05-1.172.152a5.217 5.217 0 00-1.345.499c-.434.231-.802.55-1.106.954-.304.405-.456.926-.456 1.562v8.937c0 1.013-.202 1.895-.607 2.647-.405.752-.897 1.374-1.475 1.865a5.96 5.96 0 01-1.822 1.085c-.636.231-1.186.347-1.649.347h-3.948v-3.905h2.386c.55 0 .984-.094 1.302-.282.318-.188.564-.433.738-.737.173-.304.282-.636.325-.998a8.58 8.58 0 00.065-1.02v-8.46c0-.867.174-1.59.52-2.168.348-.579.76-1.034 1.237-1.367a4.96 4.96 0 011.475-.716 11.98 11.98 0 011.28-.304v-.086a9.443 9.443 0 01-1.28-.217 4.22 4.22 0 01-1.475-.673c-.477-.332-.89-.81-1.236-1.431-.347-.622-.521-1.454-.521-2.495v-8.2a8.58 8.58 0 00-.065-1.02 2.618 2.618 0 00-.325-.997 2.004 2.004 0 00-.738-.737c-.318-.188-.752-.282-1.302-.282h-2.386v-3.905h3.948c.463 0 1.013.116 1.649.347a5.96 5.96 0 011.822 1.085c.578.491 1.07 1.113 1.475 1.865s.607 1.634.607 2.647v8.59c0 .694.152 1.272.456 1.735.304.463.672.824 1.106 1.085.434.26.882.44 1.345.542.463.101.853.152 1.172.152v3.904z\" fill-rule=\"evenodd\"/>",
    "attrs": {
      "width": "64",
      "height": "64",
      "viewBox": "0 0 64 64",
      "xmlns": "http://www.w3.org/2000/svg"
    }
  };
});
;define("ember-svg-jar/inlined/caret", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = {
    "content": "<title>caret</title><path d=\"M32 41L15 24h35z\" fill-rule=\"evenodd\"/>",
    "attrs": {
      "width": "64",
      "height": "64",
      "viewBox": "0 0 64 64",
      "xmlns": "http://www.w3.org/2000/svg"
    }
  };
});
;define("ember-svg-jar/inlined/check", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = {
    "content": "<title>check</title><path fill-rule=\"nonzero\" d=\"M9 30l13.25 13.25L54 11.5l5.5 5.5-37.25 37.25L3.5 35.5z\"/>",
    "attrs": {
      "width": "64",
      "height": "64",
      "viewBox": "0 0 64 64",
      "xmlns": "http://www.w3.org/2000/svg"
    }
  };
});
;define("ember-svg-jar/inlined/ember-cli", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = {
    "content": "<title>ember-cli</title><g fill-rule=\"evenodd\"><path d=\"M421.536 116.413c-.71-7.079-7.08-4.446-7.08-4.446s-10.26 7.957-19.29 7.072c-9.02-.885-6.19-21.066-6.19-21.066s1.94-18.497-3.36-20.047c-5.31-1.55-11.86 4.821-11.86 4.821s-8.14 9.025-12.04 20.528l-1.06.354s1.24-20.174-.17-24.775c-1.07-2.301-10.8-2.124-12.39 1.946-1.59 4.07-9.38 32.385-9.91 44.242 0 0-15.22 12.918-28.49 15.042-13.28 2.123-16.46-6.194-16.46-6.194s36.1-10.087 34.86-38.933c-1.24-28.845-29.11-18.178-32.26-15.806-3.05 2.293-19.35 12.118-24.1 39.329-.16.927-.44 4.969-.44 4.969s-13.99 9.379-21.77 11.857c0 0 21.77-36.632-4.78-53.267-12.03-7.256-21.59 7.963-21.59 7.963s35.92-39.994 27.96-73.794c-3.79-16.097-11.83-17.824-19.22-15.22-11.22 4.425-15.46 10.972-15.46 10.972s-14.52 21.059-17.88 52.382c-3.36 31.323-8.32 69.194-8.32 69.194s-6.9 6.725-13.27 7.079c-6.37.354-3.54-18.936-3.54-18.936s4.96-29.376 4.6-34.331c-.35-4.955-.7-7.61-6.54-9.379-5.84-1.77-12.21 5.663-12.21 5.663s-16.82 25.483-18.23 29.376l-.89 1.593-.88-1.062s11.86-34.685.53-35.216c-11.33-.531-18.76 12.387-18.76 12.387s-12.92 21.59-13.45 24.068l-.88-1.062s5.31-25.129 4.24-31.323c-1.06-6.194-6.9-4.955-6.9-4.955s-7.43-.885-9.38 3.893c-1.94 4.778-9.02 36.455-9.91 46.542 0 0-18.58 13.273-30.79 13.45-12.21.177-10.97-7.744-10.97-7.744s44.77-15.326 32.56-45.587c-5.49-7.786-11.86-10.236-20.88-10.059-9.03.177-20.22 5.684-27.48 21.965-3.47 7.766-4.73 15.134-5.44 20.712 0 0-7.83 1.6-12.08-1.939s-6.43 0-6.43 0-7.3 9.294-.04 12.126c7.26 2.831 18.58 4.155 18.58 4.155h-.01c1.04 4.955 4.07 13.371 12.91 20.082 13.27 10.087 38.75-.927 38.75-.927l10.44-5.862s.35 9.578 7.96 10.979c7.61 1.395 10.8-.021 24.07-32.229 7.79-16.457 8.32-15.58 8.32-15.58l.88-.177s-6.02 31.5-3.71 39.995c2.3 8.494 12.38 7.609 12.38 7.609s5.49 1.062 9.91-14.511c4.43-15.573 12.92-32.739 12.92-32.739h1.06s-3.71 32.208 1.95 42.472c5.66 10.264 20.35 3.454 20.35 3.454s10.26-5.181 11.86-6.774c0 0 12.18 10.37 29.37 8.488 38.41-7.56 52.07-17.768 52.07-17.768s6.59 16.72 27.04 18.27c23.36 1.77 36.1-12.926 36.1-12.926s-.18 9.557 7.96 12.919 13.63-15.531 13.63-15.531l13.63-37.559h1.23s.71 24.422 14.16 28.315c13.45 3.893 30.97-9.118 30.97-9.118s4.25-2.343 3.54-9.421zm-380.65 3.497c.53-21.059 14.33-30.262 19.11-25.66 4.78 4.601 3.01 14.511-6.02 20.705-9.02 6.193-13.09 4.955-13.09 4.955zm179.62-81.582s12.56-32.738 15.57-16.811c3.01 15.926-26.37 63.353-26.37 63.353.36-10.618 10.8-46.542 10.8-46.542zm15.04 91.138c-8.32 21.767-28.49 12.918-28.49 12.918s-2.3-7.786 4.24-29.553c6.55-21.767 21.95-13.272 21.95-13.272s10.62 8.14 2.3 29.907zm55.74-9.556s-1.94-6.902 5.31-20.174c7.26-13.273 12.92-6.017 12.92-6.017s6.19 6.724-.88 16.811c-7.08 10.088-17.35 9.38-17.35 9.38z\" fill-rule=\"nonzero\"/><path d=\"M434.606 160.128c-5.13 0-9.63-.94-13.5-2.823-3.88-1.881-7.12-4.402-9.74-7.558-2.62-3.155-4.6-6.809-5.94-10.962-1.34-4.152-2-8.47-2-12.955 0-3.209.55-7.059 1.67-11.543 1.11-4.485 2.32-8.401 3.63-11.75a56.556 56.556 0 014.84-9.593c1.92-3.043 4.14-5.717 6.68-8.013a30.884 30.884 0 018.47-5.481c3.12-1.358 6.54-2.036 10.27-2.036 3.36 0 6.46.485 9.32 1.452 2.86.97 5.3 2.315 7.34 4.029a18.657 18.657 0 014.77 6.103c1.14 2.355 1.72 4.889 1.72 7.6 0 1.883-.27 3.737-.81 5.564s-1.59 3.973-3.14 6.435c-1.56 2.464-3.07 4.141-4.54 5.025-1.47.887-3.13 1.329-4.99 1.329-2.8 0-4.61-.691-5.42-2.076-1.35-2.159-1.77-4.069-1.27-5.73.16-.884.66-2.934 1.49-6.146.11-.442.13-1.438.08-2.989 0-1.329-.14-2.435-.42-3.322-.27-.884-.88-1.329-1.81-1.329-2.26 0-4.19.541-5.79 1.618-1.6 1.083-2.96 2.492-4.1 4.238-1.13 1.742-2.24 4.206-3.34 7.389-1.11 3.185-1.89 5.856-2.36 8.015-.47 2.159-.76 4.222-.87 6.188a90.262 90.262 0 00-.16 4.94c0 1.993.18 4.069.54 6.229a16.772 16.772 0 002.14 5.939 14.506 14.506 0 004.18 4.484c1.71 1.19 3.91 1.784 6.61 1.784 2.66 0 5.6-.817 8.81-2.448 3.21-1.634 6.43-3.697 9.67-6.188a88.509 88.509 0 009.26-8.222c2.94-2.99 5.45-5.813 7.56-8.471l5.73 9.634c-4.15 5.925-8.64 11.211-13.45 15.861a81.503 81.503 0 01-6.69 5.814 58.855 58.855 0 01-7.56 5.025 44.973 44.973 0 01-8.22 3.569 28.155 28.155 0 01-8.66 1.371\" fill-rule=\"nonzero\"/><path d=\"M494.406 94.297c2.5-4.466 5.15-9.492 7.96-15.074a284.506 284.506 0 007.96-17.253c2.5-5.917 4.66-11.822 6.5-17.712 1.83-5.889 2.99-11.375 3.49-16.457 0-1.618-.04-3-.11-4.144-.08-1.144-.33-1.717-.75-1.717-1.52 0-3.16 1.052-4.92 3.155-1.76 2.103-3.52 4.948-5.27 8.538-1.76 3.59-3.86 9.427-6.3 17.515l-3.66 12.132s-.74 3.754-2.24 11.257c-1.49 7.501-2.37 14.089-2.66 19.76zm-.08 65.831c-2.98 0-5.75-1.294-8.31-3.882-2.57-2.59-4.8-6.062-6.7-10.423-1.9-4.359-3.39-9.414-4.47-15.163-1.07-5.749-1.61-11.784-1.61-18.106 0-5.433.8-12.685 2.39-21.756l2.4-13.606s1.21-4.527 3.62-13.59c2.42-9.06 4.85-16.328 7.28-21.801 2.43-5.47 5.07-10.584 7.93-15.339 2.85-4.755 5.84-8.9 8.97-12.433 3.13-3.531 6.4-6.309 9.82-8.326 3.41-2.02 6.87-3.03 10.4-3.03 2.56 0 4.68.49 6.35 1.468s2.98 2.269 3.93 3.876c.96 1.605 1.63 3.424 2.02 5.455.38 2.033.58 4.104.58 6.209 0 5.235-.62 10.566-1.86 15.993-1.24 5.428-2.91 10.885-5.01 16.368a182.925 182.925 0 01-7.29 16.492 489.471 489.471 0 01-8.64 16.411c-2.99 5.427-6 10.774-9.02 16.033a353.033 353.033 0 00-8.37 15.428c-.28.56-.57 1.286-.87 2.178-.31.895-.6 1.856-.88 2.89-.27 1.034-.55 2.135-.83 3.309-.28 1.173-.5 2.317-.67 3.431v1.174c0 1.452.16 2.861.46 4.23.31 1.366.68 2.596 1.13 3.683.44 1.091.91 1.956 1.41 2.599.5.64.97.962 1.42.962 1.08 0 2.31-.223 3.7-.67 1.39-.448 2.86-1.048 4.42-1.8a62.09 62.09 0 004.8-2.596c1.65-.978 3.23-1.969 4.77-2.974 3.57-2.344 16.58-11.873 20.49-14.943l4.8 19.888c-5.07 3.37-16.83 10.807-21.79 13.438-2.16 1.106-4.4 2.196-6.71 3.276a81.996 81.996 0 01-6.97 2.883 57.078 57.078 0 01-6.84 2.014c-2.23.501-4.31.75-6.25.75z\" fill-rule=\"nonzero\"/><path d=\"M595.086 127.982a5.864 5.864 0 00-1.32-1.817 7.14 7.14 0 00-1.86-1.284 7.677 7.677 0 00-2.08-.661c-.7-.11-1.36-.094-1.97.048-.61.144-1.08.466-1.52.848-.87.769-1.76 1.608-2.64 2.431-1.49 1.242-2.04 1.822-3.84 3.41a170.665 170.665 0 01-7.31 6.105c-2.49 1.964-4.95 3.641-7.39 5.023-2.44 1.385-4.65 2.076-6.64 2.076-1.72 0-2.86-.734-3.41-2.199-.55-1.466-.83-3.445-.83-5.937 0-2.545.4-5.374 1.2-8.487.79-3.112 1.45-6.247 1.97-9.403.53-3.155 1.5-6.967 2.93-11.439 1.42-4.471 2.5-8.127 3.23-10.972l1.95-7.606c.56-2.223.85-3.943.85-5.162 0-1.439-.41-2.588-1.23-3.448-.81-.857-2.36-1.286-4.65-1.286-1.25 0-2.65.156-4.2.461-1.55.311-3.04.785-4.49 1.428a15.198 15.198 0 00-3.87 2.478c-1.25 1.12-2.02 2.379-2.29 3.777-.49 1.996-1.79 6.301-3.89 12.913-2.26 8.114-3.77 13.351-4.53 15.717-.46 1.186-1.48 6.59-3.07 16.21-.78 4.65-1.17 8.72-1.17 12.208 0 2.491.26 4.776.79 6.85.53 2.078 1.4 3.836 2.62 5.274 1.21 1.441 2.81 2.561 4.77 3.362 1.97.804 4.39 1.206 7.27 1.206 3.21 0 6.6-.582 10.17-1.744a73.92 73.92 0 0010.51-4.359c3.43-1.746 6.63-3.654 9.59-5.733a77.426 77.426 0 006.6-5.146c2.23-1.591 4.45-3.748 7.4-7.065.96-1.086 1.71-2.061 2.15-3.022.43-.962.66-1.873.67-2.735.02-.86-.14-1.635-.47-2.32M563.326 68.008c2.83 0 5.25-.432 7.27-1.299 2.02-.866 3.7-1.999 5.02-3.395a12.898 12.898 0 002.91-4.779c.61-1.787.92-3.632.92-5.532 0-2.068-.38-3.855-1.13-5.365-.74-1.509-1.75-2.725-3.03-3.647-1.27-.921-2.77-1.604-4.48-2.054-1.72-.445-3.55-.67-5.48-.67-3.11 0-5.69.49-7.77 1.468-2.07.978-3.73 2.181-4.98 3.603-1.24 1.425-2.15 2.95-2.7 4.57-.55 1.621-.83 3.073-.83 4.359 0 3.855 1.16 6.944 3.49 9.261 2.32 2.32 5.92 3.48 10.79 3.48\" fill-rule=\"nonzero\"/><text font-family=\"LucidaGrande, Lucida Grande\" font-size=\"29.756\"><tspan x=\"359.546\" y=\"159.419\">&#xae;</tspan></text></g>",
    "attrs": {
      "width": "596",
      "height": "161",
      "viewBox": "0 0 596 161",
      "xmlns": "http://www.w3.org/2000/svg"
    }
  };
});
;define("ember-svg-jar/inlined/ember-data", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = {
    "content": "<title>ember-data</title><g fill-rule=\"evenodd\"><text transform=\"translate(291 105)\" font-size=\"24.104\" font-family=\"LucidaGrande, Lucida Grande\"><tspan x=\".82\" y=\"23.595\">&#xae;</tspan></text><path d=\"M342.27 94.464c-.57-5.738-5.73-3.603-5.73-3.603s-8.32 6.449-15.64 5.732c-7.32-.717-5.02-17.077-5.02-17.077s1.58-14.993-2.73-16.25c-4.3-1.256-9.61 3.908-9.61 3.908s-6.6 7.316-9.75 16.64l-.86.287s1-16.353-.15-20.083c-.86-1.865-8.75-1.721-10.04 1.578-1.29 3.299-7.6 26.251-8.03 35.863 0 0-12.34 10.472-23.1 12.193-10.75 1.721-13.34-5.021-13.34-5.021s29.27-8.176 28.26-31.559c-1-23.382-23.6-14.735-26.15-12.813-2.47 1.859-15.68 9.824-19.53 31.881-.14.751-.36 4.028-.36 4.028s-11.34 7.602-17.65 9.611c0 0 17.65-29.694-3.87-43.179-9.76-5.881-17.5 6.455-17.5 6.455s29.12-32.419 22.66-59.819C201.06.188 194.54-1.212 188.55.9c-9.09 3.586-12.53 8.894-12.53 8.894s-11.77 17.07-14.49 42.461c-2.73 25.391-6.75 56.089-6.75 56.089s-5.59 5.451-10.75 5.738c-5.17.287-2.87-15.349-2.87-15.349s4.01-23.813 3.73-27.829c-.29-4.017-.58-6.169-5.31-7.603-4.73-1.435-9.9 4.59-9.9 4.59s-13.63 20.657-14.77 23.813l-.72 1.291-.72-.861s9.61-28.116.43-28.546c-9.18-.431-15.2 10.041-15.2 10.041S88.22 91.13 87.79 93.139l-.71-.861s4.3-20.37 3.44-25.391c-.86-5.021-5.6-4.017-5.6-4.017s-6.02-.717-7.6 3.156c-1.58 3.874-7.31 29.551-8.03 37.728 0 0-15.06 10.759-24.96 10.902-9.9.144-8.9-6.277-8.9-6.277s36.3-12.423 26.4-36.953c-4.45-6.312-9.61-8.297-16.93-8.154-7.31.144-16.39 4.608-22.27 17.805-2.82 6.295-3.84 12.268-4.41 16.79 0 0-6.35 1.296-9.8-1.573-3.44-2.869-5.21 0-5.21 0s-5.91 7.534-.03 9.83c5.88 2.295 15.06 3.368 15.06 3.368.84 4.017 3.3 10.839 10.46 16.279 10.76 8.176 31.41-.752 31.41-.752l8.46-4.751s.29 7.763 6.46 8.9c6.16 1.13 8.75-.018 19.51-26.126 6.31-13.341 6.74-12.629 6.74-12.629l.71-.143s-4.87 25.534-3.01 32.419c1.87 6.886 10.04 6.169 10.04 6.169s4.45.86 8.04-11.763c3.58-12.624 10.47-26.539 10.47-26.539h.86s-3.01 26.108 1.58 34.429c4.59 8.32 16.49 2.8 16.49 2.8s8.32-4.2 9.62-5.492c0 0 9.87 8.407 23.8 6.88 31.14-6.128 42.21-14.402 42.21-14.402s5.35 13.553 21.92 14.81c18.94 1.434 29.26-10.478 29.26-10.478s-.14 7.746 6.46 10.472c6.6 2.726 11.05-12.589 11.05-12.589l11.04-30.446h1.01s.57 19.796 11.47 22.952c10.9 3.156 25.11-7.391 25.11-7.391s3.44-1.899 2.86-7.637zM33.71 97.299c.43-17.071 11.62-24.53 15.5-20.801 3.87 3.73 2.43 11.763-4.88 16.784-7.32 5.021-10.62 4.017-10.62 4.017zm145.6-66.131S189.5 4.629 191.94 17.54c2.44 12.911-21.38 51.355-21.38 51.355.29-8.607 8.75-37.727 8.75-37.727zm12.2 73.877c-6.74 17.644-23.1 10.472-23.1 10.472s-1.86-6.312 3.45-23.956c5.3-17.645 17.78-10.759 17.78-10.759s8.61 6.598 1.87 24.243zm45.19-7.746s-1.58-5.595 4.3-16.354 10.47-4.877 10.47-4.877 5.02 5.451-.72 13.628c-5.73 8.176-14.05 7.603-14.05 7.603z\" fill-rule=\"nonzero\"/><path d=\"M393.28 29.765c.28-3.142.42-5.635.42-7.476 0-2.424-.22-4.108-.65-5.051-.43-.942-1.06-1.415-1.88-1.415-1.47 0-2.79.909-3.98 2.727-1.18 1.817-2.13 4.161-2.86 7.03-.72 2.87-1.5 5.989-2.35 9.358-.84 3.37-1.46 6.67-1.86 9.898-.38 3.23-.7 6.141-.93 8.734-.24 2.59-.41 4.432-.5 5.525-.2 2.23-.36 4.379-.48 6.447-.12 2.07-.21 3.958-.26 5.663-.05 1.707-.07 3.196-.07 4.469v3.617c2.5-5.981 4.8-11.934 6.9-17.869a301.56 301.56 0 002.6-7.911c.85-2.747 1.7-5.472 2.54-8.174a96.759 96.759 0 002.14-8.027c.58-2.65.99-5.165 1.22-7.545zm-31.76 45.928a28.284 28.284 0 00-7.91 5.736c-2.31 2.375-4.24 5.506-5.79 9.4-1.54 3.891-2.72 7.241-3.53 10.047-.81 2.803-1.21 5.337-1.21 7.601 0 .703.1 1.403.3 2.106.2.703.57 1.335 1.11 1.898.54.56 1.3 1.018 2.29 1.368.98.353 2.26.528 3.84.528.8 0 1.6-.178 2.39-.539a10.71 10.71 0 002.25-1.4 16.62 16.62 0 002.06-1.971c.65-.735 1.25-1.503 1.78-2.3 1.26-1.831 2.41-3.899 3.44-6.206-.13-.633-.25-1.64-.34-3.022-.09-1.378-.16-3.484-.2-6.311-.05-2.828-.1-5.149-.14-6.958-.05-1.81-.08-3.46-.1-4.955-.03-1.494-.06-2.714-.1-3.665-.05-.95-.1-1.403-.14-1.357zm46.66 39.756a113.58 113.58 0 01-9.42 7.006c-1.3.856-2.67 1.704-4.11 2.539a51.222 51.222 0 01-4.24 2.216 32.305 32.305 0 01-4.06 1.573c-1.3.404-2.51.606-3.6.606-.65 0-1.6-.143-2.86-.428-1.26-.289-2.64-.87-4.13-1.753-1.5-.881-2.99-2.157-4.49-3.824-1.49-1.67-2.78-3.886-3.89-6.648a67.199 67.199 0 01-5.3 4.895 40.913 40.913 0 01-5.81 4.036c-2 1.145-4.03 2.063-6.07 2.752a19.213 19.213 0 01-6.18 1.037c-2.92 0-5.44-.606-7.58-1.82a16.19 16.19 0 01-5.31-4.844c-1.42-2.015-2.47-4.301-3.17-6.859a30.31 30.31 0 01-1.04-7.933c0-2.913.37-5.862 1.11-8.848a41.49 41.49 0 013.23-8.676c1.41-2.8 2.98-5.727 4.71-8.781 1.73-3.051 4.02-5.829 6.87-8.336 2.85-2.505 5.78-4.395 8.78-5.671 3.01-1.274 6.22-2.071 9.63-2.391.14-5.83.76-10.968 1.86-15.411 1.1-4.441 2.29-9.221 3.56-14.34 1.27-5.117 2.91-9.83 4.92-14.138s4.21-8.032 6.6-11.173c2.39-3.141 4.94-5.599 7.65-7.37 2.71-1.772 5.51-2.659 8.4-2.659 2.1 0 3.9.55 5.38 1.652 1.48 1.101 2.69 2.562 3.61 4.383.91 1.822 1.57 3.934 1.98 6.339.4 2.406.61 4.89.61 7.452 0 1.6-.02 3.245-.05 4.935-.13 6.443-1.12 12.44-2.98 17.991-1.86 5.55-3.7 11.037-5.51 16.46a138.443 138.443 0 01-6.58 16.098c-3.92 8.123-6.42 13.638-7.49 16.541-.23.635-.46 1.408-.7 2.316-.23.907-.45 1.893-.66 2.959a47.824 47.824 0 00-.53 3.269 25.87 25.87 0 00-.21 3.231c0 1.317.07 2.566.23 3.746.15 1.179.4 2.235.75 3.164.35.931.82 1.669 1.42 2.213.58.544 1.31.816 2.19.816.85 0 1.79-.17 2.79-.509 1.01-.339 2.08-.802 3.2-1.392a40.897 40.897 0 003.4-2.001 85.66 85.66 0 003.33-2.275c2.47-1.81 5.05-3.87 7.74-6.177l2.02 14.032z\" fill-rule=\"nonzero\"/><path d=\"M417.33 107.5c0 1.158.07 2.28.23 3.368s.44 2.06.85 2.916c.4.857.94 1.551 1.61 2.085.68.53 1.53.797 2.56.797 1.67 0 3.17-.722 4.52-2.168 1.35-1.446 2.52-3.185 3.51-5.218a36.804 36.804 0 002.39-6.304c.61-2.168 1-3.977 1.18-5.423l5.02-21.884c-1.84 0-3.63.458-5.38 1.368-1.75.913-3.4 2.146-4.95 3.705-1.55 1.557-2.97 3.336-4.27 5.337-1.31 2.003-2.59 4.473-3.84 7.408-1.26 2.937-2.14 5.517-2.66 7.741-.52 2.224-.77 4.317-.77 6.272zm57.75 5.275c-1.03 1.451-2.41 3.153-4.14 5.105a51.336 51.336 0 01-5.82 5.582 36.568 36.568 0 01-6.94 4.494c-2.47 1.225-4.94 1.837-7.4 1.837-2.98 0-5.47-.943-7.46-2.833-1.99-1.888-3.71-4.629-5.16-8.229-1.09 1.244-2.42 2.51-4 3.797a36.379 36.379 0 01-5.19 3.5 33.803 33.803 0 01-5.87 2.564c-2.04.667-4.08.999-6.11.999-2.16 0-4.25-.442-6.29-1.325-2.05-.883-3.85-2.149-5.42-3.802-1.58-1.654-2.83-3.668-3.77-6.045-.95-2.378-1.42-5.06-1.42-8.049 0-3.352.48-6.796 1.42-10.329.95-3.533 2.42-7.354 4.41-11.471 1.98-4.115 4.12-7.669 6.39-10.666 2.29-2.994 4.78-5.612 7.49-7.847 2.71-2.237 5.56-4.014 8.57-5.334 3-1.319 6.05-1.979 9.17-1.979 1.04 0 1.85.205 2.44.611.59.41 1.07.875 1.46 1.395.38.522.75 1.034 1.11 1.532.36.498.81.862 1.36 1.088.54.226 1.09.374 1.66.442.56.067 1.14.102 1.72.102.5 0 1.01-.011 1.53-.035.52-.022 1.02-.032 1.52-.032.68 0 1.31.067 1.9.202.58.137 1.1.43 1.55.886.45.455.8 1.087 1.05 1.903.24.816.37 1.928.37 3.334 0 2.146-.23 4.526-.68 7.141-.44 2.615-.96 5.294-1.54 8.038-.58 2.744-1.24 5.87-1.98 9.384-.74 3.511-1.11 6.47-1.11 8.878 0 2.057.19 3.665.57 4.822.39 1.161 1.2 1.74 2.46 1.74.94 0 1.93-.234 2.96-.7 1.03-.469 2.08-1.08 3.13-1.834a35.58 35.58 0 003.17-2.571 47.11 47.11 0 002.99-2.971c2.2-2.401 4.42-5.116 6.67-8.14l3.23 14.816z\" fill-rule=\"nonzero\"/><path d=\"M510.63 115.117c-1.62 1.481-3.63 3.062-6.03 4.748a64.193 64.193 0 01-7.77 4.642 59.18 59.18 0 01-8.52 3.535c-2.89.943-5.64 1.414-8.24 1.414-2.34 0-4.3-.326-5.9-.975-1.59-.651-2.88-1.559-3.87-2.727-.98-1.166-1.69-2.594-2.11-4.274-.43-1.685-.65-3.535-.65-5.555 0-2.827.32-6.126.95-9.896 1.29-7.798 2.12-12.176 2.49-13.14.61-1.917 8.5-43.576 10.33-50.152 1.71-5.361 2.76-8.848 3.16-10.466.22-1.134.83-2.155 1.85-3.065.93-.816 1.97-1.486 3.14-2.006 1.17-.522 2.38-.907 3.64-1.158 1.25-.25 2.39-.374 3.41-.374 1.85 0 3.1.347 3.77 1.045.66.695.99 1.626.99 2.792 0 .988-.23 2.383-.7 4.185-.46 1.804-.98 3.858-1.57 6.163-.59 2.308-1.46 5.273-2.62 8.897-1.16 3.624-8.61 44.128-9.03 46.684-.42 2.558-.96 5.1-1.6 7.623-.65 2.523-.97 4.817-.97 6.88 0 2.019.22 3.621.67 4.811.45 1.188 1.37 1.783 2.76 1.783 1.62 0 3.41-.56 5.39-1.683 1.97-1.12 3.97-2.48 5.99-4.074 2.02-1.591 3.99-3.239 5.92-4.947 1.93-1.704 3.64-3.163 5.12-4.375v13.665\" fill-rule=\"nonzero\"/><path d=\"M522.63 107.5c0 1.158.08 2.28.24 3.368.16 1.088.44 2.06.84 2.916.41.857.94 1.551 1.62 2.085.67.53 1.53.797 2.56.797 1.67 0 3.17-.722 4.52-2.168 1.35-1.446 2.52-3.185 3.51-5.218a38.545 38.545 0 002.39-6.304c.61-2.168 1-3.977 1.18-5.423l5.02-21.884c-1.84 0-3.63.458-5.38 1.368-1.75.913-3.41 2.146-4.95 3.705a33.07 33.07 0 00-4.28 5.337c-1.3 2.003-2.58 4.473-3.83 7.408-1.26 2.937-2.15 5.517-2.66 7.741-.52 2.224-.78 4.317-.78 6.272zm57.76 5.275c-1.04 1.451-2.42 3.153-4.15 5.105a49.711 49.711 0 01-5.82 5.582 36.183 36.183 0 01-6.93 4.494c-2.47 1.225-4.94 1.837-7.41 1.837-2.98 0-5.46-.943-7.45-2.833-1.99-1.888-3.72-4.629-5.16-8.229-1.09 1.244-2.42 2.51-4.01 3.797a35.284 35.284 0 01-5.19 3.5 33.151 33.151 0 01-5.87 2.564c-2.03.667-4.07.999-6.1.999-2.16 0-4.26-.442-6.3-1.325a16.397 16.397 0 01-5.42-3.802c-1.57-1.654-2.82-3.668-3.77-6.045-.94-2.378-1.41-5.06-1.41-8.049 0-3.352.47-6.796 1.42-10.329.95-3.533 2.42-7.354 4.4-11.471 1.99-4.115 4.12-7.669 6.4-10.666 2.28-2.994 4.78-5.612 7.48-7.847 2.71-2.237 5.57-4.014 8.57-5.334 3-1.319 6.06-1.979 9.18-1.979 1.04 0 1.85.205 2.44.611.58.41 1.07.875 1.45 1.395.39.522.76 1.034 1.12 1.532.36.498.81.862 1.35 1.088.54.226 1.1.374 1.66.442.57.067 1.14.102 1.73.102.5 0 1-.011 1.52-.035a36.18 36.18 0 011.53-.032c.67 0 1.31.067 1.89.202.59.137 1.11.43 1.56.886.45.455.8 1.087 1.04 1.903.25.816.37 1.928.37 3.334 0 2.146-.22 4.526-.67 7.141-.45 2.615-.96 5.294-1.54 8.038-.58 2.744-1.24 5.87-1.98 9.384-.74 3.511-1.11 6.47-1.11 8.878 0 2.057.19 3.665.57 4.822.38 1.161 1.2 1.74 2.46 1.74.94 0 1.93-.234 2.96-.7 1.03-.469 2.07-1.08 3.13-1.834a35.49 35.49 0 003.16-2.571 44.784 44.784 0 003-2.971c2.2-2.401 4.42-5.116 6.66-8.14l3.24 14.816zM501.14 57.096c.35-.167.95-.225 1.79-.178.84.05 1.81.064 2.91.046 1.1-.02 2.29-.042 3.57-.071 1.27-.027 2.51-.048 3.71-.065 1.2-.014 2.32-.024 3.36-.033 1.04-.006 1.9-.003 2.58.006.8.01 1.4.482 1.81 1.416.4.934.64 2.128.72 3.581.08 1.681-.25 3.072-1 4.168-.74 1.099-1.59 1.67-2.55 1.718l-23 1.154-19.95-1.165c-1.22-.14-2.16-.281-2.83-.424-.67-.141-1.38-.282-2.13-.419-.76-.139-1.71-.279-2.86-.422-1.16-.143-2.83-.311-5.01-.502-.97-.102-1.73-.353-2.27-.753a3.864 3.864 0 01-1.22-1.446 5.508 5.508 0 01-.51-1.783 24.97 24.97 0 01-.14-1.613c-.04-.71.33-1.272 1.09-1.684.76-.414 1.75-.743 2.96-.992 1.22-.248 2.55-.42 4.02-.518 1.46-.095 2.86-.152 4.21-.176 1.34-.022 2.55-.049 3.61-.081 1.06-.029 1.79-.099 2.19-.21l24.94.446\" fill-rule=\"nonzero\"/></g>",
    "attrs": {
      "width": "581",
      "height": "130",
      "viewBox": "0 0 581 130",
      "xmlns": "http://www.w3.org/2000/svg"
    }
  };
});
;define("ember-svg-jar/inlined/ember", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = {
    "content": "<title>ember-logo</title><g fill-rule=\"evenodd\"><path d=\"M421.536 116.413c-.71-7.079-7.08-4.446-7.08-4.446s-10.26 7.957-19.29 7.072c-9.02-.885-6.19-21.066-6.19-21.066s1.94-18.497-3.36-20.047c-5.31-1.55-11.86 4.821-11.86 4.821s-8.14 9.025-12.04 20.528l-1.06.354s1.24-20.174-.17-24.775c-1.07-2.301-10.8-2.124-12.39 1.946-1.59 4.07-9.38 32.385-9.91 44.242 0 0-15.22 12.918-28.49 15.042-13.28 2.123-16.46-6.194-16.46-6.194s36.1-10.087 34.86-38.933c-1.24-28.845-29.11-18.178-32.26-15.806-3.05 2.293-19.35 12.118-24.1 39.329-.16.927-.44 4.969-.44 4.969s-13.99 9.379-21.77 11.857c0 0 21.77-36.632-4.78-53.267-12.03-7.256-21.59 7.963-21.59 7.963s35.92-39.994 27.96-73.794c-3.79-16.097-11.83-17.824-19.22-15.22-11.22 4.425-15.46 10.972-15.46 10.972s-14.52 21.059-17.88 52.382c-3.36 31.323-8.32 69.194-8.32 69.194s-6.9 6.725-13.27 7.079c-6.37.354-3.54-18.936-3.54-18.936s4.96-29.376 4.6-34.331c-.35-4.955-.7-7.61-6.54-9.379-5.84-1.77-12.21 5.663-12.21 5.663s-16.82 25.483-18.23 29.376l-.89 1.593-.88-1.062s11.86-34.685.53-35.216c-11.33-.531-18.76 12.387-18.76 12.387s-12.92 21.59-13.45 24.068l-.88-1.062s5.31-25.129 4.24-31.323c-1.06-6.194-6.9-4.955-6.9-4.955s-7.43-.885-9.38 3.893c-1.94 4.778-9.02 36.455-9.91 46.542 0 0-18.58 13.273-30.79 13.45-12.21.177-10.97-7.744-10.97-7.744s44.77-15.326 32.56-45.587c-5.49-7.786-11.86-10.236-20.88-10.059-9.03.177-20.22 5.684-27.48 21.965-3.47 7.766-4.73 15.134-5.44 20.712 0 0-7.83 1.6-12.08-1.939s-6.43 0-6.43 0-7.3 9.294-.04 12.126c7.26 2.831 18.58 4.155 18.58 4.155h-.01c1.04 4.955 4.07 13.371 12.91 20.082 13.27 10.087 38.75-.927 38.75-.927l10.44-5.862s.35 9.578 7.96 10.979c7.61 1.395 10.8-.021 24.07-32.229 7.79-16.457 8.32-15.58 8.32-15.58l.88-.177s-6.02 31.5-3.71 39.995c2.3 8.494 12.38 7.609 12.38 7.609s5.49 1.062 9.91-14.511c4.43-15.573 12.92-32.739 12.92-32.739h1.06s-3.71 32.208 1.95 42.472c5.66 10.264 20.35 3.454 20.35 3.454s10.26-5.181 11.86-6.774c0 0 12.18 10.37 29.37 8.488 38.41-7.56 52.07-17.768 52.07-17.768s6.59 16.72 27.04 18.27c23.36 1.77 36.1-12.926 36.1-12.926s-.18 9.557 7.96 12.919 13.63-15.531 13.63-15.531l13.63-37.559h1.23s.71 24.422 14.16 28.315c13.45 3.893 30.97-9.118 30.97-9.118s4.25-2.343 3.54-9.421zm-380.65 3.497c.53-21.059 14.33-30.262 19.11-25.66 4.78 4.601 3.01 14.511-6.02 20.705-9.02 6.193-13.09 4.955-13.09 4.955zm179.62-81.582s12.56-32.738 15.57-16.811c3.01 15.926-26.37 63.353-26.37 63.353.36-10.618 10.8-46.542 10.8-46.542zm15.04 91.138c-8.32 21.767-28.49 12.918-28.49 12.918s-2.3-7.786 4.24-29.553c6.55-21.767 21.95-13.272 21.95-13.272s10.62 8.14 2.3 29.907zm55.74-9.556s-1.94-6.902 5.31-20.174c7.26-13.273 12.92-6.017 12.92-6.017s6.19 6.724-.88 16.811c-7.08 10.088-17.35 9.38-17.35 9.38z\" fill-rule=\"nonzero\"/><text font-family=\"LucidaGrande, Lucida Grande\" font-size=\"29.756\"><tspan x=\"359.546\" y=\"159.419\">&#xae;</tspan></text></g>",
    "attrs": {
      "width": "422",
      "height": "161",
      "viewBox": "0 0 422 161",
      "xmlns": "http://www.w3.org/2000/svg"
    }
  };
});
;define("ember-svg-jar/inlined/git-sha", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = {
    "content": "<title>git-sha</title><path d=\"M18.322 28C19.696 21.71 25.298 17 32 17c6.702 0 12.304 4.71 13.678 11H58v6H45.678C44.304 40.29 38.702 45 32 45c-6.702 0-12.304-4.71-13.678-11H6v-6h12.322zM32 39a8 8 0 100-16 8 8 0 000 16z\" fill-rule=\"evenodd\"/>",
    "attrs": {
      "width": "64",
      "height": "64",
      "viewBox": "0 0 64 64",
      "xmlns": "http://www.w3.org/2000/svg"
    }
  };
});
;define("ember-svg-jar/inlined/git-tag", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = {
    "content": "<title>git-tag</title><path d=\"M10.76 30.286l.09-17.457a4 4 0 013.979-3.98l17.457-.089a6 6 0 014.273 1.758L58.953 32.91a2 2 0 010 2.829L37.74 56.953a2 2 0 01-2.829 0L12.518 34.559a6 6 0 01-1.758-4.273zm14.85-6.676c1.953-1.952 1.945-5.126-.017-7.088-1.962-1.962-5.135-1.97-7.088-.017-1.952 1.953-1.945 5.126.017 7.088 1.962 1.962 5.136 1.97 7.088.017z\" fill-rule=\"evenodd\"/>",
    "attrs": {
      "width": "64",
      "height": "64",
      "viewBox": "0 0 64 64",
      "xmlns": "http://www.w3.org/2000/svg"
    }
  };
});
;define("ember-svg-jar/inlined/github", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = {
    "content": "<title>GitHub</title><path d=\"M10 0a10 10 0 00-3.16 19.49c.5.1.68-.22.68-.48l-.01-1.7c-2.78.6-3.37-1.34-3.37-1.34-.46-1.16-1.11-1.47-1.11-1.47-.9-.62.07-.6.07-.6 1 .07 1.53 1.03 1.53 1.03.9 1.52 2.34 1.08 2.91.83.1-.65.35-1.09.63-1.34-2.22-.25-4.55-1.11-4.55-4.94 0-1.1.39-1.99 1.03-2.69a3.6 3.6 0 01.1-2.64s.84-.27 2.75 1.02a9.58 9.58 0 015 0c1.91-1.3 2.75-1.02 2.75-1.02.55 1.37.2 2.4.1 2.64.64.7 1.03 1.6 1.03 2.69 0 3.84-2.34 4.68-4.57 4.93.36.31.68.92.68 1.85l-.01 2.75c0 .26.18.58.69.48A10 10 0 0010 0\"/>",
    "attrs": {
      "class": "fill-current w-5 h-5",
      "xmlns": "http://www.w3.org/2000/svg",
      "viewBox": "0 0 20 20"
    }
  };
});
;define("ember-svg-jar/inlined/guide", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = {
    "content": "<title>icons/guide</title><g fill-rule=\"evenodd\"><g><path d=\"M11 18.08c-.67.19-1.336.403-2 .642v28.927c10-3.306 19.556-.136 24 3.351 2.667-2.615 14-6.657 24-3.351V18.722a30.156 30.156 0 00-2-.642v27.3c-6.453-2.92-13.787-2.047-22 2.62V34.187 48c-8.8-4.667-16.133-5.54-22-2.62v-27.3z\"/><path d=\"M34 17.44c5.976-3.001 11.976-3.234 18-.698v24.976C46.762 39.689 40.762 40.45 34 44V17.44zM32 17.44c-5.976-3.001-11.976-3.234-18-.698v24.976C19.238 39.689 25.238 40.45 32 44V17.44z\"/></g></g>",
    "attrs": {
      "width": "64",
      "height": "64",
      "viewBox": "0 0 64 64",
      "xmlns": "http://www.w3.org/2000/svg"
    }
  };
});
;define("ember-svg-jar/inlined/left-arrow", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = {
    "content": "<title>icons/left-arrow</title><g transform=\"matrix(-1 0 0 1 44 12)\" fill-rule=\"evenodd\"><rect transform=\"rotate(45 12.078 12.078)\" x=\"-1.873\" y=\"9.559\" width=\"27.902\" height=\"5.037\" rx=\"2.518\"/><rect transform=\"rotate(-45 12.331 28.789)\" x=\"-1.62\" y=\"26.27\" width=\"27.902\" height=\"5.037\" rx=\"2.518\"/></g>",
    "attrs": {
      "width": "64",
      "height": "64",
      "viewBox": "0 0 64 64",
      "xmlns": "http://www.w3.org/2000/svg"
    }
  };
});
;define("ember-svg-jar/inlined/link", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = {
    "content": "<path d=\"M6.879 9.934a.81.81 0 01-.575-.238 3.818 3.818 0 010-5.392l3-3C10.024.584 10.982.187 12 .187s1.976.397 2.696 1.117a3.818 3.818 0 010 5.392l-1.371 1.371a.813.813 0 01-1.149-1.149l1.371-1.371A2.19 2.19 0 0012 1.812c-.584 0-1.134.228-1.547.641l-3 3a2.19 2.19 0 000 3.094.813.813 0 01-.575 1.387z\"/><path d=\"M4 15.813a3.789 3.789 0 01-2.696-1.117 3.818 3.818 0 010-5.392l1.371-1.371a.813.813 0 011.149 1.149l-1.371 1.371A2.19 2.19 0 004 14.188c.585 0 1.134-.228 1.547-.641l3-3a2.19 2.19 0 000-3.094.813.813 0 011.149-1.149 3.818 3.818 0 010 5.392l-3 3A3.789 3.789 0 014 15.813z\"/>",
    "attrs": {
      "xmlns": "http://www.w3.org/2000/svg",
      "width": "16",
      "height": "16",
      "viewBox": "0 0 16 16"
    }
  };
});
;define("ember-svg-jar/inlined/pencil", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = {
    "content": "<title>Group</title><g fill-rule=\"evenodd\"><path d=\"M3.557 34.011l8.842 8.843-9.733 2.808A1.5 1.5 0 01.75 43.744l2.808-9.733zM14.364 40.889l-8.842-8.842L31.067 6.502l8.842 8.842zM41.874 13.379l-8.842-8.843 2.456-2.456a6.253 6.253 0 018.843 8.843l-2.457 2.456z\"/></g>",
    "attrs": {
      "width": "47",
      "height": "46",
      "viewBox": "0 0 47 46",
      "xmlns": "http://www.w3.org/2000/svg"
    }
  };
});
;define("ember-svg-jar/inlined/right-arrow", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = {
    "content": "<title>icons/right-arrow</title><g transform=\"translate(20 12)\" fill-rule=\"evenodd\"><rect transform=\"rotate(45 12.078 12.078)\" x=\"-1.873\" y=\"9.559\" width=\"27.902\" height=\"5.037\" rx=\"2.518\"/><rect transform=\"rotate(-45 12.331 28.789)\" x=\"-1.62\" y=\"26.27\" width=\"27.902\" height=\"5.037\" rx=\"2.518\"/></g>",
    "attrs": {
      "width": "64",
      "height": "64",
      "viewBox": "0 0 64 64",
      "xmlns": "http://www.w3.org/2000/svg"
    }
  };
});
;define("ember-svg-jar/inlined/search", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = {
    "content": "<title>search</title><path d=\"M23.997 40.742c-9.249 0-16.746-7.497-16.746-16.745 0-9.248 7.497-16.745 16.746-16.745 9.248 0 16.746 7.497 16.746 16.745a16.674 16.674 0 01-16.746 16.745zm38.885 16.93L43.534 38.32a23.59 23.59 0 004.65-14.328 24.092 24.092 0 10-39.67 18.475 24.092 24.092 0 0029.807 1.065l19.353 19.35a3.6 3.6 0 005.212 0 3.6 3.6 0 00-.004-5.211z\" fill-rule=\"nonzero\"/>",
    "attrs": {
      "width": "64",
      "height": "64",
      "viewBox": "0 0 64 64",
      "xmlns": "http://www.w3.org/2000/svg"
    }
  };
});
;define("ember-svg-jar/utils/make-svg", ["exports", "@ember/utils", "@ember/template"], function (_exports, _utils, _template) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.createAccessibilityElements = createAccessibilityElements;
  _exports.createAriaLabel = createAriaLabel;
  _exports.default = makeSvg;
  _exports.formatAttrs = formatAttrs;
  _exports.generateAccessibilityIds = generateAccessibilityIds;
  _exports.inlineSvgFor = inlineSvgFor;
  _exports.sanitizeAttrs = sanitizeAttrs;
  _exports.symbolUseFor = symbolUseFor;
  /**
   * This taken from https://github.com/emberjs/ember.js/blob/089a021b1b5c5f8ea1cb574fcd841a73af7b2031/packages/%40ember/-internals/glimmer/lib/helpers/unique-id.ts#L44
   * In the future it should be possible to import this function like
   * `import { uniqueId } from '@ember/helper`
   * see https://github.com/emberjs/ember.js/pull/20165
   */
  function uniqueId() {
    return ([3e7] + -1e3 + -4e3 + -2e3 + -1e11).replace(/[0-3]/g, a => (a * 4 ^ Math.random() * 16 >> (a & 2)).toString(16));
  }
  const accessibilityElements = ['title', 'desc'];
  const ESC = {
    '"': '&quot;',
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;'
  };
  function matcher(char) {
    return ESC[char];
  }
  function escapeText(text) {
    if (typeof text === 'number') return text;
    if (text === null) return null;
    if (typeof text !== 'string') return '';
    if (text.indexOf('>') > -1 || text.indexOf('<') > -1 || text.indexOf('&') > -1 || text.indexOf('"') > -1) {
      return text.replace(/[&"<>]/g, matcher);
    }
    return text;
  }
  function sanitizeAttrs(attrs) {
    let attrsCopy = Object.assign({}, attrs);
    Object.keys(attrsCopy).forEach(key => {
      attrsCopy[key] = escapeText(attrsCopy[key]);
    });
    return attrsCopy;
  }
  function generateAccessibilityIds(attrs) {
    if (attrs.title) {
      attrs.title = {
        id: uniqueId(),
        text: attrs.title
      };
    }
    if (attrs.desc) {
      attrs.desc = {
        id: uniqueId(),
        text: attrs.desc
      };
    }
    return attrs;
  }
  function createAccessibilityElements(attrs) {
    const {
      title,
      desc
    } = attrs;
    if (!title && !desc) {
      return '';
    }
    return accessibilityElements.reduce((elements, tag) => {
      if (attrs[tag]) {
        return elements.concat(`<${tag} id="${attrs[tag].id}">${attrs[tag].text}</${tag}>`);
      }
      return elements;
    }, '');
  }
  function createAriaLabel(attrs) {
    const {
      title,
      desc
    } = attrs;
    if (!title && !desc) {
      return '';
    }
    return `aria-labelledby="${accessibilityElements.filter(tag => attrs[tag]).map(tag => attrs[tag].id).join(' ')}"`;
  }
  function formatAttrs(attrs) {
    return Object.keys(attrs).filter(attr => !accessibilityElements.includes(attr)).map(key => !(0, _utils.isNone)(attrs[key]) && `${key}="${attrs[key]}"`).filter(attr => attr).join(' ');
  }
  function symbolUseFor(assetId, attrs = {}) {
    return `<svg ${formatAttrs(attrs)}${createAriaLabel(attrs)}><use xlink:href="${assetId}" />${createAccessibilityElements(attrs)}</svg>`;
  }
  function inlineSvgFor(assetId, getInlineAsset, attrs = {}) {
    let asset = getInlineAsset(assetId);
    if (!asset) {
      // eslint-disable-next-line no-console
      console.warn(`ember-svg-jar: Missing inline SVG for ${assetId}`);
      return;
    }
    let svgAttrs = asset.attrs ? Object.assign({}, asset.attrs, attrs) : attrs;
    let {
      size
    } = attrs;
    if (size) {
      svgAttrs.width = parseFloat(svgAttrs.width) * size || svgAttrs.width;
      svgAttrs.height = parseFloat(svgAttrs.height) * size || svgAttrs.height;
      delete svgAttrs.size;
    }
    return `<svg ${formatAttrs(svgAttrs)}${createAriaLabel(attrs)}>${createAccessibilityElements(attrs)}${asset.content}</svg>`;
  }
  function makeSvg(assetId, attrs = {}, getInlineAsset) {
    if (!assetId) {
      // eslint-disable-next-line no-console
      console.warn('ember-svg-jar: asset name should not be undefined or null');
      return;
    }
    attrs = sanitizeAttrs(attrs);
    attrs = generateAccessibilityIds(attrs);
    let isSymbol = assetId.lastIndexOf('#', 0) === 0;
    let svg = isSymbol ? symbolUseFor(assetId, attrs) : inlineSvgFor(assetId, getInlineAsset, attrs);
    return (0, _template.htmlSafe)(svg);
  }
});
;define("ember-test-waiters/index", ["exports", "@ember/debug", "@ember/test-waiters"], function (_exports, _debug, _testWaiters) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.keys(_testWaiters).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in _exports && _exports[key] === _testWaiters[key]) return;
    Object.defineProperty(_exports, key, {
      enumerable: true,
      get: function () {
        return _testWaiters[key];
      }
    });
  });
  (true && !(false) && (0, _debug.deprecate)('Importing from ember-test-waiters is deprecated. Please import from @ember/test-waiters', false, {
    id: 'ember-test-waiters-legacy-module-name',
    until: '3.0.0',
    for: 'ember-test-waiters',
    since: {
      enabled: '2.2.0'
    }
  }));
});
;define("ember-tether/components/ember-tether", ["exports", "@ember/application", "@ember/runloop", "@ember/object", "@ember/utils", "@ember/component", "tether"], function (_exports, _application, _runloop, _object, _utils, _component, _tether2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = _component.default.extend({
    classNames: ['ember-tether'],
    classPrefix: 'ember-tether',
    target: null,
    attachment: null,
    targetAttachment: null,
    offset: null,
    targetOffset: null,
    targetModifier: null,
    constraints: null,
    optimizations: null,
    emberTetherConfig: (0, _object.computed)(function () {
      return ((0, _application.getOwner)(this).resolveRegistration('config:environment') || {})['ember-tether'];
    }),
    bodyElement: (0, _object.computed)(function () {
      let config = (0, _object.get)(this, 'emberTetherConfig');
      if (config && config.bodyElementId) {
        return document.getElementById(config.bodyElementId);
      }
    }),
    attributeBindings: ['aria-atomic', 'aria-busy', 'aria-controls', 'aria-current', 'aria-describedby', 'aria-details', 'aria-disabled', 'aria-errormessage', 'aria-flowto', 'aria-haspopup', 'aria-hidden', 'aria-invalid', 'aria-keyshortcuts', 'aria-label', 'aria-labelledby', 'aria-live', 'aria-owns', 'aria-relevant', 'aria-roledescription'],
    didInsertElement() {
      this._super(...arguments);
      this.addTether();
    },
    willDestroyElement() {
      this._super(...arguments);
      if (!this._tether) return;
      let {
        _tether,
        element
      } = this;
      (0, _runloop.schedule)('render', () => {
        this.removeElement(element);
        this.removeTether(_tether);
      });
    },
    didRender() {
      this._super(...arguments);
      this.positionTether();
    },
    tetherDidChange: (0, _object.observer)('classPrefix', 'target', 'attachment', 'targetAttachment', 'offset', 'targetOffset', 'targetModifier', 'constraints', 'optimizations', function () {
      this.removeTether(this._tether);
      this.addTether();
    }),
    positionTether() {
      if (this._tether) {
        this._tether.position();
      }
    },
    addTether() {
      if ((0, _object.get)(this, '_tetherTarget')) {
        this._tether = new _tether2.default(this._tetherOptions());
      }
    },
    removeTether(tether) {
      if (tether) {
        tether.destroy();
      }
    },
    removeElement(element) {
      if (element.parentNode) {
        element.parentNode.removeChild(element);
      }
    },
    _tetherTarget: (0, _object.computed)('target', function () {
      let t = (0, _object.get)(this, 'target');
      if (t && t.element) {
        t = t.element;
      }
      return t;
    }),
    _tetherOptions() {
      let options = {
        element: this.element,
        target: (0, _object.get)(this, '_tetherTarget')
      };
      ['classPrefix', 'attachment', 'targetAttachment', 'offset', 'targetOffset', 'targetModifier', 'constraints', 'optimizations', 'bodyElement'].forEach(k => {
        let v = (0, _object.get)(this, k);
        if (!(0, _utils.isNone)(v)) {
          options[k] = v;
        }
      });
      return options;
    }
  });
});
;define("ember-truth-helpers/helpers/and", ["exports", "@ember/component/helper", "ember-truth-helpers/utils/truth-convert"], function (_exports, _helper, _truthConvert) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.and = and;
  _exports.default = void 0;
  function and(params) {
    for (let i = 0, len = params.length; i < len; i++) {
      if ((0, _truthConvert.default)(params[i]) === false) {
        return params[i];
      }
    }
    return params[params.length - 1];
  }
  var _default = _exports.default = (0, _helper.helper)(and);
});
;define("ember-truth-helpers/helpers/eq", ["exports", "ember-truth-helpers/helpers/equal"], function (_exports, _equal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _equal.default;
    }
  });
  Object.defineProperty(_exports, "equal", {
    enumerable: true,
    get: function () {
      return _equal.equal;
    }
  });
});
;define("ember-truth-helpers/helpers/equal", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.equal = equal;
  function equal(params) {
    return params[0] === params[1];
  }
  var _default = _exports.default = (0, _helper.helper)(equal);
});
;define("ember-truth-helpers/helpers/gt", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.gt = gt;
  function gt([left, right], hash) {
    if (hash.forceNumber) {
      if (typeof left !== 'number') {
        left = Number(left);
      }
      if (typeof right !== 'number') {
        right = Number(right);
      }
    }
    return left > right;
  }
  var _default = _exports.default = (0, _helper.helper)(gt);
});
;define("ember-truth-helpers/helpers/gte", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.gte = gte;
  function gte([left, right], hash) {
    if (hash.forceNumber) {
      if (typeof left !== 'number') {
        left = Number(left);
      }
      if (typeof right !== 'number') {
        right = Number(right);
      }
    }
    return left >= right;
  }
  var _default = _exports.default = (0, _helper.helper)(gte);
});
;define("ember-truth-helpers/helpers/is-array", ["exports", "@ember/component/helper", "@ember/array"], function (_exports, _helper, _array) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.isArray = isArray;
  function isArray(params) {
    for (let i = 0, len = params.length; i < len; i++) {
      if ((0, _array.isArray)(params[i]) === false) {
        return false;
      }
    }
    return true;
  }
  var _default = _exports.default = (0, _helper.helper)(isArray);
});
;define("ember-truth-helpers/helpers/is-empty", ["exports", "@ember/component/helper", "@ember/utils"], function (_exports, _helper, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _helper.helper)(function ([obj]) {
    return (0, _utils.isEmpty)(obj);
  });
});
;define("ember-truth-helpers/helpers/is-equal", ["exports", "@ember/component/helper", "@ember/utils"], function (_exports, _helper, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.isEqual = isEqual;
  function isEqual([a, b]) {
    return (0, _utils.isEqual)(a, b);
  }
  var _default = _exports.default = (0, _helper.helper)(isEqual);
});
;define("ember-truth-helpers/helpers/lt", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.lt = lt;
  function lt([left, right], hash) {
    if (hash.forceNumber) {
      if (typeof left !== 'number') {
        left = Number(left);
      }
      if (typeof right !== 'number') {
        right = Number(right);
      }
    }
    return left < right;
  }
  var _default = _exports.default = (0, _helper.helper)(lt);
});
;define("ember-truth-helpers/helpers/lte", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.lte = lte;
  function lte([left, right], hash) {
    if (hash.forceNumber) {
      if (typeof left !== 'number') {
        left = Number(left);
      }
      if (typeof right !== 'number') {
        right = Number(right);
      }
    }
    return left <= right;
  }
  var _default = _exports.default = (0, _helper.helper)(lte);
});
;define("ember-truth-helpers/helpers/not-eq", ["exports", "ember-truth-helpers/helpers/not-equal"], function (_exports, _notEqual) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _notEqual.default;
    }
  });
  Object.defineProperty(_exports, "notEqualHelper", {
    enumerable: true,
    get: function () {
      return _notEqual.notEqualHelper;
    }
  });
});
;define("ember-truth-helpers/helpers/not-equal", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.notEqualHelper = notEqualHelper;
  function notEqualHelper(params) {
    return params[0] !== params[1];
  }
  var _default = _exports.default = (0, _helper.helper)(notEqualHelper);
});
;define("ember-truth-helpers/helpers/not", ["exports", "@ember/component/helper", "ember-truth-helpers/utils/truth-convert"], function (_exports, _helper, _truthConvert) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.not = not;
  function not(params) {
    for (let i = 0, len = params.length; i < len; i++) {
      if ((0, _truthConvert.default)(params[i]) === true) {
        return false;
      }
    }
    return true;
  }
  var _default = _exports.default = (0, _helper.helper)(not);
});
;define("ember-truth-helpers/helpers/or", ["exports", "@ember/component/helper", "ember-truth-helpers/utils/truth-convert"], function (_exports, _helper, _truthConvert) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.or = or;
  function or(params) {
    for (let i = 0, len = params.length; i < len; i++) {
      if ((0, _truthConvert.default)(params[i]) === true) {
        return params[i];
      }
    }
    return params[params.length - 1];
  }
  var _default = _exports.default = (0, _helper.helper)(or);
});
;define("ember-truth-helpers/helpers/xor", ["exports", "@ember/component/helper", "ember-truth-helpers/utils/truth-convert"], function (_exports, _helper, _truthConvert) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.xor = xor;
  function xor(params) {
    return (0, _truthConvert.default)(params[0]) !== (0, _truthConvert.default)(params[1]);
  }
  var _default = _exports.default = (0, _helper.helper)(xor);
});
;define("ember-truth-helpers/utils/truth-convert", ["exports", "@ember/array", "@ember/object"], function (_exports, _array, _object) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = truthConvert;
  function truthConvert(result) {
    const truthy = result && (0, _object.get)(result, 'isTruthy');
    if (typeof truthy === 'boolean') {
      return truthy;
    }
    if ((0, _array.isArray)(result)) {
      return (0, _object.get)(result, 'length') !== 0;
    } else {
      return !!result;
    }
  }
});
;define("ember-wormhole/components/ember-wormhole", ["exports", "@ember/object/computed", "@ember/component", "@ember/object", "@ember/runloop", "ember-wormhole/templates/components/ember-wormhole", "ember-wormhole/utils/dom"], function (_exports, _computed, _component, _object, _runloop, _emberWormhole, _dom) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = _component.default.extend({
    layout: _emberWormhole.default,
    /*
     * Attrs
     */
    to: (0, _computed.alias)('destinationElementId'),
    destinationElementId: null,
    destinationElement: null,
    _destination: (0, _object.computed)('destinationElement', 'destinationElementId', 'renderInPlace', function () {
      let renderInPlace = this.get('renderInPlace');
      if (renderInPlace) {
        return this._element;
      }
      let destinationElement = this.get('destinationElement');
      if (destinationElement) {
        return destinationElement;
      }
      let destinationElementId = this.get('destinationElementId');
      if (destinationElementId) {
        return (0, _dom.findElementById)(this._dom, destinationElementId);
      }
      // no element found
      return null;
    }),
    renderInPlace: false,
    /*
     * Lifecycle
     */
    init() {
      this._super(...arguments);
      this._dom = (0, _dom.getDOM)(this);

      // Create text nodes used for the head, tail
      this._wormholeHeadNode = this._dom.createTextNode('');
      this._wormholeTailNode = this._dom.createTextNode('');

      /*
       * didInsertElement does not fire in Fastboot, so we schedule this in
       * init to be run after render. Importantly, we want to run
       * appendToDestination after the child nodes have rendered.
       */
      (0, _runloop.schedule)('afterRender', () => {
        if (this.isDestroyed) {
          return;
        }
        this._element = this._wormholeHeadNode.parentNode;
        if (!this._element) {
          throw new Error('The head node of a wormhole must be attached to the DOM');
        }
        this._appendToDestination();
      });
    },
    willDestroyElement: function () {
      // not called in fastboot
      this._super(...arguments);
      let {
        _wormholeHeadNode,
        _wormholeTailNode
      } = this;
      (0, _runloop.schedule)('render', () => {
        this._removeRange(_wormholeHeadNode, _wormholeTailNode);
      });
    },
    _destinationDidChange: (0, _object.observer)('_destination', function () {
      var destinationElement = this.get('_destination');
      if (destinationElement !== this._wormholeHeadNode.parentNode) {
        (0, _runloop.schedule)('render', this, '_appendToDestination');
      }
    }),
    _appendToDestination() {
      var destinationElement = this.get('_destination');
      if (!destinationElement) {
        var destinationElementId = this.get('destinationElementId');
        if (destinationElementId) {
          throw new Error(`ember-wormhole failed to render into '#${destinationElementId}' because the element is not in the DOM`);
        }
        throw new Error('ember-wormhole failed to render content because the destinationElementId was set to an undefined or falsy value.');
      }
      let startingActiveElement = (0, _dom.getActiveElement)();
      this._appendRange(destinationElement, this._wormholeHeadNode, this._wormholeTailNode);
      let resultingActiveElement = (0, _dom.getActiveElement)();
      if (startingActiveElement && resultingActiveElement !== startingActiveElement) {
        startingActiveElement.focus();
      }
    },
    _appendRange(destinationElement, firstNode, lastNode) {
      while (firstNode) {
        destinationElement.insertBefore(firstNode, null);
        firstNode = firstNode !== lastNode ? lastNode.parentNode.firstChild : null;
      }
    },
    _removeRange(firstNode, lastNode) {
      var node = lastNode;
      do {
        var next = node.previousSibling;
        if (node.parentNode) {
          node.parentNode.removeChild(node);
          if (node === firstNode) {
            break;
          }
        }
        node = next;
      } while (node);
    }
  });
});
;define("ember-wormhole/templates/components/ember-wormhole", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)({
    "id": "AZTawDXE",
    "block": "[[[1,[28,[35,0],[[30,0,[\"_wormholeHeadNode\"]]],null]],[18,1,null],[1,[28,[35,0],[[30,0,[\"_wormholeTailNode\"]]],null]]],[\"&default\"],false,[\"unbound\",\"yield\"]]",
    "moduleName": "ember-wormhole/templates/components/ember-wormhole.hbs",
    "isStrictMode": false
  });
});
;define("ember-wormhole/utils/dom", ["exports", "@ember/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.findElementById = findElementById;
  _exports.getActiveElement = getActiveElement;
  _exports.getDOM = getDOM;
  /*
   * Implement some helpers methods for interacting with the DOM,
   * be it Fastboot's SimpleDOM or the browser's version.
   */

  function getActiveElement() {
    if (typeof document === 'undefined') {
      return null;
    } else {
      return document.activeElement;
    }
  }
  function childNodesOfElement(element) {
    let children = [];
    let child = element.firstChild;
    while (child) {
      children.push(child);
      child = child.nextSibling;
    }
    return children;
  }
  function findElementById(doc, id) {
    if (doc.getElementById) {
      return doc.getElementById(id);
    }
    let nodes = childNodesOfElement(doc);
    let node;
    while (nodes.length) {
      node = nodes.shift();
      if (node.getAttribute && node.getAttribute('id') === id) {
        return node;
      }
      nodes = childNodesOfElement(node).concat(nodes);
    }
  }

  // Private Ember API usage. Get the dom implementation used by the current
  // renderer, be it native browser DOM or Fastboot SimpleDOM
  function getDOM(context) {
    let {
      renderer
    } = context;
    if (!renderer._dom) {
      // pre glimmer2
      let container = _application.getOwner ? (0, _application.getOwner)(context) : context.container;
      let documentService = container.lookup('service:-document');
      if (documentService) {
        return documentService;
      }
      renderer = container.lookup('renderer:-dom');
    }
    if (renderer._dom && renderer._dom.document) {
      // pre Ember 2.6
      return renderer._dom.document;
    } else {
      throw new Error('ember-wormhole could not get DOM');
    }
  }
});
;
//# sourceMappingURL=vendor.map
