{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","test-app/tests/helpers/index.js","test-app/tests/test-helper.js","test-app/tests/unit/services/scroll-activity-test.js","test-app/tests/unit/services/user-activity-test.js","test-app/tests/unit/services/user-idle-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"test-app/tests/helpers/index\", [\"exports\", \"ember-qunit\"], function (_exports, _emberQunit) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.setupApplicationTest = setupApplicationTest;\n  _exports.setupRenderingTest = setupRenderingTest;\n  _exports.setupTest = setupTest;\n  0; //eaimeta@70e063a35619d71f0,\"ember-qunit\"eaimeta@70e063a35619d71f\n  // This file exists to provide wrappers around ember-qunit's / ember-mocha's\n  // test setup functions. This way, you can easily extend the setup that is\n  // needed per test type.\n\n  function setupApplicationTest(hooks, options) {\n    (0, _emberQunit.setupApplicationTest)(hooks, options);\n\n    // Additional setup for application tests can be done here.\n    //\n    // For example, if you need an authenticated session for each\n    // application test, you could do:\n    //\n    // hooks.beforeEach(async function () {\n    //   await authenticateSession(); // ember-simple-auth\n    // });\n    //\n    // This is also a good place to call test setup functions coming\n    // from other addons:\n    //\n    // setupIntl(hooks); // ember-intl\n    // setupMirage(hooks); // ember-cli-mirage\n  }\n  function setupRenderingTest(hooks, options) {\n    (0, _emberQunit.setupRenderingTest)(hooks, options);\n\n    // Additional setup for rendering tests can be done here.\n  }\n  function setupTest(hooks, options) {\n    (0, _emberQunit.setupTest)(hooks, options);\n\n    // Additional setup for unit tests can be done here.\n  }\n});","define(\"test-app/tests/test-helper\", [\"test-app/app\", \"test-app/config/environment\", \"qunit\", \"@ember/test-helpers\", \"qunit-dom\", \"ember-qunit\", \"ember-sinon-qunit\"], function (_app, _environment, QUnit, _testHelpers, _qunitDom, _emberQunit, _emberSinonQunit) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"test-app/app\",0,\"test-app/config/environment\",0,\"qunit\",0,\"@ember/test-helpers\",0,\"qunit-dom\",0,\"ember-qunit\",0,\"ember-sinon-qunit\"eaimeta@70e063a35619d71f\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberSinonQunit.default)();\n  (0, _qunitDom.setup)(QUnit.assert);\n  (0, _emberQunit.start)();\n});","define(\"test-app/tests/unit/services/scroll-activity-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\"eaimeta@70e063a35619d71f\n  let wait;\n  if (window.requestAnimationFrame) {\n    wait = cb => {\n      window.requestAnimationFrame(() => {\n        window.requestAnimationFrame(() => {\n          window.requestAnimationFrame(cb);\n        });\n      });\n    };\n  } else {\n    wait = cb => {\n      window.setTimeout(function () {\n        window.setTimeout(function () {\n          window.setTimeout(cb, 16);\n        }, 16);\n      }, 16);\n    };\n  }\n  (0, _qunit.module)('Unit | Service | scroll activity', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('event triggered for window scroll', function (assert) {\n      assert.expect(4);\n      let done = assert.async();\n\n      // Create some content to scroll into\n      let fixture = document.getElementById('ember-testing');\n      for (let i = 0; i < 300; i++) {\n        fixture.appendChild(document.createElement('br'));\n      }\n      let service = this.owner.lookup('service:ember-user-activity@scroll-activity');\n      let scrollEventCount = 0;\n      service.on('scroll', () => scrollEventCount++);\n      assert.strictEqual(scrollEventCount, 0, 'precond - no scroll happens');\n      wait(() => {\n        assert.strictEqual(scrollEventCount, 0, 'no scroll happens for nothing');\n        window.pageYOffset = 1;\n        wait(() => {\n          assert.strictEqual(scrollEventCount, 1, 'scroll fires for a body scroll');\n          wait(() => {\n            assert.strictEqual(scrollEventCount, 1, 'no scroll happens for nothing');\n            done();\n          });\n        });\n      });\n    });\n    (0, _qunit.test)('subscribe w/ no callback triggers event', function (assert) {\n      assert.expect(2);\n      let done = assert.async();\n      let scrollTop = 1234;\n      let scrollLeft = 1234;\n      let elem = {\n        scrollTop,\n        scrollLeft\n      };\n      let target = {\n        elem\n      };\n      let service = this.owner.lookup('service:ember-user-activity@scroll-activity');\n      service.subscribe(target, elem);\n      let scrollEventCount = 0;\n      service.on('scroll', () => scrollEventCount++);\n      wait(() => {\n        assert.strictEqual(scrollEventCount, 0, 'precond - no scroll happens');\n        elem.scrollTop++;\n        wait(() => {\n          assert.strictEqual(scrollEventCount, 1, 'scroll happened twice when scrollTop changes');\n          done();\n        });\n      });\n    });\n    (0, _qunit.test)('subscribe w/ callback triggers callback and event', function (assert) {\n      assert.expect(8);\n      let done = assert.async();\n      let scrollTop = 1234;\n      let scrollLeft = 1234;\n      let elem = {\n        scrollTop,\n        scrollLeft\n      };\n      let target = {\n        elem\n      };\n      let service = this.owner.lookup('service:ember-user-activity@scroll-activity');\n      let subscribedEventCount = 0;\n      let subscribedScrollTop = null;\n      let subscribedLastScrollTop = null;\n      service.subscribe(target, elem, (scrollTop, lastScrollTop) => {\n        subscribedScrollTop = scrollTop;\n        subscribedLastScrollTop = lastScrollTop;\n        subscribedEventCount++;\n      });\n      let scrollEventCount = 0;\n      service.on('scroll', () => scrollEventCount++);\n      wait(() => {\n        assert.strictEqual(scrollEventCount, 0, 'precond - no scroll event');\n        assert.strictEqual(subscribedEventCount, 0, 'precond - no subscription callback');\n        wait(() => {\n          assert.strictEqual(scrollEventCount, 0, 'no scroll when nothing happens');\n          assert.strictEqual(subscribedEventCount, 0, 'no subscription callback when nothing happens');\n          elem.scrollTop++;\n          wait(() => {\n            assert.strictEqual(scrollEventCount, 1, 'scroll happened when scrollTop changes');\n            assert.strictEqual(subscribedEventCount, 1, 'subscription callback fired once');\n            assert.strictEqual(subscribedLastScrollTop, scrollTop, 'lastScrollTop is previous value');\n            assert.strictEqual(subscribedScrollTop, scrollTop + 1, 'new scrollTop is new value');\n            done();\n          });\n        });\n      });\n    });\n    (0, _qunit.test)('unsubscribe', function (assert) {\n      assert.expect(4);\n      let done = assert.async();\n      let scrollTop = 1234;\n      let scrollLeft = 1234;\n      let elem = {\n        scrollTop,\n        scrollLeft\n      };\n      let target = {\n        elem\n      };\n      let service = this.owner.lookup('service:ember-user-activity@scroll-activity');\n      let subscribedEventCount = 0;\n      service.subscribe(target, elem, () => {\n        subscribedEventCount++;\n      });\n      let scrollEventCount = 0;\n      service.on('scroll', () => scrollEventCount++);\n      wait(() => {\n        assert.strictEqual(scrollEventCount, 0, 'precond - no scroll event');\n        assert.strictEqual(subscribedEventCount, 0, 'precond - no subscription callback');\n        elem.scrollTop++;\n        elem.scrollLeft++;\n        service.unsubscribe(target);\n        wait(() => {\n          assert.strictEqual(scrollEventCount, 0, 'no scroll event');\n          assert.strictEqual(subscribedEventCount, 0, 'no subscription callback');\n          done();\n        });\n      });\n    });\n    (0, _qunit.test)('event triggered for horizontal window scroll', function (assert) {\n      assert.expect(4);\n      let done = assert.async();\n\n      // Create some content to scroll into\n      let fixture = document.getElementById('ember-testing');\n      for (let i = 0; i < 300; i++) {\n        fixture.appendChild(document.createElement('br'));\n      }\n      let service = this.owner.lookup('service:ember-user-activity@scroll-activity');\n      let scrollEventCount = 0;\n      service.on('scroll', () => scrollEventCount++);\n      assert.strictEqual(scrollEventCount, 0, 'precond - no scroll happens');\n      wait(() => {\n        assert.strictEqual(scrollEventCount, 0, 'no scroll happens for nothing');\n        window.pageXOffset = 1;\n        wait(() => {\n          assert.strictEqual(scrollEventCount, 1, 'scroll fires for a body scroll');\n          wait(() => {\n            assert.strictEqual(scrollEventCount, 1, 'no scroll happens for nothing');\n            done();\n          });\n        });\n      });\n    });\n    (0, _qunit.test)('subscribe w/ no callback triggers horizontal scroll event', function (assert) {\n      assert.expect(2);\n      let done = assert.async();\n      let scrollTop = 1234;\n      let scrollLeft = 1234;\n      let elem = {\n        scrollTop,\n        scrollLeft\n      };\n      let target = {\n        elem\n      };\n      let service = this.owner.lookup('service:ember-user-activity@scroll-activity');\n      service.subscribe(target, elem);\n      let scrollEventCount = 0;\n      service.on('scroll', () => scrollEventCount++);\n      wait(() => {\n        assert.strictEqual(scrollEventCount, 0, 'precond - no scroll happens');\n        elem.scrollLeft++;\n        wait(() => {\n          assert.strictEqual(scrollEventCount, 1, 'scroll happened twice when scrollLeft changes');\n          done();\n        });\n      });\n    });\n    (0, _qunit.test)('subscribe w/ callback triggers callback and horizontal scroll event', function (assert) {\n      assert.expect(8);\n      let done = assert.async();\n      let scrollTop = 1234;\n      let scrollLeft = 1234;\n      let elem = {\n        scrollTop,\n        scrollLeft\n      };\n      let target = {\n        elem\n      };\n      let service = this.owner.lookup('service:ember-user-activity@scroll-activity');\n      let subscribedEventCount = 0;\n      let subscribedScrollLeft = null;\n      let subscribedLastScrollLeft = null;\n      service.subscribe(target, elem, (scrollLeft, lastScrollLeft) => {\n        subscribedScrollLeft = scrollLeft;\n        subscribedLastScrollLeft = lastScrollLeft;\n        subscribedEventCount++;\n      });\n      let scrollEventCount = 0;\n      service.on('scroll', () => scrollEventCount++);\n      wait(() => {\n        assert.strictEqual(scrollEventCount, 0, 'precond - no scroll event');\n        assert.strictEqual(subscribedEventCount, 0, 'precond - no subscription callback');\n        wait(() => {\n          assert.strictEqual(scrollEventCount, 0, 'no scroll when nothing happens');\n          assert.strictEqual(subscribedEventCount, 0, 'no subscription callback when nothing happens');\n          elem.scrollLeft++;\n          wait(() => {\n            assert.strictEqual(scrollEventCount, 1, 'scroll happened when scrollLeft changes');\n            assert.strictEqual(subscribedEventCount, 1, 'subscription callback fired once');\n            assert.strictEqual(subscribedLastScrollLeft, scrollLeft, 'lastScrollLeft is previous value');\n            assert.strictEqual(subscribedScrollLeft, scrollLeft + 1, 'new scrollLeft is new value');\n            done();\n          });\n        });\n      });\n    });\n    (0, _qunit.test)('subscribe w/ callback triggers callback along with a scrollType parameter', function (assert) {\n      assert.expect(25);\n      let done = assert.async();\n      let scrollTop = 1234;\n      let scrollLeft = 1234;\n      let elem = {\n        scrollTop,\n        scrollLeft\n      };\n      let target = {\n        elem\n      };\n      const SCROLL_EVENT_TYPE_VERTICAL = 'vertical';\n      const SCROLL_EVENT_TYPE_HORIZONTAL = 'horizontal';\n      const SCROLL_EVENT_TYPE_DIAGONAL = 'diagonal';\n      let service = this.owner.lookup('service:ember-user-activity@scroll-activity');\n      let subscribedEventCount = 0;\n      let subscribedScrollTop = null;\n      let subscribedLastScrollTop = null;\n      let subscribedScrollLeft = null;\n      let subscribedLastScrollLeft = null;\n      let subscribedScrollType = null;\n      service.subscribe(target, elem, (scroll, lastScroll, scrollType, scrollSecondary, lastScrollSecondary) => {\n        if (scrollType === SCROLL_EVENT_TYPE_VERTICAL) {\n          subscribedScrollTop = scroll;\n          subscribedLastScrollTop = lastScroll;\n        } else if (scrollType === SCROLL_EVENT_TYPE_HORIZONTAL) {\n          subscribedScrollLeft = scroll;\n          subscribedLastScrollLeft = lastScroll;\n        } else if (scrollType === SCROLL_EVENT_TYPE_DIAGONAL) {\n          subscribedScrollTop = scroll;\n          subscribedLastScrollTop = lastScroll;\n          subscribedScrollLeft = scrollSecondary;\n          subscribedLastScrollLeft = lastScrollSecondary;\n        } else {\n          throw new Error('Invalid scrollType was returned');\n        }\n        subscribedScrollType = scrollType;\n        subscribedEventCount++;\n      });\n      let scrollEventCount = 0;\n      service.on('scroll', () => scrollEventCount++);\n      wait(() => {\n        assert.strictEqual(scrollEventCount, 0, 'precond - no scroll event');\n        assert.strictEqual(subscribedEventCount, 0, 'precond - no subscription callback');\n        wait(() => {\n          assert.strictEqual(scrollEventCount, 0, 'no scroll when nothing happens');\n          assert.strictEqual(subscribedEventCount, 0, 'no subscription callback when nothing happens');\n          elem.scrollTop++;\n          wait(() => {\n            assert.strictEqual(scrollEventCount, 1, 'scroll happened when scrollTop changes');\n            assert.strictEqual(subscribedEventCount, 1, 'subscription callback fired once');\n            assert.strictEqual(subscribedLastScrollTop, scrollTop, 'lastScrollTop is previous value');\n            assert.strictEqual(subscribedScrollTop, scrollTop + 1, 'new scrollTop is new value');\n            assert.strictEqual(subscribedLastScrollLeft, null, 'lastScrollLeft is unchanged');\n            assert.strictEqual(subscribedScrollLeft, null, 'new scrollLeft is unchanged');\n            assert.strictEqual(subscribedScrollType, SCROLL_EVENT_TYPE_VERTICAL, 'scroll type is vertical for vertical scroll event');\n            elem.scrollLeft++;\n            wait(() => {\n              assert.strictEqual(scrollEventCount, 2, 'scroll happened when scrollTop changes');\n              assert.strictEqual(subscribedEventCount, 2, 'subscription callback fired once');\n              assert.strictEqual(subscribedLastScrollTop, scrollTop, 'lastScrollTop is previous value');\n              assert.strictEqual(subscribedScrollTop, scrollTop + 1, 'new scrollTop is unchanged');\n              assert.strictEqual(subscribedLastScrollLeft, scrollLeft, 'lastScrollLeft is previous value');\n              assert.strictEqual(subscribedScrollLeft, scrollLeft + 1, 'new scrollLeft is new value');\n              assert.strictEqual(subscribedScrollType, SCROLL_EVENT_TYPE_HORIZONTAL, 'scroll type is horizontal for horizontal scroll event');\n              elem.scrollTop++;\n              elem.scrollLeft++;\n              wait(() => {\n                assert.strictEqual(scrollEventCount, 3, 'scroll happened when scrollTop changes');\n                assert.strictEqual(subscribedEventCount, 3, 'subscription callback fired once');\n                assert.strictEqual(subscribedLastScrollTop, scrollTop + 1, 'lastScrollTop is previous value');\n                assert.strictEqual(subscribedScrollTop, scrollTop + 2, 'new scrollTop is new value');\n                assert.strictEqual(subscribedLastScrollLeft, scrollLeft + 1, 'lastScrollLeft is previous value');\n                assert.strictEqual(subscribedScrollLeft, scrollLeft + 2, 'new scrollLeft unchanged');\n                assert.strictEqual(subscribedScrollType, SCROLL_EVENT_TYPE_DIAGONAL, 'scroll type is diagonal for diagonal scroll event');\n                done();\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});","define(\"test-app/tests/unit/services/user-activity-test\", [\"@ember/array\", \"@ember/utils\", \"qunit\", \"ember-qunit\", \"sinon\"], function (_array, _utils, _qunit, _emberQunit, _sinon) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"@ember/array\",0,\"@ember/utils\",0,\"qunit\",0,\"ember-qunit\",0,\"sinon\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Unit | Service | user activity', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('init', function (assert) {\n      let service = this.owner.factoryFor('service:ember-user-activity@user-activity').create({\n        enableEvent: _sinon.default.stub()\n      });\n      assert.strictEqual((0, _utils.typeOf)(service._boundEventHandler), 'function', 'bound event handler initialized');\n      assert.strictEqual((0, _utils.typeOf)(service.enabledEvents), 'array', 'enabledEvents set to empty array');\n      assert.strictEqual(service.enableEvent.callCount, service.defaultEvents.length, 'Events enabled by default');\n    });\n    (0, _qunit.test)('enableEvent', function (assert) {\n      let event = 'foo';\n      let service = this.owner.factoryFor('service:ember-user-activity@user-activity').create({\n        _listen: _sinon.default.stub(),\n        _setupListeners: _sinon.default.stub()\n      });\n      service.enableEvent(event);\n      assert.true(service.enabledEvents.includes(event), 'adds event name to enabled events');\n      let stub = service._listen;\n      assert.true(stub.calledOnce, 'sets up listener');\n      assert.strictEqual(stub.firstCall.args[0], event, 'passes event name to _listen');\n    });\n    (0, _qunit.test)('enableEvent - already enabled', function (assert) {\n      let event = 'foo';\n      let service = this.owner.factoryFor('service:ember-user-activity@user-activity').create({\n        enabledEvents: (0, _array.A)([event]),\n        _listen: _sinon.default.stub(),\n        _setupListeners: _sinon.default.stub()\n      });\n      service.enableEvent(event);\n      assert.false(service._listen.called, 'does nothing if already enabled');\n    });\n    (0, _qunit.test)('disableEvent', function (assert) {\n      let event = 'foo';\n      let service = this.owner.factoryFor('service:ember-user-activity@user-activity').create({\n        enabledEvents: (0, _array.A)([event]),\n        _setupListeners: _sinon.default.stub()\n      });\n      assert.true(service.enabledEvents.includes(event), 'enabledEvents preserved on init');\n      service.disableEvent(event);\n      assert.false(service.enabledEvents.includes(event), 'removed event from enabledEvents');\n      assert.false(service._eventsListened.includes(event), 'event should not be listed as listened');\n    });\n    (0, _qunit.test)('re-enabled events should fire', function (assert) {\n      let event = 'foo';\n      let service = this.owner.factoryFor('service:ember-user-activity@user-activity').create({\n        enabledEvents: (0, _array.A)(),\n        _setupListeners: _sinon.default.stub()\n      });\n      let addEventListenerStub = _sinon.default.stub(window, 'addEventListener');\n      assert.notOk(service.enabledEvents.length, 'enabledEvents preserved on init');\n      service.enableEvent(event);\n      assert.true(addEventListenerStub.called, 'event was not handled');\n      assert.true(service.enabledEvents.includes(event), 'enabledEvents should include added event');\n      window.addEventListener.reset();\n      service.disableEvent(event);\n      assert.false(service.enabledEvents.includes(event), 'removed event from enabledEvents');\n      service.enableEvent(event);\n      assert.true(window.addEventListener.called, 'event was not handled');\n      assert.true(service.enabledEvents.includes(event), 'enabledEvents should include added event');\n      window.addEventListener.restore();\n    });\n    (0, _qunit.test)('fireEvent - no subscribers', function (assert) {\n      let event = {\n        type: 'foo'\n      };\n      let service = this.owner.factoryFor('service:ember-user-activity@user-activity').create({\n        trigger: _sinon.default.stub(),\n        _setupListeners: _sinon.default.stub()\n      });\n      service.fireEvent(event);\n      assert.false(service.trigger.called, 'no events triggered');\n    });\n    (0, _qunit.test)('fireEvent - subscribed to event', function (assert) {\n      let event = {\n        type: 'foo'\n      };\n      let service = this.owner.factoryFor('service:ember-user-activity@user-activity').create({\n        trigger: _sinon.default.stub(),\n        _setupListeners: _sinon.default.stub()\n      });\n      service.on(event.type, this, function () {});\n      service.fireEvent(event);\n      let stub = service.trigger;\n      assert.true(stub.calledOnce, 'triggers one event');\n      let {\n        args\n      } = stub.firstCall;\n      assert.strictEqual(args[0], event.type, 'triggers event by type');\n      assert.strictEqual(args[1], event, 'passes event');\n    });\n    (0, _qunit.test)('fireEvent - subscribed to userActive', function (assert) {\n      let event = {\n        type: 'foo'\n      };\n      let service = this.owner.factoryFor('service:ember-user-activity@user-activity').create({\n        trigger: _sinon.default.stub(),\n        _setupListeners: _sinon.default.stub()\n      });\n      service.on('userActive', this, function () {});\n      service.fireEvent(event);\n      let stub = service.trigger;\n      assert.true(stub.calledOnce, 'triggers one event');\n      let {\n        args\n      } = stub.firstCall;\n      assert.strictEqual(args[0], 'userActive', 'triggers userActive event');\n      assert.strictEqual(args[1], event, 'passes event');\n    });\n    (0, _qunit.test)('isEnabled', function (assert) {\n      let event = 'foo';\n      let service = this.owner.factoryFor('service:ember-user-activity@user-activity').create({\n        enabledEvents: (0, _array.A)([event]),\n        _setupListeners: _sinon.default.stub()\n      });\n      assert.true(service.isEnabled(event), 'event is enabled');\n      assert.false(service.isEnabled('bar'), 'other events are not enabled');\n    });\n    (0, _qunit.test)('unsubscribe from events', function (assert) {\n      _sinon.default.spy(window, 'addEventListener');\n      _sinon.default.spy(window, 'removeEventListener');\n      const service = this.owner.factoryFor('service:ember-user-activity@user-activity').create();\n      assert.strictEqual(window.addEventListener.callCount, 4, 'Subscribed to 4 window events');\n      service.willDestroy();\n      assert.strictEqual(window.removeEventListener.callCount, 4, 'Unsubscribed from 4 window events');\n      window.addEventListener.restore();\n      window.removeEventListener.restore();\n    });\n    (0, _qunit.test)('localStorage is updated when subscribed to storage event and other registered event is fired', function (assert) {\n      let event = {\n        type: 'foo'\n      };\n      let service = this.owner.factoryFor('service:ember-user-activity@user-activity').create({\n        defaultEvents: ['foo', 'storage']\n      });\n      localStorage.removeItem(service.localStorageKey);\n      service.fireEvent(event);\n      assert.true(!!localStorage.getItem(service.localStorageKey), '');\n    });\n    (0, _qunit.test)('localStorage is not updated when not subscribed to storage event and other registered event is fired', function (assert) {\n      let event = {\n        type: 'foo'\n      };\n      let service = this.owner.factoryFor('service:ember-user-activity@user-activity').create({\n        defaultEvents: ['foo']\n      });\n      localStorage.removeItem(service.localStorageKey);\n      service.fireEvent(event);\n      assert.false(!!localStorage.getItem(service.localStorageKey), '');\n    });\n  });\n});","define(\"test-app/tests/unit/services/user-idle-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"sinon\"], function (_qunit, _emberQunit, _testHelpers, _sinon) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"sinon\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Unit | Service | user idle', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('init starts timer', function (assert) {\n      let service = this.owner.factoryFor('service:ember-user-activity@user-idle').create({\n        resetTimeout: _sinon.default.stub()\n      });\n      assert.true(service.resetTimeout.calledOnce, 'resetTimeout was called');\n    });\n    (0, _qunit.test)('init sets up event listeners', function (assert) {\n      let event = 'foo';\n      let service = this.owner.factoryFor('service:ember-user-activity@user-idle').create({\n        activeEvents: [event],\n        resetTimeout: _sinon.default.stub()\n      });\n      service.userActivity.trigger(event);\n      let stub = service.resetTimeout;\n      assert.true(stub.calledTwice, 'resetTimeout was called');\n    });\n    (0, _qunit.test)('resetTimeout', function (assert) {\n      assert.expect(5);\n      let service = this.owner.factoryFor('service:ember-user-activity@user-idle').create({\n        trigger: _sinon.default.stub(),\n        isIdle: true,\n        IDLE_TIMEOUT: 100\n      });\n      service.resetTimeout();\n      let stub = service.trigger;\n      assert.true(stub.calledOnce, 'triggers one event');\n      let {\n        args\n      } = stub.firstCall;\n      assert.strictEqual(args[0], 'idleChanged', 'triggers idleChanged event');\n      assert.false(args[1], 'passes data');\n      assert.false(service.isIdle, 'isIdle is false');\n      return (0, _testHelpers.settled)().then(function () {\n        assert.true(service.isIdle, 'isIdle is set to true after timeout');\n      });\n    });\n    (0, _qunit.test)('setIdle', function (assert) {\n      let service = this.owner.factoryFor('service:ember-user-activity@user-idle').create({\n        trigger: _sinon.default.stub(),\n        resetTimeout: _sinon.default.stub()\n      });\n      service.setIdle();\n      let stub = service.trigger;\n      assert.true(stub.calledOnce, 'triggers one event');\n      let {\n        args\n      } = stub.firstCall;\n      assert.strictEqual(args[0], 'idleChanged', 'triggers idleChanged event');\n      assert.true(args[1], 'passes data');\n      assert.true(service.isIdle, 'isIdle is true');\n    });\n  });\n});","define('test-app/config/environment', [], function() {\n  var prefix = 'test-app';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('test-app/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}